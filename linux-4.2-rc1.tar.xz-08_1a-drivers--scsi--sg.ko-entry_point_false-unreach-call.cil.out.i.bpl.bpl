var $M.0: [ref]i64;

var $M.1: [ref]i32;

var $M.2: [ref]i8;

var $M.3: i32;

var $M.4: ref;

var $M.5: i32;

var $M.7: i32;

var $M.8: ref;

var $M.9: [ref]i8;

var $M.10: [ref]i32;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]i16;

var $M.15: [ref]i32;

var $M.16: [ref]ref;

var $M.17: [ref]ref;

var $M.18: [ref]i64;

var $M.19: [ref]i32;

var $M.22: [ref]i8;

var $M.23: [ref]ref;

var $M.24: i32;

var $M.25: ref;

var $M.26: i32;

var $M.28: i32;

var $M.30: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: [ref]ref;

var $M.37: [ref]i32;

var $M.38: [ref]i32;

var $M.39: [ref]i64;

var $M.40: [ref]i32;

var $M.41: [ref]i32;

var $M.42: [ref]ref;

var $M.51: [ref]i64;

var $M.52: [ref]i64;

var $M.53: [ref]i8;

var $M.54: ref;

var $M.55: ref;

var $M.56: ref;

var $M.57: ref;

var $M.58: ref;

var $M.59: ref;

var $M.60: ref;

var $M.61: ref;

var $M.62: ref;

var $M.63: ref;

var $M.64: ref;

var $M.65: ref;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: ref;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: ref;

var $M.76: ref;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: ref;

var $M.95: ref;

var $M.96: ref;

var $M.97: ref;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: ref;

var $M.102: ref;

var $M.103: ref;

var $M.104: ref;

var $M.105: ref;

var $M.106: i32;

var $M.107: i32;

var $M.108: i32;

var $M.109: i32;

var $M.110: i32;

var $M.111: ref;

var $M.112: ref;

var $M.113: ref;

var $M.114: ref;

var $M.115: ref;

var $M.116: ref;

var $M.117: [ref]ref;

var $M.118: [ref]ref;

var $M.119: [ref]ref;

var $M.124: [ref]ref;

var $M.125: [ref]ref;

var $M.126: [ref]ref;

var $M.127: [ref]ref;

var $M.133: [ref]i8;

var $M.134: [ref]ref;

var $M.135: [ref]ref;

var $M.136: [ref]ref;

var $M.137: [ref]ref;

var $M.138: [ref]ref;

var $M.139: [ref]ref;

var $M.140: [ref]ref;

var $M.141: [ref]ref;

var $M.142: [ref]ref;

var $M.143: [ref]ref;

var $M.144: [ref]ref;

var $M.145: [ref]ref;

var $M.146: [ref]ref;

var $M.147: [ref]ref;

var $M.148: [ref]ref;

var $M.149: [ref]ref;

var $M.150: [ref]ref;

var $M.151: [ref]ref;

var $M.152: [ref]ref;

var $M.153: [ref]ref;

var $M.154: [ref]ref;

var $M.155: [ref]ref;

var $M.156: [ref]ref;

var $M.157: [ref]ref;

var $M.158: [ref]ref;

var $M.159: [ref]ref;

var $M.160: [ref]ref;

var $M.161: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 574578);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const sg_big_buff: ref;

axiom sg_big_buff == $sub.ref(0, 2056);

const sg_interface_group0: ref;

axiom sg_interface_group0 == $sub.ref(0, 3088);

const sg_interface_group1: ref;

axiom sg_interface_group1 == $sub.ref(0, 4120);

const devstrs_fops_group1: ref;

axiom devstrs_fops_group1 == $sub.ref(0, 5152);

const devstrs_fops_group2: ref;

axiom devstrs_fops_group2 == $sub.ref(0, 6184);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 7212);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 8244);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 9272);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 10304);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 11332);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 12364);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 13392);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 14424);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 15452);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 16480);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 17508);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 18536);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 19568);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 20600);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 21632);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 22664);

const version_fops_group1: ref;

axiom version_fops_group1 == $sub.ref(0, 23696);

const version_fops_group2: ref;

axiom version_fops_group2 == $sub.ref(0, 24728);

const dev_seq_ops_group1: ref;

axiom dev_seq_ops_group1 == $sub.ref(0, 25760);

const debug_seq_ops_group1: ref;

axiom debug_seq_ops_group1 == $sub.ref(0, 26792);

const devhdr_fops_group1: ref;

axiom devhdr_fops_group1 == $sub.ref(0, 27824);

const devhdr_fops_group2: ref;

axiom devhdr_fops_group2 == $sub.ref(0, 28856);

const dev_fops_group1: ref;

axiom dev_fops_group1 == $sub.ref(0, 29888);

const dev_fops_group2: ref;

axiom dev_fops_group2 == $sub.ref(0, 30920);

const sg_fops_group1: ref;

axiom sg_fops_group1 == $sub.ref(0, 31952);

const sg_fops_group2: ref;

axiom sg_fops_group2 == $sub.ref(0, 32984);

const devstrs_seq_ops_group1: ref;

axiom devstrs_seq_ops_group1 == $sub.ref(0, 34016);

const dressz_fops_group1: ref;

axiom dressz_fops_group1 == $sub.ref(0, 35048);

const dressz_fops_group2: ref;

axiom dressz_fops_group2 == $sub.ref(0, 36080);

const adio_fops_group1: ref;

axiom adio_fops_group1 == $sub.ref(0, 37112);

const adio_fops_group2: ref;

axiom adio_fops_group2 == $sub.ref(0, 38144);

const debug_fops_group1: ref;

axiom debug_fops_group1 == $sub.ref(0, 39176);

const debug_fops_group2: ref;

axiom debug_fops_group2 == $sub.ref(0, 40208);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 41236);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 42264);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 43292);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 44320);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 45348);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 46376);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 47404);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 48432);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 49460);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 50488);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 51516);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 52544);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 53572);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 54600);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 55628);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 56656);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 57684);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 58712);

const dev_seq_ops_group3: ref;

axiom dev_seq_ops_group3 == $sub.ref(0, 59744);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 60776);

const dev_seq_ops_group2: ref;

axiom dev_seq_ops_group2 == $sub.ref(0, 61808);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 62840);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 63868);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 64896);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 65924);

const debug_seq_ops_group3: ref;

axiom debug_seq_ops_group3 == $sub.ref(0, 66956);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 67988);

const debug_seq_ops_group2: ref;

axiom debug_seq_ops_group2 == $sub.ref(0, 69020);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 70052);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 71080);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 72108);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 73136);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 74164);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 75192);

const devstrs_seq_ops_group3: ref;

axiom devstrs_seq_ops_group3 == $sub.ref(0, 76224);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 77256);

const devstrs_seq_ops_group2: ref;

axiom devstrs_seq_ops_group2 == $sub.ref(0, 78288);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 79320);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 80348);

const sg_version_date: ref;

axiom sg_version_date == $sub.ref(0, 81380);

const debug_seq_ops: ref;

axiom debug_seq_ops == $sub.ref(0, 82436);

const dev_seq_ops: ref;

axiom dev_seq_ops == $sub.ref(0, 83492);

const sg_fops: ref;

axiom sg_fops == $sub.ref(0, 84740);

const devstrs_seq_ops: ref;

axiom devstrs_seq_ops == $sub.ref(0, 85796);

const sg_version_num: ref;

axiom sg_version_num == $sub.ref(0, 86824);

const sg_mmap_vm_ops: ref;

axiom sg_mmap_vm_ops == $sub.ref(0, 87936);

const sg_allow_dio: ref;

axiom sg_allow_dio == $sub.ref(0, 88964);

const def_reserved_size: ref;

axiom def_reserved_size == $sub.ref(0, 89992);

const scatter_elem_sz_prev: ref;

axiom scatter_elem_sz_prev == $sub.ref(0, 91020);

const scatter_elem_sz: ref;

axiom scatter_elem_sz == $sub.ref(0, 92048);

const sg_sysfs_valid: ref;

axiom sg_sysfs_valid == $sub.ref(0, 93076);

const sg_sysfs_class: ref;

axiom sg_sysfs_class == $sub.ref(0, 94108);

const sg_interface: ref;

axiom sg_interface == $sub.ref(0, 95172);

const {:count 8} sg_proc_sg_dirname: ref;

axiom sg_proc_sg_dirname == $sub.ref(0, 96204);

const version_fops: ref;

axiom version_fops == $sub.ref(0, 97452);

const devstrs_fops: ref;

axiom devstrs_fops == $sub.ref(0, 98700);

const dev_fops: ref;

axiom dev_fops == $sub.ref(0, 99948);

const devhdr_fops: ref;

axiom devhdr_fops == $sub.ref(0, 101196);

const dressz_fops: ref;

axiom dressz_fops == $sub.ref(0, 102444);

const debug_fops: ref;

axiom debug_fops == $sub.ref(0, 103692);

const adio_fops: ref;

axiom adio_fops == $sub.ref(0, 104940);

const {:count 7} sg_proc_leaf_arr: ref;

axiom sg_proc_leaf_arr == $sub.ref(0, 106076);

const sg_proc_sgp: ref;

axiom sg_proc_sgp == $sub.ref(0, 107108);

const sg_index_idr: ref;

axiom sg_index_idr == $sub.ref(0, 108244);

const sg_index_lock: ref;

axiom sg_index_lock == $sub.ref(0, 109340);

const {:count 14} .str.10: ref;

axiom .str.10 == $sub.ref(0, 110378);

const {:count 18} .str.11: ref;

axiom .str.11 == $sub.ref(0, 111420);

const {:count 10} .str.15: ref;

axiom .str.15 == $sub.ref(0, 112454);

const {:count 6} .str.16: ref;

axiom .str.16 == $sub.ref(0, 113484);

const {:count 18} .str.17: ref;

axiom .str.17 == $sub.ref(0, 114526);

const {:count 11} .str.18: ref;

axiom .str.18 == $sub.ref(0, 115561);

const {:count 8} .str.19: ref;

axiom .str.19 == $sub.ref(0, 116593);

const {:count 12} .str.20: ref;

axiom .str.20 == $sub.ref(0, 117629);

const {:count 8} .str.21: ref;

axiom .str.21 == $sub.ref(0, 118661);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 4} .str.12: ref;

axiom .str.12 == $sub.ref(0, 119689);

const {:count 48} .str.78: ref;

axiom .str.78 == $sub.ref(0, 120761);

const {:count 12} .str.105: ref;

axiom .str.105 == $sub.ref(0, 121797);

const {:count 7} .str.106: ref;

axiom .str.106 == $sub.ref(0, 122828);

const scsi_logging_level: ref;

axiom scsi_logging_level == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const .str: ref;

axiom .str == $sub.ref(0, 123854);

const {:count 4} .str.82: ref;

axiom .str.82 == $sub.ref(0, 124882);

const {:count 17} .str.83: ref;

axiom .str.83 == $sub.ref(0, 125923);

const {:count 8} .str.84: ref;

axiom .str.84 == $sub.ref(0, 126955);

const {:count 21} .str.5: ref;

axiom .str.5 == $sub.ref(0, 128000);

const {:count 19} .str.9: ref;

axiom .str.9 == $sub.ref(0, 129043);

const {:count 24} .str.85: ref;

axiom .str.85 == $sub.ref(0, 130091);

const {:count 14} .str.86: ref;

axiom .str.86 == $sub.ref(0, 131129);

const {:count 24} .str.87: ref;

axiom .str.87 == $sub.ref(0, 132177);

const {:count 22} .str.88: ref;

axiom .str.88 == $sub.ref(0, 133223);

const {:count 3} .str.89: ref;

axiom .str.89 == $sub.ref(0, 134250);

const {:count 27} .str.90: ref;

axiom .str.90 == $sub.ref(0, 135301);

const {:count 52} .str.91: ref;

axiom .str.91 == $sub.ref(0, 136377);

const {:count 21} .str.92: ref;

axiom .str.92 == $sub.ref(0, 137422);

const {:count 2} .str.93: ref;

axiom .str.93 == $sub.ref(0, 138448);

const {:count 36} .str.94: ref;

axiom .str.94 == $sub.ref(0, 139508);

const {:count 2} .str.95: ref;

axiom .str.95 == $sub.ref(0, 140534);

const {:count 31} .str.96: ref;

axiom .str.96 == $sub.ref(0, 141589);

const {:count 9} .str.97: ref;

axiom .str.97 == $sub.ref(0, 142622);

const {:count 61} .str.98: ref;

axiom .str.98 == $sub.ref(0, 143707);

const {:count 42} .str.99: ref;

axiom .str.99 == $sub.ref(0, 144773);

const {:count 19} .str.100: ref;

axiom .str.100 == $sub.ref(0, 145816);

const {:count 5} .str.101: ref;

axiom .str.101 == $sub.ref(0, 146845);

const {:count 20} .str.102: ref;

axiom .str.102 == $sub.ref(0, 147889);

const {:count 16} .str.103: ref;

axiom .str.103 == $sub.ref(0, 148929);

const {:count 15} .str.104: ref;

axiom .str.104 == $sub.ref(0, 149968);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 36} .str.79: ref;

axiom .str.79 == $sub.ref(0, 151028);

const {:count 48} .str.80: ref;

axiom .str.80 == $sub.ref(0, 152100);

const {:count 19} .str.81: ref;

axiom .str.81 == $sub.ref(0, 153143);

const {:count 21} .str.108: ref;

axiom .str.108 == $sub.ref(0, 154188);

const {:count 20} .str.109: ref;

axiom .str.109 == $sub.ref(0, 155232);

const {:count 20} .str.49: ref;

axiom .str.49 == $sub.ref(0, 156276);

const {:count 12} .str.57: ref;

axiom .str.57 == $sub.ref(0, 157312);

const {:count 16} .str.6: ref;

axiom .str.6 == $sub.ref(0, 158352);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 43} .str.7: ref;

axiom .str.7 == $sub.ref(0, 159419);

const {:count 25} .str.8: ref;

axiom .str.8 == $sub.ref(0, 160468);

const {:count 29} .str.3: ref;

axiom .str.3 == $sub.ref(0, 161521);

const {:count 31} .str.4: ref;

axiom .str.4 == $sub.ref(0, 162576);

const {:count 32} .str.1: ref;

axiom .str.1 == $sub.ref(0, 163632);

const {:count 37} .str.2: ref;

axiom .str.2 == $sub.ref(0, 164693);

const {:count 21} .str.50: ref;

axiom .str.50 == $sub.ref(0, 165738);

const {:count 16} .str.51: ref;

axiom .str.51 == $sub.ref(0, 166778);

const {:count 19} .str.52: ref;

axiom .str.52 == $sub.ref(0, 167821);

const {:count 22} .str.53: ref;

axiom .str.53 == $sub.ref(0, 168867);

const {:count 37} .str.54: ref;

axiom .str.54 == $sub.ref(0, 169928);

const {:count 31} .str.55: ref;

axiom .str.55 == $sub.ref(0, 170983);

const {:count 46} .str.37: ref;

axiom .str.37 == $sub.ref(0, 172053);

const {:count 44} .str.38: ref;

axiom .str.38 == $sub.ref(0, 173121);

const {:count 43} .str.39: ref;

axiom .str.39 == $sub.ref(0, 174188);

const {:count 196} .str.40: ref;

axiom .str.40 == $sub.ref(0, 175408);

const {:count 39} .str.56: ref;

axiom .str.56 == $sub.ref(0, 176471);

const {:count 20} .str.58: ref;

axiom .str.58 == $sub.ref(0, 177515);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 33} .str.46: ref;

axiom .str.46 == $sub.ref(0, 178572);

const {:count 36} .str.30: ref;

axiom .str.30 == $sub.ref(0, 179632);

const {:count 26} .str.31: ref;

axiom .str.31 == $sub.ref(0, 180682);

const {:count 51} .str.32: ref;

axiom .str.32 == $sub.ref(0, 181757);

const {:count 35} .str.33: ref;

axiom .str.33 == $sub.ref(0, 182816);

const {:count 23} .str.41: ref;

axiom .str.41 == $sub.ref(0, 183863);

const {:count 13} .str.42: ref;

axiom .str.42 == $sub.ref(0, 184900);

const {:count 35} .str.43: ref;

axiom .str.43 == $sub.ref(0, 185959);

const {:count 16} .str.44: ref;

axiom .str.44 == $sub.ref(0, 186999);

const {:count 28} .str.34: ref;

axiom .str.34 == $sub.ref(0, 188051);

const {:count 26} .str.35: ref;

axiom .str.35 == $sub.ref(0, 189101);

const {:count 27} .str.36: ref;

axiom .str.36 == $sub.ref(0, 190152);

const cpu_tss: ref;

axiom cpu_tss == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 19} .str.48: ref;

axiom .str.48 == $sub.ref(0, 191195);

const {:count 20} .str.24: ref;

axiom .str.24 == $sub.ref(0, 192239);

const {:count 22} .str.25: ref;

axiom .str.25 == $sub.ref(0, 193285);

const scsi_command_size_tbl: ref;

axiom scsi_command_size_tbl == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 45} .str.26: ref;

axiom .str.26 == $sub.ref(0, 194354);

const {:count 9} .str.27: ref;

axiom .str.27 == $sub.ref(0, 195387);

const {:count 9} .str.28: ref;

axiom .str.28 == $sub.ref(0, 196420);

const {:count 136} .str.29: ref;

axiom .str.29 == $sub.ref(0, 197580);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 19} .str.45: ref;

axiom .str.45 == $sub.ref(0, 198623);

const {:count 33} .str.47: ref;

axiom .str.47 == $sub.ref(0, 199680);

const {:count 28} .str.13: ref;

axiom .str.13 == $sub.ref(0, 200732);

const {:count 30} .str.14: ref;

axiom .str.14 == $sub.ref(0, 201786);

const {:count 44} .str.59: ref;

axiom .str.59 == $sub.ref(0, 202854);

const {:count 16} .str.60: ref;

axiom .str.60 == $sub.ref(0, 203894);

const {:count 25} .str.61: ref;

axiom .str.61 == $sub.ref(0, 204943);

const {:count 22} .str.62: ref;

axiom .str.62 == $sub.ref(0, 205989);

const {:count 38} .str.63: ref;

axiom .str.63 == $sub.ref(0, 207051);

const {:count 60} .str.64: ref;

axiom .str.64 == $sub.ref(0, 208135);

const {:count 46} .str.65: ref;

axiom .str.65 == $sub.ref(0, 209205);

const {:count 13} .str.66: ref;

axiom .str.66 == $sub.ref(0, 210242);

const {:count 11} .str.67: ref;

axiom .str.67 == $sub.ref(0, 211277);

const {:count 12} .str.68: ref;

axiom .str.68 == $sub.ref(0, 212313);

const {:count 6} .str.69: ref;

axiom .str.69 == $sub.ref(0, 213343);

const {:count 5} .str.70: ref;

axiom .str.70 == $sub.ref(0, 214372);

const {:count 5} .str.71: ref;

axiom .str.71 == $sub.ref(0, 215401);

const {:count 5} .str.72: ref;

axiom .str.72 == $sub.ref(0, 216430);

const {:count 15} .str.73: ref;

axiom .str.73 == $sub.ref(0, 217469);

const {:count 8} .str.74: ref;

axiom .str.74 == $sub.ref(0, 218501);

const {:count 16} .str.75: ref;

axiom .str.75 == $sub.ref(0, 219541);

const {:count 22} .str.76: ref;

axiom .str.76 == $sub.ref(0, 220587);

const {:count 25} .str.77: ref;

axiom .str.77 == $sub.ref(0, 221636);

const {:count 9} .str.107: ref;

axiom .str.107 == $sub.ref(0, 222669);

const {:count 3} .str.22: ref;

axiom .str.22 == $sub.ref(0, 223696);

const {:count 13} .str.23: ref;

axiom .str.23 == $sub.ref(0, 224733);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 225765);

const {:count 3} .str.1.234: ref;

axiom .str.1.234 == $sub.ref(0, 226792);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 227830);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 228858);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 229890);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 230922);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 231954);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 4} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 232986);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 7} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sg_proc_write_adio: ref;

axiom sg_proc_write_adio == $sub.ref(0, 234018);

procedure sg_proc_write_adio($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation sg_proc_write_adio($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 9} {:cexpr "sg_proc_write_adio:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i5 := capable(21);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 11} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i11 := capable(17);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 13} {:cexpr "tmp___1"} boogie_si_record_i8($i12);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i16 := kstrtoul_from_user($p1, $i2, 0, $p4);
    call {:si_unique_call 15} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p4);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, sg_allow_dio, $i21);
    call {:si_unique_call 16} {:cexpr "sg_allow_dio"} boogie_si_record_i32($i21);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i10 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i16);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i10 := $i18;
    goto $bb6;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 13);
    goto $bb6;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb9;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 13);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const sg_proc_single_open_adio: ref;

axiom sg_proc_single_open_adio == $sub.ref(0, 235050);

procedure sg_proc_single_open_adio($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sg_proc_single_open_adio($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i2 := single_open($p1, sg_proc_seq_show_int, sg_allow_dio);
    call {:si_unique_call 18} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 236082);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 1} true;
    call {:si_unique_call 19} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 20} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sg_proc_seq_show_int: ref;

axiom sg_proc_seq_show_int == $sub.ref(0, 237114);

procedure sg_proc_seq_show_int($p0: ref, $p1: ref) returns ($r: i32);



const single_open: ref;

axiom single_open == $sub.ref(0, 238146);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 1} true;
    call {:si_unique_call 21} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 22} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 239178);

procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 1} true;
    call {:si_unique_call 23} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 24} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 1} true;
    call {:si_unique_call 25} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 26} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 1} true;
    call {:si_unique_call 27} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 28} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 1} true;
    call {:si_unique_call 29} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 30} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i64, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i64, p.6: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 1} true;
    call {:si_unique_call 31} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 32} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 1} true;
    call {:si_unique_call 33} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 34} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32.i32.i64.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i64, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32.i32.i64.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i64, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 1} true;
    call {:si_unique_call 35} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 36} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 1} true;
    call {:si_unique_call 37} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 38} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref) returns ($r: i32);



const capable: ref;

axiom capable == $sub.ref(0, 240210);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 39} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 1} true;
    call {:si_unique_call 40} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 41} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kstrtoul_from_user: ref;

axiom kstrtoul_from_user == $sub.ref(0, 241242);

procedure kstrtoul_from_user($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoul_from_user($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 42} {:cexpr "kstrtoul_from_user:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 43} {:cexpr "kstrtoul_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 1} true;
    call {:si_unique_call 44} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 45} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sg_proc_open_debug: ref;

axiom sg_proc_open_debug == $sub.ref(0, 242274);

procedure sg_proc_open_debug($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.2, $CurrAddr;



implementation sg_proc_open_debug($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i2 := ldv_seq_open_15($p1, debug_seq_ops);
    call {:si_unique_call 47} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_release: ref;

axiom seq_release == $sub.ref(0, 243306);

procedure seq_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 1} true;
    call {:si_unique_call 48} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 49} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_open_15: ref;

axiom ldv_seq_open_15 == $sub.ref(0, 244338);

procedure ldv_seq_open_15($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.2, $CurrAddr;



implementation ldv_seq_open_15($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i2 := seq_open($p0, $p1);
    call {:si_unique_call 51} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 52} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} ldv_seq_operations_7();
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const seq_open: ref;

axiom seq_open == $sub.ref(0, 245370);

procedure seq_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 1} true;
    call {:si_unique_call 54} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 55} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_operations_7: ref;

axiom ldv_seq_operations_7 == $sub.ref(0, 246402);

procedure ldv_seq_operations_7();
  free requires assertsPassed;
  modifies $M.4, $M.2, $CurrAddr;



implementation ldv_seq_operations_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p0 := ldv_init_zalloc(256);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 247434);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p1 := calloc(1, $i0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} __VERIFIER_assume($i4);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const sg_proc_write_dressz: ref;

axiom sg_proc_write_dressz == $sub.ref(0, 248466);

procedure sg_proc_write_dressz($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation sg_proc_write_dressz($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 61} {:cexpr "sg_proc_write_dressz:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $sub.i64(0, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i5 := capable(21);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 63} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i11 := capable(17);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 65} {:cexpr "tmp___1"} boogie_si_record_i8($i12);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i16 := kstrtoul_from_user($p1, $i2, 0, $p4);
    call {:si_unique_call 67} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p4);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i20 := $ule.i64($i19, 1048576);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 34);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb17:
    assume $i20 == 1;
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p4);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, sg_big_buff, $i22);
    call {:si_unique_call 68} {:cexpr "sg_big_buff"} boogie_si_record_i32($i22);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i10 := $i2;
    goto $bb6;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i16);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i10 := $i18;
    goto $bb6;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 13);
    goto $bb6;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb9;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 13);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const sg_proc_single_open_dressz: ref;

axiom sg_proc_single_open_dressz == $sub.ref(0, 249498);

procedure sg_proc_single_open_dressz($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sg_proc_single_open_dressz($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i2 := single_open($p1, sg_proc_seq_show_int, sg_big_buff);
    call {:si_unique_call 70} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sg_proc_single_open_devhdr: ref;

axiom sg_proc_single_open_devhdr == $sub.ref(0, 250530);

procedure sg_proc_single_open_devhdr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sg_proc_single_open_devhdr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i2 := single_open($p1, sg_proc_seq_show_devhdr, $0.ref);
    call {:si_unique_call 72} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sg_proc_seq_show_devhdr: ref;

axiom sg_proc_seq_show_devhdr == $sub.ref(0, 251562);

procedure sg_proc_seq_show_devhdr($p0: ref, $p1: ref) returns ($r: i32);



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 252594);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_puts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 73} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 74} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sg_proc_open_dev: ref;

axiom sg_proc_open_dev == $sub.ref(0, 253626);

procedure sg_proc_open_dev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.2, $CurrAddr;



implementation sg_proc_open_dev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i2 := ldv_seq_open_13($p1, dev_seq_ops);
    call {:si_unique_call 76} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_open_13: ref;

axiom ldv_seq_open_13 == $sub.ref(0, 254658);

procedure ldv_seq_open_13($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.2, $CurrAddr;



implementation ldv_seq_open_13($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i2 := seq_open($p0, $p1);
    call {:si_unique_call 78} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 79} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} ldv_seq_operations_7();
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sg_proc_open_devstrs: ref;

axiom sg_proc_open_devstrs == $sub.ref(0, 255690);

procedure sg_proc_open_devstrs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.2, $CurrAddr;



implementation sg_proc_open_devstrs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i2 := ldv_seq_open_14($p1, devstrs_seq_ops);
    call {:si_unique_call 82} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_open_14: ref;

axiom ldv_seq_open_14 == $sub.ref(0, 256722);

procedure ldv_seq_open_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.2, $CurrAddr;



implementation ldv_seq_open_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i2 := seq_open($p0, $p1);
    call {:si_unique_call 84} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 85} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} ldv_seq_operations_7();
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sg_proc_single_open_version: ref;

axiom sg_proc_single_open_version == $sub.ref(0, 257754);

procedure sg_proc_single_open_version($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sg_proc_single_open_version($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i2 := single_open($p1, sg_proc_seq_show_version, $0.ref);
    call {:si_unique_call 88} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sg_proc_seq_show_version: ref;

axiom sg_proc_seq_show_version == $sub.ref(0, 258786);

procedure sg_proc_seq_show_version($p0: ref, $p1: ref) returns ($r: i32);



const sg_add_device: ref;

axiom sg_add_device == $sub.ref(0, 259818);

procedure sg_add_device($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation sg_add_device($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $p69: ref;
  var $i33: i32;
  var $i70: i64;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i16: i32;
  var $i74: i64;
  var $i75: i1;
  var $i10: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 472), 3496));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p6 := alloc_disk(1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 1752)), $mul.ref(0, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p11, 21);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p12 := cdev_alloc();
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, __this_module);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 336)), $mul.ref(304, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, sg_fops);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p19 := sg_alloc($p6, $p5);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i21 := IS_ERR($p20);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 96} {:cexpr "tmp___0"} boogie_si_record_i8($i22);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(260, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.2, $p28);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 22020096);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i31 := cdev_add($p12, $i30, 1);
    call {:si_unique_call 102} {:cexpr "error"} boogie_si_record_i32($i31);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(376, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p34, $p12);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i35 := $M.7;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} vslice_dummy_var_29 := printk.ref.ref(.str.92, .str.86);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(260, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.2, $p64);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(232, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.2, $p66);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i68 := $sext.i8.i32($i67);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} sdev_prefix_printk.ref.ref.ref.ref.i32.i32(.str.93, $p5, $0.ref, .str.94, $i65, $i68);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p19);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} dev_set_drvdata($p0, $p69);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p37 := $M.8;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.2, $p38);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(260, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p40);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 22020096);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p19);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p46 := device_create.ref.ref.i32.ref.ref.ref($p37, $p39, $i42, $p43, .str.89, $p45);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i48 := IS_ERR($p47);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i48);
    call {:si_unique_call 110} {:cexpr "tmp___2"} boogie_si_record_i8($i49);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(472, 1)), $mul.ref(16, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p46, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i58 := sysfs_create_link($p56, $p57, .str.84);
    call {:si_unique_call 117} {:cexpr "error"} boogie_si_record_i32($i58);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(260, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.2, $p60);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} vslice_dummy_var_31 := printk.ref.ref.i32(.str.91, .str.86, $i61);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i50 == 1;
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_30 := printk.ref.ref(.str.90, .str.86);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p46);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i53 := PTR_ERR($p52);
    call {:si_unique_call 114} {:cexpr "tmp___1"} boogie_si_record_i64($i53);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i64.i32($i53);
    call {:si_unique_call 115} {:cexpr "error"} boogie_si_record_i32($i54);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i33 := $i54;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i70 := _raw_write_lock_irqsave(sg_index_lock);
    call {:si_unique_call 104} {:cexpr "iflags"} boogie_si_record_i64($i70);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(260, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.2, $p71);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} idr_remove(sg_index_idr, $i72);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} _raw_write_unlock_irqrestore(sg_index_lock, $i70);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p19);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} kfree($p73);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i16 := $i33;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} put_disk($p6);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p12);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb3;

  $bb25:
    assume $i75 == 1;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} cdev_del($p12);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb14;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vslice_dummy_var_28 := printk.ref.ref(.str.88, .str.86);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p19);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i26 := PTR_ERR($p25);
    call {:si_unique_call 99} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    call {:si_unique_call 100} {:cexpr "error"} boogie_si_record_i32($i27);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i16 := $i27;
    goto $bb7;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_27 := printk.ref.ref(.str.87, .str.86);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_26 := printk.ref.ref(.str.85, .str.86);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const sg_remove_device: ref;

axiom sg_remove_device == $sub.ref(0, 260850);

procedure sg_remove_device($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation sg_remove_device($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p38: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p6 := dev_get_drvdata($p0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i11 := atomic_add_return(1, $p10);
    call {:si_unique_call 124} {:cexpr "val"} boogie_si_record_i32($i11);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 1);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i32($i13, 3);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 7);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 3);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 126} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(280, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i28 := _raw_read_lock_irqsave($p27);
    call {:si_unique_call 129} {:cexpr "iflags"} boogie_si_record_i64($i28);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.2, $p30);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 5720)), $mul.ref(0, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(264, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i34, $i36);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} __wake_up($p48, 1, 0, $0.ref);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(280, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} _raw_read_unlock_irqrestore($p49, $i28);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(472, 1)), $mul.ref(16, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} sysfs_remove_link($p51, .str.84);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p52 := $M.8;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(260, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.2, $p53);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 22020096);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} device_destroy($p52, $i55);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(376, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.2, $p56);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} cdev_del($p57);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(376, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p58, $0.ref);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(384, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} vslice_dummy_var_32 := kref_put($p59, sg_device_destroy);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p38 := $p31;
    goto $bb14;

  $bb14:
    call $p39, $p40, $p42, $p43, $p44, $p45, $i46, $i47, $p38 := sg_remove_device_loop_$bb14($i36, $p39, $p40, $p42, $p43, $p44, $p45, $i46, $i47, $p38);
    goto $bb14_last;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 5720)), $mul.ref(24, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} __wake_up($p39, 1, 0, $0.ref);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p38, $mul.ref(0, 5720)), $mul.ref(240, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} kill_fasync($p40, 29, 131078);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 5720)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.2, $p42);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 5720)), $mul.ref(0, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, $i36);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p43;
    goto $bb16_dummy;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} sdev_prefix_printk.ref.ref.ref.ref.ref(.str, $p22, $p26, .str.82, .str.83);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 261882);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 262914);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 139} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 140} $i3 := devirtbounce(0, $p2, $i0, $p2);
    call {:si_unique_call 141} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 263946);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 143} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const sdev_prefix_printk: ref;

axiom sdev_prefix_printk == $sub.ref(0, 264978);

procedure sdev_prefix_printk.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32);
  free requires assertsPassed;



implementation sdev_prefix_printk.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    return;
}



procedure sdev_prefix_printk.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation sdev_prefix_printk.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    return;
}



procedure sdev_prefix_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation sdev_prefix_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    return;
}



procedure sdev_prefix_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref, p.5: i32);
  free requires assertsPassed;



implementation sdev_prefix_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref, p.5: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    return;
}



procedure sdev_prefix_printk.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation sdev_prefix_printk.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    return;
}



procedure sdev_prefix_printk.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref);
  free requires assertsPassed;



implementation sdev_prefix_printk.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    return;
}



procedure sdev_prefix_printk.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation sdev_prefix_printk.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: ref)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    return;
}



procedure sdev_prefix_printk.ref.ref.ref.ref.i64.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i64, p.5: i32);
  free requires assertsPassed;



implementation sdev_prefix_printk.ref.ref.ref.ref.i64.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i64, p.5: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    return;
}



const _raw_read_lock_irqsave: ref;

axiom _raw_read_lock_irqsave == $sub.ref(0, 266010);

procedure _raw_read_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_read_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 1} true;
    call {:si_unique_call 144} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 145} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 267042);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 147} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    return;
}



const kill_fasync: ref;

axiom kill_fasync == $sub.ref(0, 268074);

procedure kill_fasync($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation kill_fasync($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} {:cexpr "kill_fasync:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 149} {:cexpr "kill_fasync:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    return;
}



const _raw_read_unlock_irqrestore: ref;

axiom _raw_read_unlock_irqrestore == $sub.ref(0, 269106);

procedure _raw_read_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_read_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} {:cexpr "_raw_read_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_remove_link: ref;

axiom sysfs_remove_link == $sub.ref(0, 270138);

procedure sysfs_remove_link($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_link($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    return;
}



const device_destroy: ref;

axiom device_destroy == $sub.ref(0, 271170);

procedure device_destroy($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation device_destroy($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} {:cexpr "device_destroy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    return;
}



const cdev_del: ref;

axiom cdev_del == $sub.ref(0, 272202);

procedure cdev_del($p0: ref);
  free requires assertsPassed;



implementation cdev_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    return;
}



const sg_device_destroy: ref;

axiom sg_device_destroy == $sub.ref(0, 273234);

procedure sg_device_destroy($p0: ref);
  free requires assertsPassed;



implementation sg_device_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 384), 392));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i3 := _raw_write_lock_irqsave(sg_index_lock);
    call {:si_unique_call 153} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 384), 392)), $mul.ref(260, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} idr_remove(sg_index_idr, $i5);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} _raw_write_unlock_irqrestore(sg_index_lock, $i3);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i32($i6, 3);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 7);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 3);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 157} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 384), 392)), $mul.ref(368, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.2, $p20);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} put_disk($p21);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} kfree($p22);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 384), 392)), $mul.ref(0, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.2, $p14);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 384), 392)), $mul.ref(368, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.2, $p16);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} sdev_prefix_printk.ref.ref.ref.ref(.str, $p15, $p19, .str.9);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 274266);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 162} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 275298);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_33: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 164} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 166} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_33 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 170} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 171} devirtbounce.1($p2, $p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} warn_slowpath_null(.str.5, 71);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 276330);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 277362);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 174} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 175} devirtbounce.2(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.9, $p2);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const _raw_write_lock_irqsave: ref;

axiom _raw_write_lock_irqsave == $sub.ref(0, 278394);

procedure _raw_write_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_write_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 176} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 177} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const idr_remove: ref;

axiom idr_remove == $sub.ref(0, 279426);

procedure idr_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation idr_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    return;
}



const _raw_write_unlock_irqrestore: ref;

axiom _raw_write_unlock_irqrestore == $sub.ref(0, 280458);

procedure _raw_write_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_write_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} {:cexpr "_raw_write_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    return;
}



const put_disk: ref;

axiom put_disk == $sub.ref(0, 281490);

procedure put_disk($p0: ref);
  free requires assertsPassed;



implementation put_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 282522);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} free_($p0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 283554);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 181} $free($p0);
    return;
}



const alloc_disk: ref;

axiom alloc_disk == $sub.ref(0, 284586);

procedure alloc_disk($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_disk($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} {:cexpr "alloc_disk:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $p1 := external_alloc();
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 285618);

procedure printk.ref.i32.i32.i32.ref($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.ref($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 184} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 185} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 186} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 187} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 188} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 189} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cdev_alloc: ref;

axiom cdev_alloc == $sub.ref(0, 286650);

procedure cdev_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation cdev_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p0 := external_alloc();
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const sg_alloc: ref;

axiom sg_alloc == $sub.ref(0, 287682);

procedure sg_alloc($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation sg_alloc($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i23: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p13: ref;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p7 := kzalloc(392, 208);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} idr_preload(208);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i14 := _raw_write_lock_irqsave(sg_index_lock);
    call {:si_unique_call 199} {:cexpr "iflags"} boogie_si_record_i64($i14);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p8);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i16 := idr_alloc(sg_index_idr, $p15, 0, 32768, 0);
    call {:si_unique_call 201} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i32($i24, 3);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 7);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i26, 3);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 207} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} vslice_dummy_var_34 := sprintf.ref.ref.i32($p33, .str.101, $i16);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(4, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p35, $i16);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p8, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p36, $p0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p8, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p37, $p1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} __mutex_init($p38, .str.102, $p2);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 392)), $mul.ref(264, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} INIT_LIST_HEAD($p39);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} __init_waitqueue_head($p40, .str.103, $p3);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} atomic_set($p41, 0);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 392)), $mul.ref(280, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} __rwlock_init($p42, .str.104, $p4);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i43 := queue_max_segments($p6);
    call {:si_unique_call 216} {:cexpr "tmp___2"} boogie_si_record_i16($i43);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref(0, 392)), $mul.ref(256, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p45, $i44);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p8, $mul.ref(0, 392)), $mul.ref(260, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p46, $i16);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p8, $mul.ref(0, 392)), $mul.ref(384, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} kref_init($p47);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} _raw_write_unlock_irqrestore(sg_index_lock, $i14);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} idr_preload_end();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i23, 0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p13 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p8);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} kfree($p49);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i23);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p51 := ERR_PTR($i50);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p13 := $p51;
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p1, $0.ref, .str.100, $i16);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i16, $sub.i32(0, 28));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} sdev_prefix_printk.ref.ref.ref.ref.ref.i32(.str.95, $p1, $0.ref, .str.99, .str.97, $i16);
    assume {:verifier.code 0} true;
    $i22 := $i16;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb10;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 3496)), $mul.ref(232, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.2, $p19);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} sdev_prefix_printk.ref.ref.ref.ref.i32.i32(.str.95, $p1, $0.ref, .str.98, $i21, 32767);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 19);
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} sdev_prefix_printk.ref.ref.ref.ref.ref(.str.95, $p1, $0.ref, .str.96, .str.97);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p11 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p13 := $p11;
    goto $bb3;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 288714);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i1 := ldv_is_err($p0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 221} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 289746);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 223} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cdev_add: ref;

axiom cdev_add == $sub.ref(0, 290778);

procedure cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 224} {:cexpr "cdev_add:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 225} {:cexpr "cdev_add:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 1} true;
    call {:si_unique_call 226} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 227} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const device_create: ref;

axiom device_create == $sub.ref(0, 291810);

procedure device_create.ref.ref.i32.ref.ref.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p5 := external_alloc();
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const sysfs_create_link: ref;

axiom sysfs_create_link == $sub.ref(0, 292842);

procedure sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 1} true;
    call {:si_unique_call 230} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 231} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 293874);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p2, $p1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 294906);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 232} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 233} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 295938);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 296970);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 298002);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 235} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 299034);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const idr_preload: ref;

axiom idr_preload == $sub.ref(0, 300066);

procedure idr_preload($i0: i32);
  free requires assertsPassed;



implementation idr_preload($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} {:cexpr "idr_preload:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    return;
}



const idr_alloc: ref;

axiom idr_alloc == $sub.ref(0, 301098);

procedure idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 240} {:cexpr "idr_alloc:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 241} {:cexpr "idr_alloc:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 242} {:cexpr "idr_alloc:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 302130);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 303162);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 304194);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p1, $p0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p2, $p0);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 305226);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 306258);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p2, $i1);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    return;
}



const __rwlock_init: ref;

axiom __rwlock_init == $sub.ref(0, 307290);

procedure __rwlock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __rwlock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    return;
}



const queue_max_segments: ref;

axiom queue_max_segments == $sub.ref(0, 308322);

procedure queue_max_segments($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation queue_max_segments($p0: ref) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(66, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.2, $p2);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 309354);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} atomic_set($p1, 1);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    return;
}



const idr_preload_end: ref;

axiom idr_preload_end == $sub.ref(0, 310386);

procedure idr_preload_end();
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation idr_preload_end()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} devirtbounce.3(0);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} __preempt_count_sub(1);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 311418);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 252} devirtbounce.5(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 251} devirtbounce.4(0, __preempt_count, __preempt_count);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 250} devirtbounce.4(0, __preempt_count, __preempt_count);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 312450);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 313482);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 255} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 314514);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} {:cexpr "__kmalloc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 258} {:cexpr "__kmalloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p2 := external_alloc();
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sg_vma_fault: ref;

axiom sg_vma_fault == $sub.ref(0, 315546);

procedure sg_vma_fault($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation sg_vma_fault($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i58: i64;
  var $i57: i64;
  var $i59: i1;
  var $i60: i64;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.2, $p11);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i13 := $shl.i64($i12, 12);
    call {:si_unique_call 260} {:cexpr "offset"} boogie_si_record_i64($i13);
    $p14 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.10, $p14);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i17 := $ule.i64($i16, $i13);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 3);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 7);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 3);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 262} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.2, $p39);
    call {:si_unique_call 264} {:cexpr "sa"} boogie_si_record_i64($i40);
    $p41 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(24, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.15, $p41);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 12);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i44 := $shl.i32(1, $i43);
    call {:si_unique_call 265} {:cexpr "length"} boogie_si_record_i32($i44);
    $p45 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(0, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.14, $p45);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, 0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i4 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i49, $i50, $i51 := 0, $i40, $i13;
    goto $bb17;

  $bb17:
    call $p52, $i53, $i54, $i55, $i56, $i58, $i57, $i59, $i60, $i61, $i74, $i75, $i76, $i77, $i78, $i79, $i49, $i50, $i51, $p80, $i81, $i82 := sg_vma_fault_loop_$bb17($p0, $i44, $p45, $p52, $i53, $i54, $i55, $i56, $i58, $i57, $i59, $i60, $i61, $i74, $i75, $i76, $i77, $i78, $i79, $i49, $i50, $i51, $p80, $i81, $i82);
    goto $bb17_last;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.2, $p80);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i82 := $ugt.i64($i81, $i50);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i82 == 1);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb27:
    assume $i82 == 1;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.2, $p52);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64($i53, $i50);
    call {:si_unique_call 266} {:cexpr "len"} boogie_si_record_i64($i54);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i44);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i56 := $ult.i64($i54, $i55);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i44);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i57 := $i58;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i59 := $ult.i64($i51, $i57);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i60, $i61 := $i51, $i49;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i50, $i57);
    call {:si_unique_call 268} {:cexpr "sa"} boogie_si_record_i64($i74);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i75 := $sub.i64($i51, $i57);
    call {:si_unique_call 269} {:cexpr "offset"} boogie_si_record_i64($i75);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i49, 1);
    call {:si_unique_call 270} {:cexpr "k"} boogie_si_record_i32($i76);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.14, $p45);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i79 := $sgt.i32($i78, $i76);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i79 == 1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb25:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i49, $i50, $i51 := $i76, $i74, $i75;
    goto $bb25_dummy;

  $bb22:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(16, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.16, $p62);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i61);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p63, $mul.ref($i64, 8));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.17, $p65);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 24189255811072);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i69 := $sdiv.i64($i68, 64);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i70 := $lshr.i64($i60, 12);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i69, $i70);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i71, 64));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} get_page($p72);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p73, $p72);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i57 := $i54;
    goto $bb21;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.11, $p26);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.12, $p28);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.11, $p30);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.13, $p32);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    $p36 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(0, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.14, $p36);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} sdev_prefix_printk.ref.ref.ref.ref.i64.i32(.str, $p29, $p35, .str.79, $i13, $i38);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i4 := 2;
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i4 := 2;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i4 := 2;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_764;
}



const get_page: ref;

axiom get_page == $sub.ref(0, 316578);

procedure get_page($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation get_page($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i1 := PageTail($p0);
    call {:si_unique_call 272} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 274} {:cexpr "tmp___2"} boogie_si_record_i64($i5);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i17 := atomic_read($p16);
    call {:si_unique_call 280} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 0);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 282} {:cexpr "tmp___4"} boogie_si_record_i64($i21);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} atomic_inc($p26);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} dump_page($p0, .str.80);
    call {:si_unique_call 284} devirtbounce.6(0, .str.81, 543, 12);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call get_page_loop_$bb10();
    goto $bb10_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i7 := __get_page_tail($p0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 276} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i64($i9);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 278} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;
}



const PageTail: ref;

axiom PageTail == $sub.ref(0, 317610);

procedure PageTail($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation PageTail($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i2 := constant_test_bit(15, $p1);
    call {:si_unique_call 287} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __get_page_tail: ref;

axiom __get_page_tail == $sub.ref(0, 318642);

procedure __get_page_tail($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation __get_page_tail($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 1} true;
    call {:si_unique_call 288} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 289} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 319674);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dump_page: ref;

axiom dump_page == $sub.ref(0, 320706);

procedure dump_page($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dump_page($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 321738);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 290} devirtbounce.4(0, $p1, $p1);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 322770);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.2, $p3);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const dev_seq_start: ref;

axiom dev_seq_start == $sub.ref(0, 323802);

procedure dev_seq_start($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $M.19, $CurrAddr;



implementation dev_seq_start($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p2 := kmalloc(16, 208);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, $p2);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.18, $p1);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p10, $i9);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i11 := sg_last_dev();
    call {:si_unique_call 294} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p13, $i12);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.2, $p14);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.2, $p16);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i18 := $uge.i64($i15, $i17);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p8 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const dev_seq_stop: ref;

axiom dev_seq_stop == $sub.ref(0, 324834);

procedure dev_seq_stop($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_seq_stop($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} kfree($p3);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    return;
}



const dev_seq_next: ref;

axiom dev_seq_next == $sub.ref(0, 325866);

procedure dev_seq_next($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $M.18;



implementation dev_seq_next($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.2, $p6);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 1);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p9, $i8);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.2, $p10);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p2, $i11);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.2, $p12);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.2, $p14);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i16 := $ult.i64($i13, $i15);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p18 := $p4;
    goto $bb3;
}



const sg_proc_seq_show_devstrs: ref;

axiom sg_proc_seq_show_devstrs == $sub.ref(0, 326898);

procedure sg_proc_seq_show_devstrs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sg_proc_seq_show_devstrs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i3 := _raw_read_lock_irqsave(sg_index_lock);
    call {:si_unique_call 297} {:cexpr "iflags"} boogie_si_record_i64($i3);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p10);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} vslice_dummy_var_35 := seq_puts($p0, .str.109);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} _raw_read_unlock_irqrestore(sg_index_lock, $i3);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p15);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i21 := atomic_read($p20);
    call {:si_unique_call 301} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_37 := seq_puts($p0, .str.109);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p15, $mul.ref(0, 3496)), $mul.ref(248, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p15, $mul.ref(0, 3496)), $mul.ref(256, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref(0, 3496)), $mul.ref(264, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.2, $p27);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} vslice_dummy_var_36 := seq_printf.ref.ref.ref.ref.ref($p0, .str.108, $p24, $p26, $p28);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p15 := $p14;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.18, $p6);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $p9 := sg_lookup_dev($i8);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb3;
}



const sg_lookup_dev: ref;

axiom sg_lookup_dev == $sub.ref(0, 327930);

procedure sg_lookup_dev($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sg_lookup_dev($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "sg_lookup_dev:arg:dev"} boogie_si_record_i32($i0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p1 := idr_find(sg_index_idr, $i0);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const idr_find: ref;

axiom idr_find == $sub.ref(0, 328962);

procedure idr_find($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation idr_find($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 309} {:cexpr "idr_find:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} __read_once_size($p5, $p7, 8);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i10 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 312} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p29 := idr_find_slowpath($p0, $i1);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p28 := $p29;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, $sub.i32(0, 256));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(0, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 255);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} __read_once_size($p21, $p23, 8);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.2, $p24);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i26 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 315} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p28 := $p25;
    goto $bb6;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 329994);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    call {:si_unique_call 317} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 318} devirtbounce.3(0);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.2;
    cmdloc_dummy_var_1 := $M.2;
    call {:si_unique_call 319} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_2;
    call {:si_unique_call 320} devirtbounce.3(0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.2, $p17);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p19, $i18);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p16, $i15);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.2, $p11);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p13, $i12);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.2, $p0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p1, $i10);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 331026);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 1} true;
    call {:si_unique_call 321} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 322} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const idr_find_slowpath: ref;

axiom idr_find_slowpath == $sub.ref(0, 332058);

procedure idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "idr_find_slowpath:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p2 := external_alloc();
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 333090);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const sg_last_dev: ref;

axiom sg_last_dev == $sub.ref(0, 334122);

procedure sg_last_dev() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $CurrAddr;



implementation sg_last_dev() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $p2: ref;
  var $i4: i32;
  var $i5: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p0, $sub.i32(0, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i1 := _raw_read_lock_irqsave(sg_index_lock);
    call {:si_unique_call 327} {:cexpr "iflags"} boogie_si_record_i64($i1);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} vslice_dummy_var_38 := idr_for_each(sg_index_idr, sg_idr_max_id, $p2);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} _raw_read_unlock_irqrestore(sg_index_lock, $i1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.19, $p0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const sg_idr_max_id: ref;

axiom sg_idr_max_id == $sub.ref(0, 335154);

procedure sg_idr_max_id($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);



const idr_for_each: ref;

axiom idr_for_each == $sub.ref(0, 336186);

procedure idr_for_each($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation idr_for_each($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 1} true;
    call {:si_unique_call 330} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 331} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const no_llseek: ref;

axiom no_llseek == $sub.ref(0, 337218);

procedure no_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation no_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 332} {:cexpr "no_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 333} {:cexpr "no_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 1} true;
    call {:si_unique_call 334} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 335} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sg_read: ref;

axiom sg_read == $sub.ref(0, 338250);

procedure sg_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sg_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i8;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $i69: i1;
  var $i70: i32;
  var $p72: ref;
  var $i73: i32;
  var $i71: i32;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p101: ref;
  var $p99: ref;
  var $i100: i64;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $i108: i1;
  var $i109: i64;
  var $p110: ref;
  var $i111: i64;
  var $i112: i32;
  var $i113: i1;
  var $p102: ref;
  var $i103: i64;
  var $p114: ref;
  var $i115: i32;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $p124: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $i129: i64;
  var $i130: i32;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $p148: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $i153: i1;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i1;
  var $i154: i1;
  var $i159: i32;
  var $i160: i8;
  var $p161: ref;
  var $i162: i8;
  var $i163: i8;
  var $i164: i8;
  var $i165: i8;
  var $p166: ref;
  var $i167: i8;
  var $p168: ref;
  var $i169: i8;
  var $i170: i8;
  var $i171: i8;
  var $i172: i8;
  var $i173: i8;
  var $p174: ref;
  var $i175: i16;
  var $i176: i8;
  var $p177: ref;
  var $p178: ref;
  var $i179: i16;
  var $i180: i8;
  var $p181: ref;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i16;
  var $i189: i32;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i16;
  var $i198: i32;
  var $i199: i1;
  var $i200: i1;
  var $i201: i1;
  var $i202: i1;
  var $i203: i1;
  var $i204: i1;
  var $i205: i1;
  var $i206: i1;
  var $i207: i1;
  var $i208: i1;
  var $i209: i1;
  var $i210: i1;
  var $i211: i1;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $i217: i8;
  var $i218: i32;
  var $i219: i1;
  var $p221: ref;
  var $i222: i8;
  var $i223: i32;
  var $i224: i1;
  var $i220: i1;
  var $i225: i32;
  var $p226: ref;
  var $p227: ref;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $p233: ref;
  var $i234: i32;
  var $i235: i64;
  var $i236: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i64;
  var $i240: i64;
  var $i241: i1;
  var $i242: i32;
  var $i243: i32;
  var $i244: i32;
  var $i245: i1;
  var $p247: ref;
  var $i248: i32;
  var $i249: i1;
  var $i250: i64;
  var $i246: i64;
  var $i252: i32;
  var $p54: ref;
  var $i55: i32;
  var $p253: ref;
  var $i254: i64;
  var $i10: i64;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 337} {:cexpr "sg_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.2, $p11);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i32($i15, 3);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 7);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 3);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 339} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p30 := current_thread_info();
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p1);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.2, $p33);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i35 := __chk_range_not_ok($i31, $i2, $i34);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 343} {:cexpr "tmp___1"} boogie_si_record_i8($i36);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i40 := ldv__builtin_expect($i39, 1);
    call {:si_unique_call 345} {:cexpr "tmp___3"} boogie_si_record_i64($i40);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(5625, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.2, $p42);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i44 := $sext.i8.i32($i43);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p74, $i75 := $0.ref, $sub.i32(0, 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p76 := sg_get_rq_mark($p7, $i75);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $p124 := $p76;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.2, $p126);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p74);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i133 := $eq.i64($i132, 0);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $p138 := $p74;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.2;
    call {:si_unique_call 382} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p139, 0, 36, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_4;
    $p140 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(40, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.2, $p140);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p142, $i141);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.2, $p143);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p145, $i144);
    $p146 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.2, $p146);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p148, $i147);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(29, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.2, $p150);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i153 := $ugt.i32($i152, 191);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i154 := 0;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i159 := $zext.i1.i32($i154);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i8($i159);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.2, $p161);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i163 := $and.i8($i160, 1);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i164 := $and.i8($i162, $sub.i8(0, 2));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i165 := $or.i8($i164, $i163);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p161, $i165);
    $p166 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(65, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.2, $p166);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.2, $p168);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i170 := $and.i8($i167, 31);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i171 := $shl.i8($i170, 1);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i172 := $and.i8($i169, $sub.i8(0, 63));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i173 := $or.i8($i172, $i171);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p168, $i173);
    $p174 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(68, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i175 := $load.i16($M.2, $p174);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i16.i8($i175);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(17, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p177, $i176);
    $p178 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(70, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i179 := $load.i16($M.2, $p178);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i16.i8($i179);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p181, $i180);
    $p182 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(65, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.2, $p182);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i183);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i185 := $and.i32($i184, 1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb89, $bb91;

  $bb91:
    assume !($i186 == 1);
    $p187 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(70, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i188 := $load.i16($M.2, $p187);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i189 := $zext.i16.i32($i188);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i190 := $and.i32($i189, 8);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    $p196 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(68, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i197 := $load.i16($M.2, $p196);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i198 := $zext.i16.i32($i197);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i199 := $slt.i32($i198, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i198, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    $i201 := $slt.i32($i198, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb100, $bb102;

  $bb102:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i198, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb103, $bb105;

  $bb105:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i198, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb106, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p227, 5);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i228 := $ugt.i64($i2, 35);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i228 == 1);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.2, $p247);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i250 := (if $i249 == 1 then 0 else $sub.i64(0, 5));
    call {:si_unique_call 386} {:cexpr "count"} boogie_si_record_i64($i250);
    assume {:verifier.code 0} true;
    $i246 := $i250;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_39 := sg_finish_rem_req($p124);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i64.i32($i246);
    call {:si_unique_call 391} {:cexpr "retval"} boogie_si_record_i32($i252);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p138, $i252;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p253 := $bitcast.ref.ref($p54);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} kfree($p253);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i254 := $sext.i32.i64($i55);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i10 := $i254;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb136:
    assume $i228 == 1;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p138);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i230 := __copy_to_user($p1, $p229, 36);
    call {:si_unique_call 385} {:cexpr "tmp___14"} boogie_si_record_i32($i230);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($p1, $mul.ref(36, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.2, $p233);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i235 := $sext.i32.i64($i234);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i236 := $ult.i64($i235, $i2);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    $i240 := $i2;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i241 := $ugt.i64($i240, 36);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i246 := $i240;
    goto $bb150;

  $bb144:
    assume $i241 == 1;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i64.i32($i240);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i243 := $sub.i32($i242, 36);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i244 := sg_read_oxfer($p124, $p232, $i243);
    call {:si_unique_call 389} {:cexpr "tmp___15"} boogie_si_record_i32($i244);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i244, 0);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb146:
    assume $i245 == 1;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p138, $sub.i32(0, 14);
    goto $bb27;

  $bb141:
    assume $i236 == 1;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.2, $p237);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i239 := $sext.i32.i64($i238);
    call {:si_unique_call 387} {:cexpr "count"} boogie_si_record_i64($i239);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i240 := $i239;
    goto $bb143;

  $bb138:
    assume $i231 == 1;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p138, $sub.i32(0, 14);
    goto $bb27;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p212, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i201 == 1;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p214, 5);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb98:
    assume $i200 == 1;
    assume {:verifier.code 0} true;
    $i204 := $slt.i32($i198, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb110, $bb112;

  $bb112:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    $i205 := $slt.i32($i198, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb113:
    assume $i205 == 1;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.2, $p216);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i32($i217);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 0);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i220 := 0;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i225 := (if $i220 == 1 then 0 else 5);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p226, $i225);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb132:
    assume $i219 == 1;
    $p221 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(65, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.2, $p221);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i222);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 0);
    assume {:verifier.code 0} true;
    $i220 := $i224;
    goto $bb134;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb96:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i198, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    $i207 := $slt.i32($i198, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb120;

  $bb120:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    $i208 := $slt.i32($i198, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb121:
    assume $i208 == 1;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i207 == 1;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p213, 16);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb116:
    assume $i206 == 1;
    assume {:verifier.code 0} true;
    $i209 := $slt.i32($i198, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    $i210 := $slt.i32($i198, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb126:
    assume $i210 == 1;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb124:
    assume $i209 == 1;
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i198, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb109;

  $bb129:
    assume $i211 == 1;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i191 == 1;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p138, $mul.ref(0, 40)), $mul.ref(22, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(136, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.2;
    cmdloc_dummy_var_6 := $M.2;
    call {:si_unique_call 383} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p193, $p195, 16, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_7;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb90;

  $bb86:
    assume $i153 == 1;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.2, $p155);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 12);
    assume {:verifier.code 0} true;
    $i154 := $i158;
    goto $bb88;

  $bb80:
    assume $i133 == 1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p134 := kmalloc(36, 208);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p135);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i137 := $eq.i64($i136, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p138 := $p134;
    goto $bb85;

  $bb82:
    assume $i137 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p134, $sub.i32(0, 12);
    goto $bb27;

  $bb77:
    assume $i128 == 1;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i129 := sg_new_read($p7, $p1, $i2, $p124);
    call {:si_unique_call 379} {:cexpr "tmp___12"} boogie_si_record_i64($i129);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i64.i32($i129);
    call {:si_unique_call 380} {:cexpr "retval"} boogie_si_record_i32($i130);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p74, $i130;
    goto $bb27;

  $bb42:
    assume $i78 == 1;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p12, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i80 := atomic_read($p79);
    call {:si_unique_call 358} {:cexpr "tmp___7"} boogie_si_record_i32($i80);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.2, $p82);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 2048);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} __might_sleep(.str.40, 456, 0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p12, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $i87 := atomic_read($p86);
    call {:si_unique_call 361} {:cexpr "tmp___10"} boogie_si_record_i32($i87);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $p118, $i119 := $p76, 0;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p12, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i121 := atomic_read($p120);
    call {:si_unique_call 377} {:cexpr "tmp___11"} boogie_si_record_i32($i121);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i119, 0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p124 := $p118;
    goto $bb76;

  $bb73:
    assume $i123 == 1;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p74, $i119;
    goto $bb27;

  $bb70:
    assume $i122 == 1;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p74, $sub.i32(0, 19);
    goto $bb27;

  $bb50:
    assume $i88 == 1;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p89 := sg_get_rq_mark($p7, $i75);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i91 := $eq.i64($i90, 0);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $p116, $i117 := $p89, 0;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p118, $i119 := $p116, $i117;
    goto $bb69;

  $bb52:
    assume $i91 == 1;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} INIT_LIST_HEAD($p92);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p93, 0);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(24, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i95 := prepare_to_wait_event($p94, $p4, 1);
    call {:si_unique_call 365} {:cexpr "tmp___8"} boogie_si_record_i64($i95);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p12, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i97 := atomic_read($p96);
    call {:si_unique_call 367} {:cexpr "tmp___9"} boogie_si_record_i32($i97);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p99 := $p89;
    assume true;
    goto $bb54, $bb56;

  $bb56:
    assume !($i98 == 1);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i100 := $i95;
    goto $bb57;

  $bb57:
    call $p101, $i100, $p104, $i105, $i106, $p107, $i108, $i109, $p110, $i111, $i112, $i113 := sg_read_loop_$bb57($p4, $p7, $i75, $p94, $p96, $p101, $i100, $p104, $i105, $i106, $p107, $i108, $i109, $p110, $i111, $i112, $i113);
    goto $bb57_last;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p104 := sg_get_rq_mark($p7, $i75);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p107 := $p104;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i100, 0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i109, $p110 := $i100, $p104;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} schedule();
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i111 := prepare_to_wait_event($p94, $p4, 1);
    call {:si_unique_call 373} {:cexpr "tmp___8"} boogie_si_record_i64($i111);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i112 := atomic_read($p96);
    call {:si_unique_call 375} {:cexpr "tmp___9"} boogie_si_record_i32($i112);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p101 := $p104;
    assume true;
    goto $bb58, $bb67;

  $bb67:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i100 := $i111;
    goto $bb67_dummy;

  $bb58:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p99 := $p101;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p102, $i103 := $p99, 0;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p7, $mul.ref(0, 5720)), $mul.ref(24, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} finish_wait($p114, $p4);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i64.i32($i103);
    call {:si_unique_call 370} {:cexpr "__ret"} boogie_si_record_i32($i115);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p116, $i117 := $p102, $i115;
    goto $bb68;

  $bb64:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p102, $i103 := $p110, $i109;
    goto $bb59;

  $bb60:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p102, $i103 := $p107, 0;
    goto $bb59;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb55;

  $bb47:
    assume $i85 == 1;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p74, $sub.i32(0, 11);
    goto $bb27;

  $bb44:
    assume $i81 == 1;
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p74, $sub.i32(0, 19);
    goto $bb27;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i64($i2, 35);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb19;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p47 := kmalloc(36, 208);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p48);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i52 := __copy_from_user($p51, $p1, 36);
    call {:si_unique_call 348} {:cexpr "tmp___5"} boogie_si_record_i32($i52);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p48, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.2, $p56);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i58 == 1);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p48, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.2, $p72);
    call {:si_unique_call 350} {:cexpr "req_pack_id"} boogie_si_record_i32($i73);
    assume {:verifier.code 0} true;
    $i71 := $i73;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p74, $i75 := $p47, $i71;
    goto $bb41;

  $bb29:
    assume $i58 == 1;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i64($i2, 87);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i70 := $sub.i32(0, 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i71 := $i70;
    goto $bb40;

  $bb31:
    assume $i59 == 1;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p60 := kmalloc(88, 208);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p61);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i65 := __copy_from_user($p64, $p1, 88);
    call {:si_unique_call 353} {:cexpr "retval"} boogie_si_record_i32($i65);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p61, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.2, $p66);
    call {:si_unique_call 354} {:cexpr "req_pack_id"} boogie_si_record_i32($i67);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p61);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} kfree($p68);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i65, 0);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i70 := $i67;
    goto $bb39;

  $bb36:
    assume $i69 == 1;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p47, $sub.i32(0, 14);
    goto $bb27;

  $bb33:
    assume $i63 == 1;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p47, $sub.i32(0, 12);
    goto $bb27;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p47, $sub.i32(0, 14);
    goto $bb27;

  $bb22:
    assume $i50 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 12);
    goto $bb3;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 14);
    goto $bb3;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p12, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p12, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i2);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p24, $p28, .str.45, $i29);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 6);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 6);
    goto $bb3;

  $bb67_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1227;
}



const sg_write: ref;

axiom sg_write == $sub.ref(0, 339282);

procedure sg_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.22, $M.23, $CurrAddr, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.51;



implementation sg_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $i50: i8;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i8;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $p99: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i64;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i100: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i64;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p137: ref;
  var $i138: i32;
  var $i136: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p144: ref;
  var $i145: i8;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $p154: ref;
  var $i155: i1;
  var $i156: i32;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $i162: i64;
  var $i163: i64;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i32;
  var $i187: i1;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p200: ref;
  var $p204: ref;
  var $p208: ref;
  var $p211: ref;
  var $p214: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $p229: ref;
  var $i230: i8;
  var $i231: i32;
  var $p232: ref;
  var $p233: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $i245: i64;
  var $i246: i64;
  var $i13: i64;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $p5 := $alloc($mul.ref(252, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $p7 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 396} {:cexpr "sg_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.2, $p14);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 3);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 7);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 3);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 398} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i34 := atomic_read($p33);
    call {:si_unique_call 401} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.2, $p36);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 2048);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p44 := current_thread_info();
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.2, $p47);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i49 := __chk_range_not_ok($i45, $i2, $i48);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i8($i49);
    call {:si_unique_call 406} {:cexpr "tmp___3"} boogie_si_record_i8($i50);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i54 := ldv__builtin_expect($i53, 1);
    call {:si_unique_call 408} {:cexpr "tmp___5"} boogie_si_record_i64($i54);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i56 := $ule.i64($i2, 35);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p4);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i58 := __copy_from_user($p57, $p1, 36);
    call {:si_unique_call 410} {:cexpr "tmp___6"} boogie_si_record_i32($i58);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.2, $p60);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 2048);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    call {:si_unique_call 411} {:cexpr "blocking"} boogie_si_record_i32($i64);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.2, $p65);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i69 := $ule.i64($i2, 41);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p70 := sg_add_request($p10);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i71, 0);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p1, $mul.ref(36, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    call {:si_unique_call 418} $p89 := devirtbounce.7(0, $p88, $sub.i32(0, 14), 0);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i90 := $extractvalue($p89, 1);
    call {:si_unique_call 419} {:cexpr "__gu_val"} boogie_si_record_i64($i90);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i8($i90);
    call {:si_unique_call 420} {:cexpr "opcode"} boogie_si_record_i8($i91);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5627, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.2, $p92);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i95 == 1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i91);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i102 := $ashr.i32($i101, 5);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 7);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref(scsi_command_size_tbl, $mul.ref(0, 8)), $mul.ref($i104, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.2, $p105);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    call {:si_unique_call 422} {:cexpr "cmd_size"} boogie_si_record_i32($i107);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i91);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i109 := $ugt.i32($i108, 191);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i115 := $i107;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i100 := $i115;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i117 := $lshr.i32($i116, 3);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 7);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i119 := $ugt.i32($i118, 4);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i120 := $zext.i1.i32($i119);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i120);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i122 := ldv__builtin_expect($i121, 0);
    call {:si_unique_call 424} {:cexpr "tmp___10"} boogie_si_record_i64($i122);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i64.i32($i2);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i132 := $sub.i32($i131, $i100);
    call {:si_unique_call 426} {:cexpr "input_size"} boogie_si_record_i32($i132);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.2, $p133);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i135 := $sgt.i32($i132, $i134);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i135 == 1);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.2, $p137);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i136 := $i138;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i136, 36);
    call {:si_unique_call 427} {:cexpr "mxsize"} boogie_si_record_i32($i139);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i140 := $sub.i32($i132, 36);
    call {:si_unique_call 428} {:cexpr "input_size"} boogie_si_record_i32($i140);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i140, 0);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p144, 0);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i8($i100);
    $p146 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p146, $i145);
    $p147 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p147, 0);
    $p148 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(9, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p148, 0);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i149 := $sgt.i32($i140, 0);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i149 == 1);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i155 := $sgt.i32($i139, 0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i156 := (if $i155 == 1 then $sub.i32(0, 3) else $sub.i32(0, 1));
    $p157 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p157, $i156);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    $p158 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p158, $i139);
    $p159 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.2, $p159);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, $sub.i32(0, 2));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i161 == 1);
    $p166 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p166, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    $p167 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p167, $0.ref);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.2, $p168);
    $p170 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(40, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p170, $i169);
    $p171 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(44, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p171, $i140);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.2, $p172);
    $p174 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p174, $i173);
    $p175 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(56, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p175, $0.ref);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p5);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i177 := __copy_from_user($p176, $p87, $i100);
    call {:si_unique_call 431} {:cexpr "tmp___11"} boogie_si_record_i32($i177);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    $p179 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.2, $p179);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, $sub.i32(0, 4));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p5);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(184, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.2, $p241);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i243 := sg_common_write($p10, $p70, $p240, $i242, $i64);
    call {:si_unique_call 442} {:cexpr "k"} boogie_si_record_i32($i243);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i244 := $slt.i32($i243, 0);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i244 == 1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i246 := $i2;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i13 := $i246;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb81:
    assume $i244 == 1;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i245 := $sext.i32.i64($i243);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i246 := $i245;
    goto $bb83;

  $bb72:
    assume $i181 == 1;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p182 := get_current();
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p182, $mul.ref(0, 11744)), $mul.ref(2552, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p6);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i186 := strcmp($p184, $p185);
    call {:si_unique_call 434} {:cexpr "tmp___16"} boogie_si_record_i32($i186);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i187 := $ne.i32($i186, 0);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb74:
    assume $i187 == 1;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p191, 0);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p193, $sub.i32(0, 559067475));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p195, $sub.i32(0, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p197, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p200, $0.ref);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p204, $0.ref);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p208, $0.ref);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p211, .str.27);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p214, 0);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p217, 0);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p218, 1250);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p219, 10);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p220, 0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p221, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p7, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p222, 0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i223 := ___ratelimit($p7, .str.28);
    call {:si_unique_call 436} {:cexpr "tmp___13"} boogie_si_record_i32($i223);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p235 := get_current();
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p6);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p235, $mul.ref(0, 11744)), $mul.ref(2552, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p238 := $bitcast.ref.ref($p237);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} vslice_dummy_var_42 := strcpy($p236, $p238);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i224 == 1;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p225 := get_current();
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.2, $p226);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i228 := $add.i32($i227, $sub.i32(0, 36));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p5, $mul.ref(0, 252)), $mul.ref(0, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.2, $p229);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i231 := $zext.i8.i32($i230);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p225, $mul.ref(0, 11744)), $mul.ref(2552, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p232);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_41 := printk.ref.i32.i32.i32.ref(.str.29, $i228, $i140, $i231, $p233);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb69:
    assume $i178 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb3;

  $bb66:
    assume $i161 == 1;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i100);
    $i163 := $add.i64(36, $i162);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p1, $mul.ref($i163, 1));
    $p165 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p165, $p164);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i149 == 1;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.2, $p150);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i152 := $ugt.i32($i151, 36);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i153 := (if $i152 == 1 then $sub.i32(0, 4) else $sub.i32(0, 2));
    $p154 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p154, $i153);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i141 == 1;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_40 := sg_remove_request($p10, $p70);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 5);
    goto $bb3;

  $bb57:
    assume $i135 == 1;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i136 := $i132;
    goto $bb59;

  $bb54:
    assume $i123 == 1;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.2, $p124);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.2, $p126);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i91);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} sdev_prefix_printk.ref.ref.ref.ref.i32.i32(.str, $p125, $p129, .str.26, $i130, $i100);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb48:
    assume $i109 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p4);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p110, $mul.ref(16, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.2, $p111);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb50;

  $bb51:
    assume $i114 == 1;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i115 := 12;
    goto $bb53;

  $bb45:
    assume $i95 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5627, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.2, $p96);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    call {:si_unique_call 421} {:cexpr "cmd_size"} boogie_si_record_i32($i98);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5627, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p99, 0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i100 := $i98;
    goto $bb47;

  $bb38:
    assume $i72 == 1;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i74 := $lshr.i32($i73, 3);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 7);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i76 := $ugt.i32($i75, 1);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 416} {:cexpr "tmp___8"} boogie_si_record_i64($i79);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 33);
    goto $bb3;

  $bb40:
    assume $i80 == 1;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.2, $p81);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.2, $p83);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} sdev_prefix_printk.ref.ref.ref.ref(.str, $p82, $p86, .str.25);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume $i69 == 1;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 5);
    goto $bb3;

  $bb32:
    assume $i67 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i68 := sg_new_write($p10, $p0, $p1, $i2, $i64, 0, 0, $0.ref);
    call {:si_unique_call 413} {:cexpr "tmp___7"} boogie_si_record_i64($i68);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i13 := $i68;
    goto $bb3;

  $bb29:
    assume $i59 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb3;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 5);
    goto $bb3;

  $bb23:
    assume $i55 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb3;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb22;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.2, $p40);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i42 := scsi_block_when_processing_errors($p41);
    call {:si_unique_call 403} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i43 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 6);
    goto $bb3;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.2, $p26);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.2, $p28);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i2);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p27, $p31, .str.24, $i32);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 6);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 6);
    goto $bb3;
}



const sg_poll: ref;

axiom sg_poll == $sub.ref(0, 340314);

procedure sg_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sg_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i39: i32;
  var $i40: i32;
  var $i19: i32;
  var $i20: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i54: i32;
  var $i46: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(24, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} poll_wait($p0, $p12, $p1);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i14 := _raw_read_lock_irqsave($p13);
    call {:si_unique_call 445} {:cexpr "iflags"} boogie_si_record_i64($i14);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.2, $p15);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} _raw_read_unlock_irqrestore($p41, $i14);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i43 := atomic_read($p42);
    call {:si_unique_call 449} {:cexpr "tmp"} boogie_si_record_i32($i43);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i44 == 1);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(5626, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.2, $p47);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i49 := $sext.i8.i32($i48);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i50 == 1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i55 := $sle.i32($i20, 15);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i57 := $i19;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i54 := $i57;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i46 := $i54;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i59 := $lshr.i32($i58, 3);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 7);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i61 := $ugt.i32($i60, 3);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 452} {:cexpr "tmp___0"} boogie_si_record_i64($i64);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i7 := $i46;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb36:
    assume $i65 == 1;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.2, $p66);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.2, $p68);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p67, $p71, .str.48, $i46);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i55 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i19, 260);
    call {:si_unique_call 454} {:cexpr "res"} boogie_si_record_i32($i56);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb35;

  $bb27:
    assume $i50 == 1;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i20, 0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i53 := $i19;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb32;

  $bb29:
    assume $i51 == 1;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i19, 260);
    call {:si_unique_call 453} {:cexpr "res"} boogie_si_record_i32($i52);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb31;

  $bb24:
    assume $i44 == 1;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i19, 16);
    call {:si_unique_call 450} {:cexpr "res"} boogie_si_record_i32($i45);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb26;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i21, $p22, $i23 := 0, $p16, 0;
    goto $bb11;

  $bb11:
    call $i24, $p25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $i21, $p22, $i23, $i39, $i40 := sg_poll_loop_$bb11($i24, $p25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $i21, $p22, $i23, $i39, $i40);
    goto $bb11_last;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i33 := $i23;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i21, 1);
    call {:si_unique_call 446} {:cexpr "count"} boogie_si_record_i32($i34);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p22, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.2, $p35);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i33, $i34;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i39, $i40;
    goto $bb10;

  $bb21:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i21, $p22, $i23 := $i34, $p36, $i33;
    goto $bb21_dummy;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.2, $p25);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i26);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p22, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.2, $p29);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i31 := $sext.i8.i32($i30);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb15;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i33 := 65;
    goto $bb20;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i7 := 8;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i7 := 8;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1777;
}



const sg_ioctl: ref;

axiom sg_ioctl == $sub.ref(0, 341346);

procedure sg_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.23, $M.2, $CurrAddr, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.51;



implementation sg_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i64;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i8;
  var $i95: i1;
  var $i96: i32;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $i100: i64;
  var $i101: i32;
  var $i102: i1;
  var $i103: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i117: i64;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i122: i1;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i118: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i64;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $i161: i64;
  var $i162: i1;
  var $i163: i1;
  var $i164: i32;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i64;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $i179: i64;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $i183: i64;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $p193: ref;
  var $i194: i32;
  var $p195: ref;
  var $p196: ref;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i16;
  var $i205: i16;
  var $i206: i16;
  var $i207: i8;
  var $p208: ref;
  var $p209: ref;
  var $i210: i8;
  var $i211: i32;
  var $i212: i32;
  var $i213: i64;
  var $p214: ref;
  var $i215: i64;
  var $p217: ref;
  var $i218: i64;
  var $i219: i1;
  var $i220: i8;
  var $i221: i1;
  var $i222: i32;
  var $i223: i64;
  var $i224: i64;
  var $i225: i1;
  var $p226: ref;
  var $p227: ref;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i32;
  var $p236: ref;
  var $p237: ref;
  var $i238: i32;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i32;
  var $p243: ref;
  var $p244: ref;
  var $i245: i32;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $i249: i32;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i64;
  var $i257: i32;
  var $p258: ref;
  var $p259: ref;
  var $i260: i32;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i8;
  var $i265: i32;
  var $p266: ref;
  var $p267: ref;
  var $i268: i32;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $i274: i16;
  var $p275: ref;
  var $p276: ref;
  var $i277: i32;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $i281: i16;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $p285: ref;
  var $p286: ref;
  var $i287: i32;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i32;
  var $p292: ref;
  var $p293: ref;
  var $i294: i64;
  var $i295: i64;
  var $i296: i32;
  var $i297: i32;
  var $i298: i1;
  var $i299: i64;
  var $i300: i1;
  var $i301: i32;
  var $i302: i8;
  var $p303: ref;
  var $p304: ref;
  var $i305: i64;
  var $p307: ref;
  var $i308: i64;
  var $i309: i1;
  var $i310: i8;
  var $i311: i1;
  var $i312: i32;
  var $i313: i64;
  var $i314: i64;
  var $i315: i1;
  var $p316: ref;
  var $i317: i64;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i64;
  var $i322: i1;
  var $p323: ref;
  var $p324: ref;
  var $i325: i8;
  var $i326: i32;
  var $i327: i1;
  var $p328: ref;
  var $p329: ref;
  var $i330: i8;
  var $i331: i32;
  var $i332: i1;
  var $p333: ref;
  var $p334: ref;
  var $p336: ref;
  var $i337: i32;
  var $p338: ref;
  var $i339: i32;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $i344: i64;
  var $i345: i1;
  var $p346: ref;
  var $p347: ref;
  var $i348: i32;
  var $p349: ref;
  var $i350: i64;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $i354: i64;
  var $i355: i1;
  var $p358: ref;
  var $p359: ref;
  var $i360: i8;
  var $i361: i32;
  var $i362: i1;
  var $p363: ref;
  var $p364: ref;
  var $i365: i8;
  var $i366: i32;
  var $i367: i1;
  var $i368: i32;
  var $i369: i32;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $i374: i64;
  var $i375: i1;
  var $i357: i32;
  var $i376: i32;
  var $i356: i32;
  var $p377: ref;
  var $i378: i32;
  var $i379: i64;
  var $p380: ref;
  var $i381: i32;
  var $i382: i32;
  var $i383: i64;
  var $p384: ref;
  var $p385: ref;
  var $i386: i64;
  var $i387: i64;
  var $i388: i32;
  var $i389: i32;
  var $i390: i1;
  var $i391: i64;
  var $i392: i1;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $i397: i32;
  var $i398: i1;
  var $i399: i32;
  var $p401: ref;
  var $i402: i32;
  var $i403: i1;
  var $i404: i32;
  var $i405: i1;
  var $p406: ref;
  var $i407: i8;
  var $i408: i32;
  var $i409: i1;
  var $p410: ref;
  var $p412: ref;
  var $i413: i32;
  var $p414: ref;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $i418: i32;
  var $i419: i1;
  var $i420: i32;
  var $i421: i32;
  var $i422: i64;
  var $p423: ref;
  var $p424: ref;
  var $i425: i64;
  var $i426: i64;
  var $i427: i32;
  var $i428: i32;
  var $i429: i1;
  var $i430: i64;
  var $i431: i1;
  var $i432: i32;
  var $i433: i8;
  var $p434: ref;
  var $p435: ref;
  var $i436: i8;
  var $i437: i32;
  var $i438: i32;
  var $i439: i64;
  var $p440: ref;
  var $p441: ref;
  var $i442: i64;
  var $i443: i64;
  var $i444: i32;
  var $i445: i32;
  var $i446: i1;
  var $i447: i64;
  var $i448: i8;
  var $p449: ref;
  var $p450: ref;
  var $i451: i8;
  var $i452: i32;
  var $i453: i32;
  var $i454: i64;
  var $p455: ref;
  var $p456: ref;
  var $i457: i64;
  var $i458: i64;
  var $i459: i32;
  var $i460: i32;
  var $i461: i1;
  var $i462: i64;
  var $i463: i1;
  var $i464: i32;
  var $i465: i8;
  var $p466: ref;
  var $i467: i32;
  var $i468: i32;
  var $i469: i64;
  var $p470: ref;
  var $p471: ref;
  var $i472: i64;
  var $i473: i1;
  var $i474: i32;
  var $i475: i32;
  var $i476: i64;
  var $p477: ref;
  var $i478: i64;
  var $p480: ref;
  var $i481: i64;
  var $i482: i1;
  var $i483: i8;
  var $i484: i1;
  var $i485: i32;
  var $i486: i64;
  var $i487: i64;
  var $i488: i1;
  var $p489: ref;
  var $p490: ref;
  var $i491: i64;
  var $i492: i1;
  var $p493: ref;
  var $i494: i64;
  var $p495: ref;
  var $p496: ref;
  var $p498: ref;
  var $i499: i64;
  var $p500: ref;
  var $p501: ref;
  var $i502: i64;
  var $i503: i1;
  var $p504: ref;
  var $p505: ref;
  var $i506: i8;
  var $i507: i32;
  var $i508: i32;
  var $i509: i8;
  var $i510: i64;
  var $p512: ref;
  var $p513: ref;
  var $p515: ref;
  var $i516: i8;
  var $i517: i32;
  var $p518: ref;
  var $p520: ref;
  var $i521: i16;
  var $i522: i8;
  var $i523: i32;
  var $i524: i32;
  var $i525: i8;
  var $i526: i32;
  var $p527: ref;
  var $p529: ref;
  var $i530: i16;
  var $i531: i8;
  var $i532: i32;
  var $i533: i32;
  var $i534: i8;
  var $i535: i64;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $i540: i8;
  var $i541: i32;
  var $i542: i1;
  var $p543: ref;
  var $p545: ref;
  var $i546: i32;
  var $i547: i64;
  var $p549: ref;
  var $i551: i64;
  var $i552: i32;
  var $p553: ref;
  var $p555: ref;
  var $i556: i32;
  var $i557: i1;
  var $p558: ref;
  var $p560: ref;
  var $i561: i32;
  var $i562: i32;
  var $i563: i32;
  var $i564: i64;
  var $p566: ref;
  var $i550: i32;
  var $p567: ref;
  var $p568: ref;
  var $i569: i8;
  var $i570: i64;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $i575: i8;
  var $i576: i64;
  var $p578: ref;
  var $p579: ref;
  var $p581: ref;
  var $i582: i32;
  var $i583: i64;
  var $p585: ref;
  var $p586: ref;
  var $p588: ref;
  var $p589: ref;
  var $i590: i64;
  var $p592: ref;
  var $i593: i32;
  var $i594: i32;
  var $p595: ref;
  var $i596: i64;
  var $i597: i1;
  var $p598: ref;
  var $p599: ref;
  var $p600: ref;
  var $p602: ref;
  var $p601: ref;
  var $i603: i1;
  var $i497: i32;
  var $p604: ref;
  var $p605: ref;
  var $i606: i32;
  var $i607: i1;
  var $i608: i32;
  var $p609: ref;
  var $i610: i64;
  var $p611: ref;
  var $i612: i32;
  var $i613: i1;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $p617: ref;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $i621: i16;
  var $i622: i16;
  var $i623: i16;
  var $i624: i8;
  var $i625: i32;
  var $i626: i32;
  var $i627: i64;
  var $p628: ref;
  var $i629: i32;
  var $i630: i1;
  var $i631: i1;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $i635: i64;
  var $i636: i1;
  var $i637: i32;
  var $i638: i1;
  var $p639: ref;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $i644: i32;
  var $p645: ref;
  var $i646: i32;
  var $i647: i64;
  var $p648: ref;
  var $p649: ref;
  var $i650: i64;
  var $i651: i64;
  var $i652: i32;
  var $i653: i32;
  var $i654: i1;
  var $i655: i64;
  var $i656: i8;
  var $p657: ref;
  var $p658: ref;
  var $p659: ref;
  var $p660: ref;
  var $p661: ref;
  var $i662: i32;
  var $i663: i32;
  var $i664: i64;
  var $p665: ref;
  var $p666: ref;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $i674: i32;
  var $i675: i32;
  var $p676: ref;
  var $i677: i32;
  var $i678: i64;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $p682: ref;
  var $i683: i32;
  var $i684: i64;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $p688: ref;
  var $i689: i32;
  var $i690: i64;
  var $p691: ref;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $i695: i32;
  var $i696: i64;
  var $p697: ref;
  var $i698: i32;
  var $i699: i1;
  var $i700: i1;
  var $p701: ref;
  var $p702: ref;
  var $p703: ref;
  var $i704: i32;
  var $i705: i32;
  var $i706: i1;
  var $i707: i32;
  var $i708: i1;
  var $i709: i64;
  var $p710: ref;
  var $p711: ref;
  var $i712: i32;
  var $i713: i64;
  var $i13: i64;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 459} {:cexpr "sg_ioctl:arg:cmd_in"} boogie_si_record_i32($i1);
    call {:si_unique_call 460} {:cexpr "sg_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i2);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.2, $p14);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 3);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 7);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 3);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 462} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.2, $p32);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 3);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 2);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    call {:si_unique_call 464} {:cexpr "read_only"} boogie_si_record_i32($i36);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i1, 8826);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i1, 8836);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i1, 8840);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i1, 21378);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i1, 21381);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i1, 21382);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i1, 21382);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $i700 := $ne.i32($i36, 0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i700} true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.2, $p701);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i704 := $load.i32($M.2, $p703);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i705 := $and.i32($i704, 2048);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i706 := $ne.i32($i705, 0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i707 := scsi_ioctl_block_when_processing_errors($p702, $i1, $i706);
    call {:si_unique_call 671} {:cexpr "result"} boogie_si_record_i32($i707);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i708 := $ne.i32($i707, 0);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i708} true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i708 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p711 := $load.ref($M.2, $p710);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i712 := scsi_ioctl($p711, $i1, $p6);
    call {:si_unique_call 673} {:cexpr "tmp___43"} boogie_si_record_i32($i712);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i713 := $sext.i32.i64($i712);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i13 := $i713;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb323:
    assume $i708 == 1;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i709 := $sext.i32.i64($i707);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i13 := $i709;
    goto $bb3;

  $bb320:
    assume $i700 == 1;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 1);
    goto $bb3;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i698 := atomic_read($p697);
    call {:si_unique_call 481} {:cexpr "tmp___42"} boogie_si_record_i32($i698);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i699 := $ne.i32($i698, 0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i699} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i699 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb315:
    assume $i699 == 1;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb23;

  $bb20:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i1, 21378);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb28;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i1, 8841);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i1, 8841);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb28;

  $bb33:
    assume $i46 == 1;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p471 := $load.ref($M.2, $p470);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i472 := $p2i.ref.i64($p471);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i473 := $ne.i64($i472, 0);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i474 := $zext.i1.i32($i473);
    call {:si_unique_call 469} {:cexpr "val"} boogie_si_record_i32($i474);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} __might_fault(.str.40, 1008);
    call {:si_unique_call 471} $i475 := devirtbounce.9(0, $i474, $p7);
    call {:si_unique_call 472} {:cexpr "__ret_pu___6"} boogie_si_record_i32($i475);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $i476 := $sext.i32.i64($i475);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i13 := $i476;
    goto $bb3;

  $bb31:
    assume $i45 == 1;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} __might_fault(.str.40, 996);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5628, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i451 := $load.i8($M.2, $p450);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i452 := $sext.i8.i32($i451);
    call {:si_unique_call 466} {:cexpr "__pu_val___4"} boogie_si_record_i32($i452);
    call {:si_unique_call 467} $i453 := devirtbounce.9(0, $i452, $p7);
    call {:si_unique_call 468} {:cexpr "__ret_pu___4"} boogie_si_record_i32($i453);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $i454 := $sext.i32.i64($i453);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i13 := $i454;
    goto $bb3;

  $bb16:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i1, 8838);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i1, 8839);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i48 == 1);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} __might_fault(.str.40, 990);
    call {:si_unique_call 477} $p440 := devirtbounce.8(0, $p7, 4);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p441 := $extractvalue($p440, 0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i442 := $extractvalue($p440, 1);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i443 := $p2i.ref.i64($p441);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i444 := $trunc.i64.i32($i443);
    call {:si_unique_call 478} {:cexpr "__ret_gu___4"} boogie_si_record_i32($i444);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i445 := $trunc.i64.i32($i442);
    call {:si_unique_call 479} {:cexpr "val"} boogie_si_record_i32($i445);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i446 := $ne.i32($i444, 0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i446} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $i448 := $trunc.i32.i8($i445);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5628, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p449, $i448);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb258:
    assume $i446 == 1;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i447 := $sext.i32.i64($i444);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i13 := $i447;
    goto $bb3;

  $bb37:
    assume $i48 == 1;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p477 := current_thread_info();
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i478 := $p2i.ref.i64($p6);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($p477, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i481 := $load.i64($M.2, $p480);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i482 := __chk_range_not_ok($i478, 384, $i481);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i483 := $zext.i1.i8($i482);
    call {:si_unique_call 475} {:cexpr "tmp___30"} boogie_si_record_i8($i483);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i484 := $trunc.i8.i1($i483);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i484 == 1);
    assume {:verifier.code 0} true;
    $i485 := 1;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i486 := $sext.i32.i64($i485);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i487 := ldv__builtin_expect($i486, 1);
    call {:si_unique_call 647} {:cexpr "tmp___32"} boogie_si_record_i64($i487);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i488 := $eq.i64($i487, 0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i488 == 1);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p489 := kmalloc(384, 208);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p490 := $bitcast.ref.ref($p489);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i491 := $p2i.ref.i64($p490);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i492 := $eq.i64($i491, 0);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i492} true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i494 := _raw_read_lock_irqsave($p493);
    call {:si_unique_call 650} {:cexpr "iflags"} boogie_si_record_i64($i494);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p496 := $load.ref($M.2, $p495);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p3, $p496);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i497 := 0;
    goto $bb278;

  $bb278:
    call $p498, $i499, $p500, $p501, $i502, $i503, $p504, $p505, $i506, $i507, $i508, $i509, $i510, $p512, $p513, $p515, $i516, $i517, $p518, $p520, $i521, $i522, $i523, $i524, $i525, $i526, $p527, $p529, $i530, $i531, $i532, $i533, $i534, $i535, $p537, $p538, $p539, $i540, $i541, $i542, $p543, $p545, $i546, $i547, $p549, $i551, $i552, $p553, $p555, $i556, $i557, $p558, $p560, $i561, $i562, $i563, $i564, $p566, $i550, $p567, $p568, $i569, $i570, $p572, $p573, $p574, $i575, $i576, $p578, $p579, $p581, $i582, $i583, $p585, $p586, $p588, $p589, $i590, $p592, $i593, $i594, $p595, $i596, $i597, $p598, $p599, $p600, $p602, $p601, $i603, $i497, cmdloc_dummy_var_8, cmdloc_dummy_var_9 := sg_ioctl_loop_$bb278($p3, $p490, $p498, $i499, $p500, $p501, $i502, $i503, $p504, $p505, $i506, $i507, $i508, $i509, $i510, $p512, $p513, $p515, $i516, $i517, $p518, $p520, $i521, $i522, $i523, $i524, $i525, $i526, $p527, $p529, $i530, $i531, $i532, $i533, $i534, $i535, $p537, $p538, $p539, $i540, $i541, $i542, $p543, $p545, $i546, $i547, $p549, $i551, $i552, $p553, $p555, $i556, $i557, $p558, $p560, $i561, $i562, $i563, $i564, $p566, $i550, $p567, $p568, $i569, $i570, $p572, $p573, $p574, $i575, $i576, $p578, $p579, $p581, $i582, $i583, $p585, $p586, $p588, $p589, $i590, $p592, $i593, $i594, $p595, $i596, $i597, $p598, $p599, $p600, $p602, $p601, $i603, $i497, cmdloc_dummy_var_8, cmdloc_dummy_var_9);
    goto $bb278_last;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p498 := $bitcast.ref.ref($p490);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i499 := $sext.i32.i64($i497);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($p498, $mul.ref($i499, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.2;
    call {:si_unique_call 651} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p500, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_9;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p501 := $load.ref($M.23, $p3);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i502 := $p2i.ref.i64($p501);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i503 := $ne.i64($i502, 0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    $i593 := $i497;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i594 := $add.i32($i593, 1);
    call {:si_unique_call 654} {:cexpr "val"} boogie_si_record_i32($i594);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p595 := $load.ref($M.23, $p3);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i596 := $p2i.ref.i64($p595);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i597 := $ne.i64($i596, 0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i597 == 1);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p602 := $load.ref($M.23, $p3);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p601 := $p602;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p3, $p601);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i603 := $sle.i32($i594, 15);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i603 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} _raw_read_unlock_irqrestore($p604, $i494);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p605 := $bitcast.ref.ref($p490);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i606 := __copy_to_user($p6, $p605, 384);
    call {:si_unique_call 657} {:cexpr "result"} boogie_si_record_i32($i606);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i607 := $ne.i32($i606, 0);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i608 := (if $i607 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 658} {:cexpr "result"} boogie_si_record_i32($i608);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p609 := $bitcast.ref.ref($p490);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} kfree($p609);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i610 := $sext.i32.i64($i608);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i13 := $i610;
    goto $bb3;

  $bb292:
    assume $i603 == 1;
    assume {:verifier.code 0} true;
    $i497 := $i594;
    goto $bb292_dummy;

  $bb289:
    assume $i597 == 1;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p598 := $load.ref($M.23, $p3);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p598, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p600 := $load.ref($M.2, $p599);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p601 := $p600;
    goto $bb291;

  $bb280:
    assume $i503 == 1;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p504 := $load.ref($M.23, $p3);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p504, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i506 := $load.i8($M.2, $p505);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i507 := $zext.i8.i32($i506);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i508 := $add.i32($i507, 1);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i509 := $trunc.i32.i8($i508);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i510 := $sext.i32.i64($i497);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p490, $mul.ref($i510, 24)), $mul.ref(0, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p512, $i509);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p513 := $load.ref($M.23, $p3);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($add.ref($p513, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(65, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i516 := $load.i8($M.2, $p515);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i517 := $zext.i8.i32($i516);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p518 := $load.ref($M.23, $p3);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($add.ref($p518, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(68, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i521 := $load.i16($M.2, $p520);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i522 := $trunc.i16.i8($i521);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i523 := $zext.i8.i32($i522);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i524 := $and.i32($i517, $i523);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i525 := $trunc.i32.i8($i524);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i526 := $sext.i8.i32($i525);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p527 := $load.ref($M.23, $p3);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($add.ref($p527, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(70, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i530 := $load.i16($M.2, $p529);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i531 := $trunc.i16.i8($i530);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i532 := $sext.i8.i32($i531);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i533 := $and.i32($i526, $i532);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i534 := $trunc.i32.i8($i533);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i535 := $sext.i32.i64($i497);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p490, $mul.ref($i535, 24)), $mul.ref(3, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p537, $i534);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p538 := $load.ref($M.23, $p3);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($p538, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i540 := $load.i8($M.2, $p539);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i541 := $sext.i8.i32($i540);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i542 := $ne.i32($i541, 0);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i542 == 1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i551 := $load.i64($M.2, jiffies);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i552 := jiffies_to_msecs($i551);
    call {:si_unique_call 653} {:cexpr "ms"} boogie_si_record_i32($i552);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p553 := $load.ref($M.23, $p3);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($p553, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i556 := $load.i32($M.2, $p555);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i557 := $ult.i32($i556, $i552);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i557 == 1);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i563 := 0;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i564 := $sext.i32.i64($i497);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p490, $mul.ref($i564, 24)), $mul.ref(16, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p566, $i563);
    assume {:verifier.code 0} true;
    $i550 := $i497;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p567 := $load.ref($M.23, $p3);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p567, $mul.ref(0, 336)), $mul.ref(233, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i569 := $load.i8($M.2, $p568);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i570 := $sext.i32.i64($i497);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p490, $mul.ref($i570, 24)), $mul.ref(1, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p572, $i569);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p573 := $load.ref($M.23, $p3);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($p573, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i575 := $load.i8($M.2, $p574);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i576 := $sext.i32.i64($i497);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p490, $mul.ref($i576, 24)), $mul.ref(2, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p578, $i575);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p579 := $load.ref($M.23, $p3);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($add.ref($p579, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i582 := $load.i32($M.2, $p581);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i583 := $sext.i32.i64($i497);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p490, $mul.ref($i583, 24)), $mul.ref(4, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p585, $i582);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p586 := $load.ref($M.23, $p3);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($add.ref($p586, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(56, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p589 := $load.ref($M.2, $p588);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i590 := $sext.i32.i64($i497);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p490, $mul.ref($i590, 24)), $mul.ref(8, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p592, $p589);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i593 := $i550;
    goto $bb288;

  $bb285:
    assume $i557 == 1;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p558 := $load.ref($M.23, $p3);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($add.ref($p558, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i561 := $load.i32($M.2, $p560);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i562 := $sub.i32($i552, $i561);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i563 := $i562;
    goto $bb287;

  $bb282:
    assume $i542 == 1;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p543 := $load.ref($M.23, $p3);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($p543, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i546 := $load.i32($M.2, $p545);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i547 := $sext.i32.i64($i497);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p490, $mul.ref($i547, 24)), $mul.ref(16, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p549, $i546);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i550 := $i497;
    goto $bb284;

  $bb275:
    assume $i492 == 1;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 12);
    goto $bb3;

  $bb273:
    assume $i488 == 1;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb3;

  $bb270:
    assume $i484 == 1;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i485 := 0;
    goto $bb272;

  $bb35:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i1, 8837);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb39, $bb41;

  $bb41:
    assume !($i49 == 1);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i82 := atomic_read($p81);
    call {:si_unique_call 483} {:cexpr "tmp___0"} boogie_si_record_i32($i82);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.2, $p84);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i86 := scsi_block_when_processing_errors($p85);
    call {:si_unique_call 557} {:cexpr "tmp___1"} boogie_si_record_i32($i86);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $p88 := current_thread_info();
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p6);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.2, $p91);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i93 := __chk_range_not_ok($i89, 88, $i92);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i94 := $zext.i1.i8($i93);
    call {:si_unique_call 560} {:cexpr "tmp___3"} boogie_si_record_i8($i94);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i94);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := 1;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i96);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i98 := ldv__builtin_expect($i97, 1);
    call {:si_unique_call 562} {:cexpr "tmp___5"} boogie_si_record_i64($i98);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i98, 0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i100 := sg_new_write($p10, $p0, $p6, 88, 1, $i36, 1, $p3);
    call {:si_unique_call 564} {:cexpr "tmp___6"} boogie_si_record_i64($i100);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i64.i32($i100);
    call {:si_unique_call 565} {:cexpr "result"} boogie_si_record_i32($i101);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i101, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} __might_sleep(.str.40, 861, 0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.23, $p3);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i105 := srp_done($p10, $p104);
    call {:si_unique_call 568} {:cexpr "tmp___10"} boogie_si_record_i32($i105);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i131 := 0;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i133 := atomic_read($p132);
    call {:si_unique_call 586} {:cexpr "tmp___12"} boogie_si_record_i32($i133);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} _raw_write_lock_irq($p135);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.23, $p3);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.2, $p137);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i139 := $sext.i8.i32($i138);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.23, $p3);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 336)), $mul.ref(233, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p151, 1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} _raw_write_unlock_irq($p152);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i153 := $sext.i32.i64($i131);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i13 := $i153;
    goto $bb3;

  $bb143:
    assume $i140 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.23, $p3);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p142, 2);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} _raw_write_unlock_irq($p143);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.23, $p3);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i145 := sg_new_read($p10, $p6, 88, $p144);
    call {:si_unique_call 590} {:cexpr "tmp___13"} boogie_si_record_i64($i145);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i64.i32($i145);
    call {:si_unique_call 591} {:cexpr "result"} boogie_si_record_i32($i146);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i147 := $slt.i32(0, $i146);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i147 == 1);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i148 := $i146;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i149 := $sext.i32.i64($i148);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i13 := $i149;
    goto $bb3;

  $bb145:
    assume $i147 == 1;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i148 := 0;
    goto $bb147;

  $bb140:
    assume $i134 == 1;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb120:
    assume $i106 == 1;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i108 := atomic_read($p107);
    call {:si_unique_call 570} {:cexpr "tmp___11"} boogie_si_record_i32($i108);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i130 := 0;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i131 := $i130;
    goto $bb139;

  $bb122:
    assume $i109 == 1;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} INIT_LIST_HEAD($p110);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p111, 0);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(24, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i113 := prepare_to_wait_event($p112, $p4, 1);
    call {:si_unique_call 573} {:cexpr "tmp___7"} boogie_si_record_i64($i113);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.23, $p3);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i115 := srp_done($p10, $p114);
    call {:si_unique_call 575} {:cexpr "tmp___8"} boogie_si_record_i32($i115);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb124, $bb126;

  $bb126:
    assume !($i116 == 1);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i117 := $i113;
    goto $bb127;

  $bb127:
    call $i117, $p119, $i120, $i121, $i122, $i123, $i124, $p125, $i126, $i127 := sg_ioctl_loop_$bb127($p3, $p4, $p10, $p15, $p112, $i117, $p119, $i120, $i121, $i122, $i123, $i124, $p125, $i126, $i127);
    goto $bb127_last;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i120 := atomic_read($p119);
    call {:si_unique_call 577} {:cexpr "tmp___9"} boogie_si_record_i32($i120);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i117, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i123 := $i117;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} schedule();
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i124 := prepare_to_wait_event($p112, $p4, 1);
    call {:si_unique_call 582} {:cexpr "tmp___7"} boogie_si_record_i64($i124);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.23, $p3);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i126 := srp_done($p10, $p125);
    call {:si_unique_call 584} {:cexpr "tmp___8"} boogie_si_record_i32($i126);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb137;

  $bb137:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i117 := $i124;
    goto $bb137_dummy;

  $bb128:
    assume $i127 == 1;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i118 := 0;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(24, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} finish_wait($p128, $p4);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i64.i32($i118);
    call {:si_unique_call 579} {:cexpr "__ret"} boogie_si_record_i32($i129);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i130 := $i129;
    goto $bb138;

  $bb134:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i118 := $i123;
    goto $bb129;

  $bb130:
    assume $i121 == 1;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i118 := 0;
    goto $bb129;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb125;

  $bb117:
    assume $i102 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i101);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i13 := $i103;
    goto $bb3;

  $bb114:
    assume $i99 == 1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb3;

  $bb111:
    assume $i95 == 1;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i96 := 0;
    goto $bb113;

  $bb108:
    assume $i87 == 1;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 6);
    goto $bb3;

  $bb105:
    assume $i83 == 1;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb40;

  $bb14:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i1, 8830);
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i1, 8834);
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i1, 8835);
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i52 == 1);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} __might_fault(.str.40, 998);
    call {:si_unique_call 489} $p455 := devirtbounce.8(0, $p7, 4);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p456 := $extractvalue($p455, 0);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i457 := $extractvalue($p455, 1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i458 := $p2i.ref.i64($p456);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i459 := $trunc.i64.i32($i458);
    call {:si_unique_call 490} {:cexpr "__ret_gu___5"} boogie_si_record_i32($i459);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i460 := $trunc.i64.i32($i457);
    call {:si_unique_call 491} {:cexpr "val"} boogie_si_record_i32($i460);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i461 := $ne.i32($i459, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $i463 := $sgt.i32(0, $i460);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i463} true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i463 == 1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i464 := $i460;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i465 := $trunc.i32.i8($i464);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5627, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p466, $i465);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb265:
    assume $i463 == 1;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i464 := 0;
    goto $bb267;

  $bb262:
    assume $i461 == 1;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i462 := $sext.i32.i64($i459);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i13 := $i462;
    goto $bb3;

  $bb46:
    assume $i52 == 1;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __might_fault(.str.40, 1004);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i467 := $M.5;
    call {:si_unique_call 485} {:cexpr "__pu_val___5"} boogie_si_record_i32($i467);
    call {:si_unique_call 486} $i468 := devirtbounce.9(0, $i467, $p7);
    call {:si_unique_call 487} {:cexpr "__ret_pu___5"} boogie_si_record_i32($i468);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $i469 := $sext.i32.i64($i468);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i13 := $i469;
    goto $bb3;

  $bb44:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i1, 8831);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i1, 8831);
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb28;

  $bb50:
    assume $i54 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __might_fault(.str.40, 961);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(256, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.2, $p380);
    call {:si_unique_call 497} {:cexpr "__pu_val___1"} boogie_si_record_i32($i381);
    call {:si_unique_call 498} $i382 := devirtbounce.9(0, $i381, $p7);
    call {:si_unique_call 499} {:cexpr "__ret_pu___1"} boogie_si_record_i32($i382);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $i383 := $sext.i32.i64($i382);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i13 := $i383;
    goto $bb3;

  $bb48:
    assume $i53 == 1;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} __might_fault(.str.40, 1073);
    call {:si_unique_call 493} $p648 := devirtbounce.8(0, $p7, 4);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p649 := $extractvalue($p648, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i650 := $extractvalue($p648, 1);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i651 := $p2i.ref.i64($p649);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i652 := $trunc.i64.i32($i651);
    call {:si_unique_call 494} {:cexpr "__ret_gu___6"} boogie_si_record_i32($i652);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i653 := $trunc.i64.i32($i650);
    call {:si_unique_call 495} {:cexpr "val"} boogie_si_record_i32($i653);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i654 := $ne.i32($i652, 0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i654} true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $i656 := $trunc.i32.i8($i653);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(364, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p657, $i656);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb311:
    assume $i654 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i655 := $sext.i32.i64($i652);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i13 := $i655;
    goto $bb3;

  $bb42:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i1, 8828);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i1, 8829);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i56 == 1);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i350 := _raw_read_lock_irqsave($p349);
    call {:si_unique_call 504} {:cexpr "iflags"} boogie_si_record_i64($i350);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.2, $p351);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p3, $p352);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.23, $p3);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i354 := $p2i.ref.i64($p353);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i355 := $ne.i64($i354, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i356 := 0;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume !($i355 == 1);
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} _raw_read_unlock_irqrestore($p377, $i350);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __might_fault(.str.40, 959);
    call {:si_unique_call 635} $i378 := devirtbounce.9(0, $i356, $p7);
    call {:si_unique_call 636} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i378);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $i379 := $sext.i32.i64($i378);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i13 := $i379;
    goto $bb3;

  $bb216:
    assume $i355 == 1;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i357 := 0;
    goto $bb219;

  $bb219:
    call $p358, $p359, $i360, $i361, $i362, $p363, $p364, $i365, $i366, $i367, $i368, $i369, $p370, $p371, $p372, $p373, $i374, $i375, $i357, $i376 := sg_ioctl_loop_$bb219($p3, $p358, $p359, $i360, $i361, $i362, $p363, $p364, $i365, $i366, $i367, $i368, $i369, $p370, $p371, $p372, $p373, $i374, $i375, $i357, $i376);
    goto $bb219_last;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p358 := $load.ref($M.23, $p3);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p358, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i360 := $load.i8($M.2, $p359);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i361 := $sext.i8.i32($i360);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 1);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume !($i362 == 1);
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i369 := $i357;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.23, $p3);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.2, $p371);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p3, $p372);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.23, $p3);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i374 := $p2i.ref.i64($p373);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i375 := $ne.i64($i374, 0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i376 := $i369;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i356 := $i376;
    goto $bb218;

  $bb227:
    assume $i375 == 1;
    assume {:verifier.code 0} true;
    $i357 := $i369;
    goto $bb227_dummy;

  $bb221:
    assume $i362 == 1;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.23, $p3);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p363, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i365 := $load.i8($M.2, $p364);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i366 := $sext.i8.i32($i365);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 0);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    assume !($i367 == 1);
    goto $bb223;

  $bb224:
    assume $i367 == 1;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i368 := $add.i32($i357, 1);
    call {:si_unique_call 632} {:cexpr "val"} boogie_si_record_i32($i368);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i369 := $i368;
    goto $bb226;

  $bb54:
    assume $i56 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p304 := current_thread_info();
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i305 := $p2i.ref.i64($p7);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p304, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i308 := $load.i64($M.2, $p307);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i309 := __chk_range_not_ok($i305, 4, $i308);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i310 := $zext.i1.i8($i309);
    call {:si_unique_call 502} {:cexpr "tmp___22"} boogie_si_record_i8($i310);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i311 := $trunc.i8.i1($i310);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    $i312 := 1;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i313 := $sext.i32.i64($i312);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i314 := ldv__builtin_expect($i313, 1);
    call {:si_unique_call 623} {:cexpr "tmp___24"} boogie_si_record_i64($i314);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i315 := $eq.i64($i314, 0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i317 := _raw_read_lock_irqsave($p316);
    call {:si_unique_call 625} {:cexpr "iflags"} boogie_si_record_i64($i317);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.2, $p318);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p3, $p319);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.23, $p3);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i321 := $p2i.ref.i64($p320);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i322 := $ne.i64($i321, 0);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i322 == 1);
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} _raw_read_unlock_irqrestore($p346, $i317);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p347 := $bitcast.ref.ref($p7);
    call {:si_unique_call 630} $i348 := devirtbounce.10(0, $sub.i32(0, 1), $p347, $sub.i32(0, 14), 0);
    call {:si_unique_call 631} {:cexpr "__pu_err___9"} boogie_si_record_i32($i348);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb200:
    assume $i322 == 1;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    call $p323, $p324, $i325, $i326, $i327, $p328, $p329, $i330, $i331, $i332, $p340, $p341, $p342, $p343, $i344, $i345 := sg_ioctl_loop_$bb203($p3, $p323, $p324, $i325, $i326, $i327, $p328, $p329, $i330, $i331, $i332, $p340, $p341, $p342, $p343, $i344, $i345);
    goto $bb203_last;

  $bb204:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.23, $p3);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p323, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i325 := $load.i8($M.2, $p324);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i326 := $sext.i8.i32($i325);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i326, 1);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.23, $p3);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p340, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p342 := $load.ref($M.2, $p341);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p3, $p342);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.23, $p3);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i344 := $p2i.ref.i64($p343);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i345 := $ne.i64($i344, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i345 == 1);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i345 == 1;
    goto $bb212_dummy;

  $bb205:
    assume $i327 == 1;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.23, $p3);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p328, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i330 := $load.i8($M.2, $p329);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i331 := $sext.i8.i32($i330);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 0);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    assume !($i332 == 1);
    goto $bb207;

  $bb208:
    assume $i332 == 1;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} _raw_read_unlock_irqrestore($p333, $i317);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.23, $p3);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($p334, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i337 := $load.i32($M.2, $p336);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p338 := $bitcast.ref.ref($p7);
    call {:si_unique_call 627} $i339 := devirtbounce.10(0, $i337, $p338, $sub.i32(0, 14), 0);
    call {:si_unique_call 628} {:cexpr "__pu_err___8"} boogie_si_record_i32($i339);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb197:
    assume $i315 == 1;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb3;

  $bb194:
    assume $i311 == 1;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i312 := 0;
    goto $bb196;

  $bb52:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i1, 8827);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i57 == 1);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} __might_fault(.str.40, 932);
    call {:si_unique_call 510} $p292 := devirtbounce.8(0, $p7, 4);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p293 := $extractvalue($p292, 0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i294 := $extractvalue($p292, 1);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i295 := $p2i.ref.i64($p293);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i296 := $trunc.i64.i32($i295);
    call {:si_unique_call 511} {:cexpr "__ret_gu___1"} boogie_si_record_i32($i296);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i297 := $trunc.i64.i32($i294);
    call {:si_unique_call 512} {:cexpr "val"} boogie_si_record_i32($i297);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i296, 0);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i297, 0);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i301 := $zext.i1.i32($i300);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i302 := $trunc.i32.i8($i301);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5625, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p303, $i302);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb191:
    assume $i298 == 1;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i299 := $sext.i32.i64($i296);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i13 := $i299;
    goto $bb3;

  $bb56:
    assume $i57 == 1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} __might_fault(.str.40, 907);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5624, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.2, $p209);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i211 := $sext.i8.i32($i210);
    call {:si_unique_call 506} {:cexpr "__pu_val"} boogie_si_record_i32($i211);
    call {:si_unique_call 507} $i212 := devirtbounce.9(0, $i211, $p7);
    call {:si_unique_call 508} {:cexpr "__ret_pu"} boogie_si_record_i32($i212);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i213 := $sext.i32.i64($i212);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i13 := $i213;
    goto $bb3;

  $bb12:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i1, 8707);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i1, 8818);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i1, 8822);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i1, 8825);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i61 == 1);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __might_fault(.str.40, 890);
    call {:si_unique_call 514} $p176 := devirtbounce.8(0, $p7, 4);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p177 := $extractvalue($p176, 0);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i178 := $extractvalue($p176, 1);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p177);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i64.i32($i179);
    call {:si_unique_call 515} {:cexpr "__ret_gu___0"} boogie_si_record_i32($i180);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i64.i32($i178);
    call {:si_unique_call 516} {:cexpr "val"} boogie_si_record_i32($i181);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i180, 0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i181, 0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i184 == 1);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i197 := atomic_read($p196);
    call {:si_unique_call 594} {:cexpr "tmp___15"} boogie_si_record_i32($i197);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.2, $p199);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p200, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.2, $p201);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p202, $mul.ref(0, 3832)), $mul.ref(856, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i204 := $load.i16($M.2, $p203);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i205 := $lshr.i16($i204, 2);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i206 := $and.i16($i205, 1);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i16.i8($i206);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5624, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p208, $i207);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb170:
    assume $i198 == 1;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb161:
    assume $i184 == 1;
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5624, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p185, 1);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5624, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.2, $p186);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i188 := $sext.i8.i32($i187);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb163:
    assume $i189 == 1;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $i190 := sg_res_in_use($p10);
    call {:si_unique_call 596} {:cexpr "tmp___14"} boogie_si_record_i32($i190);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 0);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb165:
    assume $i191 == 1;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.2, $p193);
    call {:si_unique_call 597} {:cexpr "val"} boogie_si_record_i32($i194);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(192, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} sg_remove_scat($p10, $p195);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} sg_build_reserve($p10, $i194);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb158:
    assume $i182 == 1;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i183 := $sext.i32.i64($i180);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i13 := $i183;
    goto $bb3;

  $bb64:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i1, 8822);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb28;

  $bb66:
    assume $i62 == 1;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p214 := current_thread_info();
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i215 := $p2i.ref.i64($p6);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i218 := $load.i64($M.2, $p217);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i219 := __chk_range_not_ok($i215, 32, $i218);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i220 := $zext.i1.i8($i219);
    call {:si_unique_call 519} {:cexpr "tmp___18"} boogie_si_record_i8($i220);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i8.i1($i220);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    $i222 := 1;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i223 := $sext.i32.i64($i222);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i224 := ldv__builtin_expect($i223, 1);
    call {:si_unique_call 601} {:cexpr "tmp___20"} boogie_si_record_i64($i224);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i225 := $eq.i64($i224, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i225 == 1);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p226 := $bitcast.ref.ref($p6);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i228 := atomic_read($p227);
    call {:si_unique_call 603} {:cexpr "tmp___16"} boogie_si_record_i32($i228);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.2, $p230);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p231, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.2, $p232);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p233, $mul.ref(0, 3832)), $mul.ref(768, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.2, $p234);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p226, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    call {:si_unique_call 604} $i238 := devirtbounce.10(0, $i235, $p237, $sub.i32(0, 14), 0);
    call {:si_unique_call 605} {:cexpr "__pu_err"} boogie_si_record_i32($i238);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.2, $p239);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p240, $mul.ref(0, 3496)), $mul.ref(204, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.2, $p241);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p226, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p243);
    call {:si_unique_call 606} $i245 := devirtbounce.10(0, $i242, $p244, $sub.i32(0, 14), 0);
    call {:si_unique_call 607} {:cexpr "__pu_err___0"} boogie_si_record_i32($i245);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.2, $p246);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p247, $mul.ref(0, 3496)), $mul.ref(200, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.2, $p248);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p226, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    call {:si_unique_call 608} $i252 := devirtbounce.10(0, $i249, $p251, $sub.i32(0, 14), 0);
    call {:si_unique_call 609} {:cexpr "__pu_err___1"} boogie_si_record_i32($i252);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.2, $p253);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p254, $mul.ref(0, 3496)), $mul.ref(208, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i256 := $load.i64($M.2, $p255);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i64.i32($i256);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p226, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p258);
    call {:si_unique_call 610} $i260 := devirtbounce.10(0, $i257, $p259, $sub.i32(0, 14), 0);
    call {:si_unique_call 611} {:cexpr "__pu_err___2"} boogie_si_record_i32($i260);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.2, $p261);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p262, $mul.ref(0, 3496)), $mul.ref(232, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.2, $p263);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i265 := $sext.i8.i32($i264);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p226, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p267 := $bitcast.ref.ref($p266);
    call {:si_unique_call 612} $i268 := devirtbounce.10(0, $i265, $p267, $sub.i32(0, 14), 0);
    call {:si_unique_call 613} {:cexpr "__pu_err___3"} boogie_si_record_i32($i268);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.2, $p269);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p270, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.2, $p271);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p272, $mul.ref(0, 3832)), $mul.ref(816, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i274 := $load.i16($M.2, $p273);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p226, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p276 := $bitcast.ref.ref($p275);
    call {:si_unique_call 614} $i277 := devirtbounce.11(0, $i274, $p276, $sub.i32(0, 14), 0);
    call {:si_unique_call 615} {:cexpr "__pu_err___4"} boogie_si_record_i32($i277);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.2, $p278);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p279, $mul.ref(0, 3496)), $mul.ref(168, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i281 := $load.i16($M.2, $p280);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p226, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p283 := $bitcast.ref.ref($p282);
    call {:si_unique_call 616} $i284 := devirtbounce.11(0, $i281, $p283, $sub.i32(0, 14), 0);
    call {:si_unique_call 617} {:cexpr "__pu_err___5"} boogie_si_record_i32($i284);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p226, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p285);
    call {:si_unique_call 618} $i287 := devirtbounce.10(0, 0, $p286, $sub.i32(0, 14), 0);
    call {:si_unique_call 619} {:cexpr "__pu_err___6"} boogie_si_record_i32($i287);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p226, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($p289, $mul.ref(1, 800));
    call {:si_unique_call 620} $i291 := devirtbounce.10(0, 0, $p290, $sub.i32(0, 14), 0);
    call {:si_unique_call 621} {:cexpr "__pu_err___7"} boogie_si_record_i32($i291);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb179:
    assume $i229 == 1;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb177:
    assume $i225 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb3;

  $bb174:
    assume $i221 == 1;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i222 := 0;
    goto $bb176;

  $bb62:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i1, 8821);
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i63 == 1);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} __might_fault(.str.40, 963);
    call {:si_unique_call 521} $p384 := devirtbounce.8(0, $p7, 4);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p385 := $extractvalue($p384, 0);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i386 := $extractvalue($p384, 1);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i387 := $p2i.ref.i64($p385);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i388 := $trunc.i64.i32($i387);
    call {:si_unique_call 522} {:cexpr "__ret_gu___2"} boogie_si_record_i32($i388);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i389 := $trunc.i64.i32($i386);
    call {:si_unique_call 523} {:cexpr "val"} boogie_si_record_i32($i389);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i390 := $ne.i32($i388, 0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i390} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i392 := $slt.i32($i389, 0);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.2, $p393);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p394, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p396 := $load.ref($M.2, $p395);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i397 := max_sectors_bytes($p396);
    call {:si_unique_call 638} {:cexpr "tmp___25"} boogie_si_record_i32($i397);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i398 := $slt.i32($i389, $i397);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i398 == 1);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i399 := $i397;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i402 := $load.i32($M.2, $p401);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i403 := $ne.i32($i399, $i402);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb241:
    assume $i403 == 1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i404 := sg_res_in_use($p10);
    call {:si_unique_call 640} {:cexpr "tmp___26"} boogie_si_record_i32($i404);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i405 := $ne.i32($i404, 0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb243, $bb245;

  $bb245:
    assume !($i405 == 1);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5629, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i407 := $load.i8($M.2, $p406);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i408 := $sext.i8.i32($i407);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i409 := $ne.i32($i408, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(192, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} sg_remove_scat($p10, $p410);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} sg_build_reserve($p10, $i399);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb246:
    assume {:verifier.code 0} true;
    assume $i409 == 1;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 16);
    goto $bb3;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i405 == 1;
    goto $bb244;

  $bb238:
    assume $i398 == 1;
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i399 := $i389;
    goto $bb240;

  $bb235:
    assume $i392 == 1;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb232:
    assume $i390 == 1;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i391 := $sext.i32.i64($i388);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i13 := $i391;
    goto $bb3;

  $bb68:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i1, 8818);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb28;

  $bb70:
    assume $i64 == 1;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i413 := $load.i32($M.2, $p412);
    call {:si_unique_call 524} {:cexpr "__min1___0"} boogie_si_record_i32($i413);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p415 := $load.ref($M.2, $p414);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p415, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p417 := $load.ref($M.2, $p416);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i418 := max_sectors_bytes($p417);
    call {:si_unique_call 526} {:cexpr "tmp___27"} boogie_si_record_i32($i418);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i419 := $slt.i32($i413, $i418);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i419 == 1);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i420 := $i418;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} __might_fault(.str.40, 980);
    call {:si_unique_call 644} $i421 := devirtbounce.9(0, $i420, $p7);
    call {:si_unique_call 645} {:cexpr "__ret_pu___2"} boogie_si_record_i32($i421);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i422 := $sext.i32.i64($i421);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i13 := $i422;
    goto $bb3;

  $bb250:
    assume $i419 == 1;
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i420 := $i413;
    goto $bb252;

  $bb60:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i1, 8816);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i1, 8817);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i66 == 1);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} __might_fault(.str.40, 982);
    call {:si_unique_call 532} $p423 := devirtbounce.8(0, $p7, 4);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p424 := $extractvalue($p423, 0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i425 := $extractvalue($p423, 1);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i426 := $p2i.ref.i64($p424);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i64.i32($i426);
    call {:si_unique_call 533} {:cexpr "__ret_gu___3"} boogie_si_record_i32($i427);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i428 := $trunc.i64.i32($i425);
    call {:si_unique_call 534} {:cexpr "val"} boogie_si_record_i32($i428);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i429 := $ne.i32($i427, 0);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i431 := $ne.i32($i428, 0);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i432 := $zext.i1.i32($i431);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i433 := $trunc.i32.i8($i432);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5626, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p434, $i433);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb254:
    assume $i429 == 1;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i430 := $sext.i32.i64($i427);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i13 := $i430;
    goto $bb3;

  $bb74:
    assume $i66 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} __might_fault(.str.40, 988);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(5626, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i436 := $load.i8($M.2, $p435);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i437 := $sext.i8.i32($i436);
    call {:si_unique_call 528} {:cexpr "__pu_val___3"} boogie_si_record_i32($i437);
    call {:si_unique_call 529} $i438 := devirtbounce.9(0, $i437, $p7);
    call {:si_unique_call 530} {:cexpr "__ret_pu___3"} boogie_si_record_i32($i438);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $i439 := $sext.i32.i64($i438);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i13 := $i439;
    goto $bb3;

  $bb72:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i1, 8709);
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i1, 8709);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb28;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb79;

  $bb76:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i1, 8707);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb28;

  $bb81:
    assume $i69 == 1;
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i612 := atomic_read($p611);
    call {:si_unique_call 536} {:cexpr "tmp___33"} boogie_si_record_i32($i612);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i613 := $ne.i32($i612, 0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i613} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i613 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} __might_fault(.str.40, 1058);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p615 := $load.ref($M.2, $p614);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p615, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p617 := $load.ref($M.2, $p616);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p617, $mul.ref(0, 3832)), $mul.ref(504, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p619 := $load.ref($M.2, $p618);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p619, $mul.ref(0, 336)), $mul.ref(264, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i621 := $load.i16($M.2, $p620);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i622 := $lshr.i16($i621, 6);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i623 := $and.i16($i622, 1);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i624 := $trunc.i16.i8($i623);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i625 := $zext.i8.i32($i624);
    call {:si_unique_call 661} {:cexpr "__pu_val___7"} boogie_si_record_i32($i625);
    call {:si_unique_call 662} $i626 := devirtbounce.9(0, $i625, $p7);
    call {:si_unique_call 663} {:cexpr "__ret_pu___7"} boogie_si_record_i32($i626);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $i627 := $sext.i32.i64($i626);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i13 := $i627;
    goto $bb3;

  $bb295:
    assume $i613 == 1;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb58:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i1, 4725);
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i1, 8705);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i1, 8706);
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i72 == 1);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(188, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.2, $p173);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i175 := $sext.i32.i64($i174);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i13 := $i175;
    goto $bb3;

  $bb87:
    assume $i72 == 1;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} __might_fault(.str.40, 875);
    call {:si_unique_call 538} $p154 := devirtbounce.8(0, $p7, 4);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p155 := $extractvalue($p154, 0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i156 := $extractvalue($p154, 1);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p155);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i64.i32($i157);
    call {:si_unique_call 539} {:cexpr "__ret_gu"} boogie_si_record_i32($i158);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i64.i32($i156);
    call {:si_unique_call 540} {:cexpr "val"} boogie_si_record_i32($i159);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i158, 0);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i162 := $slt.i32($i159, 0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i163 := $sgt.i32($i159, 858993457);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i164 := $i159;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(188, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p165, $i164);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i166 := $srem.i32($i164, 100);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i167 := $mul.i32($i166, 250);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i168 := $sdiv.i32($i167, 100);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i169 := $sdiv.i32($i164, 100);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i170 := $mul.i32($i169, 250);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i171 := $add.i32($i168, $i170);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p10, $mul.ref(0, 5720)), $mul.ref(184, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p172, $i171);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb155:
    assume $i163 == 1;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i164 := 858993458;
    goto $bb157;

  $bb152:
    assume $i162 == 1;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 5);
    goto $bb3;

  $bb149:
    assume $i160 == 1;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i161 := $sext.i32.i64($i158);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i13 := $i161;
    goto $bb3;

  $bb85:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i1, 4726);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i1, 4726);
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb28;

  $bb91:
    assume $i74 == 1;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p692 := $load.ref($M.2, $p691);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($p692, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p694 := $load.ref($M.2, $p693);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i695 := blk_trace_remove($p694);
    call {:si_unique_call 544} {:cexpr "tmp___41"} boogie_si_record_i32($i695);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i696 := $sext.i32.i64($i695);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i13 := $i696;
    goto $bb3;

  $bb89:
    assume $i73 == 1;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p686 := $load.ref($M.2, $p685);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($p686, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p688 := $load.ref($M.2, $p687);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i689 := blk_trace_startstop($p688, 0);
    call {:si_unique_call 542} {:cexpr "tmp___40"} boogie_si_record_i32($i689);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i690 := $sext.i32.i64($i689);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i13 := $i690;
    goto $bb3;

  $bb83:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i1, 4711);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i1, 4724);
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i76 == 1);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.2, $p679);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p680, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p682 := $load.ref($M.2, $p681);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i683 := blk_trace_startstop($p682, 1);
    call {:si_unique_call 546} {:cexpr "tmp___39"} boogie_si_record_i32($i683);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i684 := $sext.i32.i64($i683);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i13 := $i684;
    goto $bb3;

  $bb95:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i1, 4711);
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb28;

  $bb97:
    assume $i77 == 1;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} __might_fault(.str.40, 1080);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p659 := $load.ref($M.2, $p658);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p659, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p661 := $load.ref($M.2, $p660);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i662 := max_sectors_bytes($p661);
    call {:si_unique_call 549} {:cexpr "__pu_val___8"} boogie_si_record_i32($i662);
    call {:si_unique_call 550} $i663 := devirtbounce.9(0, $i662, $p7);
    call {:si_unique_call 551} {:cexpr "__ret_pu___8"} boogie_si_record_i32($i663);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $i664 := $sext.i32.i64($i663);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i13 := $i664;
    goto $bb3;

  $bb93:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb28;

  $bb101:
    assume $i79 == 1;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i629 := atomic_read($p628);
    call {:si_unique_call 553} {:cexpr "tmp___34"} boogie_si_record_i32($i629);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i630 := $ne.i32($i629, 0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i630} true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $i631 := $ne.i32($i36, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i631} true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p640 := $load.ref($M.2, $p639);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p640, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p642 := $load.ref($M.2, $p641);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(132, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i644 := $load.i32($M.2, $p643);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p645 := $bitcast.ref.ref($p6);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i646 := sg_scsi_ioctl($p642, $0.ref, $i644, $p645);
    call {:si_unique_call 669} {:cexpr "tmp___37"} boogie_si_record_i32($i646);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i647 := $sext.i32.i64($i646);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i13 := $i647;
    goto $bb3;

  $bb302:
    assume $i631 == 1;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p5, 10);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p632 := $bitcast.ref.ref($p6);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p632, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p634 := $bitcast.ref.ref($p633);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i635 := copy_from_user($p5, $p634, 1);
    call {:si_unique_call 665} {:cexpr "tmp___35"} boogie_si_record_i64($i635);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i636 := $ne.i64($i635, 0);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i636} true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i636 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i637 := sg_allow_access($p0, $p5);
    call {:si_unique_call 667} {:cexpr "tmp___36"} boogie_si_record_i32($i637);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i638 := $ne.i32($i637, 0);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i638} true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb307:
    assume $i638 == 1;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 1);
    goto $bb3;

  $bb304:
    assume $i636 == 1;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb3;

  $bb299:
    assume $i630 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb99:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i1, $sub.i32(0, 1069018509));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb28;

  $bb103:
    assume $i80 == 1;
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p666 := $load.ref($M.2, $p665);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p666, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p668 := $load.ref($M.2, $p667);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.2, $p669);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p670, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p672 := $bitcast.ref.ref($p671);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(260, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i674 := $load.i32($M.2, $p673);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i675 := $or.i32($i674, 22020096);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p676 := $i2p.i64.ref($i2);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i677 := blk_trace_setup($p668, $p672, $i675, $0.ref, $p676);
    call {:si_unique_call 555} {:cexpr "tmp___38"} boogie_si_record_i32($i677);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i678 := $sext.i32.i64($i677);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i13 := $i678;
    goto $bb3;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.2, $p26);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.2, $p28);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p27, $p31, .str.58, $i1);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 6);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 6);
    goto $bb3;

  $bb292_dummy:
    assume false;
    return;

  $bb278_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2602;

  $bb137_dummy:
    assume false;
    return;

  $bb127_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2180;

  $bb227_dummy:
    assume false;
    return;

  $bb219_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2458;

  $bb212_dummy:
    assume false;
    return;

  $bb203_last:
    assume {:verifier.code 0} true;
    goto $bb204;
}



const sg_compat_ioctl: ref;

axiom sg_compat_ioctl == $sub.ref(0, 342378);

procedure sg_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation sg_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} {:cexpr "sg_compat_ioctl:arg:cmd_in"} boogie_si_record_i32($i1);
    call {:si_unique_call 675} {:cexpr "sg_compat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.2, $p15);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 3832)), $mul.ref(504, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.2, $p17);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.2, $p19);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, 515);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 3832)), $mul.ref(504, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.2, $p27);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i2);
    call {:si_unique_call 676} $i30 := devirtbounce.12($p28, $p14, $i1, $p29);
    call {:si_unique_call 677} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i8 := $i31;
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, 6);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, 6);
    goto $bb3;
}



const sg_mmap: ref;

axiom sg_mmap == $sub.ref(0, 343410);

procedure sg_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i1;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i66: i64;
  var $i65: i64;
  var $i67: i64;
  var $i68: i32;
  var $i69: i16;
  var $i70: i32;
  var $i71: i1;
  var $i58: i32;
  var $i59: i64;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.2, $p12);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.2, $p14);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64($i13, $i15);
    call {:si_unique_call 678} {:cexpr "req_sz"} boogie_si_record_i64($i16);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i18 := $lshr.i32($i17, 3);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 7);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, 3);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 680} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.2, $p39);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.2, $p43);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i46 := $ult.i64($i45, $i16);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.2, $p47);
    call {:si_unique_call 682} {:cexpr "sa"} boogie_si_record_i64($i48);
    $p49 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(24, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.2, $p49);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 12);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i52 := $shl.i32(1, $i51);
    call {:si_unique_call 683} {:cexpr "length"} boogie_si_record_i32($i52);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    $p54 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(0, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.2, $p54);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, 0);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p9, $mul.ref(0, 5720)), $mul.ref(5629, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p74, 1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.2, $p75);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i77 := $or.i64($i76, 67371008);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p78, $i77);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p80, $p8);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p81, sg_mmap_vm_ops);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i58, $i59 := 0, $i48;
    goto $bb23;

  $bb23:
    call $p60, $i61, $i62, $i63, $i64, $i66, $i65, $i67, $i68, $i69, $i70, $i71, $i58, $i59, $i72, $i73 := sg_mmap_loop_$bb23($p1, $i52, $p53, $p54, $p60, $i61, $i62, $i63, $i64, $i66, $i65, $i67, $i68, $i69, $i70, $i71, $i58, $i59, $i72, $i73);
    goto $bb23_last;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.2, $p53);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i73 := $ugt.i64($i72, $i59);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i73 == 1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb30:
    assume $i73 == 1;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.2, $p60);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64($i61, $i59);
    call {:si_unique_call 684} {:cexpr "len"} boogie_si_record_i64($i62);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i52);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i64 := $ult.i64($i62, $i63);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i52);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i59, $i65);
    call {:si_unique_call 685} {:cexpr "sa"} boogie_si_record_i64($i67);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i58, 1);
    call {:si_unique_call 686} {:cexpr "k"} boogie_si_record_i32($i68);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.2, $p54);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i71 := $sgt.i32($i70, $i68);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i58, $i59 := $i68, $i67;
    goto $bb28_dummy;

  $bb25:
    assume $i64 == 1;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i65 := $i62;
    goto $bb27;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb6;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.2, $p27);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.2, $p29);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.2, $p31);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.2, $p35);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i16);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} sdev_prefix_printk.ref.ref.ref.ref.ref.i32(.str, $p28, $p34, .str.56, $p37, $i38);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 6);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 6);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb28_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2934;
}



const sg_open: ref;

axiom sg_open == $sub.ref(0, 344442);

procedure sg_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.1, $CurrAddr, $M.34, $M.35, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation sg_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i1;
  var $i81: i8;
  var $i82: i1;
  var $p83: ref;
  var $i84: i64;
  var $i85: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i37: i32;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i58: i32;
  var $p99: ref;
  var $i49: i32;
  var $p100: ref;
  var $p101: ref;
  var $i42: i32;
  var $p102: ref;
  var $p103: ref;
  var $i10: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i2 := iminor($p0);
    call {:si_unique_call 688} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    call {:si_unique_call 689} {:cexpr "flags"} boogie_si_record_i32($i4);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_43 := ldv_nonseekable_open_10($p0, $p1);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i4, 128);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p11 := sg_get_dev($i2);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i13 := IS_ERR($p12);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 693} {:cexpr "tmp___1"} boogie_si_record_i8($i14);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i32($i19, 3);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 7);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 3);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 697} {:cexpr "tmp___2"} boogie_si_record_i64($i25);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.2, $p33);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i35 := scsi_device_get($p34);
    call {:si_unique_call 700} {:cexpr "retval"} boogie_si_record_i32($i35);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.2, $p38);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i40 := scsi_autopm_get_device($p39);
    call {:si_unique_call 703} {:cexpr "retval"} boogie_si_record_i32($i40);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i4, 2048);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} mutex_lock_nested($p50, 0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i4, 2048);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i52 == 1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i62 := open_wait($p11, $i4);
    call {:si_unique_call 710} {:cexpr "retval"} boogie_si_record_i32($i62);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i4, 128);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.2, $p67);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i69 := $sle.i32($i68, 0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p78 := sg_add_sfp($p11);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i80 := IS_ERR($p79);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i8($i80);
    call {:si_unique_call 716} {:cexpr "tmp___6"} boogie_si_record_i8($i81);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i81);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p87, $p78);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.2, $p88);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p91, $i90);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} mutex_unlock($p92);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(384, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_44 := kref_put($p93, sg_device_destroy);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i10 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i82 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p78);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i84 := PTR_ERR($p83);
    call {:si_unique_call 718} {:cexpr "tmp___5"} boogie_si_record_i64($i84);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    call {:si_unique_call 719} {:cexpr "retval"} boogie_si_record_i32($i85);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i4, 128);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i58 := $i85;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} mutex_unlock($p99);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i49 := $i58;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.2, $p100);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} scsi_autopm_put_device($p101);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i42 := $i49;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.2, $p102);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} scsi_device_put($p103);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i37 := $i42;
    goto $bb16;

  $bb55:
    assume $i96 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p97, 0);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} __wake_up($p98, 1, 1, $0.ref);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb48:
    assume $i69 == 1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(364, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p70, 0);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.2, $p71);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.2, $p73);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i75 := queue_max_segments($p74);
    call {:si_unique_call 713} {:cexpr "tmp___4"} boogie_si_record_i16($i75);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(256, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p77, $i76);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i65 == 1;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p66, 1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i63 == 1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i58 := $i62;
    goto $bb35;

  $bb29:
    assume $i52 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i4, 128);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i54 == 1);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.2, $p59);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i8.i1($i60);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i61 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 16);
    goto $bb35;

  $bb31:
    assume $i54 == 1;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.2, $p55);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, 0);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb33:
    assume $i57 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 16);
    goto $bb35;

  $bb22:
    assume $i44 == 1;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.2, $p45);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i47 := scsi_block_when_processing_errors($p46);
    call {:si_unique_call 706} {:cexpr "tmp___3"} boogie_si_record_i32($i47);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 6);
    goto $bb26;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb20;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb16;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.2, $p27);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.2, $p29);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p28, $p32, .str.50, $i4);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p11);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i17 := PTR_ERR($p16);
    call {:si_unique_call 695} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i10 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i4, 3);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb6;
}



const sg_release: ref;

axiom sg_release == $sub.ref(0, 345474);

procedure sg_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation sg_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i7: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i12, 3);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 7);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 3);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 723} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} mutex_lock_nested($p26, 0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.2, $p27);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} scsi_autopm_put_device($p28);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(5632, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_45 := kref_put($p29, sg_remove_sfp);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, 1);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p34, $i33);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.2, $p35);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p40);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} mutex_unlock($p44);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} __wake_up($p43, 1, 1, $0.ref);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p38, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} __wake_up($p39, 1, 0, $0.ref);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.2, $p20);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.2, $p22);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} sdev_prefix_printk.ref.ref.ref.ref(.str, $p21, $p25, .str.57);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 6);
    goto $bb3;
}



const sg_fasync: ref;

axiom sg_fasync == $sub.ref(0, 346506);

procedure sg_fasync($i0: i32, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sg_fasync($i0: i32, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} {:cexpr "sg_fasync:arg:fd"} boogie_si_record_i32($i0);
    call {:si_unique_call 732} {:cexpr "sg_fasync:arg:mode"} boogie_si_record_i32($i2);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i32($i13, 3);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 7);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 3);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 734} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 5720)), $mul.ref(240, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i28 := fasync_helper($i0, $p1, $i2, $p27);
    call {:si_unique_call 737} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i8 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p22, $p26, .str.49, $i2);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 6);
    goto $bb3;
}



const fasync_helper: ref;

axiom fasync_helper == $sub.ref(0, 347538);

procedure fasync_helper($i0: i32, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fasync_helper($i0: i32, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 738} {:cexpr "fasync_helper:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 739} {:cexpr "fasync_helper:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 740} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 741} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 348570);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    return;
}



const scsi_autopm_put_device: ref;

axiom scsi_autopm_put_device == $sub.ref(0, 349602);

procedure scsi_autopm_put_device($p0: ref);
  free requires assertsPassed;



implementation scsi_autopm_put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    return;
}



const sg_remove_sfp: ref;

axiom sg_remove_sfp == $sub.ref(0, 350634);

procedure sg_remove_sfp($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.25, $M.24, $M.26, $M.28, $M.30;



implementation sg_remove_sfp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $p24: ref;
  var $p27: ref;
  var $p29: ref;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var vslice_dummy_var_46: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 5632), 5720)), $mul.ref(16, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(280, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i8 := _raw_write_lock_irqsave($p7);
    call {:si_unique_call 746} {:cexpr "iflags"} boogie_si_record_i64($i8);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 5632), 5720)), $mul.ref(0, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} list_del($p9);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(280, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} _raw_write_unlock_irqrestore($p10, $i8);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 5632), 5720)), $mul.ref(5640, 1)), $mul.ref(0, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} __init_work($p12, 0);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p13, 137438953408);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 5632), 5720)), $mul.ref(5640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.2;
    cmdloc_dummy_var_11 := $M.2;
    call {:si_unique_call 750} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p17, $p18, 8, $zext.i32.i64(8), 0 == 1);
    $M.2 := cmdloc_dummy_var_12;
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 5632), 5720)), $mul.ref(5640, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} lockdep_init_map($p21, .str.6, $p1, 0);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 5632), 5720)), $mul.ref(5640, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} INIT_LIST_HEAD($p24);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 5632), 5720)), $mul.ref(5640, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p27, sg_remove_sfp_usercontext);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 5632), 5720)), $mul.ref(5640, 1)), $mul.ref(0, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_46 := schedule_work($p29);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 351666);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 352698);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 353730);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 354762);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    return;
}



const sg_remove_sfp_usercontext: ref;

axiom sg_remove_sfp_usercontext == $sub.ref(0, 355794);

procedure sg_remove_sfp_usercontext($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.32, $CurrAddr, assertsPassed, $M.25, $M.24, $M.26, $M.28, $M.30;



implementation sg_remove_sfp_usercontext($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 5640), 5720));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5640), 5720)), $mul.ref(16, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5640), 5720)), $mul.ref(232, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5640), 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p16);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i42 := $lshr.i32($i41, 3);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 7);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i32($i43, 6);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 762} {:cexpr "tmp___0"} boogie_si_record_i64($i47);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p2);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} kfree($p55);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.2, $p56);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} scsi_device_put($p57);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 392)), $mul.ref(384, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_48 := kref_put($p58, sg_device_destroy);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} ldv_module_put_12(__this_module);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.2, $p49);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.2, $p51);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} sdev_prefix_printk.ref.ref.ref.ref.ref(.str, $p50, $p54, .str.8, $p2);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i32($i19, 3);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 7);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 6);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 758} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5640), 5720)), $mul.ref(192, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} sg_remove_scat($p2, $p40);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.2, $p27);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.2, $p29);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5640), 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.2, $p34);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5640), 5720)), $mul.ref(192, 1)), $mul.ref(0, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.2, $p37);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} sdev_prefix_printk.ref.ref.ref.ref.i32.i32(.str, $p28, $p32, .str.7, $i35, $i39);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p12, $i13, $i14, vslice_dummy_var_47 := sg_remove_sfp_usercontext_loop_$bb4($p1, $p5, $p9, $p10, $p12, $i13, $i14, vslice_dummy_var_47);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5640), 5720)), $mul.ref(232, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_47 := sg_finish_rem_req($p10);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.2, $p5);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 356826);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.25, $M.24, $M.26, $M.28, $M.30;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.2, system_wq);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i2 := queue_work($p1, $p0);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 769} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 357858);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.25, $M.24, $M.26, $M.28, $M.30;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i2 := ldv_queue_work_on_5(8192, $p0, $p1);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 771} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_5: ref;

axiom ldv_queue_work_on_5 == $sub.ref(0, 358890);

procedure ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.25, $M.24, $M.26, $M.28, $M.30;



implementation ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} {:cexpr "ldv_queue_work_on_5:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 774} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 775} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} activate_work_2($p2, 2);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 359922);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 777} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 1} true;
    call {:si_unique_call 778} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 779} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_2: ref;

axiom activate_work_2 == $sub.ref(0, 360954);

procedure activate_work_2($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.25, $M.24, $M.26, $M.28, $M.30;



implementation activate_work_2($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} {:cexpr "activate_work_2:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i2 := $M.24;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.26;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.28;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.30;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.30 := $i1;
    call {:si_unique_call 784} {:cexpr "ldv_work_2_3"} boogie_si_record_i32($i1);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.28 := $i1;
    call {:si_unique_call 783} {:cexpr "ldv_work_2_2"} boogie_si_record_i32($i1);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.26 := $i1;
    call {:si_unique_call 782} {:cexpr "ldv_work_2_1"} boogie_si_record_i32($i1);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $M.25 := $p0;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $M.24 := $i1;
    call {:si_unique_call 781} {:cexpr "ldv_work_2_0"} boogie_si_record_i32($i1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sg_finish_rem_req: ref;

axiom sg_finish_rem_req == $sub.ref(0, 361986);

procedure sg_finish_rem_req($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_finish_rem_req($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 3);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 7);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 4);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 786} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(248, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.2, $p33);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(232, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.2, $p54);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i32($i55);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i57 == 1);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} sg_remove_scat($p2, $p3);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_49 := sg_remove_request($p2, $p0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb13:
    assume $i57 == 1;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} sg_unlink_reserve($p2, $p0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.2, $p37);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 368)), $mul.ref(280, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.2, $p39);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.2, $p42);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i41, $i46);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.2, $p52);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} blk_put_request($p53);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i47 == 1;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.2, $p48);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 368)), $mul.ref(280, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.2, $p50);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} kfree($p51);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(248, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.2, $p29);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i31 := blk_rq_unmap_user($p30);
    call {:si_unique_call 789} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.2, $p14);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.2, $p16);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.2, $p18);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(232, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.2, $p22);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i23);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p15, $p21, .str.1, $i24);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sg_remove_scat: ref;

axiom sg_remove_scat == $sub.ref(0, 363018);

procedure sg_remove_scat($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_remove_scat($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i1;
  var $i39: i32;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 3);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 7);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 4);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 796} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p1);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.2;
    call {:si_unique_call 804} cmdloc_dummy_var_14 := $memset.i8(cmdloc_dummy_var_13, $p83, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_14;
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.2, $p27);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb6;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.2, $p30);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i32 := $sext.i8.i32($i31);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.2, $p35);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, 0);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.2, $p80);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} kfree($p82);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb14;

  $bb14:
    call $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $p61, $p62, $p63, $p64, $i65, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i39, $p74, $i75, $p76, $p77, $i78, $i79 := sg_remove_scat_loop_$bb14($p0, $p1, $p34, $p35, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $p61, $p62, $p63, $p64, $i65, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i39, $p74, $i75, $p76, $p77, $i78, $i79);
    goto $bb14_last;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.2, $p34);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i39);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p74, $mul.ref($i75, 8));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.2, $p76);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i79 == 1);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb21:
    assume $i79 == 1;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i41 := $lshr.i32($i40, 3);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 7);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i43 := $ugt.i32($i42, 5);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 799} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.2, $p63);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i39);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p64, $mul.ref($i65, 8));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.2, $p66);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.2, $p68);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} __free_pages($p67, $i69);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i39, 1);
    call {:si_unique_call 802} {:cexpr "k"} boogie_si_record_i32($i70);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.2, $p35);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i73 := $sgt.i32($i72, $i70);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i73 == 1);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i39 := $i70;
    goto $bb19_dummy;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.2, $p48);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.2, $p50);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.2, $p52);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.2, $p54);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.2, $p58);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i39);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p59, $mul.ref($i60, 8));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.2, $p61);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} sdev_prefix_printk.ref.ref.ref.ref.i32.ref(.str, $p51, $p57, .str.4, $i39, $p62);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.2, $p10);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.2, $p14);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.2, $p16);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.2, $p20);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p13, $p19, .str.3, $i22);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;
}



const scsi_device_put: ref;

axiom scsi_device_put == $sub.ref(0, 364050);

procedure scsi_device_put($p0: ref);
  free requires assertsPassed;



implementation scsi_device_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_12: ref;

axiom ldv_module_put_12 == $sub.ref(0, 365082);

procedure ldv_module_put_12($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_module_put_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ldv_module_put($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 366114);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i3 := $M.32;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.32;
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.32 := $i6;
    call {:si_unique_call 807} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} ldv_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 367146);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 808} __VERIFIER_error();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const __free_pages: ref;

axiom __free_pages == $sub.ref(0, 368178);

procedure __free_pages($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __free_pages($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} {:cexpr "__free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 369210);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const blk_rq_unmap_user: ref;

axiom blk_rq_unmap_user == $sub.ref(0, 370242);

procedure blk_rq_unmap_user($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_unmap_user($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 1} true;
    call {:si_unique_call 810} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 811} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const blk_put_request: ref;

axiom blk_put_request == $sub.ref(0, 371274);

procedure blk_put_request($p0: ref);
  free requires assertsPassed;



implementation blk_put_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    return;
}



const sg_unlink_reserve: ref;

axiom sg_unlink_reserve == $sub.ref(0, 372306);

procedure sg_unlink_reserve($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_unlink_reserve($p0: ref, $p1: ref)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i3, 3);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 7);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 4);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 813} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p28, 0);
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p29, 0);
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p30, $0.ref);
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p31, 0);
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p32, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(224, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p33, 0);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(232, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p34, 0);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.2, $p11);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.2, $p15);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.2, $p17);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.2, $p19);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.2, $p25);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p16, $p24, .str.2, $i27);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sg_remove_request: ref;

axiom sg_remove_request == $sub.ref(0, 373338);

procedure sg_remove_request($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_remove_request($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p27: ref;
  var $p28: ref;
  var $i38: i32;
  var $i22: i32;
  var $p43: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.2, $p6);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i12 := _raw_write_lock_irqsave($p11);
    call {:si_unique_call 816} {:cexpr "iflags"} boogie_si_record_i64($i12);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p14);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i22 := $i38;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} _raw_write_unlock_irqrestore($p43, $i12);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p24, $p14;
    goto $bb16;

  $bb16:
    call $i29, $i30, $i31, $p32, $p33, $p39, $p40, $i41, $i42, $p27, $p28 := sg_remove_request_loop_$bb16($p1, $i29, $i30, $i31, $p32, $p33, $p39, $p40, $i41, $i42, $p27, $p28);
    goto $bb16_last;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p1);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p27);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i29, $i30);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p32, $p33 := $p28, $p27;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p27, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.2, $p39);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p27, $p28 := $p40, $p27;
    goto $bb22_dummy;

  $bb18:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.2, $p34);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p32, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p36, $p35);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p33, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p37, $0.ref);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb20;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.2, $p18);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p20, $p19);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p21, $0.ref);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb22_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3740;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 374370);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(76, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_nonseekable_open_10: ref;

axiom ldv_nonseekable_open_10 == $sub.ref(0, 375402);

procedure ldv_nonseekable_open_10($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_nonseekable_open_10($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const sg_get_dev: ref;

axiom sg_get_dev == $sub.ref(0, 376434);

procedure sg_get_dev($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sg_get_dev($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p14: ref;
  var $p13: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} {:cexpr "sg_get_dev:arg:dev"} boogie_si_record_i32($i0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i1 := _raw_read_lock_irqsave(sg_index_lock);
    call {:si_unique_call 820} {:cexpr "flags"} boogie_si_record_i64($i1);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $p2 := sg_lookup_dev($i0);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i9 := atomic_read($p8);
    call {:si_unique_call 824} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 392)), $mul.ref(384, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} kref_get($p14);
    assume {:verifier.code 0} true;
    $p13 := $p2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p7 := $p13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} _raw_read_unlock_irqrestore(sg_index_lock, $i1);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p11 := ERR_PTR($sub.i64(0, 19));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p13 := $p11;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p5 := ERR_PTR($sub.i64(0, 6));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;
}



const scsi_device_get: ref;

axiom scsi_device_get == $sub.ref(0, 377466);

procedure scsi_device_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_device_get($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 1} true;
    call {:si_unique_call 828} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const scsi_autopm_get_device: ref;

axiom scsi_autopm_get_device == $sub.ref(0, 378498);

procedure scsi_autopm_get_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_autopm_get_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 1} true;
    call {:si_unique_call 830} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 831} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const scsi_block_when_processing_errors: ref;

axiom scsi_block_when_processing_errors == $sub.ref(0, 379530);

procedure scsi_block_when_processing_errors($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_block_when_processing_errors($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 1} true;
    call {:si_unique_call 832} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 833} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const open_wait: ref;

axiom open_wait == $sub.ref(0, 380562);

procedure open_wait($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation open_wait($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $i32: i32;
  var $i33: i1;
  var $i28: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i1;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i9: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i64;
  var $p67: ref;
  var $i68: i8;
  var $i69: i1;
  var $i71: i1;
  var $i72: i64;
  var $i73: i64;
  var $i74: i32;
  var $i75: i1;
  var $i70: i64;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i1;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i85: i8;
  var $i86: i1;
  var $i87: i32;
  var $i51: i32;
  var $i47: i32;
  var $i40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 836} {:cexpr "open_wait:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 128);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.2, $p48);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i51 := 0;
    assume {:branchcond $i50} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i47 := $i51;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i40 := $i47;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb38:
    assume $i50 == 1;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    call $p52, $p53, $i54, $i55, $p56, $i57, $i58, $p59, $p60, $p61, $i62, $p63, $i64, $i65, $i66, $p67, $i68, $i69, $i71, $i72, $i73, $i74, $i75, $i70, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87 := open_wait_loop_$bb41($p0, $p3, $p48, $p52, $p53, $i54, $i55, $p56, $i57, $i58, $p59, $p60, $p61, $i62, $p63, $i64, $i65, $i66, $p67, $i68, $i69, $i71, $i72, $i73, $i74, $i75, $i70, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87);
    goto $bb41_last;

  $bb42:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} mutex_unlock($p52);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} __might_sleep(.str.40, 258, 0);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i54 := atomic_read($p53);
    call {:si_unique_call 859} {:cexpr "tmp___5"} boogie_si_record_i32($i54);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i78 := 0;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} mutex_lock_nested($p79, 0);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i78, 0);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i81 := $i78;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i83 := atomic_read($p82);
    call {:si_unique_call 874} {:cexpr "tmp___6"} boogie_si_record_i32($i83);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.2, $p48);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i85);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i87 := $i78;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i51 := $i87;
    goto $bb40;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb68_dummy;

  $bb65:
    assume $i84 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 19);
    goto $bb29;

  $bb62:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i40 := $i81;
    goto $bb29;

  $bb43:
    assume $i55 == 1;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.2, $p56);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb45;

  $bb46:
    assume $i58 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} INIT_LIST_HEAD($p59);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p60, 0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i62 := prepare_to_wait_event($p61, $p3, 1);
    call {:si_unique_call 862} {:cexpr "tmp___3"} boogie_si_record_i64($i62);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i64 := atomic_read($p63);
    call {:si_unique_call 864} {:cexpr "tmp___4"} boogie_si_record_i32($i64);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb50;

  $bb50:
    assume !($i65 == 1);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i66 := $i62;
    goto $bb51;

  $bb51:
    call $i66, $p67, $i68, $i69, $i71, $i72, $i73, $i74, $i75 := open_wait_loop_$bb51($p0, $p3, $p61, $p63, $i66, $p67, $i68, $i69, $i71, $i72, $i73, $i74, $i75);
    goto $bb51_last;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.2, $p67);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i69 == 1);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i70 := 0;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} finish_wait($p76, $p3);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i70);
    call {:si_unique_call 866} {:cexpr "__ret___1"} boogie_si_record_i32($i77);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb61;

  $bb52:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i66, 0);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i72 := $i66;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} schedule();
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i73 := prepare_to_wait_event($p61, $p3, 1);
    call {:si_unique_call 869} {:cexpr "tmp___3"} boogie_si_record_i64($i73);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i74 := atomic_read($p63);
    call {:si_unique_call 871} {:cexpr "tmp___4"} boogie_si_record_i32($i74);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb60;

  $bb60:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i73;
    goto $bb60_dummy;

  $bb54:
    assume $i75 == 1;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb57:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i70 := $i72;
    goto $bb55;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb49;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.2, $p6);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i47 := $i9;
    goto $bb37;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p10, $p11, $i12, $i13, $p14, $i15, $i16, $p17, $p18, $p19, $i20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i28, $p34, $i35, $i36, $p37, $i38, $i39, $p41, $i42, $i43, $i44, $i45, $i46 := open_wait_loop_$bb6($p0, $p2, $p6, $p10, $p11, $i12, $i13, $p14, $i15, $i16, $p17, $p18, $p19, $i20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i28, $p34, $i35, $i36, $p37, $i38, $i39, $p41, $i42, $i43, $i44, $i45, $i46);
    goto $bb6_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} mutex_unlock($p10);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} __might_sleep(.str.40, 245, 0);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i12 := atomic_read($p11);
    call {:si_unique_call 840} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} mutex_lock_nested($p37, 0);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i36, 0);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i39 := $i36;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i42 := atomic_read($p41);
    call {:si_unique_call 855} {:cexpr "tmp___2"} boogie_si_record_i32($i42);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.2, $p6);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 0);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i46 := $i36;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i9 := $i46;
    goto $bb5;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb34_dummy;

  $bb31:
    assume $i43 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 19);
    goto $bb29;

  $bb27:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb29;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} INIT_LIST_HEAD($p17);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p18, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i20 := prepare_to_wait_event($p19, $p2, 1);
    call {:si_unique_call 843} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i22 := atomic_read($p21);
    call {:si_unique_call 845} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i23 == 1);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i24 := $i20;
    goto $bb16;

  $bb16:
    call $i24, $p25, $i26, $i27, $i29, $i30, $i31, $i32, $i33 := open_wait_loop_$bb16($p0, $p2, $p19, $p21, $i24, $p25, $i26, $i27, $i29, $i30, $i31, $i32, $i33);
    goto $bb16_last;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.2, $p25);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i24, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i30 := $i24;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} schedule();
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i31 := prepare_to_wait_event($p19, $p2, 1);
    call {:si_unique_call 850} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i32 := atomic_read($p21);
    call {:si_unique_call 852} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb25;

  $bb25:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i31;
    goto $bb25_dummy;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} finish_wait($p34, $p2);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i28);
    call {:si_unique_call 847} {:cexpr "__ret"} boogie_si_record_i32($i35);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb26;

  $bb22:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i28 := $i30;
    goto $bb20;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb14;

  $bb60_dummy:
    assume false;
    return;

  $bb51_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  $bb68_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb25_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  $bb34_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const sg_add_sfp: ref;

axiom sg_add_sfp == $sub.ref(0, 381594);

procedure sg_add_sfp($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $M.1, $CurrAddr, $M.34, $M.35, $M.32;



implementation sg_add_sfp($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i16;
  var $i23: i16;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $i86: i32;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $p91: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p3 := kzalloc(5720, 544);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(24, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} __init_waitqueue_head($p10, .str.51, $p1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} __rwlock_init($p11, .str.52, $p2);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(5632, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} kref_init($p12);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(184, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p13, 15000);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(188, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p14, 6000);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(5625, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p15, 0);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.2, $p16);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.2, $p18);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 3832)), $mul.ref(856, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.2, $p20);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i16($i21, 2);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i23 := $and.i16($i22, 1);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i16.i8($i23);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(5624, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p25, $i24);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(5626, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p26, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(5628, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p27, 0);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, $p0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(280, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i30 := _raw_write_lock_irqsave($p29);
    call {:si_unique_call 883} {:cexpr "iflags"} boogie_si_record_i64($i30);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i32 := atomic_read($p31);
    call {:si_unique_call 885} {:cexpr "tmp___2"} boogie_si_record_i32($i32);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(0, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(264, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} list_add_tail($p37, $p38);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(280, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} _raw_write_unlock_irqrestore($p39, $i30);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i41 := $lshr.i32($i40, 3);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 7);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i43 := $ugt.i32($i42, 3);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 891} {:cexpr "tmp___3"} boogie_si_record_i64($i46);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, sg_big_buff);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i55 := $M.33;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i54, $i55);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 894} {:cexpr "tmp___4"} boogie_si_record_i64($i59);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, sg_big_buff);
    call {:si_unique_call 896} {:cexpr "__min1"} boogie_si_record_i32($i62);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.2, $p63);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.2, $p65);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i67 := max_sectors_bytes($p66);
    call {:si_unique_call 898} {:cexpr "tmp___5"} boogie_si_record_i32($i67);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i62, $i67);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i68 == 1);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} sg_build_reserve($p4, $i69);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i71 := $lshr.i32($i70, 3);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 7);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i73 := $ugt.i32($i72, 3);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i76 := ldv__builtin_expect($i75, 0);
    call {:si_unique_call 901} {:cexpr "tmp___6"} boogie_si_record_i64($i76);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(384, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} kref_get($p91);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv___module_get_11(__this_module);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p9 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb17:
    assume $i77 == 1;
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.2, $p78);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.2, $p80);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.2, $p85);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(0, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.2, $p88);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} sdev_prefix_printk.ref.ref.ref.ref.i32.i32(.str, $p79, $p83, .str.54, $i86, $i90);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i68 == 1;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i69 := $i62;
    goto $bb16;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i61 := $M.33;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, sg_big_buff, $i61);
    call {:si_unique_call 895} {:cexpr "sg_big_buff"} boogie_si_record_i32($i61);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i47 == 1;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.2, $p48);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.2, $p50);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} sdev_prefix_printk.ref.ref.ref.ref.ref(.str, $p49, $p53, .str.53, $p4);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(280, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} _raw_write_unlock_irqrestore($p34, $i30);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p35 := ERR_PTR($sub.i64(0, 19));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p9 := $p35;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p7 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p9 := $p7;
    goto $bb3;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 382626);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} __list_add($p0, $p3, $p1);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    return;
}



const max_sectors_bytes: ref;

axiom max_sectors_bytes == $sub.ref(0, 383658);

procedure max_sectors_bytes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation max_sectors_bytes($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i1 := queue_max_sectors($p0);
    call {:si_unique_call 907} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i2 := $ult.i32($i1, 4194303);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i3 := 4194303;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 9);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const sg_build_reserve: ref;

axiom sg_build_reserve == $sub.ref(0, 384690);

procedure sg_build_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.34, $M.35;



implementation sg_build_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} {:cexpr "sg_build_reserve:arg:req_size"} boogie_si_record_i32($i1);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(192, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i3, 3);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 7);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 4);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 910} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i21 := $i1;
    goto $bb4;

  $bb4:
    call $i21, $i22, $i23, $i24, $i25, $i26, $i27 := sg_build_reserve_loop_$bb4($p0, $p2, $i21, $i22, $i23, $i24, $i25, $i26, $i27);
    goto $bb4_last;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i21, 4095);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i24 := sg_build_indirect($p2, $p0, $i23);
    call {:si_unique_call 913} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} sg_remove_scat($p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i26 := $ashr.i32($i23, 1);
    call {:si_unique_call 915} {:cexpr "req_size"} boogie_si_record_i32($i26);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i26, 2048);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i26;
    goto $bb12_dummy;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i23 := 4096;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.2, $p11);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.2, $p15);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.2, $p17);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p14, $p20, .str.55, $i1);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4125;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 385722);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_50: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 917} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 918} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 920} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} vslice_dummy_var_50 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 921} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 923} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 926} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} warn_slowpath_null(.str.5, 47);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv___module_get_11: ref;

axiom ldv___module_get_11 == $sub.ref(0, 386754);

procedure ldv___module_get_11($p0: ref);
  free requires assertsPassed;
  modifies $M.32;



implementation ldv___module_get_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} ldv_module_get($p0);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_get: ref;

axiom ldv_module_get == $sub.ref(0, 387786);

procedure ldv_module_get($p0: ref);
  free requires assertsPassed;
  modifies $M.32;



implementation ldv_module_get($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i3 := $M.32;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $M.32 := $i4;
    call {:si_unique_call 929} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i4);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sg_build_indirect: ref;

axiom sg_build_indirect == $sub.ref(0, 388818);

procedure sg_build_indirect($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.2;



implementation sg_build_indirect($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i55: i1;
  var $i56: i8;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i54: i32;
  var $i62: i64;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i70: i32;
  var $i71: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i78: i32;
  var $i79: i32;
  var $i129: i1;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var $i137: i16;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i1;
  var $i159: i1;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $i160: i32;
  var $i168: i32;
  var $i169: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} {:cexpr "sg_build_indirect:arg:buff_size"} boogie_si_record_i32($i2);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 392)), $mul.ref(256, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    call {:si_unique_call 931} {:cexpr "sg_tablesize"} boogie_si_record_i32($i6);
    call {:si_unique_call 932} {:cexpr "sg_build_indirect:arg:blk_size"} boogie_si_record_i32($i2);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 511);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, $sub.i32(0, 512));
    call {:si_unique_call 934} {:cexpr "blk_size"} boogie_si_record_i32($i13);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 3);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 7);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 4);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 936} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i32 := sg_build_sgat($p0, $p1, $i6);
    call {:si_unique_call 939} {:cexpr "mx_sc_elems"} boogie_si_record_i32($i32);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $M.34;
    call {:si_unique_call 940} {:cexpr "num"} boogie_si_record_i32($i34);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i35 := $M.35;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i34, $i35);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 942} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 5720)), $mul.ref(5624, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.2, $p42);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i44 := $sext.i8.i32($i43);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i47 := 16928;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i48 := capable(21);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i48);
    call {:si_unique_call 948} {:cexpr "tmp___1"} boogie_si_record_i8($i49);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i55 := capable(17);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i8($i55);
    call {:si_unique_call 951} {:cexpr "tmp___3"} boogie_si_record_i8($i56);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i56);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i47;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i54 := $i61;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i34);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i63 := __get_order($i62);
    call {:si_unique_call 953} {:cexpr "order"} boogie_si_record_i32($i63);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 12);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32(1, $i64);
    call {:si_unique_call 954} {:cexpr "ret_sz"} boogie_si_record_i32($i65);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i66 := $sgt.i32($i13, 0);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i67, $i68, $i69 := $i63, $i13, 0;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i133, $i134, $i135 := $i67, $i68, $i69;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p136, $i133);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i16($i135);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p138, $i137);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i140 := $lshr.i32($i139, 3);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 7);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i142 := $ugt.i32($i141, 5);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i143 := $zext.i1.i32($i142);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i144 := $sext.i32.i64($i143);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i145 := ldv__builtin_expect($i144, 0);
    call {:si_unique_call 968} {:cexpr "tmp___7"} boogie_si_record_i64($i145);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p157, $i13);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i158 := $sgt.i32($i134, 0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb69:
    assume $i158 == 1;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb66:
    assume $i146 == 1;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.2, $p147);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.2, $p149);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.2, $p151);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.2, $p153);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} sdev_prefix_printk.ref.ref.ref.ref.i32.i32(.str, $p150, $p156, .str.39, $i135, $i134);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb35:
    assume $i66 == 1;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i70, $i71 := $i65, $i63;
    goto $bb38;

  $bb38:
    call $i72, $i73, $i74, $i70, $i71, $i80, $i81, $i82, $i83, $p84, $p85, $p86, $i87, $p88, $p89, $p90, $i91, $p92, $p93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $i123, $i124, $i125, $i78, $i79, $i129, $i75, $i76, $i77, $i130, $i131, $i132, $i126, $i127, $i128, $i159, $p161, $p162, $i163, $p164, $p165, $i166, $i167, $i160, $i168, $i169 := sg_build_indirect_loop_$bb38($p0, $p1, $i13, $i32, $i54, $i66, $i72, $i73, $i74, $i70, $i71, $i80, $i81, $i82, $i83, $p84, $p85, $p86, $i87, $p88, $p89, $p90, $i91, $p92, $p93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $i123, $i124, $i125, $i78, $i79, $i129, $i75, $i76, $i77, $i130, $i131, $i132, $i126, $i127, $i128, $i159, $p161, $p162, $i163, $p164, $p165, $i166, $i167, $i160, $i168, $i169);
    goto $bb38_last;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i78, $i79 := 0, $i13;
    goto $bb42;

  $bb42:
    call $i80, $i81, $i82, $i83, $p84, $p85, $p86, $i87, $p88, $p89, $p90, $i91, $p92, $p93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $i123, $i124, $i125, $i78, $i79, $i129, $i130, $i131, $i132, $i126, $i127, $i128 := sg_build_indirect_loop_$bb42($p0, $p1, $i32, $i54, $i70, $i71, $i80, $i81, $i82, $i83, $p84, $p85, $p86, $i87, $p88, $p89, $p90, $i91, $p92, $p93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $i123, $i124, $i125, $i78, $i79, $i129, $i130, $i131, $i132, $i126, $i127, $i128);
    goto $bb42_last;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i78, $i32);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i130, $i131, $i132 := $i71, $i79, $i78;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i133, $i134, $i135 := $i130, $i131, $i132;
    goto $bb64;

  $bb62:
    assume $i129 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i80 := $M.35;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, $i79);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i81 == 1);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i83 := $i79;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p84 := alloc_pages($i54, $i71);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.2, $p85);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i78);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p86, $mul.ref($i87, 8));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p88, $p84);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.2, $p89);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i78);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p90, $mul.ref($i91, 8));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.2, $p92);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i94, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i96 := $i78;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i97 := $M.35;
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i83, $i97);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i106 := $lshr.i32($i105, 3);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 7);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i108 := $ugt.i32($i107, 5);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i32($i108);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i109);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 963} {:cexpr "tmp___6"} boogie_si_record_i64($i111);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i78, 1);
    call {:si_unique_call 965} {:cexpr "k"} boogie_si_record_i32($i123);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i124 := $sub.i32($i79, $i70);
    call {:si_unique_call 966} {:cexpr "rem_sz"} boogie_si_record_i32($i124);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i125 := $sgt.i32($i124, 0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i126, $i127, $i128 := $i71, $i124, $i123;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i133, $i134, $i135 := $i126, $i127, $i128;
    goto $bb64;

  $bb60:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i78, $i79 := $i123, $i124;
    goto $bb60_dummy;

  $bb57:
    assume $i112 == 1;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.2, $p113);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.2, $p115);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.2, $p117);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.2, $p119);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} sdev_prefix_printk.ref.ref.ref.ref.i32.i32.i32(.str, $p116, $p122, .str.38, $i78, $i83, $i70);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb51:
    assume $i98 == 1;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i99 := $M.35;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i100 := $sgt.i32($i70, $i99);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i101 := $zext.i1.i32($i100);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i101);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $i103 := ldv__builtin_expect($i102, 0);
    call {:si_unique_call 959} {:cexpr "tmp___5"} boogie_si_record_i64($i103);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i104 == 1;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.34 := $i70;
    call {:si_unique_call 960} {:cexpr "scatter_elem_sz"} boogie_si_record_i32($i70);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.35 := $i70;
    call {:si_unique_call 961} {:cexpr "scatter_elem_sz_prev"} boogie_si_record_i32($i70);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb47:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i159 := $slt.i32(0, $i96);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i168 := $sub.i32($i71, 1);
    call {:si_unique_call 972} {:cexpr "order"} boogie_si_record_i32($i168);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i169 := $sge.i32($i168, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i72 := $i168;
    assume true;
    goto $bb39, $bb80;

  $bb80:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb39:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, 12);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i74 := $shl.i32(1, $i73);
    call {:si_unique_call 956} {:cexpr "ret_sz"} boogie_si_record_i32($i74);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i75, $i76, $i77 := $i72, $i13, 0;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i67, $i68, $i69 := $i75, $i76, $i77;
    goto $bb37;

  $bb40:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i70, $i71 := $i74, $i72;
    goto $bb40_dummy;

  $bb72:
    assume $i159 == 1;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i160 := 0;
    goto $bb75;

  $bb75:
    call $p161, $p162, $i163, $p164, $p165, $i166, $i167, $i160 := sg_build_indirect_loop_$bb75($p0, $i71, $i96, $p161, $p162, $i163, $p164, $p165, $i166, $i167, $i160);
    goto $bb75_last;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.2, $p161);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i160);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p162, $mul.ref($i163, 8));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.2, $p164);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} __free_pages($p165, $i71);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i160, 1);
    call {:si_unique_call 971} {:cexpr "i"} boogie_si_record_i32($i166);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i167 := $slt.i32($i166, $i96);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i167 == 1);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb77:
    assume $i167 == 1;
    assume {:verifier.code 0} true;
    $i160 := $i166;
    goto $bb77_dummy;

  $bb44:
    assume $i81 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i82 := $M.35;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb46;

  $bb32:
    assume $i59 == 1;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i47, 32768);
    call {:si_unique_call 955} {:cexpr "gfp_mask"} boogie_si_record_i32($i60);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb34;

  $bb29:
    assume $i57 == 1;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb31;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i47, 32768);
    call {:si_unique_call 949} {:cexpr "gfp_mask"} boogie_si_record_i32($i53);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb28;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb25;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i46 := $or.i32(16928, 1);
    call {:si_unique_call 946} {:cexpr "gfp_mask"} boogie_si_record_i32($i46);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb22;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i41 := $ule.i32($i34, 4095);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $M.35 := $i34;
    call {:si_unique_call 945} {:cexpr "scatter_elem_sz_prev"} boogie_si_record_i32($i34);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $M.34 := 4096;
    call {:si_unique_call 943} {:cexpr "scatter_elem_sz"} boogie_si_record_i32(4096);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.35 := 4096;
    call {:si_unique_call 944} {:cexpr "scatter_elem_sz_prev"} boogie_si_record_i32(4096);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i8 := $i32;
    goto $bb3;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.2, $p22);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.2, $p24);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.2, $p26);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.2, $p28);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} sdev_prefix_printk.ref.ref.ref.ref.i32.i32(.str, $p25, $p31, .str.37, $i2, $i13);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i2, 1);
    call {:si_unique_call 933} {:cexpr "blk_size"} boogie_si_record_i32($i10);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb77_dummy:
    assume false;
    return;

  $bb75_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4418;

  $bb60_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4306;

  $bb40_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4298;
}



const sg_build_sgat: ref;

axiom sg_build_sgat == $sub.ref(0, 389850);

procedure sg_build_sgat($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_build_sgat($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} {:cexpr "sg_build_sgat:arg:tablesize"} boogie_si_record_i32($i2);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i2, 8);
    call {:si_unique_call 974} {:cexpr "sg_bufflen"} boogie_si_record_i32($i3);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $p5 := kzalloc($i4, 544);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, $p5);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p13, $i3);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i12 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;
}



const __get_order: ref;

axiom __get_order == $sub.ref(0, 390882);

procedure __get_order($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __get_order($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} {:cexpr "__get_order:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 1);
    call {:si_unique_call 977} {:cexpr "size"} boogie_si_record_i64($i1);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i64($i1, 12);
    call {:si_unique_call 978} {:cexpr "size"} boogie_si_record_i64($i2);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i3 := fls64($i2);
    call {:si_unique_call 980} {:cexpr "order"} boogie_si_record_i32($i3);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 391914);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} {:cexpr "alloc_pages:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 982} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p2 := alloc_pages_current($i0, $i1);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 392946);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} {:cexpr "alloc_pages_current:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 985} {:cexpr "alloc_pages_current:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $p2 := external_alloc();
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const fls64: ref;

axiom fls64 == $sub.ref(0, 393978);

procedure fls64($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fls64($i0: i64) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} {:cexpr "fls64:arg:x"} boogie_si_record_i64($i0);
    call {:si_unique_call 988} $i1 := devirtbounce.13(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 989} {:cexpr "bitpos"} boogie_si_record_i32($i1);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const queue_max_sectors: ref;

axiom queue_max_sectors == $sub.ref(0, 395010);

procedure queue_max_sectors($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation queue_max_sectors($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(24, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.2, $p2);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 396042);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 397074);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 991} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 398106);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 992} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 993} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 994} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 399138);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 400170);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 401202);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i0 := current_top_of_stack();
    call {:si_unique_call 996} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 32768);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __chk_range_not_ok: ref;

axiom __chk_range_not_ok == $sub.ref(0, 402234);

procedure __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1)
{
  var $i3: i64;
  var $i4: i1;
  var $i6: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} {:cexpr "__chk_range_not_ok:arg:addr"} boogie_si_record_i64($i0);
    call {:si_unique_call 998} {:cexpr "__chk_range_not_ok:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 999} {:cexpr "__chk_range_not_ok:arg:limit"} boogie_si_record_i64($i2);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i0, $i1);
    call {:si_unique_call 1000} {:cexpr "addr"} boogie_si_record_i64($i3);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i4 := $ult.i64($i3, $i1);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64($i3, $i2);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const sg_new_write: ref;

axiom sg_new_write == $sub.ref(0, 403266);

procedure sg_new_write($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32, $i5: i32, $i6: i32, $p7: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.23, $CurrAddr, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.51;



implementation sg_new_write($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32, $i5: i32, $i6: i32, $p7: ref) returns ($r: i64)
{
  var $p8: ref;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i72: i32;
  var $i73: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $i79: i1;
  var $i80: i64;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $i100: i8;
  var $i101: i64;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $i106: i8;
  var $i107: i1;
  var $i108: i32;
  var $i109: i64;
  var $i110: i64;
  var $i111: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $i10: i64;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $p8 := $alloc($mul.ref(252, $zext.i32.i64(1)));
    call {:si_unique_call 1002} {:cexpr "sg_new_write:arg:count"} boogie_si_record_i64($i3);
    call {:si_unique_call 1003} {:cexpr "sg_new_write:arg:blocking"} boogie_si_record_i32($i4);
    call {:si_unique_call 1004} {:cexpr "sg_new_write:arg:read_only"} boogie_si_record_i32($i5);
    call {:si_unique_call 1005} {:cexpr "sg_new_write:arg:sg_io_owned"} boogie_si_record_i32($i6);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i9 := $ule.i64($i3, 87);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $p11 := current_thread_info();
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p2);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.2, $p14);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $i16 := __chk_range_not_ok($i12, $i3, $i15);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 1008} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i21 := ldv__builtin_expect($i20, 1);
    call {:si_unique_call 1010} {:cexpr "tmp___2"} boogie_si_record_i64($i21);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(5626, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p23, 1);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $p24 := sg_add_request($p0);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i6);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p46, $i45);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i49 := __copy_from_user($p48, $p2, 88);
    call {:si_unique_call 1016} {:cexpr "tmp___4"} boogie_si_record_i32($i49);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p52 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.2, $p52);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 83);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p56 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(44, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.2, $p56);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 4);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(40, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.2, $p76);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i78 := msecs_to_jiffies($i77);
    call {:si_unique_call 1025} {:cexpr "ul_timeout"} boogie_si_record_i64($i78);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i79 := $ult.i64(2147483647, $i78);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i79 == 1);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i32($i80);
    call {:si_unique_call 1026} {:cexpr "timeout"} boogie_si_record_i32($i81);
    $p82 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.2, $p82);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i84, 0);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i85 == 1);
    $p86 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.2, $p86);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i89 := $ule.i32($i88, 5);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i89 == 1);
    $p90 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.2, $p90);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i93 := $ugt.i32($i92, 252);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $p95 := current_thread_info();
    $p96 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.2, $p96);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    $p99 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.2, $p99);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i64($i100);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p95, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.2, $p103);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i105 := __chk_range_not_ok($i98, $i101, $i104);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i8($i105);
    call {:si_unique_call 1030} {:cexpr "tmp___7"} boogie_si_record_i8($i106);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i106);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := 1;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i108);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $i110 := ldv__builtin_expect($i109, 1);
    call {:si_unique_call 1032} {:cexpr "tmp___9"} boogie_si_record_i64($i110);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i110, 0);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p8);
    $p114 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.2, $p114);
    $p116 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.2, $p116);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i119 := __copy_from_user($p113, $p115, $i118);
    call {:si_unique_call 1035} {:cexpr "tmp___10"} boogie_si_record_i32($i119);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i5, 0);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p8);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $i128 := sg_common_write($p0, $p24, $p127, $i81, $i4);
    call {:si_unique_call 1041} {:cexpr "k"} boogie_si_record_i32($i128);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i128, 0);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p7);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb64:
    assume $i132 == 1;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p7, $p24);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume $i129 == 1;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i128);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i10 := $i130;
    goto $bb3;

  $bb55:
    assume $i122 == 1;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p8);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i124 := sg_allow_access($p1, $p123);
    call {:si_unique_call 1038} {:cexpr "tmp___11"} boogie_si_record_i32($i124);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume $i125 == 1;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_59 := sg_remove_request($p0, $p24);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 1);
    goto $bb3;

  $bb52:
    assume $i120 == 1;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} vslice_dummy_var_58 := sg_remove_request($p0, $p24);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 14);
    goto $bb3;

  $bb49:
    assume $i111 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_57 := sg_remove_request($p0, $p24);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 14);
    goto $bb3;

  $bb46:
    assume $i107 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i108 := 0;
    goto $bb48;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} vslice_dummy_var_56 := sg_remove_request($p0, $p24);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 90);
    goto $bb3;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb39;

  $bb35:
    assume $i79 == 1;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i80 := 2147483647;
    goto $bb37;

  $bb23:
    assume $i59 == 1;
    $p60 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.2, $p60);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.2, $p63);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i65 := $ugt.i32($i61, $i64);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $p67 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(44, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.2, $p67);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 1);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i72 := sg_res_in_use($p0);
    call {:si_unique_call 1022} {:cexpr "tmp___5"} boogie_si_record_i32($i72);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i73 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_55 := sg_remove_request($p0, $p24);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 16);
    goto $bb3;

  $bb28:
    assume $i70 == 1;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} vslice_dummy_var_54 := sg_remove_request($p0, $p24);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 22);
    goto $bb3;

  $bb25:
    assume $i65 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_53 := sg_remove_request($p0, $p24);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 12);
    goto $bb3;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_52 := sg_remove_request($p0, $p24);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 38);
    goto $bb3;

  $bb17:
    assume $i50 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_51 := sg_remove_request($p0, $p24);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 14);
    goto $bb3;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i32($i27, 3);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 7);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i29, 1);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 1013} {:cexpr "tmp___3"} boogie_si_record_i64($i33);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 33);
    goto $bb3;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.2, $p35);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.2, $p37);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.2, $p39);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.2, $p41);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} sdev_prefix_printk.ref.ref.ref.ref(.str, $p38, $p44, .str.31);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 14);
    goto $bb3;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 22);
    goto $bb3;
}



const srp_done: ref;

axiom srp_done == $sub.ref(0, 404298);

procedure srp_done($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation srp_done($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i3 := _raw_read_lock_irqsave($p2);
    call {:si_unique_call 1043} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.2, $p4);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    call {:si_unique_call 1044} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} _raw_read_unlock_irqrestore($p7, $i3);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const _raw_write_lock_irq: ref;

axiom _raw_write_lock_irq == $sub.ref(0, 405330);

procedure _raw_write_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_write_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    return;
}



const _raw_write_unlock_irq: ref;

axiom _raw_write_unlock_irq == $sub.ref(0, 406362);

procedure _raw_write_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_write_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    return;
}



const sg_new_read: ref;

axiom sg_new_read == $sub.ref(0, 407394);

procedure sg_new_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_new_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i30: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $i6: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i64;
  var $i73: i1;
  var $i74: i64;
  var $i75: i64;
  var $i72: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} {:cexpr "sg_new_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i5 := $ule.i64($i2, 87);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(67, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p7, 0);
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(9, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.2, $p8);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p50 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(65, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.2, $p50);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i53 == 1);
    $p54 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(68, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.2, $p54);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    $p58 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(70, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.2, $p58);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p4);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i67 := copy_to_user($p1, $p66, 88);
    call {:si_unique_call 1053} {:cexpr "tmp___0"} boogie_si_record_i64($i67);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i69 := sg_finish_rem_req($p3);
    call {:si_unique_call 1048} {:cexpr "err2"} boogie_si_record_i32($i69);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i6, 0);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i70 == 1);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i69, 0);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i73 == 1);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i75 := $i2;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i72 := $i75;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $r := $i72;
    return;

  $bb40:
    assume $i73 == 1;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i69);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i75 := $i74;
    goto $bb42;

  $bb37:
    assume $i70 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i6);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb39;

  $bb34:
    assume $i68 == 1;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb27;

  $bb27:
    $p62 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(80, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.2, $p62);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, 1);
    $p65 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(80, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p65, $i64);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb27;

  $bb5:
    assume $i11 == 1;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb8:
    assume $i15 == 1;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(65, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.2, $p16);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i20 == 1);
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(70, 1));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.2, $p21);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 8);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb11;

  $bb11:
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(9, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.2, $p26);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32(96, $i28);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    $p31 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(9, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.2, $p31);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i30 := $i33;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(136, 1)), $mul.ref(7, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.2, $p35);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 8);
    call {:si_unique_call 1049} {:cexpr "len"} boogie_si_record_i32($i38);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i30, $i38);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.2, $p41);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(136, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i40);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i46 := copy_to_user($p42, $p44, $i45);
    call {:si_unique_call 1051} {:cexpr "tmp"} boogie_si_record_i64($i46);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i40);
    $p49 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(67, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p49, $i48);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i47 == 1;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i40 := $i30;
    goto $bb20;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i30 := 96;
    goto $bb17;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 408426);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    return;
}



const sg_res_in_use: ref;

axiom sg_res_in_use == $sub.ref(0, 409458);

procedure sg_res_in_use($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sg_res_in_use($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p8: ref;
  var $p19: ref;
  var $p7: ref;
  var $p14: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i2 := _raw_read_lock_irqsave($p1);
    call {:si_unique_call 1056} {:cexpr "iflags"} boogie_si_record_i64($i2);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p7 := $p4;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $p7;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} _raw_read_unlock_irqrestore($p20, $i2);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p14);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb4;

  $bb4:
    call $p9, $i10, $i11, $i12, $p13, $p15, $p16, $i17, $i18, $p8, $p19 := sg_res_in_use_loop_$bb4($p9, $i10, $i11, $i12, $p13, $p15, $p16, $i17, $i18, $p8, $p19);
    goto $bb4_last;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 336)), $mul.ref(232, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.2, $p9);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p13 := $p8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.2, $p15);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p19 := $p16;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p7 := $p19;
    goto $bb3;

  $bb10:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p16;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4812;
}



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 410490);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation jiffies_to_msecs($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1058} {:cexpr "jiffies_to_msecs:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1059} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1060} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __copy_to_user: ref;

axiom __copy_to_user == $sub.ref(0, 411522);

procedure __copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} {:cexpr "__copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} __might_fault(.str.30, 147);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i3 := __copy_to_user_nocheck($p0, $p1, $i2);
    call {:si_unique_call 1064} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 412554);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1067} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1068} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} __might_fault(.str.46, 697);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1071} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 1073} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const sg_allow_access: ref;

axiom sg_allow_access == $sub.ref(0, 413586);

procedure sg_allow_access($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sg_allow_access($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3496)), $mul.ref(232, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.2, $p9);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 6);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(132, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 2);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i17 := blk_verify_command($p1, $i16);
    call {:si_unique_call 1076} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;
}



const sg_scsi_ioctl: ref;

axiom sg_scsi_ioctl == $sub.ref(0, 414618);

procedure sg_scsi_ioctl($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sg_scsi_ioctl($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1077} {:cexpr "sg_scsi_ioctl:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1078} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1079} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const blk_trace_setup: ref;

axiom blk_trace_setup == $sub.ref(0, 415650);

procedure blk_trace_setup($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_trace_setup($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1080} {:cexpr "blk_trace_setup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1081} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1082} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const blk_trace_startstop: ref;

axiom blk_trace_startstop == $sub.ref(0, 416682);

procedure blk_trace_startstop($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation blk_trace_startstop($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1083} {:cexpr "blk_trace_startstop:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1084} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1085} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const blk_trace_remove: ref;

axiom blk_trace_remove == $sub.ref(0, 417714);

procedure blk_trace_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_trace_remove($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1086} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1087} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const scsi_ioctl_block_when_processing_errors: ref;

axiom scsi_ioctl_block_when_processing_errors == $sub.ref(0, 418746);

procedure scsi_ioctl_block_when_processing_errors($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_ioctl_block_when_processing_errors($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1088} {:cexpr "scsi_ioctl_block_when_processing_errors:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1089} {:cexpr "scsi_ioctl_block_when_processing_errors:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1090} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1091} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scsi_ioctl: ref;

axiom scsi_ioctl == $sub.ref(0, 419778);

procedure scsi_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1092} {:cexpr "scsi_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1093} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const blk_verify_command: ref;

axiom blk_verify_command == $sub.ref(0, 420810);

procedure blk_verify_command($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation blk_verify_command($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1095} {:cexpr "blk_verify_command:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1096} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1097} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 421842);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 422874);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1098} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1099} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1100} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 423906);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    return;
}



const __copy_to_user_nocheck: ref;

axiom __copy_to_user_nocheck == $sub.ref(0, 424938);

procedure __copy_to_user_nocheck($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __copy_to_user_nocheck($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} {:cexpr "__copy_to_user_nocheck:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i3 := copy_user_generic($p0, $p1, $i2);
    call {:si_unique_call 1103} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const copy_user_generic: ref;

axiom copy_user_generic == $sub.ref(0, 425970);

procedure copy_user_generic($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation copy_user_generic($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} {:cexpr "copy_user_generic:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1105} $p3 := devirtbounce.14(0, copy_user_generic_unrolled, copy_user_generic_string, copy_user_enhanced_fast_string, $p0, $p1, $i2);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i4 := $extractvalue($p3, 0);
    call {:si_unique_call 1106} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const copy_user_generic_unrolled: ref;

axiom copy_user_generic_unrolled == $sub.ref(0, 427002);

procedure copy_user_generic_unrolled($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const copy_user_generic_string: ref;

axiom copy_user_generic_string == $sub.ref(0, 428034);

procedure copy_user_generic_string($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const copy_user_enhanced_fast_string: ref;

axiom copy_user_enhanced_fast_string == $sub.ref(0, 429066);

procedure copy_user_enhanced_fast_string($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 430098);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1109} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1110} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} __might_fault(.str.46, 732);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1113} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 1115} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 431130);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1117} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1118} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1119} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 432162);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    return;
}



const sg_add_request: ref;

axiom sg_add_request == $sub.ref(0, 433194);

procedure sg_add_request($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_add_request($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $p23: ref;
  var $p26: ref;
  var $i24: i32;
  var $p25: ref;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p36: ref;
  var $p43: ref;
  var $p35: ref;
  var $p44: ref;
  var $p45: ref;
  var $p17: ref;
  var $p12: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $i100: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $i130: i64;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $i136: i64;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $i142: i64;
  var $p27: ref;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(248, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i4 := _raw_write_lock_irqsave($p3);
    call {:si_unique_call 1121} {:cexpr "iflags"} boogie_si_record_i64($i4);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(5626, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.2, $p13);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.2, $p18);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i22, $p23 := 0, $p1;
    assume {:branchcond $i21} true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p2, $mul.ref(1, 336));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(1, 336)), $mul.ref(8, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.2, $p54);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i22, $p23 := 1, $p26;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $i58 := $add.i64(1, 1);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p2, $mul.ref($i58, 336));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref($i58, 336)), $mul.ref(8, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.2, $p60);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i22, $p23 := 2, $p59;
    assume {:branchcond $i63} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    $i64 := $add.i64($i58, 1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p2, $mul.ref($i64, 336));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref($i64, 336)), $mul.ref(8, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.2, $p66);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i22, $p23 := 3, $p65;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $i70 := $add.i64($i64, 1);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p2, $mul.ref($i70, 336));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref($i70, 336)), $mul.ref(8, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.2, $p72);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i22, $p23 := 4, $p71;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    $i76 := $add.i64($i70, 1);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p2, $mul.ref($i76, 336));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref($i76, 336)), $mul.ref(8, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.2, $p78);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i22, $p23 := 5, $p77;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    $i82 := $add.i64($i76, 1);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p2, $mul.ref($i82, 336));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref($i82, 336)), $mul.ref(8, 1));
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.2, $p84);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i22, $p23 := 6, $p83;
    assume {:branchcond $i87} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    $i88 := $add.i64($i82, 1);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p2, $mul.ref($i88, 336));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref($i88, 336)), $mul.ref(8, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.2, $p90);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i22, $p23 := 7, $p89;
    assume {:branchcond $i93} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    $i94 := $add.i64($i88, 1);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p2, $mul.ref($i94, 336));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref($i94, 336)), $mul.ref(8, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.2, $p96);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i98, 0);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i22, $p23 := 8, $p95;
    assume {:branchcond $i99} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    $i100 := $add.i64($i94, 1);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p2, $mul.ref($i100, 336));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref($i100, 336)), $mul.ref(8, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.2, $p102);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i22, $p23 := 9, $p101;
    assume {:branchcond $i105} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    $i106 := $add.i64($i100, 1);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p2, $mul.ref($i106, 336));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p2, $mul.ref($i106, 336)), $mul.ref(8, 1));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.2, $p108);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i110, 0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i22, $p23 := 10, $p107;
    assume {:branchcond $i111} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    $i112 := $add.i64($i106, 1);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p2, $mul.ref($i112, 336));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref($i112, 336)), $mul.ref(8, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.2, $p114);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i117 := $eq.i64($i116, 0);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i22, $p23 := 11, $p113;
    assume {:branchcond $i117} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    $i118 := $add.i64($i112, 1);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p2, $mul.ref($i118, 336));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p2, $mul.ref($i118, 336)), $mul.ref(8, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.2, $p120);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i123 := $eq.i64($i122, 0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i22, $p23 := 12, $p119;
    assume {:branchcond $i123} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    $i124 := $add.i64($i118, 1);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p2, $mul.ref($i124, 336));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref($i124, 336)), $mul.ref(8, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.2, $p126);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i128, 0);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i22, $p23 := 13, $p125;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    $i130 := $add.i64($i124, 1);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p2, $mul.ref($i130, 336));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p2, $mul.ref($i130, 336)), $mul.ref(8, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.2, $p132);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i135 := $eq.i64($i134, 0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i22, $p23 := 14, $p131;
    assume {:branchcond $i135} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    $i136 := $add.i64($i130, 1);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p2, $mul.ref($i136, 336));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p2, $mul.ref($i136, 336)), $mul.ref(8, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.2, $p138);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i141 := $eq.i64($i140, 0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i22, $p23 := 15, $p137;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    $i142 := $add.i64($i136, 1);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref($i142, 336));
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i24, $p25 := 16, $p27;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i24, 15);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $p45 := $0.ref;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p17 := $p45;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p12 := $p17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p12);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} _raw_write_unlock_irqrestore($p53, $i4);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb27:
    assume $i47 == 1;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p12, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, $0.ref);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.2, jiffies);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i50 := jiffies_to_msecs($i49);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p52, $i50);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p25);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.2;
    call {:si_unique_call 1123} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p29, 0, 336, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_18;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p25, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p30, $p0);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.2, $p31);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p35 := $p6;
    assume {:branchcond $i34} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p35, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p44, $p25);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p45 := $p25;
    goto $bb26;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p36 := $p6;
    goto $bb21;

  $bb21:
    call $p37, $p38, $p39, $p40, $i41, $i42, $p36, $p43 := sg_add_request_loop_$bb21($p37, $p38, $p39, $p40, $i41, $i42, $p36, $p43);
    goto $bb21_last;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.2, $p37);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.2, $p39);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p43 := $p38;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p35 := $p43;
    goto $bb20;

  $bb23:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p36 := $p38;
    goto $bb23_dummy;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i24, $p25 := $i22, $p23;
    goto $bb12;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb10;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb10;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb10;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb10;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb10;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb10;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb10;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb10;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb10;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb10;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb10;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb10;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb10;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb10;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.2;
    call {:si_unique_call 1122} cmdloc_dummy_var_16 := $memset.i8(cmdloc_dummy_var_15, $p9, 0, 336, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_16;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, $p0);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, $p1);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p12 := $p1;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5014;
}



const __copy_from_user: ref;

axiom __copy_from_user == $sub.ref(0, 434226);

procedure __copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} {:cexpr "__copy_from_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __might_fault(.str.30, 97);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i3 := __copy_from_user_nocheck($p0, $p1, $i2);
    call {:si_unique_call 1129} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 435258);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 1132} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sg_common_write: ref;

axiom sg_common_write == $sub.ref(0, 436290);

procedure sg_common_write($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.51, $CurrAddr;



implementation sg_common_write($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i8: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i73: i64;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i62: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} {:cexpr "sg_common_write:arg:timeout"} boogie_si_record_i32($i3);
    call {:si_unique_call 1134} {:cexpr "sg_common_write:arg:blocking"} boogie_si_record_i32($i4);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.2, $p2);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(29, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p10, $i8);
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(64, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p11, 0);
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(65, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p12, 0);
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(66, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p13, 0);
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(80, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p14, 0);
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(68, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p15, 0);
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(70, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p16, 0);
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(72, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p17, 0);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 3);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 7);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 4);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1136} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i41 := sg_start_req($p1, $p2);
    call {:si_unique_call 1139} {:cexpr "k"} boogie_si_record_i32($i41);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i64 := atomic_read($p63);
    call {:si_unique_call 1145} {:cexpr "tmp___1"} boogie_si_record_i32($i64);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.2, jiffies);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i74 := jiffies_to_msecs($i73);
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p75, $i74);
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.2, $p76);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i83 := 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.2, $p84);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 368)), $mul.ref(336, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p86, $i3);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(5632, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} kref_get($p87);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.2, $p88);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.2, $p90);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.2, $p92);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.2, $p94);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} blk_execute_rq_nowait($p91, $p93, $p95, $i83, sg_rq_end_io);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $r := $i62;
    return;

  $bb17:
    assume $i78 == 1;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(44, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.2, $p79);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 16);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb19;

  $bb20:
    assume $i82 == 1;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb22;

  $bb11:
    assume $i65 == 1;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(248, 1));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.2, $p66);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} vslice_dummy_var_61 := sg_finish_rem_req($p1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 19);
    goto $bb9;

  $bb13:
    assume $i69 == 1;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.2, $p70);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} blk_end_request_all($p71, $sub.i32(0, 5));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i42 == 1;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i44 := $lshr.i32($i43, 3);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 7);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i32($i45, 1);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 1141} {:cexpr "tmp___0"} boogie_si_record_i64($i49);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} vslice_dummy_var_60 := sg_finish_rem_req($p1);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i62 := $i41;
    goto $bb9;

  $bb6:
    assume $i50 == 1;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.2, $p51);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.2, $p53);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.2, $p55);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.2, $p57);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p54, $p60, .str.33, $i41);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.2, $p26);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.2, $p28);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.2, $p30);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.2, $p32);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.2, $p2);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.2, $p38);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} sdev_prefix_printk.ref.ref.ref.ref.i32.i32(.str, $p29, $p35, .str.32, $i37, $i40);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sg_start_req: ref;

axiom sg_start_req == $sub.ref(0, 437322);

procedure sg_start_req($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.51, $CurrAddr;



implementation sg_start_req($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i1;
  var $i60: i8;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i32;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i64;
  var $p75: ref;
  var $i76: i8;
  var $i77: i16;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i1;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $i130: i16;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $i137: i1;
  var $i138: i32;
  var $p139: ref;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i64;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i64;
  var $i161: i32;
  var $i155: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i64;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $p172: ref;
  var $i55: i32;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    call {:si_unique_call 1154} {:cexpr "dxfer_len"} boogie_si_record_i32($i9);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    call {:si_unique_call 1155} {:cexpr "dxfer_dir"} boogie_si_record_i32($i11);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(10, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.2, $p12);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    call {:si_unique_call 1156} {:cexpr "iov_count"} boogie_si_record_i32($i14);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.2, $p17);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.2, $p19);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, $p23);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, $sub.i32(0, 2));
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 1157} {:cexpr "rw"} boogie_si_record_i32($i26);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i32($i27, 3);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 7);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i29, 4);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 1159} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.2, $p45);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i48 := $ugt.i32($i47, 16);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $p56 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $p57 := blk_get_request($p22, $i26, 208);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $i59 := IS_ERR($p58);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i8($i59);
    call {:si_unique_call 1164} {:cexpr "tmp___2"} boogie_si_record_i8($i60);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i8.i1($i60);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} blk_rq_set_block_pc($p57);
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.2, $p65);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i68 := $ugt.i32($i67, 16);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p57, $mul.ref(0, 368)), $mul.ref(280, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.2, $p70);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.2, $p72);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i64($i73);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.2;
    cmdloc_dummy_var_20 := $M.2;
    call {:si_unique_call 1169} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p71, $p1, $i74, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_21;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.2, $p75);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i16($i76);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p57, $mul.ref(0, 368)), $mul.ref(288, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p78, $i77);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p79, $p57);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p57, $mul.ref(0, 368)), $mul.ref(352, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p81, $p0);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(136, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p57, $mul.ref(0, 368)), $mul.ref(304, 1));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p84, $p82);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p57, $mul.ref(0, 368)), $mul.ref(340, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p85, 0);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i86 := $sle.i32($i9, 0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i86 == 1);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.1, sg_allow_dio);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p113 := $p2;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i14, 0);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i143 == 1);
    $p156 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.2, $p156);
    $p158 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.2, $p158);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i160 := $zext.i32.i64($i159);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i161 := blk_rq_map_user($p22, $p57, $p113, $p157, $i160, 32);
    call {:si_unique_call 1180} {:cexpr "res"} boogie_si_record_i32($i161);
    assume {:verifier.code 0} true;
    $i155 := $i161;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i155, 0);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i55 := $i155;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb59:
    assume $i162 == 1;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p57, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.2, $p163);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(248, 1));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p165, $p164);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i166 := $p2i.ref.i64($p113);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i167 := $eq.i64($i166, 0);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume $i167 == 1;
    $p168 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(28, 1));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p168, 1);
    $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(80, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.2, $p169);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i170, 2);
    $p172 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(80, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p172, $i171);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb53:
    assume $i143 == 1;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p3, $0.ref);
    $p144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.2, $p144);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $i147 := import_iovec($i26, $p146, $i14, 0, $p3, $p4);
    call {:si_unique_call 1178} {:cexpr "res"} boogie_si_record_i32($i147);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i147, 0);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    $p149 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.2, $p149);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i151 := $zext.i32.i64($i150);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} iov_iter_truncate($p4, $i151);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i152 := blk_rq_map_user_iov($p22, $p57, $p113, $p4, 32);
    call {:si_unique_call 1183} {:cexpr "res"} boogie_si_record_i32($i152);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.42, $p3);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} kfree($p154);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i155 := $i152;
    goto $bb58;

  $bb55:
    assume $i148 == 1;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i55 := $i147;
    goto $bb8;

  $bb38:
    assume $i115 == 1;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i116 := sg_res_in_use($p6);
    call {:si_unique_call 1173} {:cexpr "tmp___4"} boogie_si_record_i32($i116);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $i121 := sg_build_indirect($p15, $p6, $i9);
    call {:si_unique_call 1175} {:cexpr "res"} boogie_si_record_i32($i121);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.2, $p123);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p113, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p125, $p124);
    $p126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.2, $p126);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p113, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p128, $i127);
    $p129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i130 := $load.i16($M.2, $p129);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i131 := $zext.i16.i32($i130);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p113, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p132, $i131);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p113, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $M.39 := $store.i64($M.39, $p133, 0);
    $p134 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.2, $p134);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p135);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i137 := $eq.i64($i136, 0);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i138 := $zext.i1.i32($i137);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p113, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p139, $i138);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i11, $sub.i32(0, 4));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i140 == 1);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p113, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p142, 0);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i140 == 1;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p113, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p141, 1);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i122 == 1;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i55 := $i121;
    goto $bb8;

  $bb40:
    assume $i117 == 1;
    $p118 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.2, $p118);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i120 := $ule.i32($i9, $i119);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb42;

  $bb43:
    assume $i120 == 1;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} sg_link_reserve($p6, $p0, $i9);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb23:
    assume $i89 == 1;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(44, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.2, $p90);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 1);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb25;

  $bb26:
    assume $i93 == 1;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i11, $sub.i32(0, 5));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb25;

  $bb28:
    assume $i94 == 1;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i14, 0);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb25;

  $bb30:
    assume $i95 == 1;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p6, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.2, $p96);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.2, $p98);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.2, $p100);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref(856, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.2, $p103);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb25;

  $bb32:
    assume $i106 == 1;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.2, $p107);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i110 := blk_rq_aligned($p22, $i109, $i9);
    call {:si_unique_call 1171} {:cexpr "tmp___3"} boogie_si_record_i32($i110);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $p112 := $p2;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p113 := $p112;
    goto $bb37;

  $bb34:
    assume $i111 == 1;
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p112 := $0.ref;
    goto $bb36;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb18;

  $bb14:
    assume $i68 == 1;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p57, $mul.ref(0, 368)), $mul.ref(280, 1));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p69, $p56);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i61 == 1;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} kfree($p56);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p57);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i63 := PTR_ERR($p62);
    call {:si_unique_call 1167} {:cexpr "tmp___1"} boogie_si_record_i64($i63);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i64.i32($i63);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i55 := $i64;
    goto $bb8;

  $bb4:
    assume $i48 == 1;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.2, $p49);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p52 := kzalloc($i51, 208);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p56 := $p52;
    goto $bb10;

  $bb6:
    assume $i54 == 1;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 12);
    goto $bb8;

  $bb1:
    assume $i34 == 1;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.2, $p35);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.2, $p37);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.2, $p39);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.2, $p41);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p38, $p44, .str.34, $i9);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const blk_end_request_all: ref;

axiom blk_end_request_all == $sub.ref(0, 438354);

procedure blk_end_request_all($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_end_request_all($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} {:cexpr "blk_end_request_all:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    return;
}



const sg_rq_end_io: ref;

axiom sg_rq_end_io == $sub.ref(0, 439386);

procedure sg_rq_end_io($p0: ref, $i1: i32);



const blk_execute_rq_nowait: ref;

axiom blk_execute_rq_nowait == $sub.ref(0, 440418);

procedure blk_execute_rq_nowait($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation blk_execute_rq_nowait($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} {:cexpr "blk_execute_rq_nowait:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    return;
}



const __scsi_print_sense: ref;

axiom __scsi_print_sense == $sub.ref(0, 441450);

procedure __scsi_print_sense($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const scsi_normalize_sense: ref;

axiom scsi_normalize_sense == $sub.ref(0, 442482);

procedure scsi_normalize_sense($p0: ref, $i1: i32, $p2: ref) returns ($r: i1);



const scsi_sense_is_deferred: ref;

axiom scsi_sense_is_deferred == $sub.ref(0, 443514);

procedure scsi_sense_is_deferred($p0: ref) returns ($r: i1);



const __blk_put_request: ref;

axiom __blk_put_request == $sub.ref(0, 444546);

procedure __blk_put_request($p0: ref, $p1: ref);



const sg_rq_end_io_usercontext: ref;

axiom sg_rq_end_io_usercontext == $sub.ref(0, 445578);

procedure sg_rq_end_io_usercontext($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation sg_rq_end_io_usercontext($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 256), 336));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 256), 336)), $mul.ref(8, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} vslice_dummy_var_62 := sg_finish_rem_req($p2);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 5720)), $mul.ref(5632, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} vslice_dummy_var_63 := kref_put($p6, sg_remove_sfp);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const blk_get_request: ref;

axiom blk_get_request == $sub.ref(0, 446610);

procedure blk_get_request($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation blk_get_request($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} {:cexpr "blk_get_request:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1190} {:cexpr "blk_get_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p3 := external_alloc();
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const blk_rq_set_block_pc: ref;

axiom blk_rq_set_block_pc == $sub.ref(0, 447642);

procedure blk_rq_set_block_pc($p0: ref);
  free requires assertsPassed;



implementation blk_rq_set_block_pc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    return;
}



const blk_rq_aligned: ref;

axiom blk_rq_aligned == $sub.ref(0, 448674);

procedure blk_rq_aligned($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_aligned($p0: ref, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i10: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} {:cexpr "blk_rq_aligned:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1193} {:cexpr "blk_rq_aligned:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i3 := queue_dma_alignment($p0);
    call {:si_unique_call 1195} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4216)), $mul.ref(3240, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i3, $i5);
    call {:si_unique_call 1196} {:cexpr "alignment"} boogie_si_record_i32($i6);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i7, $i1);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i10);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i2, $i6);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;
}



const sg_link_reserve: ref;

axiom sg_link_reserve == $sub.ref(0, 449706);

procedure sg_link_reserve($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_link_reserve($p0: ref, $p1: ref, $i2: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $i57: i1;
  var $i33: i32;
  var $i34: i32;
  var $i58: i32;
  var $i32: i32;
  var $i52: i32;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} {:cexpr "sg_link_reserve:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(232, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p5, 1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i32($i6, 3);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 7);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 4);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1199} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 1201} {:cexpr "sg_link_reserve:arg:rem"} boogie_si_record_i32($i2);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(24, 1));
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.2, $p24);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 12);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i27 := $shl.i32(1, $i26);
    call {:si_unique_call 1202} {:cexpr "num"} boogie_si_record_i32($i27);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(0, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.2, $p28);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, 0);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i32 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i52 := $i32;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(0, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.2, $p59);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i62 := $sle.i32($i61, $i52);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i62 == 1;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i64 := $lshr.i32($i63, 3);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 7);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i66 := $ugt.i32($i65, 1);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 1206} {:cexpr "tmp___0"} boogie_si_record_i64($i69);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i70 == 1;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.2, $p71);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.2, $p73);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.2, $p75);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.2, $p77);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} sdev_prefix_printk.ref.ref.ref.ref(.str, $p74, $p80, .str.36);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, 0;
    goto $bb7;

  $bb7:
    call $i35, $i36, $i53, $i54, $i55, $i56, $i57, $i33, $i34, $i58 := sg_link_reserve_loop_$bb7($i27, $p28, $i35, $i36, $i53, $i54, $i55, $i56, $i57, $i33, $i34, $i58);
    goto $bb7_last;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i35 := $sle.i32($i33, $i27);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i33, $i27);
    call {:si_unique_call 1203} {:cexpr "rem"} boogie_si_record_i32($i53);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i34, 1);
    call {:si_unique_call 1204} {:cexpr "k"} boogie_si_record_i32($i54);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.2, $p28);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, $i54);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i58 := $i54;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i32 := $i58;
    goto $bb6;

  $bb13:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i33, $i34 := $i53, $i54;
    goto $bb13_dummy;

  $bb9:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 1);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p41, $i40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(4, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, $p42);
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p44, $i43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(16, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.2, $p45);
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p47, $p46);
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p48, $i2);
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(24, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.2, $p49);
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p51, $i50);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i52 := $i36;
    goto $bb11;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.2, $p14);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.2, $p16);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.2, $p18);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.2, $p20);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p17, $p23, .str.35, $i2);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5579;
}



const import_iovec: ref;

axiom import_iovec == $sub.ref(0, 450738);

procedure import_iovec($i0: i32, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation import_iovec($i0: i32, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1208} {:cexpr "import_iovec:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1209} {:cexpr "import_iovec:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1210} {:cexpr "import_iovec:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1211} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1212} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const iov_iter_truncate: ref;

axiom iov_iter_truncate == $sub.ref(0, 451770);

procedure iov_iter_truncate($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.51;



implementation iov_iter_truncate($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} {:cexpr "iov_iter_truncate:arg:count"} boogie_si_record_i64($i1);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.51, $p2);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i64($i3, $i1);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $M.51 := $store.i64($M.51, $p5, $i1);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const blk_rq_map_user_iov: ref;

axiom blk_rq_map_user_iov == $sub.ref(0, 452802);

procedure blk_rq_map_user_iov($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_map_user_iov($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1214} {:cexpr "blk_rq_map_user_iov:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1215} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const blk_rq_map_user: ref;

axiom blk_rq_map_user == $sub.ref(0, 453834);

procedure blk_rq_map_user($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_map_user($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1217} {:cexpr "blk_rq_map_user:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 1218} {:cexpr "blk_rq_map_user:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1219} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1220} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const queue_dma_alignment: ref;

axiom queue_dma_alignment == $sub.ref(0, 454866);

procedure queue_dma_alignment($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation queue_dma_alignment($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i5 := 511;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4216)), $mul.ref(3244, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 455898);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1221} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1222} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1223} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __copy_from_user_nocheck: ref;

axiom __copy_from_user_nocheck == $sub.ref(0, 456930);

procedure __copy_from_user_nocheck($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __copy_from_user_nocheck($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} {:cexpr "__copy_from_user_nocheck:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i3 := copy_user_generic($p0, $p1, $i2);
    call {:si_unique_call 1226} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const current_top_of_stack: ref;

axiom current_top_of_stack == $sub.ref(0, 457962);

procedure current_top_of_stack() returns ($r: i64);
  free requires assertsPassed;



implementation current_top_of_stack() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i0 := devirtbounce.15(0, $add.ref($add.ref($add.ref(cpu_tss, $mul.ref(0, 8824)), $mul.ref(0, 1)), $mul.ref(8, 1)));
    call {:si_unique_call 1228} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 458994);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.2, $p11);
    call {:si_unique_call 1229} devirtbounce.16($p12, $p0, $p1, $p2);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 460026);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $p0 := devirtbounce.17(0, current_task);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 461058);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const ___ratelimit: ref;

axiom ___ratelimit == $sub.ref(0, 462090);

procedure ___ratelimit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ___ratelimit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1231} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1232} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 463122);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const sg_get_rq_mark: ref;

axiom sg_get_rq_mark == $sub.ref(0, 464154);

procedure sg_get_rq_mark($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_get_rq_mark($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p19: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p9: ref;
  var $p30: ref;
  var $p8: ref;
  var $p25: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} {:cexpr "sg_get_rq_mark:arg:pack_id"} boogie_si_record_i32($i1);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i3 := _raw_write_lock_irqsave($p2);
    call {:si_unique_call 1235} {:cexpr "iflags"} boogie_si_record_i64($i3);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.2, $p4);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p25 := $p8;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} _raw_write_unlock_irqrestore($p31, $i3);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p9 := $p5;
    goto $bb4;

  $bb4:
    call $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $p21, $i22, $i23, $p19, $p26, $p27, $i28, $i29, $p9, $p30 := sg_get_rq_mark_loop_$bb4($i1, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $p21, $i22, $i23, $p19, $p26, $p27, $i28, $i29, $p9, $p30);
    goto $bb4_last;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.2, $p10);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i12 := $sext.i8.i32($i11);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p9, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.2, $p26);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p30 := $p27;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p8 := $p30;
    goto $bb3;

  $bb18:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p9 := $p27;
    goto $bb18_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p19 := $p9;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i18 == 1);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.2, $p21);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, $i1);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p19 := $p9;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p24, 2);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p25 := $p19;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb12;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5706;
}



const sg_read_oxfer: ref;

axiom sg_read_oxfer == $sub.ref(0, 465186);

procedure sg_read_oxfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sg_read_oxfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $i41: i1;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i1;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} {:cexpr "sg_read_oxfer:arg:num_read_xfer"} boogie_si_record_i32($i2);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 3);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 7);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 4);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1239} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i27 == 1);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i2, 0);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.2, $p30);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 12);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32(1, $i32);
    call {:si_unique_call 1241} {:cexpr "num"} boogie_si_record_i32($i33);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.2, $p34);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i36, 0);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i38, $p39, $i40 := 0, $p1, $i2;
    goto $bb14;

  $bb14:
    call $i41, $i42, $p43, $i44, $p53, $p54, $i55, $p56, $p57, $p58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i38, $p39, $i40, $p69, $p70, $i71, $p72, $p73, $i74, $i75 := sg_read_oxfer_loop_$bb14($p0, $i33, $p34, $i41, $i42, $p43, $i44, $p53, $p54, $i55, $p56, $p57, $p58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i38, $p39, $i40, $p69, $p70, $i71, $p72, $p73, $i74, $i75);
    goto $bb14_last;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.2, $p69);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i38);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p70, $mul.ref($i71, 8));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.2, $p72);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i75 == 1);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb31:
    assume $i75 == 1;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i33, $i40);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i42, $p43, $i44 := $i40, $p39, $i38;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.2, $p53);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i38);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p54, $mul.ref($i55, 8));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.2, $p56);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p58 := lowmem_page_address($p57);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i59 := __copy_to_user($p39, $p58, $i33);
    call {:si_unique_call 1247} {:cexpr "tmp___3"} boogie_si_record_i32($i59);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i40, $i33);
    call {:si_unique_call 1248} {:cexpr "num_read_xfer"} boogie_si_record_i32($i61);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i62 := $sle.i32($i61, 0);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i33);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p39, $mul.ref($i63, 1));
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i38, 1);
    call {:si_unique_call 1249} {:cexpr "k"} boogie_si_record_i32($i65);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.2, $p34);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, $i65);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i68 == 1);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb29:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i38, $p39, $i40 := $i65, $p64, $i61;
    goto $bb29_dummy;

  $bb25:
    assume $i62 == 1;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume $i60 == 1;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 14);
    goto $bb9;

  $bb16:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.2, $p45);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i44);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p46, $mul.ref($i47, 8));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.2, $p48);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p50 := lowmem_page_address($p49);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i51 := __copy_to_user($p43, $p50, $i42);
    call {:si_unique_call 1244} {:cexpr "tmp___1"} boogie_si_record_i32($i51);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 14);
    goto $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb5;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.2, $p14);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.2, $p16);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.2, $p18);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.2, $p20);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.2, $p22);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} sdev_prefix_printk.ref.ref.ref.ref.i32(.str, $p17, $p25, .str.47, $i2);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5788;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 466218);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const sg_proc_seq_show_dev: ref;

axiom sg_proc_seq_show_dev == $sub.ref(0, 467250);

procedure sg_proc_seq_show_dev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sg_proc_seq_show_dev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i3 := _raw_read_lock_irqsave(sg_index_lock);
    call {:si_unique_call 1251} {:cexpr "iflags"} boogie_si_record_i64($i3);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i19 := atomic_read($p18);
    call {:si_unique_call 1255} {:cexpr "tmp___2"} boogie_si_record_i32($i19);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.2, $p22);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i24 := scsi_device_online($p23);
    call {:si_unique_call 1259} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref(0, 3496)), $mul.ref(48, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i26 := atomic_read($p25);
    call {:si_unique_call 1261} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.2, $p27);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 3832)), $mul.ref(768, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.2, $p29);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p23, $mul.ref(0, 3496)), $mul.ref(204, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p23, $mul.ref(0, 3496)), $mul.ref(200, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.2, $p33);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p23, $mul.ref(0, 3496)), $mul.ref(208, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.2, $p35);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p23, $mul.ref(0, 3496)), $mul.ref(232, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.2, $p37);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i39 := $sext.i8.i32($i38);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p23, $mul.ref(0, 3496)), $mul.ref(168, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.2, $p40);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} vslice_dummy_var_66 := seq_printf.ref.ref.i32.i32.i32.i64.i32.i32.i32.i32.i32($p0, .str.14, $i30, $i32, $i34, $i36, $i39, 1, $i42, $i26, $i24);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} _raw_read_unlock_irqrestore(sg_index_lock, $i3);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} vslice_dummy_var_65 := seq_puts($p0, .str.13);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} vslice_dummy_var_64 := seq_puts($p0, .str.13);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb5;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.18, $p6);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $p9 := sg_lookup_dev($i8);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb3;
}



const scsi_device_online: ref;

axiom scsi_device_online == $sub.ref(0, 468282);

procedure scsi_device_online($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_device_online($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i4: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3496)), $mul.ref(3488, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 6);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i4);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3496)), $mul.ref(3488, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 7);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3496)), $mul.ref(3488, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 4);
    assume {:verifier.code 0} true;
    $i4 := $i10;
    goto $bb3;
}



const sg_proc_seq_show_debug: ref;

axiom sg_proc_seq_show_debug == $sub.ref(0, 469314);

procedure sg_proc_seq_show_debug($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sg_proc_seq_show_debug($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i16;
  var $i58: i16;
  var $i59: i16;
  var $i60: i8;
  var $i61: i32;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i8;
  var $i67: i1;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $p72: ref;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i13 := _raw_read_lock_irqsave(sg_index_lock);
    call {:si_unique_call 1265} {:cexpr "iflags"} boogie_si_record_i64($i13);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p2);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $p20 := $0.ref;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(280, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} _raw_read_lock($p23);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(264, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i25 := list_empty($p24);
    call {:si_unique_call 1270} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(280, 1));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} _raw_read_unlock($p72);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} _raw_read_unlock_irqrestore(sg_index_lock, $i13);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.2, $p27);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} vslice_dummy_var_68 := seq_printf.ref.ref.ref($p0, .str.60, $p30);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $i33 := atomic_read($p32);
    call {:si_unique_call 1273} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.2, $p36);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(256, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.2, $p63);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.2, $p65);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1($i66);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.2, $p69);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} vslice_dummy_var_70 := seq_printf.ref.ref.i32.i32.i32($p0, .str.63, $i64, $i68, $i70);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} sg_proc_debug_helper($p0, $p20);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p20, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.2, $p40);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.2, $p42);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 3832)), $mul.ref(768, 1));
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.2, $p44);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p41, $mul.ref(0, 3496)), $mul.ref(204, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.2, $p46);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p41, $mul.ref(0, 3496)), $mul.ref(200, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.2, $p48);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p41, $mul.ref(0, 3496)), $mul.ref(208, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.2, $p50);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p41, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.2, $p52);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 3832)), $mul.ref(504, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.2, $p54);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 336)), $mul.ref(264, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.2, $p56);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i58 := $lshr.i16($i57, 6);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i59 := $and.i16($i58, 1);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i16.i8($i59);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} vslice_dummy_var_71 := seq_printf.ref.ref.i32.i32.i32.i64.i32($p0, .str.62, $i45, $i47, $i49, $i51, $i61);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} vslice_dummy_var_69 := seq_puts($p0, .str.61);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.18, $p16);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p19 := sg_lookup_dev($i18);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.18, $p5);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.52, $p8);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, sg_big_buff);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} vslice_dummy_var_67 := seq_printf.ref.ref.i32.i32($p0, .str.59, $i10, $i11);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const _raw_read_lock: ref;

axiom _raw_read_lock == $sub.ref(0, 470346);

procedure _raw_read_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_read_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 471378);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const sg_proc_debug_helper: ref;

axiom sg_proc_debug_helper == $sub.ref(0, 472410);

procedure sg_proc_debug_helper($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sg_proc_debug_helper($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p62: ref;
  var $p70: ref;
  var $i71: i32;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $i89: i32;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i98: i64;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $p104: ref;
  var $i105: i32;
  var $i106: i64;
  var $i107: i32;
  var $i103: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $i45: i32;
  var $p46: ref;
  var $i126: i32;
  var $i44: i32;
  var $i127: i1;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $i11: i32;
  var $p12: ref;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 392)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 5720)), $mul.ref(0, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 392)), $mul.ref(264, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i11, $p12 := 0, $p4;
    goto $bb4;

  $bb4:
    call $i13, $p14, $p15, $i16, $i17, $i18, $p20, $i21, $p23, $i24, $i25, $p26, $i27, $i28, $p30, $i31, $i32, $p33, $i34, $i35, $p36, $i37, $i38, $p40, $p41, $i42, $i43, $p48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $p63, $i64, $i65, $i66, $p67, $p62, $p70, $i71, $p73, $i74, $i75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $p84, $p85, $p88, $i89, $p91, $i92, $i93, $i94, $p95, $i96, $i98, $i99, $i100, $p101, $i102, $p104, $i105, $i106, $i107, $i103, $p108, $i109, $i110, $p111, $i112, $i113, $i114, $p117, $i118, $i119, $i121, $p122, $p123, $i124, $i125, $i45, $p46, $i126, $i44, $i127, $p129, $p131, $p132, $p133, $p134, $i135, $i136, $i11, $p12, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80 := sg_proc_debug_helper_loop_$bb4($p0, $i9, $i13, $p14, $p15, $i16, $i17, $i18, $p20, $i21, $p23, $i24, $i25, $p26, $i27, $i28, $p30, $i31, $i32, $p33, $i34, $i35, $p36, $i37, $i38, $p40, $p41, $i42, $i43, $p48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $p63, $i64, $i65, $i66, $p67, $p62, $p70, $i71, $p73, $i74, $i75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $p84, $p85, $p88, $i89, $p91, $i92, $i93, $i94, $p95, $i96, $i98, $i99, $i100, $p101, $i102, $p104, $i105, $i106, $i107, $i103, $p108, $i109, $i110, $p111, $i112, $i113, $i114, $p117, $i118, $i119, $i121, $p122, $p123, $i124, $i125, $i45, $p46, $i126, $i44, $i127, $p129, $p131, $p132, $p133, $p134, $i135, $i136, $i11, $p12, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80);
    goto $bb4_last;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i11, 1);
    call {:si_unique_call 1279} {:cexpr "k"} boogie_si_record_i32($i13);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} _raw_read_lock($p14);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(184, 1));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.2, $p15);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $i18 := jiffies_to_msecs($i17);
    call {:si_unique_call 1282} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(0, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.2, $p23);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(5624, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.2, $p26);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} vslice_dummy_var_72 := seq_printf.ref.ref.i32.i32.i32.i32.i32($p0, .str.64, $i13, $i18, $i21, $i25, $i28);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(5626, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.2, $p30);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i32 := $sext.i8.i32($i31);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(5625, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.2, $p33);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i35 := $sext.i8.i32($i34);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(5628, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.2, $p36);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i38 := $sext.i8.i32($i37);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} vslice_dummy_var_73 := seq_printf.ref.ref.i32.i32.i32($p0, .str.65, $i32, $i35, $i38);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.2, $p40);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i44 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i44, 0);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} _raw_read_unlock($p129);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.2, $p131);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 5720)), $mul.ref(0, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, $i9);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i136 == 1);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb41:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $i11, $p12 := $i13, $p132;
    goto $bb41_dummy;

  $bb38:
    assume $i127 == 1;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} vslice_dummy_var_80 := seq_puts($p0, .str.77);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb6:
    assume $i43 == 1;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i45, $p46 := 0, $p41;
    goto $bb9;

  $bb9:
    call $p48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $p63, $i64, $i65, $i66, $p67, $p62, $p70, $i71, $p73, $i74, $i75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $p84, $p85, $p88, $i89, $p91, $i92, $i93, $i94, $p95, $i96, $i98, $i99, $i100, $p101, $i102, $p104, $i105, $i106, $i107, $i103, $p108, $i109, $i110, $p111, $i112, $i113, $i114, $p117, $i118, $i119, $i121, $p122, $p123, $i124, $i125, $i45, $p46, $i126, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79 := sg_proc_debug_helper_loop_$bb9($p0, $p48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $p63, $i64, $i65, $i66, $p67, $p62, $p70, $i71, $p73, $i74, $i75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $p84, $p85, $p88, $i89, $p91, $i92, $i93, $i94, $p95, $i96, $i98, $i99, $i100, $p101, $i102, $p104, $i105, $i106, $i107, $i103, $p108, $i109, $i110, $p111, $i112, $i113, $i114, $p117, $i118, $i119, $i121, $p122, $p123, $i124, $i125, $i45, $p46, $i126, $p12, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79);
    goto $bb9_last;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.2, $p48);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    call {:si_unique_call 1285} {:cexpr "new_interface"} boogie_si_record_i32($i51);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(232, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.2, $p52);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i54 := $sext.i8.i32($i53);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    $p63 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(80, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.2, $p63);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 6);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $p67 := .str.69;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p62 := $p67;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} vslice_dummy_var_74 := seq_puts($p0, $p62);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.2, $p70);
    call {:si_unique_call 1287} {:cexpr "blen"} boogie_si_record_i32($i71);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.2, $p73);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    call {:si_unique_call 1288} {:cexpr "usg"} boogie_si_record_i32($i75);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.2, $p76);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i78 := $sext.i8.i32($i77);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i79 == 1);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p85 := .str.72;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} vslice_dummy_var_75 := seq_puts($p0, $p85);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.2, $p88);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} vslice_dummy_var_76 := seq_printf.ref.ref.i32.i32($p0, .str.73, $i89, $i71);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.2, $p91);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i93 := $sext.i8.i32($i92);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i94 == 1);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.2, jiffies);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i99 := jiffies_to_msecs($i98);
    call {:si_unique_call 1293} {:cexpr "ms"} boogie_si_record_i32($i99);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i51, 0);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i100 == 1);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p12, $mul.ref(0, 5720)), $mul.ref(184, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.2, $p104);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i105);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $i107 := jiffies_to_msecs($i106);
    call {:si_unique_call 1298} {:cexpr "tmp___0"} boogie_si_record_i32($i107);
    assume {:verifier.code 0} true;
    $i103 := $i107;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.2, $p108);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i110 := $ult.i32($i109, $i99);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i110 == 1);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_79 := seq_printf.ref.ref.i32.i32($p0, .str.75, $i103, $i114);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(29, 1));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.2, $p117);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} vslice_dummy_var_78 := seq_printf.ref.ref.i32.i32($p0, .str.76, $i75, $i119);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i45, 1);
    call {:si_unique_call 1295} {:cexpr "m"} boogie_si_record_i32($i121);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.2, $p122);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i126 := $i121;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i44 := $i126;
    goto $bb8;

  $bb35:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i45, $p46 := $i121, $p123;
    goto $bb35_dummy;

  $bb32:
    assume $i110 == 1;
    $p111 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.2, $p111);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i113 := $sub.i32($i99, $i112);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i114 := $i113;
    goto $bb34;

  $bb29:
    assume $i100 == 1;
    $p101 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(40, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.2, $p101);
    call {:si_unique_call 1296} {:cexpr "tmp___1"} boogie_si_record_i32($i102);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i103 := $i102;
    goto $bb31;

  $bb26:
    assume $i94 == 1;
    $p95 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.2, $p95);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} vslice_dummy_var_77 := seq_printf.ref.ref.i32($p0, .str.74, $i96);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i79 == 1;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.2, $p80);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i82 := $sext.i8.i32($i81);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p84 := (if $i83 == 1 then .str.70 else .str.71);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p85 := $p84;
    goto $bb25;

  $bb20:
    assume $i66 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p67 := .str.68;
    goto $bb22;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i51, 0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p61 := .str.67;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p62 := $p61;
    goto $bb19;

  $bb13:
    assume $i56 == 1;
    $p57 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(44, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.2, $p57);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 4);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb15;

  $bb16:
    assume $i60 == 1;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p61 := .str.66;
    goto $bb18;

  $bb35_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6076;

  $bb41_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6041;
}



const _raw_read_unlock: ref;

axiom _raw_read_unlock == $sub.ref(0, 473442);

procedure _raw_read_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_read_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 474474);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.53;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1303} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.53;
    call {:si_unique_call 1304} cmdloc_dummy_var_23 := $memset.i8(cmdloc_dummy_var_22, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.53 := cmdloc_dummy_var_23;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_class_interface_15: ref;

axiom ldv_initialize_class_interface_15 == $sub.ref(0, 475506);

procedure ldv_initialize_class_interface_15();
  free requires assertsPassed;
  modifies $M.54, $M.55, $M.2, $CurrAddr;



implementation ldv_initialize_class_interface_15()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p0 := ldv_init_zalloc(40);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $M.54 := $p0;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $M.55 := $p2;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_6: ref;

axiom ldv_file_operations_6 == $sub.ref(0, 476538);

procedure ldv_file_operations_6();
  free requires assertsPassed;
  modifies $M.56, $M.57, $M.2, $CurrAddr;



implementation ldv_file_operations_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $M.56 := $p0;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $M.57 := $p2;
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 477570);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.24, $M.26, $M.28, $M.30;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 1309} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $M.26 := 0;
    call {:si_unique_call 1310} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1311} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 1312} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_10: ref;

axiom ldv_file_operations_10 == $sub.ref(0, 478602);

procedure ldv_file_operations_10();
  free requires assertsPassed;
  modifies $M.58, $M.59, $M.2, $CurrAddr;



implementation ldv_file_operations_10()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $M.58 := $p0;
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $M.59 := $p2;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_9: ref;

axiom ldv_file_operations_9 == $sub.ref(0, 479634);

procedure ldv_file_operations_9();
  free requires assertsPassed;
  modifies $M.60, $M.61, $M.2, $CurrAddr;



implementation ldv_file_operations_9()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $M.60 := $p0;
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $M.61 := $p2;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_8: ref;

axiom ldv_file_operations_8 == $sub.ref(0, 480666);

procedure ldv_file_operations_8();
  free requires assertsPassed;
  modifies $M.62, $M.63, $M.2, $CurrAddr;



implementation ldv_file_operations_8()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.62 := $p0;
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $M.63 := $p2;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_13: ref;

axiom ldv_file_operations_13 == $sub.ref(0, 481698);

procedure ldv_file_operations_13();
  free requires assertsPassed;
  modifies $M.64, $M.65, $M.2, $CurrAddr;



implementation ldv_file_operations_13()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $M.64 := $p0;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $M.65 := $p2;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 482730);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.66, $M.67, $M.68, $M.69;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $M.66 := 0;
    call {:si_unique_call 1321} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 1322} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 1323} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 1324} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 483762);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.66, $M.67, $M.68, $M.69, $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1325} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1326} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1327} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} ldv_stop();
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i21 := $M.69;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i23 := $M.69;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.69 := 4;
    call {:si_unique_call 1337} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p25 := $M.70;
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} sg_rq_end_io_usercontext($p25);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1339} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i16 := $M.68;
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i18 := $M.68;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.68 := 4;
    call {:si_unique_call 1334} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p20 := $M.70;
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} sg_rq_end_io_usercontext($p20);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i11 := $M.67;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i13 := $M.67;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.67 := 4;
    call {:si_unique_call 1331} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p15 := $M.70;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} sg_rq_end_io_usercontext($p15);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1333} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i6 := $M.66;
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i8 := $M.66;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.66 := 4;
    call {:si_unique_call 1328} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p10 := $M.70;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} sg_rq_end_io_usercontext($p10);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1330} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 484794);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_file_operations_11: ref;

axiom ldv_file_operations_11 == $sub.ref(0, 485826);

procedure ldv_file_operations_11();
  free requires assertsPassed;
  modifies $M.71, $M.72, $M.2, $CurrAddr;



implementation ldv_file_operations_11()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $M.71 := $p0;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.72 := $p2;
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_12: ref;

axiom ldv_file_operations_12 == $sub.ref(0, 486858);

procedure ldv_file_operations_12();
  free requires assertsPassed;
  modifies $M.73, $M.74, $M.2, $CurrAddr;



implementation ldv_file_operations_12()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $M.73 := $p0;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $M.74 := $p2;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 487890);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.24, $M.26, $M.28, $M.30, $M.2, $M.32, $CurrAddr, assertsPassed, $M.25;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1345} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1346} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1347} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} ldv_stop();
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i21 := $M.30;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i23 := $M.30;
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 1357} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p25 := $M.25;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} sg_remove_sfp_usercontext($p25);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1359} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i16 := $M.28;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i18 := $M.28;
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.28 := 4;
    call {:si_unique_call 1354} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p20 := $M.25;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} sg_remove_sfp_usercontext($p20);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1356} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i11 := $M.26;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i13 := $M.26;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.26 := 4;
    call {:si_unique_call 1351} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p15 := $M.25;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} sg_remove_sfp_usercontext($p15);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1353} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i6 := $M.24;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i8 := $M.24;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.24 := 4;
    call {:si_unique_call 1348} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p10 := $M.25;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} sg_remove_sfp_usercontext($p10);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 1350} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_file_operations_4: ref;

axiom ldv_file_operations_4 == $sub.ref(0, 488922);

procedure ldv_file_operations_4();
  free requires assertsPassed;
  modifies $M.75, $M.76, $M.2, $CurrAddr;



implementation ldv_file_operations_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $M.75 := $p0;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $M.76 := $p2;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 489954);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.77, $M.3, $M.24, $M.26, $M.28, $M.30, $M.78, $M.66, $M.67, $M.68, $M.69, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.0, $M.1, $M.93, $M.2, $M.95, $M.18, $M.97, $M.98, $M.64, $M.65, $M.58, $M.59, $M.75, $M.76, $M.62, $M.63, $M.54, $M.55, $M.73, $M.74, $M.60, $M.61, $M.71, $M.72, $M.56, $M.57, $M.22, $M.99, $M.23, $M.100, $M.103, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.113, $M.115, $M.70, $M.25, $M.4, $M.101, $M.111, $M.94, $M.96, $M.102, $M.104, $M.112, $M.114, $M.32, $M.124, $M.125, $M.126, $M.127, $M.5, $M.33, $M.35, $M.34, $M.7, $M.8, $M.133, $M.134, $M.135, $M.136, $M.118, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.119, $M.117, $M.116, $M.161, $CurrAddr, $M.19, assertsPassed, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.51;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $p114: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p138: ref;
  var $i140: i32;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $i162: i1;
  var $i163: i1;
  var $i164: i1;
  var $i165: i1;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i170: i64;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i64;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i64;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $i196: i32;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i201: i64;
  var $i202: i32;
  var $i204: i32;
  var $i205: i1;
  var $i206: i32;
  var $i207: i1;
  var $i208: i1;
  var $i209: i1;
  var $i210: i1;
  var $i211: i1;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i64;
  var $i219: i1;
  var $i220: i32;
  var $i221: i32;
  var $p222: ref;
  var $i223: i64;
  var $i224: i1;
  var $i225: i32;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $p236: ref;
  var $i237: i32;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i64;
  var $i253: i1;
  var $i254: i32;
  var $i255: i32;
  var $p256: ref;
  var $i257: i64;
  var $i258: i1;
  var $i259: i32;
  var $i260: i32;
  var $i261: i32;
  var $i262: i1;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $i269: i1;
  var $i270: i1;
  var $i271: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i32;
  var $i279: i1;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i283: i1;
  var $i284: i32;
  var $i285: i1;
  var $i286: i1;
  var $i287: i1;
  var $i288: i1;
  var $i289: i1;
  var $i290: i1;
  var $i291: i1;
  var $i292: i1;
  var $i293: i1;
  var $i294: i1;
  var $i295: i1;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $i299: i64;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $i304: i64;
  var $i306: i32;
  var $i307: i1;
  var $p308: ref;
  var $i309: i64;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i314: i32;
  var $i315: i64;
  var $i317: i32;
  var $i318: i1;
  var $p319: ref;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $i325: i32;
  var $i326: i1;
  var $i327: i32;
  var $p328: ref;
  var $i329: i32;
  var $i331: i32;
  var $i332: i1;
  var $i333: i32;
  var $p334: ref;
  var $i335: i32;
  var $i337: i32;
  var $i338: i1;
  var $p339: ref;
  var $p340: ref;
  var $i341: i32;
  var $i342: i32;
  var $i343: i1;
  var $i344: i32;
  var $i345: i32;
  var $i346: i32;
  var $i347: i1;
  var $p348: ref;
  var $i350: i32;
  var $i351: i1;
  var $p352: ref;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $p357: ref;
  var $i359: i32;
  var $i360: i32;
  var $i361: i32;
  var $i362: i1;
  var $p363: ref;
  var $i364: i64;
  var $i365: i32;
  var $i367: i32;
  var $i368: i1;
  var $p369: ref;
  var $i370: i32;
  var $i371: i64;
  var $i373: i32;
  var $i374: i1;
  var $i375: i32;
  var $i376: i1;
  var $i377: i1;
  var $i378: i1;
  var $i379: i1;
  var $i380: i1;
  var $i381: i32;
  var $i382: i1;
  var $p383: ref;
  var $i384: i64;
  var $i386: i32;
  var $i387: i1;
  var $p388: ref;
  var $p389: ref;
  var $i390: i32;
  var $i391: i32;
  var $i392: i1;
  var $i393: i32;
  var $i394: i32;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var $p398: ref;
  var $i400: i32;
  var $i401: i32;
  var $i402: i32;
  var $i403: i1;
  var $p404: ref;
  var $i405: i64;
  var $i406: i32;
  var $i408: i32;
  var $i409: i1;
  var $i410: i32;
  var $i411: i1;
  var $i412: i1;
  var $i413: i1;
  var $i414: i1;
  var $i415: i1;
  var $i416: i32;
  var $i417: i1;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $i422: i64;
  var $i423: i1;
  var $i424: i32;
  var $i425: i32;
  var $p426: ref;
  var $i427: i64;
  var $i428: i1;
  var $i429: i32;
  var $i430: i32;
  var $i431: i32;
  var $i432: i1;
  var $p433: ref;
  var $p434: ref;
  var $i435: i32;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $p439: ref;
  var $p440: ref;
  var $i441: i32;
  var $i442: i32;
  var $i443: i32;
  var $i444: i1;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $i449: i32;
  var $i450: i1;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $i456: i64;
  var $i457: i1;
  var $i458: i32;
  var $i459: i32;
  var $p460: ref;
  var $i461: i64;
  var $i462: i1;
  var $i463: i32;
  var $i464: i32;
  var $i465: i32;
  var $i466: i1;
  var $i467: i32;
  var $i468: i1;
  var $i469: i1;
  var $i470: i1;
  var $i471: i1;
  var $i472: i1;
  var $i473: i32;
  var $i474: i1;
  var $p475: ref;
  var $i476: i64;
  var $i478: i32;
  var $i479: i1;
  var $p480: ref;
  var $p481: ref;
  var $i482: i32;
  var $i483: i32;
  var $i484: i1;
  var $i485: i32;
  var $i486: i32;
  var $i487: i32;
  var $i488: i1;
  var $p489: ref;
  var $p490: ref;
  var $i492: i32;
  var $i493: i32;
  var $i494: i32;
  var $i495: i1;
  var $p496: ref;
  var $i497: i64;
  var $i498: i32;
  var $i500: i32;
  var $i501: i1;
  var $i502: i32;
  var $i503: i1;
  var $i504: i1;
  var $i505: i1;
  var $i506: i1;
  var $i507: i1;
  var $i508: i1;
  var $i509: i32;
  var $i510: i1;
  var $p511: ref;
  var $i512: i64;
  var $i514: i32;
  var $i515: i1;
  var $p516: ref;
  var $i517: i64;
  var $i519: i32;
  var $i520: i1;
  var $p521: ref;
  var $i522: i64;
  var $i524: i32;
  var $i525: i1;
  var $p526: ref;
  var $p527: ref;
  var $i528: i32;
  var $i529: i32;
  var $i530: i1;
  var $i531: i32;
  var $i532: i32;
  var $i533: i32;
  var $i534: i1;
  var $p535: ref;
  var $p536: ref;
  var $i538: i32;
  var $i539: i32;
  var $i540: i32;
  var $i541: i1;
  var $p542: ref;
  var $i543: i64;
  var $i544: i32;
  var $i546: i32;
  var $i547: i1;
  var $i548: i32;
  var $i549: i1;
  var $i550: i32;
  var $i551: i1;
  var $i553: i32;
  var $i554: i1;
  var $i555: i32;
  var $i556: i1;
  var $i557: i1;
  var $i558: i1;
  var $i559: i32;
  var $i560: i1;
  var $p561: ref;
  var $p562: ref;
  var $i563: i32;
  var $i564: i1;
  var $p565: ref;
  var $p566: ref;
  var $i568: i32;
  var $i569: i1;
  var $i570: i32;
  var $i571: i1;
  var $i572: i1;
  var $i573: i1;
  var $i574: i1;
  var $i575: i1;
  var $i576: i32;
  var $i577: i1;
  var $p578: ref;
  var $i579: i64;
  var $i581: i32;
  var $i582: i1;
  var $p583: ref;
  var $p584: ref;
  var $i585: i32;
  var $i586: i32;
  var $i587: i1;
  var $i588: i32;
  var $i589: i32;
  var $i590: i32;
  var $i591: i1;
  var $p592: ref;
  var $p593: ref;
  var $i595: i32;
  var $i596: i32;
  var $i597: i32;
  var $i598: i1;
  var $p599: ref;
  var $i600: i64;
  var $i601: i32;
  var $i603: i32;
  var $i604: i1;
  var $i605: i32;
  var $i606: i1;
  var $i607: i1;
  var $i608: i1;
  var $i609: i1;
  var $i610: i1;
  var $i611: i32;
  var $i612: i1;
  var $p613: ref;
  var $i614: i64;
  var $i616: i32;
  var $i617: i1;
  var $p618: ref;
  var $p619: ref;
  var $i620: i32;
  var $i621: i32;
  var $i622: i1;
  var $i623: i32;
  var $i624: i32;
  var $i625: i32;
  var $i626: i1;
  var $p627: ref;
  var $p628: ref;
  var $i630: i32;
  var $i631: i32;
  var $i632: i32;
  var $i633: i1;
  var $p634: ref;
  var $i635: i64;
  var $i636: i32;
  var $i638: i32;
  var $i639: i1;
  var $i640: i32;
  var $i641: i1;
  var $i642: i1;
  var $i643: i1;
  var $i644: i1;
  var $i645: i1;
  var $i646: i32;
  var $i647: i1;
  var $p648: ref;
  var $i649: i64;
  var $i651: i32;
  var $i652: i1;
  var $p653: ref;
  var $p654: ref;
  var $i655: i32;
  var $i656: i32;
  var $i657: i1;
  var $i658: i32;
  var $i659: i32;
  var $i660: i32;
  var $i661: i1;
  var $p662: ref;
  var $p663: ref;
  var $i665: i32;
  var $i666: i32;
  var $i667: i32;
  var $i668: i1;
  var $p669: ref;
  var $i670: i64;
  var $i671: i32;
  var $i673: i32;
  var $i674: i1;
  var $i675: i32;
  var $i676: i1;
  var $i677: i1;
  var $i678: i1;
  var $i679: i1;
  var $i680: i1;
  var $i681: i32;
  var $i682: i1;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $i687: i64;
  var $i688: i1;
  var $i689: i32;
  var $i690: i32;
  var $p691: ref;
  var $i692: i64;
  var $i693: i1;
  var $i694: i32;
  var $i695: i32;
  var $i696: i32;
  var $i697: i1;
  var $p698: ref;
  var $p699: ref;
  var $i700: i32;
  var $i701: i32;
  var $i702: i32;
  var $i703: i1;
  var $p704: ref;
  var $p705: ref;
  var $i706: i32;
  var $i707: i32;
  var $i708: i32;
  var $i709: i1;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $i714: i32;
  var $i715: i1;
  var $p716: ref;
  var $p717: ref;
  var $p718: ref;
  var $p719: ref;
  var $p720: ref;
  var $i721: i64;
  var $i722: i1;
  var $i723: i32;
  var $i724: i32;
  var $p725: ref;
  var $i726: i64;
  var $i727: i1;
  var $i728: i32;
  var $i729: i32;
  var vslice_dummy_var_81: ref;
  var vslice_dummy_var_82: ref;
  var vslice_dummy_var_83: ref;
  var vslice_dummy_var_84: ref;
  var vslice_dummy_var_85: ref;
  var vslice_dummy_var_86: ref;
  var vslice_dummy_var_87: ref;
  var vslice_dummy_var_88: ref;
  var vslice_dummy_var_89: ref;
  var vslice_dummy_var_90: ref;
  var vslice_dummy_var_91: ref;
  var vslice_dummy_var_92: ref;
  var vslice_dummy_var_93: ref;
  var vslice_dummy_var_94: ref;
  var vslice_dummy_var_95: ref;
  var vslice_dummy_var_96: ref;
  var vslice_dummy_var_97: ref;
  var vslice_dummy_var_98: ref;
  var vslice_dummy_var_99: ref;
  var vslice_dummy_var_100: ref;
  var vslice_dummy_var_101: ref;
  var vslice_dummy_var_102: ref;
  var vslice_dummy_var_103: ref;
  var vslice_dummy_var_104: ref;
  var vslice_dummy_var_105: ref;
  var vslice_dummy_var_106: ref;
  var vslice_dummy_var_107: ref;
  var vslice_dummy_var_108: ref;
  var vslice_dummy_var_109: ref;
  var vslice_dummy_var_110: ref;
  var vslice_dummy_var_111: ref;
  var vslice_dummy_var_112: ref;
  var vslice_dummy_var_113: ref;
  var vslice_dummy_var_114: i64;
  var vslice_dummy_var_115: i64;
  var vslice_dummy_var_116: i64;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i64;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i64;
  var vslice_dummy_var_121: i64;
  var vslice_dummy_var_122: i64;
  var vslice_dummy_var_123: i64;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i64;
  var vslice_dummy_var_132: i64;
  var vslice_dummy_var_133: i64;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i64;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i64;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i64;
  var vslice_dummy_var_140: i64;
  var vslice_dummy_var_141: i64;
  var vslice_dummy_var_142: i64;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i64;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i64;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i64;
  var vslice_dummy_var_150: i64;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i64;
  var vslice_dummy_var_153: i64;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i64;
  var vslice_dummy_var_156: i32;

  $bb0:
    call {:si_unique_call 1363} $initialize();
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $p14 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $p18 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $p19 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p20 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p21 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p22 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $p23 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $p24 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $p25 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $p26 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p27 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $p28 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p29 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p30 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $p31 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $p32 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p33 := ldv_init_zalloc(1);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p34 := ldv_init_zalloc(8);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $p36 := ldv_init_zalloc(1);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $p37 := ldv_init_zalloc(8);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $p39 := ldv_init_zalloc(8);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $p41 := ldv_init_zalloc(1);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $p42 := ldv_init_zalloc(1);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $p43 := ldv_init_zalloc(184);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $p45 := ldv_init_zalloc(16);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $p47 := ldv_init_zalloc(8);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $p49 := ldv_init_zalloc(8);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $p51 := ldv_init_zalloc(1);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p52 := ldv_init_zalloc(8);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p54 := ldv_init_zalloc(1);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p55 := ldv_init_zalloc(8);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p57 := ldv_init_zalloc(1);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $p58 := ldv_init_zalloc(1);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p59 := ldv_init_zalloc(8);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p61 := ldv_init_zalloc(56);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p63 := ldv_init_zalloc(184);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $p65 := ldv_init_zalloc(1);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p66 := ldv_init_zalloc(8);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p68 := ldv_init_zalloc(8);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p70 := ldv_init_zalloc(1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p71 := ldv_init_zalloc(1);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p72 := ldv_init_zalloc(8);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} ldv_initialize();
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p0);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_81 := ldv_memset($p74, 0, 8);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p1);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} vslice_dummy_var_82 := ldv_memset($p76, 0, 4);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p2);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} vslice_dummy_var_83 := ldv_memset($p78, 0, 8);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p3);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} vslice_dummy_var_84 := ldv_memset($p80, 0, 8);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p4);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} vslice_dummy_var_85 := ldv_memset($p82, 0, 8);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p5);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} vslice_dummy_var_86 := ldv_memset($p84, 0, 8);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p6);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} vslice_dummy_var_87 := ldv_memset($p86, 0, 4);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p7);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} vslice_dummy_var_88 := ldv_memset($p88, 0, 4);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p8);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_89 := ldv_memset($p90, 0, 4);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p9);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} vslice_dummy_var_90 := ldv_memset($p92, 0, 8);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p10);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_91 := ldv_memset($p94, 0, 4);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p11);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} vslice_dummy_var_92 := ldv_memset($p96, 0, 4);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p12);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} vslice_dummy_var_93 := ldv_memset($p98, 0, 8);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p13);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_94 := ldv_memset($p100, 0, 8);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p14);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_95 := ldv_memset($p102, 0, 4);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p15);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} vslice_dummy_var_96 := ldv_memset($p104, 0, 8);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p16);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} vslice_dummy_var_97 := ldv_memset($p106, 0, 8);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p17);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} vslice_dummy_var_98 := ldv_memset($p108, 0, 8);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p18);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} vslice_dummy_var_99 := ldv_memset($p110, 0, 4);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p19);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} vslice_dummy_var_100 := ldv_memset($p112, 0, 8);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p20);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_101 := ldv_memset($p114, 0, 8);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p21);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} vslice_dummy_var_102 := ldv_memset($p116, 0, 8);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p22);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} vslice_dummy_var_103 := ldv_memset($p118, 0, 8);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p23);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} vslice_dummy_var_104 := ldv_memset($p120, 0, 4);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p24);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} vslice_dummy_var_105 := ldv_memset($p122, 0, 8);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p25);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} vslice_dummy_var_106 := ldv_memset($p124, 0, 4);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p26);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_107 := ldv_memset($p126, 0, 8);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p27);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} vslice_dummy_var_108 := ldv_memset($p128, 0, 8);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p28);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vslice_dummy_var_109 := ldv_memset($p130, 0, 4);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p29);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} vslice_dummy_var_110 := ldv_memset($p132, 0, 8);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p30);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} vslice_dummy_var_111 := ldv_memset($p134, 0, 8);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p31);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} vslice_dummy_var_112 := ldv_memset($p136, 0, 4);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p32);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} vslice_dummy_var_113 := ldv_memset($p138, 0, 8);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1459} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} work_init_2();
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1461} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} work_init_1();
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1463} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 1464} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1465} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 1467} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 1469} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $M.86 := 0;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 1471} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 1472} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 1474} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 1475} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $M.92 := 0;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $p169, $i170, $i172, $i173, $p174, $i175, $i177, $i178, $p179, $i180, $i182, $i183, $p184, $p185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $p193, $p194, $i196, $i197, $i198, $i199, $p200, $i201, $i202, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $p214, $p215, $p216, $p217, $i218, $i219, $i220, $i221, $p222, $i223, $i224, $i225, $i226, $i227, $i228, $p229, $p230, $i231, $i232, $i233, $i234, $p235, $p236, $i237, $i238, $i239, $i240, $p241, $p242, $p243, $i245, $i246, $p247, $p248, $p249, $p250, $p251, $i252, $i253, $i254, $i255, $p256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $i299, $i301, $i302, $p303, $i304, $i306, $i307, $p308, $i309, $i311, $i312, $p313, $i314, $i315, $i317, $i318, $p319, $i321, $i322, $p323, $i325, $i326, $i327, $p328, $i329, $i331, $i332, $i333, $p334, $i335, $i337, $i338, $p339, $p340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $p348, $i350, $i351, $p352, $i354, $i355, $p356, $p357, $i359, $i360, $i361, $i362, $p363, $i364, $i365, $i367, $i368, $p369, $i370, $i371, $i373, $i374, $i375, $i376, $i377, $i378, $i379, $i380, $i381, $i382, $p383, $i384, $i386, $i387, $p388, $p389, $i390, $i391, $i392, $i393, $i394, $i395, $i396, $p397, $p398, $i400, $i401, $i402, $i403, $p404, $i405, $i406, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $p418, $p419, $p420, $p421, $i422, $i423, $i424, $i425, $p426, $i427, $i428, $i429, $i430, $i431, $i432, $p433, $p434, $i435, $i436, $i437, $i438, $p439, $p440, $i441, $i442, $i443, $i444, $p445, $p446, $p447, $i449, $i450, $p451, $p452, $p453, $p454, $p455, $i456, $i457, $i458, $i459, $p460, $i461, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $i474, $p475, $i476, $i478, $i479, $p480, $p481, $i482, $i483, $i484, $i485, $i486, $i487, $i488, $p489, $p490, $i492, $i493, $i494, $i495, $p496, $i497, $i498, $i500, $i501, $i502, $i503, $i504, $i505, $i506, $i507, $i508, $i509, $i510, $p511, $i512, $i514, $i515, $p516, $i517, $i519, $i520, $p521, $i522, $i524, $i525, $p526, $p527, $i528, $i529, $i530, $i531, $i532, $i533, $i534, $p535, $p536, $i538, $i539, $i540, $i541, $p542, $i543, $i544, $i546, $i547, $i548, $i549, $i550, $i551, $i553, $i554, $i555, $i556, $i557, $i558, $i559, $i560, $p561, $p562, $i563, $i564, $p565, $p566, $i568, $i569, $i570, $i571, $i572, $i573, $i574, $i575, $i576, $i577, $p578, $i579, $i581, $i582, $p583, $p584, $i585, $i586, $i587, $i588, $i589, $i590, $i591, $p592, $p593, $i595, $i596, $i597, $i598, $p599, $i600, $i601, $i603, $i604, $i605, $i606, $i607, $i608, $i609, $i610, $i611, $i612, $p613, $i614, $i616, $i617, $p618, $p619, $i620, $i621, $i622, $i623, $i624, $i625, $i626, $p627, $p628, $i630, $i631, $i632, $i633, $p634, $i635, $i636, $i638, $i639, $i640, $i641, $i642, $i643, $i644, $i645, $i646, $i647, $p648, $i649, $i651, $i652, $p653, $p654, $i655, $i656, $i657, $i658, $i659, $i660, $i661, $p662, $p663, $i665, $i666, $i667, $i668, $p669, $i670, $i671, $i673, $i674, $i675, $i676, $i677, $i678, $i679, $i680, $i681, $i682, $p683, $p684, $p685, $p686, $i687, $i688, $i689, $i690, $p691, $i692, $i693, $i694, $i695, $i696, $i697, $p698, $p699, $i700, $i701, $i702, $i703, $p704, $p705, $i706, $i707, $i708, $i709, $p710, $p711, $p712, $i714, $i715, $p716, $p717, $p718, $p719, $p720, $i721, $i722, $i723, $i724, $p725, $i726, $i727, $i728, $i729, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $p35, $p36, $p38, $p40, $p41, $p42, $p44, $p46, $p48, $p50, $p51, $p53, $p54, $p56, $p57, $p58, $p60, $p62, $p64, $p65, $p67, $p69, $p70, $p71, $p73, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $p169, $i170, $i172, $i173, $p174, $i175, $i177, $i178, $p179, $i180, $i182, $i183, $p184, $p185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $p193, $p194, $i196, $i197, $i198, $i199, $p200, $i201, $i202, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $p214, $p215, $p216, $p217, $i218, $i219, $i220, $i221, $p222, $i223, $i224, $i225, $i226, $i227, $i228, $p229, $p230, $i231, $i232, $i233, $i234, $p235, $p236, $i237, $i238, $i239, $i240, $p241, $p242, $p243, $i245, $i246, $p247, $p248, $p249, $p250, $p251, $i252, $i253, $i254, $i255, $p256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $i299, $i301, $i302, $p303, $i304, $i306, $i307, $p308, $i309, $i311, $i312, $p313, $i314, $i315, $i317, $i318, $p319, $i321, $i322, $p323, $i325, $i326, $i327, $p328, $i329, $i331, $i332, $i333, $p334, $i335, $i337, $i338, $p339, $p340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $p348, $i350, $i351, $p352, $i354, $i355, $p356, $p357, $i359, $i360, $i361, $i362, $p363, $i364, $i365, $i367, $i368, $p369, $i370, $i371, $i373, $i374, $i375, $i376, $i377, $i378, $i379, $i380, $i381, $i382, $p383, $i384, $i386, $i387, $p388, $p389, $i390, $i391, $i392, $i393, $i394, $i395, $i396, $p397, $p398, $i400, $i401, $i402, $i403, $p404, $i405, $i406, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $p418, $p419, $p420, $p421, $i422, $i423, $i424, $i425, $p426, $i427, $i428, $i429, $i430, $i431, $i432, $p433, $p434, $i435, $i436, $i437, $i438, $p439, $p440, $i441, $i442, $i443, $i444, $p445, $p446, $p447, $i449, $i450, $p451, $p452, $p453, $p454, $p455, $i456, $i457, $i458, $i459, $p460, $i461, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $i474, $p475, $i476, $i478, $i479, $p480, $p481, $i482, $i483, $i484, $i485, $i486, $i487, $i488, $p489, $p490, $i492, $i493, $i494, $i495, $p496, $i497, $i498, $i500, $i501, $i502, $i503, $i504, $i505, $i506, $i507, $i508, $i509, $i510, $p511, $i512, $i514, $i515, $p516, $i517, $i519, $i520, $p521, $i522, $i524, $i525, $p526, $p527, $i528, $i529, $i530, $i531, $i532, $i533, $i534, $p535, $p536, $i538, $i539, $i540, $i541, $p542, $i543, $i544, $i546, $i547, $i548, $i549, $i550, $i551, $i553, $i554, $i555, $i556, $i557, $i558, $i559, $i560, $p561, $p562, $i563, $i564, $p565, $p566, $i568, $i569, $i570, $i571, $i572, $i573, $i574, $i575, $i576, $i577, $p578, $i579, $i581, $i582, $p583, $p584, $i585, $i586, $i587, $i588, $i589, $i590, $i591, $p592, $p593, $i595, $i596, $i597, $i598, $p599, $i600, $i601, $i603, $i604, $i605, $i606, $i607, $i608, $i609, $i610, $i611, $i612, $p613, $i614, $i616, $i617, $p618, $p619, $i620, $i621, $i622, $i623, $i624, $i625, $i626, $p627, $p628, $i630, $i631, $i632, $i633, $p634, $i635, $i636, $i638, $i639, $i640, $i641, $i642, $i643, $i644, $i645, $i646, $i647, $p648, $i649, $i651, $i652, $p653, $p654, $i655, $i656, $i657, $i658, $i659, $i660, $i661, $p662, $p663, $i665, $i666, $i667, $i668, $p669, $i670, $i671, $i673, $i674, $i675, $i676, $i677, $i678, $i679, $i680, $i681, $i682, $p683, $p684, $p685, $p686, $i687, $i688, $i689, $i690, $p691, $i692, $i693, $i694, $i695, $i696, $i697, $p698, $p699, $i700, $i701, $i702, $i703, $p704, $p705, $i706, $i707, $i708, $i709, $p710, $p711, $p712, $i714, $i715, $p716, $p717, $p718, $p719, $p720, $i721, $i722, $i723, $i724, $p725, $i726, $i727, $i728, $i729, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i140, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i140, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    $i143 := $slt.i32($i140, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i140, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i140, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} ldv_stop();
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb79_dummy;

  $bb11:
    assume $i145 == 1;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i673 := $M.92;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i674 := $ne.i32($i673, 0);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i674 == 1);
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb519:
    assume $i674 == 1;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1718} $i675 := __VERIFIER_nondet_int();
    call {:si_unique_call 1719} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i675);
    call {:si_unique_call 1720} {:cexpr "tmp___39"} boogie_si_record_i32($i675);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    $i676 := $slt.i32($i675, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  $bb523:
    assume !($i676 == 1);
    assume {:verifier.code 0} true;
    $i677 := $slt.i32($i675, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  $bb525:
    assume !($i677 == 1);
    assume {:verifier.code 0} true;
    $i678 := $eq.i32($i675, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb526, $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    assume !($i678 == 1);
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} ldv_stop();
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb526:
    assume $i678 == 1;
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i714 := $M.92;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i715 := $eq.i32($i714, 3);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552, $bb553;

  $bb553:
    assume !($i715 == 1);
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb552:
    assume $i715 == 1;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p716 := $M.111;
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p717 := $M.114;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p718 := $M.112;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} $p719 := dev_seq_next($p716, $p717, $p718);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $M.115 := $p719;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p720 := $M.115;
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i721 := $p2i.ref.i64($p720);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i722 := $eq.i64($i721, 0);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb554, $bb555;

  $bb555:
    assume !($i722 == 1);
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    $p725 := $M.115;
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i726 := $p2i.ref.i64($p725);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i727 := $ne.i64($i726, 0);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb557, $bb558;

  $bb558:
    assume !($i727 == 1);
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb557:
    assume $i727 == 1;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i728 := $M.80;
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i729 := $add.i32($i728, 1);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $M.80 := $i729;
    call {:si_unique_call 1738} {:cexpr "ref_cnt"} boogie_si_record_i32($i729);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb554:
    assume $i722 == 1;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i723 := $M.80;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i724 := $add.i32($i723, 1);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $M.80 := $i724;
    call {:si_unique_call 1736} {:cexpr "ref_cnt"} boogie_si_record_i32($i724);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb524:
    assume $i677 == 1;
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i708 := $M.92;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i709 := $eq.i32($i708, 3);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  $bb550:
    assume !($i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb549:
    assume $i709 == 1;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p710 := $M.111;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p711 := $M.112;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p712 := $bitcast.ref.ref($p711);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} vslice_dummy_var_156 := sg_proc_seq_show_devstrs($p710, $p712);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb522:
    assume $i676 == 1;
    assume {:verifier.code 0} true;
    $i679 := $slt.i32($i675, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb529, $bb530;

  $bb530:
    assume !($i679 == 1);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i696 := $M.92;
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i697 := $eq.i32($i696, 3);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    $i702 := $M.92;
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i703 := $eq.i32($i702, 2);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  $bb547:
    assume !($i703 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb546:
    assume $i703 == 1;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p704 := $M.111;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p705 := $M.114;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} dev_seq_stop($p704, $p705);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1730} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i706 := $M.80;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i707 := $sub.i32($i706, 1);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $M.80 := $i707;
    call {:si_unique_call 1731} {:cexpr "ref_cnt"} boogie_si_record_i32($i707);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb543:
    assume $i697 == 1;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p698 := $M.111;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p699 := $M.114;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} dev_seq_stop($p698, $p699);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i700 := $M.80;
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i701 := $sub.i32($i700, 1);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $M.80 := $i701;
    call {:si_unique_call 1728} {:cexpr "ref_cnt"} boogie_si_record_i32($i701);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb529:
    assume $i679 == 1;
    assume {:verifier.code 0} true;
    $i680 := $eq.i32($i675, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    assume !($i680 == 1);
    goto $bb528;

  $bb531:
    assume $i680 == 1;
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i681 := $M.92;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i682 := $eq.i32($i681, 1);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  $bb534:
    assume !($i682 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb533:
    assume $i682 == 1;
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p683 := $M.111;
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $p684 := $M.112;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} $p685 := dev_seq_start($p683, $p684);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $M.113 := $p685;
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $p686 := $M.113;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i687 := $p2i.ref.i64($p686);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i688 := $eq.i64($i687, 0);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb535, $bb536;

  $bb536:
    assume !($i688 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    $p691 := $M.113;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i692 := $p2i.ref.i64($p691);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i693 := $ne.i64($i692, 0);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb538, $bb539;

  $bb539:
    assume !($i693 == 1);
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb538:
    assume $i693 == 1;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i694 := $M.80;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i695 := $add.i32($i694, 1);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.80 := $i695;
    call {:si_unique_call 1725} {:cexpr "ref_cnt"} boogie_si_record_i32($i695);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb535:
    assume $i688 == 1;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i689 := $M.80;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i690 := $add.i32($i689, 1);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $M.80 := $i690;
    call {:si_unique_call 1723} {:cexpr "ref_cnt"} boogie_si_record_i32($i690);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb9:
    assume $i144 == 1;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i638 := $M.91;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i639 := $ne.i32($i638, 0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  $bb487:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb486:
    assume $i639 == 1;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1703} $i640 := __VERIFIER_nondet_int();
    call {:si_unique_call 1704} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i640);
    call {:si_unique_call 1705} {:cexpr "tmp___38"} boogie_si_record_i32($i640);
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    $i641 := $slt.i32($i640, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  $bb490:
    assume !($i641 == 1);
    assume {:verifier.code 0} true;
    $i642 := $slt.i32($i640, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  $bb492:
    assume !($i642 == 1);
    assume {:verifier.code 0} true;
    $i643 := $eq.i32($i640, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb493, $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    assume !($i643 == 1);
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} ldv_stop();
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb493:
    assume $i643 == 1;
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i667 := $M.91;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i668 := $eq.i32($i667, 2);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  $bb514:
    assume !($i668 == 1);
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb513:
    assume $i668 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p669 := $M.59;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i670 := $load.i64($M.53, $p32);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i671 := $load.i32($M.53, $p31);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} vslice_dummy_var_155 := seq_lseek($p669, $i670, $i671);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1716} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb491:
    assume $i642 == 1;
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i660 := $M.91;
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i661 := $eq.i32($i660, 2);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  $bb511:
    assume !($i661 == 1);
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb510:
    assume $i661 == 1;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p662 := $M.58;
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p663 := $M.59;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} vslice_dummy_var_154 := single_release($p662, $p663);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i665 := $M.80;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i666 := $sub.i32($i665, 1);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $M.80 := $i666;
    call {:si_unique_call 1714} {:cexpr "ref_cnt"} boogie_si_record_i32($i666);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb489:
    assume $i641 == 1;
    assume {:verifier.code 0} true;
    $i644 := $slt.i32($i640, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  $bb497:
    assume !($i644 == 1);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i651 := $M.91;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i652 := $eq.i32($i651, 1);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i652 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb504:
    assume $i652 == 1;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $p653 := $M.58;
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $p654 := $M.59;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} $i655 := sg_proc_single_open_version($p653, $p654);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $M.110 := $i655;
    call {:si_unique_call 1709} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i655);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i656 := $M.110;
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i657 := $eq.i32($i656, 0);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  $bb507:
    assume !($i657 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb506:
    assume $i657 == 1;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1710} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i658 := $M.80;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i659 := $add.i32($i658, 1);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $M.80 := $i659;
    call {:si_unique_call 1711} {:cexpr "ref_cnt"} boogie_si_record_i32($i659);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb496:
    assume $i644 == 1;
    assume {:verifier.code 0} true;
    $i645 := $eq.i32($i640, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    assume !($i645 == 1);
    goto $bb495;

  $bb498:
    assume $i645 == 1;
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i646 := $M.91;
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i647 := $eq.i32($i646, 2);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i647 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb500:
    assume $i647 == 1;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p648 := $M.59;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i649 := $load.i64($M.53, $p30);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} vslice_dummy_var_153 := seq_read($p648, $p71, $i649, $p73);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb7:
    assume $i143 == 1;
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i140, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i146 == 1);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i603 := $M.90;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i604 := $ne.i32($i603, 0);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb453:
    assume $i604 == 1;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1688} $i605 := __VERIFIER_nondet_int();
    call {:si_unique_call 1689} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i605);
    call {:si_unique_call 1690} {:cexpr "tmp___37"} boogie_si_record_i32($i605);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $i606 := $slt.i32($i605, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i606 == 1);
    assume {:verifier.code 0} true;
    $i607 := $slt.i32($i605, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  $bb459:
    assume !($i607 == 1);
    assume {:verifier.code 0} true;
    $i608 := $eq.i32($i605, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb460, $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    assume !($i608 == 1);
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} ldv_stop();
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb460:
    assume $i608 == 1;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i632 := $M.90;
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i633 := $eq.i32($i632, 2);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i633 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb480:
    assume $i633 == 1;
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p634 := $M.76;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i635 := $load.i64($M.53, $p29);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i636 := $load.i32($M.53, $p28);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} vslice_dummy_var_152 := seq_lseek($p634, $i635, $i636);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb458:
    assume $i607 == 1;
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i625 := $M.90;
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i626 := $eq.i32($i625, 2);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  $bb478:
    assume !($i626 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb477:
    assume $i626 == 1;
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p627 := $M.75;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p628 := $M.76;
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} vslice_dummy_var_151 := ldv_seq_release_18($p627, $p628);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1698} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i630 := $M.80;
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i631 := $sub.i32($i630, 1);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.80 := $i631;
    call {:si_unique_call 1699} {:cexpr "ref_cnt"} boogie_si_record_i32($i631);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb456:
    assume $i606 == 1;
    assume {:verifier.code 0} true;
    $i609 := $slt.i32($i605, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i609 == 1);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i616 := $M.90;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i617 := $eq.i32($i616, 1);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb471:
    assume $i617 == 1;
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p618 := $M.75;
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p619 := $M.76;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} $i620 := sg_proc_open_debug($p618, $p619);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $M.109 := $i620;
    call {:si_unique_call 1694} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i620);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i621 := $M.109;
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i622 := $eq.i32($i621, 0);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  $bb474:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb473:
    assume $i622 == 1;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i623 := $M.80;
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i624 := $add.i32($i623, 1);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $M.80 := $i624;
    call {:si_unique_call 1696} {:cexpr "ref_cnt"} boogie_si_record_i32($i624);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb463:
    assume $i609 == 1;
    assume {:verifier.code 0} true;
    $i610 := $eq.i32($i605, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    assume !($i610 == 1);
    goto $bb462;

  $bb465:
    assume $i610 == 1;
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i611 := $M.90;
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i612 := $eq.i32($i611, 2);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i612 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb467:
    assume $i612 == 1;
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p613 := $M.76;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i614 := $load.i64($M.53, $p27);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} vslice_dummy_var_150 := seq_read($p613, $p70, $i614, $p69);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 1692} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb14:
    assume $i146 == 1;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i568 := $M.89;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i569 := $ne.i32($i568, 0);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb420:
    assume $i569 == 1;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1673} $i570 := __VERIFIER_nondet_int();
    call {:si_unique_call 1674} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i570);
    call {:si_unique_call 1675} {:cexpr "tmp___36"} boogie_si_record_i32($i570);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    $i571 := $slt.i32($i570, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i571 == 1);
    assume {:verifier.code 0} true;
    $i572 := $slt.i32($i570, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  $bb426:
    assume !($i572 == 1);
    assume {:verifier.code 0} true;
    $i573 := $eq.i32($i570, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    assume !($i573 == 1);
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} ldv_stop();
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb427:
    assume $i573 == 1;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i597 := $M.89;
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i598 := $eq.i32($i597, 2);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb447:
    assume $i598 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p599 := $M.63;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i600 := $load.i64($M.53, $p24);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i601 := $load.i32($M.53, $p25);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} vslice_dummy_var_149 := seq_lseek($p599, $i600, $i601);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb425:
    assume $i572 == 1;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i590 := $M.89;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i591 := $eq.i32($i590, 2);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb444:
    assume $i591 == 1;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p592 := $M.62;
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p593 := $M.63;
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} vslice_dummy_var_148 := ldv_seq_release_17($p592, $p593);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i595 := $M.80;
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i596 := $sub.i32($i595, 1);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $M.80 := $i596;
    call {:si_unique_call 1684} {:cexpr "ref_cnt"} boogie_si_record_i32($i596);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb423:
    assume $i571 == 1;
    assume {:verifier.code 0} true;
    $i574 := $slt.i32($i570, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb430, $bb431;

  $bb431:
    assume !($i574 == 1);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i581 := $M.89;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i581, 1);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  $bb439:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb438:
    assume $i582 == 1;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p583 := $M.62;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p584 := $M.63;
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $i585 := sg_proc_open_dev($p583, $p584);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $M.108 := $i585;
    call {:si_unique_call 1679} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i585);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i586 := $M.108;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i586, 0);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb440:
    assume $i587 == 1;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i588 := $M.80;
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i589 := $add.i32($i588, 1);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $M.80 := $i589;
    call {:si_unique_call 1681} {:cexpr "ref_cnt"} boogie_si_record_i32($i589);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb430:
    assume $i574 == 1;
    assume {:verifier.code 0} true;
    $i575 := $eq.i32($i570, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    assume !($i575 == 1);
    goto $bb429;

  $bb432:
    assume $i575 == 1;
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i576 := $M.89;
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i577 := $eq.i32($i576, 2);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  $bb435:
    assume !($i577 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb434:
    assume $i577 == 1;
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p578 := $M.63;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i579 := $load.i64($M.53, $p26);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} vslice_dummy_var_147 := seq_read($p578, $p65, $i579, $p67);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 1677} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb5:
    assume $i142 == 1;
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i140, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i140, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i148 == 1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i553 := $M.88;
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i554 := $ne.i32($i553, 0);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb400:
    assume $i554 == 1;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1665} $i555 := __VERIFIER_nondet_int();
    call {:si_unique_call 1666} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i555);
    call {:si_unique_call 1667} {:cexpr "tmp___35"} boogie_si_record_i32($i555);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    $i556 := $slt.i32($i555, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i556 == 1);
    assume {:verifier.code 0} true;
    $i557 := $eq.i32($i555, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    assume !($i557 == 1);
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} ldv_stop();
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb405:
    assume $i557 == 1;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i563 := $M.88;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i564 := $eq.i32($i563, 1);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  $bb415:
    assume !($i564 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb414:
    assume $i564 == 1;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p565 := $M.55;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p566 := $M.54;
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} vslice_dummy_var_146 := sg_add_device($p565, $p566);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb416;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb403:
    assume $i556 == 1;
    assume {:verifier.code 0} true;
    $i558 := $eq.i32($i555, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    assume !($i558 == 1);
    goto $bb407;

  $bb408:
    assume $i558 == 1;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i559 := $M.88;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i560 := $eq.i32($i559, 1);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i560 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb410:
    assume $i560 == 1;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p561 := $M.55;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p562 := $M.54;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} sg_remove_device($p561, $p562);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb412;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i148 == 1;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i546 := $M.87;
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i547 := $ne.i32($i546, 0);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb388:
    assume $i547 == 1;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1659} $i548 := __VERIFIER_nondet_int();
    call {:si_unique_call 1660} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i548);
    call {:si_unique_call 1661} {:cexpr "tmp___34"} boogie_si_record_i32($i548);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    $i549 := $eq.i32($i548, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i549 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_stop();
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb391:
    assume $i549 == 1;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i550 := $M.87;
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i551 := $eq.i32($i550, 1);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb393:
    assume $i551 == 1;
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} vslice_dummy_var_145 := sg_vma_fault($p64, $p62);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    goto $bb395;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i140, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i149 == 1);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i500 := $M.86;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i501 := $ne.i32($i500, 0);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb347:
    assume $i501 == 1;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1640} $i502 := __VERIFIER_nondet_int();
    call {:si_unique_call 1641} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i502);
    call {:si_unique_call 1642} {:cexpr "tmp___33"} boogie_si_record_i32($i502);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $i503 := $slt.i32($i502, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    $i504 := $slt.i32($i502, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    $i505 := $slt.i32($i502, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i505 == 1);
    assume {:verifier.code 0} true;
    $i506 := $eq.i32($i502, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    assume !($i506 == 1);
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} ldv_stop();
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb356:
    assume $i506 == 1;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i540 := $M.86;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i541 := $eq.i32($i540, 2);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb382:
    assume $i541 == 1;
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p542 := $M.74;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i543 := $load.i64($M.53, $p20);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i544 := $load.i32($M.53, $p23);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} vslice_dummy_var_144 := seq_lseek($p542, $i543, $i544);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb354:
    assume $i505 == 1;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i533 := $M.86;
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32($i533, 2);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb379:
    assume $i534 == 1;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $p535 := $M.73;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p536 := $M.74;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} vslice_dummy_var_143 := single_release($p535, $p536);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i538 := $M.80;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i539 := $sub.i32($i538, 1);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $M.80 := $i539;
    call {:si_unique_call 1655} {:cexpr "ref_cnt"} boogie_si_record_i32($i539);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb352:
    assume $i504 == 1;
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i524 := $M.86;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i525 := $eq.i32($i524, 1);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i525 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb373:
    assume $i525 == 1;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p526 := $M.73;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $p527 := $M.74;
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i528 := sg_proc_single_open_adio($p526, $p527);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $M.107 := $i528;
    call {:si_unique_call 1650} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i528);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i529 := $M.107;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i530 := $eq.i32($i529, 0);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb375:
    assume $i530 == 1;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i531 := $M.80;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i532 := $add.i32($i531, 1);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $M.80 := $i532;
    call {:si_unique_call 1652} {:cexpr "ref_cnt"} boogie_si_record_i32($i532);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb350:
    assume $i503 == 1;
    assume {:verifier.code 0} true;
    $i507 := $slt.i32($i502, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i507 == 1);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i519 := $M.86;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i520 := $eq.i32($i519, 2);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb370:
    assume $i520 == 1;
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p521 := $M.74;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i522 := $load.i64($M.53, $p21);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} vslice_dummy_var_142 := seq_read($p521, $p58, $i522, $p60);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb359:
    assume $i507 == 1;
    assume {:verifier.code 0} true;
    $i508 := $eq.i32($i502, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    assume !($i508 == 1);
    goto $bb358;

  $bb361:
    assume $i508 == 1;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i509 := $M.86;
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i510 := $eq.i32($i509, 1);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    $i514 := $M.86;
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i515 := $eq.i32($i514, 2);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i515 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb366:
    assume $i515 == 1;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p516 := $M.74;
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i517 := $load.i64($M.53, $p22);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} vslice_dummy_var_141 := sg_proc_write_adio($p516, $p57, $i517, $p56);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb363:
    assume $i510 == 1;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p511 := $M.74;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i512 := $load.i64($M.53, $p22);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} vslice_dummy_var_140 := sg_proc_write_adio($p511, $p57, $i512, $p56);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1644} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb20:
    assume $i149 == 1;
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i465 := $M.85;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i466 := $ne.i32($i465, 0);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb314:
    assume $i466 == 1;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1625} $i467 := __VERIFIER_nondet_int();
    call {:si_unique_call 1626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i467);
    call {:si_unique_call 1627} {:cexpr "tmp___32"} boogie_si_record_i32($i467);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $i468 := $slt.i32($i467, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i468 == 1);
    assume {:verifier.code 0} true;
    $i469 := $slt.i32($i467, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i467, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    assume !($i470 == 1);
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} ldv_stop();
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb321:
    assume $i470 == 1;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i494 := $M.85;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i495 := $eq.i32($i494, 2);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb341:
    assume $i495 == 1;
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p496 := $M.61;
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i497 := $load.i64($M.53, $p19);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i498 := $load.i32($M.53, $p18);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} vslice_dummy_var_139 := seq_lseek($p496, $i497, $i498);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1638} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb319:
    assume $i469 == 1;
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i487 := $M.85;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i488 := $eq.i32($i487, 2);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb338:
    assume $i488 == 1;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p489 := $M.60;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p490 := $M.61;
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} vslice_dummy_var_138 := single_release($p489, $p490);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i492 := $M.80;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i493 := $sub.i32($i492, 1);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $M.80 := $i493;
    call {:si_unique_call 1636} {:cexpr "ref_cnt"} boogie_si_record_i32($i493);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb317:
    assume $i468 == 1;
    assume {:verifier.code 0} true;
    $i471 := $slt.i32($i467, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i471 == 1);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i478 := $M.85;
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i478, 1);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb332:
    assume $i479 == 1;
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p480 := $M.60;
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p481 := $M.61;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $i482 := sg_proc_single_open_devhdr($p480, $p481);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $M.106 := $i482;
    call {:si_unique_call 1631} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i482);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i483 := $M.106;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i484 := $eq.i32($i483, 0);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb334:
    assume $i484 == 1;
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1632} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i485 := $M.80;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i486 := $add.i32($i485, 1);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $M.80 := $i486;
    call {:si_unique_call 1633} {:cexpr "ref_cnt"} boogie_si_record_i32($i486);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb324:
    assume $i471 == 1;
    assume {:verifier.code 0} true;
    $i472 := $eq.i32($i467, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    assume !($i472 == 1);
    goto $bb323;

  $bb326:
    assume $i472 == 1;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i473 := $M.85;
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i474 := $eq.i32($i473, 2);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb328:
    assume $i474 == 1;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p475 := $M.61;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i476 := $load.i64($M.53, $p17);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} vslice_dummy_var_137 := seq_read($p475, $p54, $i476, $p53);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb3:
    assume $i141 == 1;
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i140, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    $i151 := $slt.i32($i140, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    $i152 := $slt.i32($i140, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i152 == 1);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i408 := $M.84;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i409 := $ne.i32($i408, 0);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb269:
    assume $i409 == 1;
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1603} $i410 := __VERIFIER_nondet_int();
    call {:si_unique_call 1604} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i410);
    call {:si_unique_call 1605} {:cexpr "tmp___31"} boogie_si_record_i32($i410);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i411 := $slt.i32($i410, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    $i412 := $slt.i32($i410, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i410, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume !($i413 == 1);
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_stop();
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb276:
    assume $i413 == 1;
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i449 := $M.84;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i450 := $eq.i32($i449, 2);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb302:
    assume $i450 == 1;
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p451 := $M.101;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p452 := $M.104;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p453 := $M.102;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $p454 := dev_seq_next($p451, $p452, $p453);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $M.105 := $p454;
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p455 := $M.105;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i456 := $p2i.ref.i64($p455);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i457 := $eq.i64($i456, 0);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $p460 := $M.105;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i461 := $p2i.ref.i64($p460);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i462 := $ne.i64($i461, 0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb307:
    assume $i462 == 1;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $M.84 := 3;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i463 := $M.80;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i464 := $add.i32($i463, 1);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $M.80 := $i464;
    call {:si_unique_call 1623} {:cexpr "ref_cnt"} boogie_si_record_i32($i464);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb304:
    assume $i457 == 1;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i458 := $M.80;
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i459 := $add.i32($i458, 1);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $M.80 := $i459;
    call {:si_unique_call 1621} {:cexpr "ref_cnt"} boogie_si_record_i32($i459);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb274:
    assume $i412 == 1;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i443 := $M.84;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i444 := $eq.i32($i443, 2);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb299:
    assume $i444 == 1;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p445 := $M.101;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p446 := $M.102;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p447 := $bitcast.ref.ref($p446);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} vslice_dummy_var_136 := sg_proc_seq_show_debug($p445, $p447);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1618} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb272:
    assume $i411 == 1;
    assume {:verifier.code 0} true;
    $i414 := $slt.i32($i410, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i414 == 1);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i431 := $M.84;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i431, 3);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $i437 := $M.84;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i437, 2);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb296:
    assume $i438 == 1;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p439 := $M.101;
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p440 := $M.104;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} dev_seq_stop($p439, $p440);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i441 := $M.80;
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i442 := $sub.i32($i441, 1);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $M.80 := $i442;
    call {:si_unique_call 1616} {:cexpr "ref_cnt"} boogie_si_record_i32($i442);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb293:
    assume $i432 == 1;
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p433 := $M.101;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p434 := $M.104;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} dev_seq_stop($p433, $p434);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1612} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i435 := $M.80;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i436 := $sub.i32($i435, 1);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $M.80 := $i436;
    call {:si_unique_call 1613} {:cexpr "ref_cnt"} boogie_si_record_i32($i436);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb279:
    assume $i414 == 1;
    assume {:verifier.code 0} true;
    $i415 := $eq.i32($i410, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    assume !($i415 == 1);
    goto $bb278;

  $bb281:
    assume $i415 == 1;
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i416 := $M.84;
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i416, 1);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb283:
    assume $i417 == 1;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p418 := $M.101;
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p419 := $M.102;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $p420 := dev_seq_start($p418, $p419);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $M.103 := $p420;
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p421 := $M.103;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i422 := $p2i.ref.i64($p421);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i423 := $ne.i64($i422, 0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $p426 := $M.103;
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i427 := $p2i.ref.i64($p426);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i428 := $eq.i64($i427, 0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb288:
    assume $i428 == 1;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i429 := $M.80;
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i430 := $add.i32($i429, 1);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $M.80 := $i430;
    call {:si_unique_call 1610} {:cexpr "ref_cnt"} boogie_si_record_i32($i430);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb285:
    assume $i423 == 1;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.84 := 3;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i424 := $M.80;
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i425 := $add.i32($i424, 1);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $M.80 := $i425;
    call {:si_unique_call 1608} {:cexpr "ref_cnt"} boogie_si_record_i32($i425);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb26:
    assume $i152 == 1;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i373 := $M.83;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb236:
    assume $i374 == 1;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1588} $i375 := __VERIFIER_nondet_int();
    call {:si_unique_call 1589} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i375);
    call {:si_unique_call 1590} {:cexpr "tmp___30"} boogie_si_record_i32($i375);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i376 := $slt.i32($i375, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    $i377 := $slt.i32($i375, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i375, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    assume !($i378 == 1);
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} ldv_stop();
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb243:
    assume $i378 == 1;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i402 := $M.83;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i403 := $eq.i32($i402, 2);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb263:
    assume $i403 == 1;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p404 := $M.57;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i405 := $load.i64($M.53, $p16);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i406 := $load.i32($M.53, $p14);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} vslice_dummy_var_135 := seq_lseek($p404, $i405, $i406);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb241:
    assume $i377 == 1;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i395 := $M.83;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i395, 2);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb260:
    assume $i396 == 1;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p397 := $M.56;
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p398 := $M.57;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} vslice_dummy_var_134 := ldv_seq_release_16($p397, $p398);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i400 := $M.80;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i401 := $sub.i32($i400, 1);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.80 := $i401;
    call {:si_unique_call 1599} {:cexpr "ref_cnt"} boogie_si_record_i32($i401);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb239:
    assume $i376 == 1;
    assume {:verifier.code 0} true;
    $i379 := $slt.i32($i375, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i379 == 1);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i386 := $M.83;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i386, 1);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb254:
    assume $i387 == 1;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p388 := $M.56;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p389 := $M.57;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i390 := sg_proc_open_devstrs($p388, $p389);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.100 := $i390;
    call {:si_unique_call 1594} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i390);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i391 := $M.100;
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 0);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb256:
    assume $i392 == 1;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i393 := $M.80;
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i394 := $add.i32($i393, 1);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $M.80 := $i394;
    call {:si_unique_call 1596} {:cexpr "ref_cnt"} boogie_si_record_i32($i394);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb246:
    assume $i379 == 1;
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i375, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    assume !($i380 == 1);
    goto $bb245;

  $bb248:
    assume $i380 == 1;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i381 := $M.83;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, 2);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb250:
    assume $i382 == 1;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p383 := $M.57;
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i384 := $load.i64($M.53, $p15);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} vslice_dummy_var_133 := seq_read($p383, $p51, $i384, $p50);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb24:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i140, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i153 == 1);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i282 := $M.82;
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i283 := $ne.i32($i282, 0);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb161:
    assume $i283 == 1;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1553} $i284 := __VERIFIER_nondet_int();
    call {:si_unique_call 1554} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i284);
    call {:si_unique_call 1555} {:cexpr "tmp___29"} boogie_si_record_i32($i284);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i284, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $slt.i32($i284, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    $i287 := $slt.i32($i284, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    $i288 := $slt.i32($i284, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i284, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i289 == 1);
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} ldv_stop();
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb172:
    assume $i289 == 1;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i367 := $M.82;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i367, 2);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb230:
    assume $i368 == 1;
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p369 := $M.65;
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.53, $p8);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i371 := $load.i64($M.53, $p5);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_132 := sg_ioctl($p369, $i370, $i371);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb170:
    assume $i288 == 1;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i361 := $M.82;
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 2);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb227:
    assume $i362 == 1;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p363 := $M.65;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i364 := $load.i64($M.53, $p4);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i365 := $load.i32($M.53, $p7);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_131 := no_llseek($p363, $i364, $i365);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb168:
    assume $i287 == 1;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i354 := $M.82;
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 2);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb224:
    assume $i355 == 1;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p356 := $M.64;
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p357 := $M.65;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} vslice_dummy_var_130 := sg_release($p356, $p357);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i359 := $M.80;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i360 := $sub.i32($i359, 1);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $M.80 := $i360;
    call {:si_unique_call 1582} {:cexpr "ref_cnt"} boogie_si_record_i32($i360);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    goto $bb226;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb166:
    assume $i286 == 1;
    assume {:verifier.code 0} true;
    $i290 := $slt.i32($i284, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i290 == 1);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i346 := $M.82;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 1);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i350 := $M.82;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i351 := $eq.i32($i350, 2);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb221:
    assume $i351 == 1;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p352 := $M.65;
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_129 := sg_mmap($p352, $p44);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb218:
    assume $i347 == 1;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p348 := $M.65;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_128 := sg_mmap($p348, $p44);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb175:
    assume $i290 == 1;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i337 := $M.82;
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 1);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb212:
    assume $i338 == 1;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p339 := $M.64;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p340 := $M.65;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $i341 := sg_open($p339, $p340);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.99 := $i341;
    call {:si_unique_call 1573} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i341);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i342 := $M.99;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i342, 0);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb214:
    assume $i343 == 1;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i344 := $M.80;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i345 := $add.i32($i344, 1);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $M.80 := $i345;
    call {:si_unique_call 1575} {:cexpr "ref_cnt"} boogie_si_record_i32($i345);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    goto $bb216;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb164:
    assume $i285 == 1;
    assume {:verifier.code 0} true;
    $i291 := $slt.i32($i284, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    $i292 := $slt.i32($i284, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    $i293 := $slt.i32($i284, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i293 == 1);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i325 := $M.82;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 1);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $i331 := $M.82;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 2);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb209:
    assume $i332 == 1;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i333 := $load.i32($M.53, $p6);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p334 := $M.65;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.53, $p10);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_127 := sg_fasync($i333, $p334, $i335);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb206:
    assume $i326 == 1;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.53, $p6);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p328 := $M.65;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.53, $p10);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_126 := sg_fasync($i327, $p328, $i329);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb181:
    assume $i293 == 1;
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i317 := $M.82;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 1);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i321 := $M.82;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 2);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb203:
    assume $i322 == 1;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p323 := $M.65;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_125 := sg_poll($p323, $p46);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb200:
    assume $i318 == 1;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p319 := $M.65;
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} vslice_dummy_var_124 := sg_poll($p319, $p46);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb179:
    assume $i292 == 1;
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i311 := $M.82;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 2);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb197:
    assume $i312 == 1;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p313 := $M.65;
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.53, $p11);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i315 := $load.i64($M.53, $p9);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vslice_dummy_var_123 := sg_compat_ioctl($p313, $i314, $i315);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb177:
    assume $i291 == 1;
    assume {:verifier.code 0} true;
    $i294 := $slt.i32($i284, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i294 == 1);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i306 := $M.82;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 2);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb194:
    assume $i307 == 1;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p308 := $M.65;
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i309 := $load.i64($M.53, $p13);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_122 := sg_read($p308, $p41, $i309, $p40);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb183:
    assume $i294 == 1;
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i284, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb174;

  $bb185:
    assume $i295 == 1;
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i296 := $M.82;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 1);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i301 := $M.82;
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 2);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb190:
    assume $i302 == 1;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p303 := $M.65;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i304 := $load.i64($M.53, $p12);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} vslice_dummy_var_121 := sg_write($p303, $p42, $i304, $p48);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb187:
    assume $i297 == 1;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p298 := $M.65;
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i299 := $load.i64($M.53, $p12);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} vslice_dummy_var_120 := sg_write($p298, $p42, $i299, $p48);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb28:
    assume $i153 == 1;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i265 := $M.81;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb131:
    assume $i266 == 1;
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} $i267 := __VERIFIER_nondet_int();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i267);
    call {:si_unique_call 1525} {:cexpr "tmp___28"} boogie_si_record_i32($i267);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i267, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i267, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_stop();
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb136:
    assume $i269 == 1;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i275 := $M.81;
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 1);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb149:
    assume $i276 == 1;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $i277 := init_sg();
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.98 := $i277;
    call {:si_unique_call 1530} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i277);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i278 := $M.98;
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i280 := $M.98;
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb154:
    assume $i281 == 1;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_check_final_state();
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb151:
    assume $i279 == 1;
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 1531} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} ldv_file_operations_13();
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} ldv_file_operations_10();
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1536} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} ldv_file_operations_4();
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1538} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} ldv_file_operations_8();
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1541} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_initialize_class_interface_15();
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1543} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_file_operations_12();
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1545} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_file_operations_9();
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1547} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_file_operations_11();
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1549} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_file_operations_6();
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb134:
    assume $i268 == 1;
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i267, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb138;

  $bb139:
    assume $i270 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i271 := $M.81;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 3);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i272 == 1);
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb141:
    assume $i272 == 1;
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i273 := $M.80;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 0);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i274 == 1);
    goto $bb143;

  $bb144:
    assume $i274 == 1;
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} exit_sg();
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb22:
    assume $i150 == 1;
    assume {:verifier.code 0} true;
    $i154 := $slt.i32($i140, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i140, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i155 == 1);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i263 := $M.79;
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb128:
    assume $i264 == 1;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} invoke_work_1();
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    goto $bb130;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i155 == 1;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i261 := $M.78;
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i262 := $ne.i32($i261, 0);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb125:
    assume $i262 == 1;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} invoke_work_2();
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb127;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i154 == 1;
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i140, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i156 == 1);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i204 := $M.3;
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb80:
    assume $i205 == 1;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1499} $i206 := __VERIFIER_nondet_int();
    call {:si_unique_call 1500} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i206);
    call {:si_unique_call 1501} {:cexpr "tmp___27"} boogie_si_record_i32($i206);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i207 := $slt.i32($i206, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    $i208 := $slt.i32($i206, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i206, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i209 == 1);
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_stop();
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb87:
    assume $i209 == 1;
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i245 := $M.3;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 2);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb113:
    assume $i246 == 1;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p247 := $M.4;
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p248 := $M.96;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p249 := $M.94;
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p250 := dev_seq_next($p247, $p248, $p249);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $M.97 := $p250;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p251 := $M.97;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p251);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i253 := $eq.i64($i252, 0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p256 := $M.97;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p256);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i258 := $ne.i64($i257, 0);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb118:
    assume $i258 == 1;
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $M.3 := 3;
    call {:si_unique_call 1518} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i259 := $M.80;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i260 := $add.i32($i259, 1);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $M.80 := $i260;
    call {:si_unique_call 1519} {:cexpr "ref_cnt"} boogie_si_record_i32($i260);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb115:
    assume $i253 == 1;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i254 := $M.80;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i254, 1);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $M.80 := $i255;
    call {:si_unique_call 1517} {:cexpr "ref_cnt"} boogie_si_record_i32($i255);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb85:
    assume $i208 == 1;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i239 := $M.3;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 2);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb110:
    assume $i240 == 1;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p241 := $M.4;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p242 := $M.94;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} vslice_dummy_var_119 := sg_proc_seq_show_dev($p241, $p243);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1514} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb83:
    assume $i207 == 1;
    assume {:verifier.code 0} true;
    $i210 := $slt.i32($i206, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i210 == 1);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i227 := $M.3;
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 3);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i233 := $M.3;
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 2);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb107:
    assume $i234 == 1;
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p235 := $M.4;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $p236 := $M.96;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} dev_seq_stop($p235, $p236);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i237 := $M.80;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i238 := $sub.i32($i237, 1);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $M.80 := $i238;
    call {:si_unique_call 1512} {:cexpr "ref_cnt"} boogie_si_record_i32($i238);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb104:
    assume $i228 == 1;
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p229 := $M.4;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p230 := $M.96;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} dev_seq_stop($p229, $p230);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i231 := $M.80;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i232 := $sub.i32($i231, 1);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $M.80 := $i232;
    call {:si_unique_call 1509} {:cexpr "ref_cnt"} boogie_si_record_i32($i232);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb90:
    assume $i210 == 1;
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i206, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb89;

  $bb92:
    assume $i211 == 1;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i212 := $M.3;
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb94:
    assume $i213 == 1;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p214 := $M.4;
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p215 := $M.94;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $p216 := dev_seq_start($p214, $p215);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.95 := $p216;
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p217 := $M.95;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p217);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i219 := $ne.i64($i218, 0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p222 := $M.95;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i223 := $p2i.ref.i64($p222);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i224 := $eq.i64($i223, 0);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume $i224 == 1;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i225 := $M.80;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i226 := $add.i32($i225, 1);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.80 := $i226;
    call {:si_unique_call 1506} {:cexpr "ref_cnt"} boogie_si_record_i32($i226);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb96:
    assume $i219 == 1;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $M.3 := 3;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i220 := $M.80;
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i221 := $add.i32($i220, 1);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $M.80 := $i221;
    call {:si_unique_call 1504} {:cexpr "ref_cnt"} boogie_si_record_i32($i221);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb34:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i140, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb13;

  $bb36:
    assume $i157 == 1;
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i158 := $M.77;
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb38:
    assume $i159 == 1;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1480} $i160 := __VERIFIER_nondet_int();
    call {:si_unique_call 1481} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i160);
    call {:si_unique_call 1482} {:cexpr "tmp___26"} boogie_si_record_i32($i160);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i160, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    $i162 := $slt.i32($i160, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    $i163 := $slt.i32($i160, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i160, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_stop();
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb47:
    assume $i164 == 1;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i198 := $M.77;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 2);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb73:
    assume $i199 == 1;
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p200 := $M.72;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i201 := $load.i64($M.53, $p3);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.53, $p1);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} vslice_dummy_var_118 := seq_lseek($p200, $i201, $i202);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1497} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb45:
    assume $i163 == 1;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i191 := $M.77;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 2);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb70:
    assume $i192 == 1;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p193 := $M.71;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p194 := $M.72;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} vslice_dummy_var_117 := single_release($p193, $p194);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1494} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i196 := $M.80;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i197 := $sub.i32($i196, 1);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $M.80 := $i197;
    call {:si_unique_call 1495} {:cexpr "ref_cnt"} boogie_si_record_i32($i197);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb43:
    assume $i162 == 1;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i182 := $M.77;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 1);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb64:
    assume $i183 == 1;
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p184 := $M.71;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p185 := $M.72;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i186 := sg_proc_single_open_dressz($p184, $p185);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $M.93 := $i186;
    call {:si_unique_call 1490} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i186);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i187 := $M.93;
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb66:
    assume $i188 == 1;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i189 := $M.80;
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i189, 1);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.80 := $i190;
    call {:si_unique_call 1492} {:cexpr "ref_cnt"} boogie_si_record_i32($i190);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb41:
    assume $i161 == 1;
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i160, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i165 == 1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i177 := $M.77;
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 2);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb61:
    assume $i178 == 1;
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p179 := $M.72;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i180 := $load.i64($M.53, $p0);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} vslice_dummy_var_116 := seq_read($p179, $p36, $i180, $p38);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1488} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb50:
    assume $i165 == 1;
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i160, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb49;

  $bb52:
    assume $i166 == 1;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i167 := $M.77;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 1);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i172 := $M.77;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 2);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume $i173 == 1;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p174 := $M.72;
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i175 := $load.i64($M.53, $p2);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} vslice_dummy_var_115 := sg_proc_write_dressz($p174, $p33, $i175, $p35);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i168 == 1;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p169 := $M.72;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i170 := $load.i64($M.53, $p2);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} vslice_dummy_var_114 := sg_proc_write_dressz($p169, $p33, $i170, $p35);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1484} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb79_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1477} $i140 := __VERIFIER_nondet_int();
    call {:si_unique_call 1478} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i140);
    call {:si_unique_call 1479} {:cexpr "tmp___25"} boogie_si_record_i32($i140);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 490986);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    return;
}



const exit_sg: ref;

axiom exit_sg == $sub.ref(0, 492018);

procedure exit_sg();
  free requires assertsPassed;
  modifies $M.7;



implementation exit_sg()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} sg_proc_cleanup();
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} class_interface_unregister(sg_interface);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $p0 := $M.8;
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} class_destroy($p0);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 1744} {:cexpr "sg_sysfs_valid"} boogie_si_record_i32(0);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} unregister_chrdev_region(22020096, 32768);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} idr_destroy(sg_index_idr);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    return;
}



const init_sg: ref;

axiom init_sg == $sub.ref(0, 493050);

procedure init_sg() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.1, $M.33, $M.8, $M.7, $M.116, $CurrAddr;



implementation init_sg() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i21: i32;
  var $i10: i32;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i1 := $M.34;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, 4095);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.33;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, 0);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, sg_big_buff);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $M.33 := $i7;
    call {:si_unique_call 1751} {:cexpr "def_reserved_size"} boogie_si_record_i32($i7);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} $i8 := register_chrdev_region(22020096, 32768, .str.22);
    call {:si_unique_call 1753} {:cexpr "rc"} boogie_si_record_i32($i8);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} $p11 := __class_create(__this_module, .str.23, $p0);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $M.8 := $p11;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p12 := $M.8;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $i14 := IS_ERR($p13);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 1756} {:cexpr "tmp___1"} boogie_si_record_i8($i15);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 1761} {:cexpr "sg_sysfs_valid"} boogie_si_record_i32(1);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} $i22 := scsi_register_interface(sg_interface);
    call {:si_unique_call 1763} {:cexpr "rc"} boogie_si_record_i32($i22);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $M.8;
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} class_destroy($p25);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i21 := $i22;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} unregister_chrdev_region(22020096, 32768);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i10 := $i21;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} vslice_dummy_var_157 := sg_proc_init();
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb9;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $p17 := $M.8;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} $i19 := PTR_ERR($p18);
    call {:si_unique_call 1758} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 1759} {:cexpr "rc"} boogie_si_record_i32($i20);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb13;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i6 := $M.33;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, sg_big_buff, $i6);
    call {:si_unique_call 1750} {:cexpr "sg_big_buff"} boogie_si_record_i32($i6);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $M.34 := 4096;
    call {:si_unique_call 1748} {:cexpr "scatter_elem_sz"} boogie_si_record_i32(4096);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i3 := $M.34;
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $M.35 := $i3;
    call {:si_unique_call 1749} {:cexpr "scatter_elem_sz_prev"} boogie_si_record_i32($i3);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_seq_release_16: ref;

axiom ldv_seq_release_16 == $sub.ref(0, 494082);

procedure ldv_seq_release_16($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_seq_release_16($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $i2 := seq_release($p0, $p1);
    call {:si_unique_call 1767} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1768} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_release_17: ref;

axiom ldv_seq_release_17 == $sub.ref(0, 495114);

procedure ldv_seq_release_17($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_seq_release_17($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $i2 := seq_release($p0, $p1);
    call {:si_unique_call 1770} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_release_18: ref;

axiom ldv_seq_release_18 == $sub.ref(0, 496146);

procedure ldv_seq_release_18($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_seq_release_18($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} $i2 := seq_release($p0, $p1);
    call {:si_unique_call 1773} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1774} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 497178);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i0 := $M.32;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} ldv_error();
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const register_chrdev_region: ref;

axiom register_chrdev_region == $sub.ref(0, 498210);

procedure register_chrdev_region($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_chrdev_region($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1776} {:cexpr "register_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1777} {:cexpr "register_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1778} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1779} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __class_create: ref;

axiom __class_create == $sub.ref(0, 499242);

procedure __class_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __class_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} $p3 := external_alloc();
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const scsi_register_interface: ref;

axiom scsi_register_interface == $sub.ref(0, 500274);

procedure scsi_register_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_register_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1781} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1782} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sg_proc_init: ref;

axiom sg_proc_init == $sub.ref(0, 501306);

procedure sg_proc_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.116;



implementation sg_proc_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i24: i32;
  var $i25: i1;
  var $i5: i32;
  var $i4: i32;
  var vslice_dummy_var_158: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} $p0 := proc_mkdir(sg_proc_sg_dirname, $0.ref);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $M.116 := $p0;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p1 := $M.116;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    call $i6, $p8, $p9, $p10, $p11, $i12, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $p20, $p21, $p22, $i24, $i25, $i5, vslice_dummy_var_158 := sg_proc_init_loop_$bb5($i6, $p8, $p9, $p10, $p11, $i12, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $p20, $p21, $p22, $i24, $i25, $i5, vslice_dummy_var_158);
    goto $bb5_last;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    $p8 := $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref($i6, 16)), $mul.ref(8, 1));
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.117, $p8);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.118, $p10);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i14 := (if $i13 == 1 then 420 else 292);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    call {:si_unique_call 1784} {:cexpr "mask"} boogie_si_record_i16($i15);
    $p16 := $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref($i6, 16)), $mul.ref(0, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.119, $p16);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i15);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p20 := $M.116;
    $p21 := $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref($i6, 16)), $mul.ref(8, 1));
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.117, $p21);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} vslice_dummy_var_158 := proc_create($p17, $i19, $p20, $p22);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i5, 1);
    call {:si_unique_call 1786} {:cexpr "k"} boogie_si_record_i32($i24);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 7);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb7:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i24;
    goto $bb7_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb7_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7675;
}



const class_destroy: ref;

axiom class_destroy == $sub.ref(0, 502338);

procedure class_destroy($p0: ref);
  free requires assertsPassed;



implementation class_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    return;
}



const unregister_chrdev_region: ref;

axiom unregister_chrdev_region == $sub.ref(0, 503370);

procedure unregister_chrdev_region($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation unregister_chrdev_region($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} {:cexpr "unregister_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1788} {:cexpr "unregister_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    return;
}



const proc_mkdir: ref;

axiom proc_mkdir == $sub.ref(0, 504402);

procedure proc_mkdir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_mkdir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $p2 := external_alloc();
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const proc_create: ref;

axiom proc_create == $sub.ref(0, 505434);

procedure proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} {:cexpr "proc_create:arg:mode"} boogie_si_record_i16($i1);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $p6 := proc_create_data($p0, $i5, $p2, $p3, $0.ref);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 506466);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} {:cexpr "proc_create_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} $p5 := external_alloc();
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const sg_proc_cleanup: ref;

axiom sg_proc_cleanup == $sub.ref(0, 507498);

procedure sg_proc_cleanup();
  free requires assertsPassed;



implementation sg_proc_cleanup()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p0 := $M.116;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p3 := $M.116;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} remove_proc_entry(.str.15, $p3);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p4 := $M.116;
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} remove_proc_entry(.str.16, $p4);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p5 := $M.116;
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} remove_proc_entry(.str.17, $p5);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p6 := $M.116;
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} remove_proc_entry(.str.18, $p6);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p7 := $M.116;
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} remove_proc_entry(.str.19, $p7);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p8 := $M.116;
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} remove_proc_entry(.str.20, $p8);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p9 := $M.116;
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} remove_proc_entry(.str.21, $p9);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} remove_proc_entry(sg_proc_sg_dirname, $0.ref);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const class_interface_unregister: ref;

axiom class_interface_unregister == $sub.ref(0, 508530);

procedure class_interface_unregister($p0: ref);
  free requires assertsPassed;



implementation class_interface_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    return;
}



const idr_destroy: ref;

axiom idr_destroy == $sub.ref(0, 509562);

procedure idr_destroy($p0: ref);
  free requires assertsPassed;



implementation idr_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    return;
}



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 510594);

procedure remove_proc_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_proc_entry($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 511626);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1802} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 1} true;
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 512658);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 513690);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 514722);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 515754);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 516786);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 517818);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 518850);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 519882);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 520914);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 521946);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 522978);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 524010);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 525042);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1803} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1804} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1805} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1806} __VERIFIER_assume($i4);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 526074);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 527106);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 528138);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 529170);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1807} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1808} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1809} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1810} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1811} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1812} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1813} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1814} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1815} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1816} __VERIFIER_assume($i7);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1817} __VERIFIER_assume($i11);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 530202);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 531234);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1818} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1819} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1820} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1821} __VERIFIER_assume($i4);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 532266);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 533298);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 534330);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 535362);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 536394);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1822} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1823} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1824} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1825} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1826} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1827} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1828} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1829} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1830} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1831} __VERIFIER_assume($i7);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1832} __VERIFIER_assume($i11);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 537426);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 538458);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 539490);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 540522);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 541554);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 542586);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 543618);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 544650);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 545682);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1833} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1834} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1835} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1836} __VERIFIER_assume($i10);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 546714);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1837} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1838} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1839} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 547746);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1840} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1841} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1842} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 548778);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1843} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1844} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 549810);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 550842);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1845} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1846} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 551874);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 552906);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 553938);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1847} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1848} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1849} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1850} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $p6 := malloc($i5);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.2;
    call {:si_unique_call 1852} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_25;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 554970);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 556002);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.1, $M.54, $M.55, $M.56, $M.57, $M.66, $M.70, $M.67, $M.68, $M.69, $M.24, $M.26, $M.28, $M.30, $M.25, $M.58, $M.59, $M.4, $M.101, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.111, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.3, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.112, $M.113, $M.114, $M.115, $M.32, $M.124, $M.125, $M.126, $M.127, $M.2, $M.5, $M.33, $M.35, $M.34, $M.7, $M.8, $M.133, $M.134, $M.135, $M.136, $M.118, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.119, $M.117, $M.116, $M.161;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1853} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.1 := $store.i32($M.1, sg_big_buff, 32768);
    call {:si_unique_call 1854} {:cexpr "sg_big_buff"} boogie_si_record_i32(32768);
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.56 := $0.ref;
    $M.57 := $0.ref;
    $M.66 := 0;
    call {:si_unique_call 1855} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.70 := $0.ref;
    $M.67 := 0;
    call {:si_unique_call 1856} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1857} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1858} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1859} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 1860} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1861} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1862} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.25 := $0.ref;
    $M.58 := $0.ref;
    $M.59 := $0.ref;
    $M.4 := $0.ref;
    $M.101 := $0.ref;
    $M.60 := $0.ref;
    $M.61 := $0.ref;
    $M.62 := $0.ref;
    $M.63 := $0.ref;
    $M.64 := $0.ref;
    $M.65 := $0.ref;
    $M.111 := $0.ref;
    $M.71 := $0.ref;
    $M.72 := $0.ref;
    $M.73 := $0.ref;
    $M.74 := $0.ref;
    $M.75 := $0.ref;
    $M.76 := $0.ref;
    $M.77 := 0;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1864} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1865} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1866} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 1867} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1868} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1869} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1870} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1871} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1872} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 1873} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 1874} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1875} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 1876} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 1877} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1878} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 1879} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 1880} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.94 := $0.ref;
    $M.95 := $0.ref;
    $M.96 := $0.ref;
    $M.97 := $0.ref;
    $M.98 := 0;
    call {:si_unique_call 1881} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 1882} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 1883} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.102 := $0.ref;
    $M.103 := $0.ref;
    $M.104 := $0.ref;
    $M.105 := $0.ref;
    $M.106 := 0;
    call {:si_unique_call 1884} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.107 := 0;
    call {:si_unique_call 1885} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.108 := 0;
    call {:si_unique_call 1886} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.109 := 0;
    call {:si_unique_call 1887} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.110 := 0;
    call {:si_unique_call 1888} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.112 := $0.ref;
    $M.113 := $0.ref;
    $M.114 := $0.ref;
    $M.115 := $0.ref;
    $M.32 := 1;
    call {:si_unique_call 1889} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.124 := $store.ref($M.124, debug_seq_ops, dev_seq_start);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(debug_seq_ops, $mul.ref(0, 32)), $mul.ref(8, 1)), dev_seq_stop);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(debug_seq_ops, $mul.ref(0, 32)), $mul.ref(16, 1)), dev_seq_next);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(debug_seq_ops, $mul.ref(0, 32)), $mul.ref(24, 1)), sg_proc_seq_show_debug);
    $M.124 := $store.ref($M.124, dev_seq_ops, dev_seq_start);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(dev_seq_ops, $mul.ref(0, 32)), $mul.ref(8, 1)), dev_seq_stop);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(dev_seq_ops, $mul.ref(0, 32)), $mul.ref(16, 1)), dev_seq_next);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(dev_seq_ops, $mul.ref(0, 32)), $mul.ref(24, 1)), sg_proc_seq_show_dev);
    $M.2 := $store.ref($M.2, sg_fops, __this_module);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), no_llseek);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), sg_read);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), sg_write);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), sg_poll);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), sg_ioctl);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), sg_compat_ioctl);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), sg_mmap);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), sg_open);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), sg_release);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), sg_fasync);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.124 := $store.ref($M.124, devstrs_seq_ops, dev_seq_start);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(devstrs_seq_ops, $mul.ref(0, 32)), $mul.ref(8, 1)), dev_seq_stop);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(devstrs_seq_ops, $mul.ref(0, 32)), $mul.ref(16, 1)), dev_seq_next);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(devstrs_seq_ops, $mul.ref(0, 32)), $mul.ref(24, 1)), sg_proc_seq_show_devstrs);
    $M.5 := 30536;
    call {:si_unique_call 1890} {:cexpr "sg_version_num"} boogie_si_record_i32(30536);
    $M.2 := $store.ref($M.2, sg_mmap_vm_ops, $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_mmap_vm_ops, $mul.ref(0, 88)), $mul.ref(8, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_mmap_vm_ops, $mul.ref(0, 88)), $mul.ref(16, 1)), sg_vma_fault);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_mmap_vm_ops, $mul.ref(0, 88)), $mul.ref(24, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_mmap_vm_ops, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_mmap_vm_ops, $mul.ref(0, 88)), $mul.ref(40, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_mmap_vm_ops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_mmap_vm_ops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_mmap_vm_ops, $mul.ref(0, 88)), $mul.ref(64, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_mmap_vm_ops, $mul.ref(0, 88)), $mul.ref(72, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_mmap_vm_ops, $mul.ref(0, 88)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.i32($M.1, sg_allow_dio, 0);
    call {:si_unique_call 1891} {:cexpr "sg_allow_dio"} boogie_si_record_i32(0);
    $M.33 := $sub.i32(0, 1);
    call {:si_unique_call 1892} {:cexpr "def_reserved_size"} boogie_si_record_i32($sub.i32(0, 1));
    $M.35 := 32768;
    call {:si_unique_call 1893} {:cexpr "scatter_elem_sz_prev"} boogie_si_record_i32(32768);
    $M.34 := 32768;
    call {:si_unique_call 1894} {:cexpr "scatter_elem_sz"} boogie_si_record_i32(32768);
    $M.7 := 0;
    call {:si_unique_call 1895} {:cexpr "sg_sysfs_valid"} boogie_si_record_i32(0);
    $M.8 := $0.ref;
    $M.133 := $store.i8($M.133, sg_proc_sg_dirname, 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(sg_proc_sg_dirname, $mul.ref(0, 8)), $mul.ref(1, 1)), 99);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(sg_proc_sg_dirname, $mul.ref(0, 8)), $mul.ref(2, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(sg_proc_sg_dirname, $mul.ref(0, 8)), $mul.ref(3, 1)), 105);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(sg_proc_sg_dirname, $mul.ref(0, 8)), $mul.ref(4, 1)), 47);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(sg_proc_sg_dirname, $mul.ref(0, 8)), $mul.ref(5, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(sg_proc_sg_dirname, $mul.ref(0, 8)), $mul.ref(6, 1)), 103);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(sg_proc_sg_dirname, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.134 := $store.ref($M.134, version_fops, __this_module);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), sg_proc_single_open_version);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.154 := $store.ref($M.154, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.155 := $store.ref($M.155, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.156 := $store.ref($M.156, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.157 := $store.ref($M.157, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.158 := $store.ref($M.158, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.159 := $store.ref($M.159, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(version_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.134 := $store.ref($M.134, devstrs_fops, __this_module);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), sg_proc_open_devstrs);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), seq_release);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.154 := $store.ref($M.154, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.155 := $store.ref($M.155, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.156 := $store.ref($M.156, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.157 := $store.ref($M.157, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.158 := $store.ref($M.158, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.159 := $store.ref($M.159, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(devstrs_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.134 := $store.ref($M.134, dev_fops, __this_module);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), sg_proc_open_dev);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), seq_release);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.154 := $store.ref($M.154, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.155 := $store.ref($M.155, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.156 := $store.ref($M.156, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.157 := $store.ref($M.157, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.158 := $store.ref($M.158, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.159 := $store.ref($M.159, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(dev_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.134 := $store.ref($M.134, devhdr_fops, __this_module);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), sg_proc_single_open_devhdr);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.154 := $store.ref($M.154, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.155 := $store.ref($M.155, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.156 := $store.ref($M.156, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.157 := $store.ref($M.157, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.158 := $store.ref($M.158, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.159 := $store.ref($M.159, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(devhdr_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.134 := $store.ref($M.134, dressz_fops, __this_module);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), sg_proc_write_dressz);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), sg_proc_single_open_dressz);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.154 := $store.ref($M.154, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.155 := $store.ref($M.155, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.156 := $store.ref($M.156, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.157 := $store.ref($M.157, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.158 := $store.ref($M.158, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.159 := $store.ref($M.159, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(dressz_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.134 := $store.ref($M.134, debug_fops, __this_module);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), sg_proc_open_debug);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), seq_release);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.154 := $store.ref($M.154, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.155 := $store.ref($M.155, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.156 := $store.ref($M.156, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.157 := $store.ref($M.157, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.158 := $store.ref($M.158, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.159 := $store.ref($M.159, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(debug_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.134 := $store.ref($M.134, adio_fops, __this_module);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), sg_proc_write_adio);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), sg_proc_single_open_adio);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.154 := $store.ref($M.154, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.155 := $store.ref($M.155, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.156 := $store.ref($M.156, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.157 := $store.ref($M.157, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.158 := $store.ref($M.158, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.159 := $store.ref($M.159, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(adio_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.119 := $store.ref($M.119, sg_proc_leaf_arr, .str.15);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(0, 16)), $mul.ref(8, 1)), adio_fops);
    $M.119 := $store.ref($M.119, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.16);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(1, 16)), $mul.ref(8, 1)), debug_fops);
    $M.119 := $store.ref($M.119, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(2, 16)), $mul.ref(0, 1)), .str.17);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(2, 16)), $mul.ref(8, 1)), dressz_fops);
    $M.119 := $store.ref($M.119, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(3, 16)), $mul.ref(0, 1)), .str.18);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(3, 16)), $mul.ref(8, 1)), devhdr_fops);
    $M.119 := $store.ref($M.119, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(4, 16)), $mul.ref(0, 1)), .str.19);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(4, 16)), $mul.ref(8, 1)), dev_fops);
    $M.119 := $store.ref($M.119, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(5, 16)), $mul.ref(0, 1)), .str.20);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(5, 16)), $mul.ref(8, 1)), devstrs_fops);
    $M.119 := $store.ref($M.119, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(6, 16)), $mul.ref(0, 1)), .str.21);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(6, 16)), $mul.ref(8, 1)), version_fops);
    $M.116 := $0.ref;
    $M.2 := $store.ref($M.2, sg_index_idr, $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.11);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(96, 1)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_index_idr, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.2 := $store.i32($M.2, sg_index_lock, 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(sg_index_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(sg_index_lock, $mul.ref(0, 72)), $mul.ref(8, 1)), $sub.i32(0, 558948627));
    $M.2 := $store.i32($M.2, $add.ref($add.ref(sg_index_lock, $mul.ref(0, 72)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.2 := $store.ref($M.2, $add.ref($add.ref(sg_index_lock, $mul.ref(0, 72)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(sg_index_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(sg_index_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(sg_index_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(sg_index_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.10);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sg_index_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(sg_index_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, .str.10, 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(1, 1)), 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(4, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(6, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(7, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(9, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(11, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(12, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, .str.11, 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(1, 1)), 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(4, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(5, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(6, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(7, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(8, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(9, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(10, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(12, 1)), 46);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(13, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(16, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.11, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.161 := $store.i8($M.161, .str.101, 115);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(.str.101, $mul.ref(0, 5)), $mul.ref(1, 1)), 103);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(.str.101, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(.str.101, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(.str.101, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    call {:si_unique_call 1896} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 557034);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1897} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 558066);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(sg_rq_end_io_usercontext, $p0);
    assume {:branchcond $i6} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i6 == 1);
    $i5 := $eq.ref(sg_remove_sfp_usercontext, $p0);
    assume {:branchcond $i5} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i5 == 1);
    $i4 := $eq.ref(sg_remove_sfp, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i4 == 1);
    $i3 := $eq.ref(sg_device_destroy, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1898} sg_device_destroy(arg);
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 1899} sg_remove_sfp(arg);
    return;

  $bb4:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1900} sg_remove_sfp_usercontext($p1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1901} sg_rq_end_io_usercontext($p2);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 559098);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 560130);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 561162);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.32, $M.25, $M.24, $M.26, $M.28, $M.30, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(dev_seq_stop, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(sg_remove_device, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1902} sg_remove_device($p1, $p2);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1903} dev_seq_stop($p3, $p4);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 562194);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 563226);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 564258);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 565290);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 566322);

procedure devirtbounce.9(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1904} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 567354);

procedure devirtbounce.10(funcPtr: ref, arg: i32, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: i32, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1905} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 568386);

procedure devirtbounce.11(funcPtr: ref, arg: i16, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: i16, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1906} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 569418);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1907} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 570450);

procedure devirtbounce.13(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1908} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 571482);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref, arg4: ref, arg5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref, arg4: ref, arg5: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 572514);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 573546);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 574578);

procedure devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.1, $M.54, $M.55, $M.56, $M.57, $M.66, $M.70, $M.67, $M.68, $M.69, $M.24, $M.26, $M.28, $M.30, $M.25, $M.58, $M.59, $M.4, $M.101, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.111, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.3, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.112, $M.113, $M.114, $M.115, $M.32, $M.124, $M.125, $M.126, $M.127, $M.2, $M.5, $M.33, $M.35, $M.34, $M.7, $M.8, $M.133, $M.134, $M.135, $M.136, $M.118, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.119, $M.117, $M.116, $M.161, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1909} __SMACK_static_init();
    call {:si_unique_call 1910} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.53, $M.77, $M.3, $M.24, $M.26, $M.28, $M.30, $M.78, $M.66, $M.67, $M.68, $M.69, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.0, $M.1, $M.93, $M.2, $M.95, $M.18, $M.97, $M.98, $M.64, $M.65, $M.58, $M.59, $M.75, $M.76, $M.62, $M.63, $M.54, $M.55, $M.73, $M.74, $M.60, $M.61, $M.71, $M.72, $M.56, $M.57, $M.22, $M.99, $M.23, $M.100, $M.103, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.113, $M.115, $M.70, $M.25, $M.4, $M.101, $M.111, $M.94, $M.96, $M.102, $M.104, $M.112, $M.114, $M.32, $M.124, $M.125, $M.126, $M.127, $M.5, $M.33, $M.35, $M.34, $M.7, $M.8, $M.133, $M.134, $M.135, $M.136, $M.118, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.119, $M.117, $M.116, $M.161, $CurrAddr, $M.19, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.51;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation sg_remove_device_loop_$bb14(in_$i36: i64, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p38: ref) returns (out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p38: ref)
{

  entry:
    out_$p39, out_$p40, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p38 := in_$p39, in_$p40, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p38;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  $bb16:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$p38 := out_$p43;
    goto $bb16_dummy;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, in_$i36);
    goto corral_source_split_359;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 5720)), $mul.ref(0, 1));
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.2, out_$p42);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 5720)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} kill_fasync(out_$p40, 29, 131078);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p38, $mul.ref(0, 5720)), $mul.ref(240, 1));
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} __wake_up(out_$p39, 1, 0, $0.ref);
    goto corral_source_split_351;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 5720)), $mul.ref(24, 1));
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p38 := sg_remove_device_loop_$bb14(in_$i36, out_$p39, out_$p40, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p38);
    return;

  exit:
    return;
}



procedure sg_remove_device_loop_$bb14(in_$i36: i64, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p38: ref) returns (out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p38: ref);



implementation sg_vma_fault_loop_$bb17(in_$p0: ref, in_$i44: i32, in_$p45: ref, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$i58: i64, in_$i57: i64, in_$i59: i1, in_$i60: i64, in_$i61: i32, in_$i74: i64, in_$i75: i64, in_$i76: i32, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$p80: ref, in_$i81: i64, in_$i82: i1) returns (out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$i58: i64, out_$i57: i64, out_$i59: i1, out_$i60: i64, out_$i61: i32, out_$i74: i64, out_$i75: i64, out_$i76: i32, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$p80: ref, out_$i81: i64, out_$i82: i1)
{

  entry:
    out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i57, out_$i59, out_$i60, out_$i61, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i49, out_$i50, out_$i51, out_$p80, out_$i81, out_$i82 := in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i58, in_$i57, in_$i59, in_$i60, in_$i61, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i49, in_$i50, in_$i51, in_$p80, in_$i81, in_$i82;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_764;

  $bb25:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i49, out_$i50, out_$i51 := out_$i76, out_$i74, out_$i75;
    goto $bb25_dummy;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    out_$i79 := $sgt.i32(out_$i78, out_$i76);
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i16.i32(out_$i77);
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i16($M.14, in_$p45);
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i49, 1);
    call {:si_unique_call 270} {:cexpr "k"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$i75 := $sub.i64(out_$i51, out_$i57);
    call {:si_unique_call 269} {:cexpr "offset"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_799;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i64(out_$i50, out_$i57);
    call {:si_unique_call 268} {:cexpr "sa"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_798;

  $bb23:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i60, out_$i61 := out_$i51, out_$i49;
    assume true;
    goto $bb23;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$i59 := $ult.i64(out_$i51, out_$i57);
    goto corral_source_split_781;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i58;
    goto $bb21;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i54;
    goto $bb21;

  $bb19:
    assume out_$i56 == 1;
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$i56 := $ult.i64(out_$i54, out_$i55);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(in_$i44);
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i64(out_$i53, out_$i50);
    call {:si_unique_call 266} {:cexpr "len"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.2, out_$p52);
    goto corral_source_split_770;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_769;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb27:
    assume out_$i82 == 1;
    goto corral_source_split_807;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$i82 := $ugt.i64(out_$i81, out_$i50);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i64($M.2, out_$p80);
    goto corral_source_split_766;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_765;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(in_$i44);
    goto corral_source_split_778;

  $bb20:
    assume !(out_$i56 == 1);
    goto corral_source_split_777;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i57, out_$i59, out_$i60, out_$i61, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i49, out_$i50, out_$i51, out_$p80, out_$i81, out_$i82 := sg_vma_fault_loop_$bb17(in_$p0, in_$i44, in_$p45, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i57, out_$i59, out_$i60, out_$i61, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i49, out_$i50, out_$i51, out_$p80, out_$i81, out_$i82);
    return;

  exit:
    return;
}



procedure sg_vma_fault_loop_$bb17(in_$p0: ref, in_$i44: i32, in_$p45: ref, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$i58: i64, in_$i57: i64, in_$i59: i1, in_$i60: i64, in_$i61: i32, in_$i74: i64, in_$i75: i64, in_$i76: i32, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$p80: ref, in_$i81: i64, in_$i82: i1) returns (out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$i58: i64, out_$i57: i64, out_$i59: i1, out_$i60: i64, out_$i61: i32, out_$i74: i64, out_$i75: i64, out_$i76: i32, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$p80: ref, out_$i81: i64, out_$i82: i1);



implementation get_page_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} get_page_loop_$bb10();
    return;

  exit:
    return;
}



procedure get_page_loop_$bb10();



implementation sg_read_loop_$bb57(in_$p4: ref, in_$p7: ref, in_$i75: i32, in_$p94: ref, in_$p96: ref, in_$p101: ref, in_$i100: i64, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p107: ref, in_$i108: i1, in_$i109: i64, in_$p110: ref, in_$i111: i64, in_$i112: i32, in_$i113: i1) returns (out_$p101: ref, out_$i100: i64, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p107: ref, out_$i108: i1, out_$i109: i64, out_$p110: ref, out_$i111: i64, out_$i112: i32, out_$i113: i1)
{

  entry:
    out_$p101, out_$i100, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113 := in_$p101, in_$i100, in_$p104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$p110, in_$i111, in_$i112, in_$i113;
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_1227;

  $bb67:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := out_$i111;
    goto $bb67_dummy;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    out_$p101 := out_$p104;
    assume true;
    goto $bb67;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$i113 := $ne.i32(out_$i112, 0);
    goto corral_source_split_1248;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} out_$i112 := atomic_read(in_$p96);
    call {:si_unique_call 375} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_1247;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} out_$i111 := prepare_to_wait_event(in_$p94, in_$p4, 1);
    call {:si_unique_call 373} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i111);
    goto corral_source_split_1246;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} schedule();
    goto corral_source_split_1245;

  $bb65:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$i109, out_$p110 := out_$i100, out_$p104;
    assume true;
    goto $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i100, 0);
    goto corral_source_split_1241;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$p107 := out_$p104;
    assume true;
    goto $bb61;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i64(out_$i105, 0);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$i105 := $p2i.ref.i64(out_$p104);
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} out_$p104 := sg_get_rq_mark(in_$p7, in_$i75);
    goto corral_source_split_1228;

  $bb67_dummy:
    call {:si_unique_call 1} out_$p101, out_$i100, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113 := sg_read_loop_$bb57(in_$p4, in_$p7, in_$i75, in_$p94, in_$p96, out_$p101, out_$i100, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113);
    return;

  exit:
    return;
}



procedure sg_read_loop_$bb57(in_$p4: ref, in_$p7: ref, in_$i75: i32, in_$p94: ref, in_$p96: ref, in_$p101: ref, in_$i100: i64, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p107: ref, in_$i108: i1, in_$i109: i64, in_$p110: ref, in_$i111: i64, in_$i112: i32, in_$i113: i1) returns (out_$p101: ref, out_$i100: i64, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p107: ref, out_$i108: i1, out_$i109: i64, out_$p110: ref, out_$i111: i64, out_$i112: i32, out_$i113: i1);
  modifies $M.2;



implementation sg_poll_loop_$bb11(in_$i24: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i39: i32, in_$i40: i32) returns (out_$i24: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i39: i32, out_$i40: i32)
{

  entry:
    out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i21, out_$p22, out_$i23, out_$i39, out_$i40 := in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i21, in_$p22, in_$i23, in_$i39, in_$i40;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1777;

  $bb21:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i21, out_$p22, out_$i23 := out_$i34, out_$p36, out_$i33;
    goto $bb21_dummy;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i33, out_$i34;
    assume true;
    goto $bb21;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.2, out_$p35);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p22, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i21, 1);
    call {:si_unique_call 446} {:cexpr "count"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_1796;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1795;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i23;
    goto $bb20;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$i33 := 65;
    goto $bb20;

  $bb18:
    assume out_$i32 == 1;
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 0);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i8.i32(out_$i30);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.2, out_$p29);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p22, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_1788;

  $bb16:
    assume out_$i28 == 1;
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 1);
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i8.i32(out_$i26);
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.2, out_$p25);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p22, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_1782;

  $bb13:
    assume out_$i24 == 1;
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 0);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb15;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb15;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i21, out_$p22, out_$i23, out_$i39, out_$i40 := sg_poll_loop_$bb11(out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i21, out_$p22, out_$i23, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure sg_poll_loop_$bb11(in_$i24: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i39: i32, in_$i40: i32) returns (out_$i24: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i39: i32, out_$i40: i32);



implementation {:SIextraRecBound 16} sg_ioctl_loop_$bb278(in_$p3: ref, in_$p490: ref, in_$p498: ref, in_$i499: i64, in_$p500: ref, in_$p501: ref, in_$i502: i64, in_$i503: i1, in_$p504: ref, in_$p505: ref, in_$i506: i8, in_$i507: i32, in_$i508: i32, in_$i509: i8, in_$i510: i64, in_$p512: ref, in_$p513: ref, in_$p515: ref, in_$i516: i8, in_$i517: i32, in_$p518: ref, in_$p520: ref, in_$i521: i16, in_$i522: i8, in_$i523: i32, in_$i524: i32, in_$i525: i8, in_$i526: i32, in_$p527: ref, in_$p529: ref, in_$i530: i16, in_$i531: i8, in_$i532: i32, in_$i533: i32, in_$i534: i8, in_$i535: i64, in_$p537: ref, in_$p538: ref, in_$p539: ref, in_$i540: i8, in_$i541: i32, in_$i542: i1, in_$p543: ref, in_$p545: ref, in_$i546: i32, in_$i547: i64, in_$p549: ref, in_$i551: i64, in_$i552: i32, in_$p553: ref, in_$p555: ref, in_$i556: i32, in_$i557: i1, in_$p558: ref, in_$p560: ref, in_$i561: i32, in_$i562: i32, in_$i563: i32, in_$i564: i64, in_$p566: ref, in_$i550: i32, in_$p567: ref, in_$p568: ref, in_$i569: i8, in_$i570: i64, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$i575: i8, in_$i576: i64, in_$p578: ref, in_$p579: ref, in_$p581: ref, in_$i582: i32, in_$i583: i64, in_$p585: ref, in_$p586: ref, in_$p588: ref, in_$p589: ref, in_$i590: i64, in_$p592: ref, in_$i593: i32, in_$i594: i32, in_$p595: ref, in_$i596: i64, in_$i597: i1, in_$p598: ref, in_$p599: ref, in_$p600: ref, in_$p602: ref, in_$p601: ref, in_$i603: i1, in_$i497: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$p498: ref, out_$i499: i64, out_$p500: ref, out_$p501: ref, out_$i502: i64, out_$i503: i1, out_$p504: ref, out_$p505: ref, out_$i506: i8, out_$i507: i32, out_$i508: i32, out_$i509: i8, out_$i510: i64, out_$p512: ref, out_$p513: ref, out_$p515: ref, out_$i516: i8, out_$i517: i32, out_$p518: ref, out_$p520: ref, out_$i521: i16, out_$i522: i8, out_$i523: i32, out_$i524: i32, out_$i525: i8, out_$i526: i32, out_$p527: ref, out_$p529: ref, out_$i530: i16, out_$i531: i8, out_$i532: i32, out_$i533: i32, out_$i534: i8, out_$i535: i64, out_$p537: ref, out_$p538: ref, out_$p539: ref, out_$i540: i8, out_$i541: i32, out_$i542: i1, out_$p543: ref, out_$p545: ref, out_$i546: i32, out_$i547: i64, out_$p549: ref, out_$i551: i64, out_$i552: i32, out_$p553: ref, out_$p555: ref, out_$i556: i32, out_$i557: i1, out_$p558: ref, out_$p560: ref, out_$i561: i32, out_$i562: i32, out_$i563: i32, out_$i564: i64, out_$p566: ref, out_$i550: i32, out_$p567: ref, out_$p568: ref, out_$i569: i8, out_$i570: i64, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$i575: i8, out_$i576: i64, out_$p578: ref, out_$p579: ref, out_$p581: ref, out_$i582: i32, out_$i583: i64, out_$p585: ref, out_$p586: ref, out_$p588: ref, out_$p589: ref, out_$i590: i64, out_$p592: ref, out_$i593: i32, out_$i594: i32, out_$p595: ref, out_$i596: i64, out_$i597: i1, out_$p598: ref, out_$p599: ref, out_$p600: ref, out_$p602: ref, out_$p601: ref, out_$i603: i1, out_$i497: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8)
{

  entry:
    out_$p498, out_$i499, out_$p500, out_$p501, out_$i502, out_$i503, out_$p504, out_$p505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$p512, out_$p513, out_$p515, out_$i516, out_$i517, out_$p518, out_$p520, out_$i521, out_$i522, out_$i523, out_$i524, out_$i525, out_$i526, out_$p527, out_$p529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$i535, out_$p537, out_$p538, out_$p539, out_$i540, out_$i541, out_$i542, out_$p543, out_$p545, out_$i546, out_$i547, out_$p549, out_$i551, out_$i552, out_$p553, out_$p555, out_$i556, out_$i557, out_$p558, out_$p560, out_$i561, out_$i562, out_$i563, out_$i564, out_$p566, out_$i550, out_$p567, out_$p568, out_$i569, out_$i570, out_$p572, out_$p573, out_$p574, out_$i575, out_$i576, out_$p578, out_$p579, out_$p581, out_$i582, out_$i583, out_$p585, out_$p586, out_$p588, out_$p589, out_$i590, out_$p592, out_$i593, out_$i594, out_$p595, out_$i596, out_$i597, out_$p598, out_$p599, out_$p600, out_$p602, out_$p601, out_$i603, out_$i497, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := in_$p498, in_$i499, in_$p500, in_$p501, in_$i502, in_$i503, in_$p504, in_$p505, in_$i506, in_$i507, in_$i508, in_$i509, in_$i510, in_$p512, in_$p513, in_$p515, in_$i516, in_$i517, in_$p518, in_$p520, in_$i521, in_$i522, in_$i523, in_$i524, in_$i525, in_$i526, in_$p527, in_$p529, in_$i530, in_$i531, in_$i532, in_$i533, in_$i534, in_$i535, in_$p537, in_$p538, in_$p539, in_$i540, in_$i541, in_$i542, in_$p543, in_$p545, in_$i546, in_$i547, in_$p549, in_$i551, in_$i552, in_$p553, in_$p555, in_$i556, in_$i557, in_$p558, in_$p560, in_$i561, in_$i562, in_$i563, in_$i564, in_$p566, in_$i550, in_$p567, in_$p568, in_$i569, in_$i570, in_$p572, in_$p573, in_$p574, in_$i575, in_$i576, in_$p578, in_$p579, in_$p581, in_$i582, in_$i583, in_$p585, in_$p586, in_$p588, in_$p589, in_$i590, in_$p592, in_$i593, in_$i594, in_$p595, in_$i596, in_$i597, in_$p598, in_$p599, in_$p600, in_$p602, in_$p601, in_$i603, in_$i497, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9;
    goto $bb278, exit;

  $bb278:
    assume {:verifier.code 0} true;
    goto corral_source_split_2602;

  $bb292:
    assume out_$i603 == 1;
    assume {:verifier.code 0} true;
    out_$i497 := out_$i594;
    goto $bb292_dummy;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$i603 := $sle.i32(out_$i594, 15);
    goto corral_source_split_2728;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, in_$p3, out_$p601);
    goto corral_source_split_2727;

  $bb291:
    assume {:verifier.code 0} true;
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$p601 := out_$p602;
    goto $bb291;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$p601 := out_$p600;
    goto $bb291;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$p600 := $load.ref($M.2, out_$p599);
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$p599 := $add.ref($add.ref(out_$p598, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$p598 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2719;

  $bb289:
    assume out_$i597 == 1;
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i597 := $ne.i64(out_$i596, 0);
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i596 := $p2i.ref.i64(out_$p595);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$p595 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$i594 := $add.i32(out_$i593, 1);
    call {:si_unique_call 654} {:cexpr "val"} boogie_si_record_i32(out_$i594);
    goto corral_source_split_2713;

  $bb288:
    assume {:verifier.code 0} true;
    goto corral_source_split_2712;

  $bb281:
    assume !(out_$i503 == 1);
    assume {:verifier.code 0} true;
    out_$i593 := out_$i497;
    goto $bb288;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    out_$i593 := out_$i550;
    goto $bb288;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p592, out_$p589);
    goto corral_source_split_2697;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    out_$p592 := $add.ref($add.ref(in_$p490, $mul.ref(out_$i590, 24)), $mul.ref(8, 1));
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    goto corral_source_split_2695;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i590 := $sext.i32.i64(out_$i497);
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$p589 := $load.ref($M.2, out_$p588);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$p588 := $add.ref($add.ref($add.ref(out_$p586, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(56, 1));
    goto corral_source_split_2692;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    out_$p586 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2691;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p585, out_$i582);
    goto corral_source_split_2690;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$p585 := $add.ref($add.ref(in_$p490, $mul.ref(out_$i583, 24)), $mul.ref(4, 1));
    goto corral_source_split_2689;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto corral_source_split_2688;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    out_$i583 := $sext.i32.i64(out_$i497);
    goto corral_source_split_2687;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    out_$i582 := $load.i32($M.2, out_$p581);
    goto corral_source_split_2686;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$p581 := $add.ref($add.ref($add.ref(out_$p579, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$p579 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2684;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, out_$p578, out_$i575);
    goto corral_source_split_2683;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    out_$p578 := $add.ref($add.ref(in_$p490, $mul.ref(out_$i576, 24)), $mul.ref(2, 1));
    goto corral_source_split_2682;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    out_$i576 := $sext.i32.i64(out_$i497);
    goto corral_source_split_2680;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    out_$i575 := $load.i8($M.2, out_$p574);
    goto corral_source_split_2679;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    out_$p574 := $add.ref($add.ref(out_$p573, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_2678;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    out_$p573 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, out_$p572, out_$i569);
    goto corral_source_split_2676;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    out_$p572 := $add.ref($add.ref(in_$p490, $mul.ref(out_$i570, 24)), $mul.ref(1, 1));
    goto corral_source_split_2675;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    goto corral_source_split_2674;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    out_$i570 := $sext.i32.i64(out_$i497);
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    out_$i569 := $load.i8($M.2, out_$p568);
    goto corral_source_split_2672;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    out_$p568 := $add.ref($add.ref(out_$p567, $mul.ref(0, 336)), $mul.ref(233, 1));
    goto corral_source_split_2671;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    out_$p567 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2670;

  $bb284:
    assume {:verifier.code 0} true;
    goto corral_source_split_2669;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p566, out_$i563);
    assume {:verifier.code 0} true;
    out_$i550 := out_$i497;
    goto $bb284;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    out_$i550 := out_$i497;
    goto $bb284;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p549, out_$i546);
    goto corral_source_split_2659;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    out_$p549 := $add.ref($add.ref(in_$p490, $mul.ref(out_$i547, 24)), $mul.ref(16, 1));
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i547 := $sext.i32.i64(out_$i497);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$i546 := $load.i32($M.2, out_$p545);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$p545 := $add.ref($add.ref($add.ref(out_$p543, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$p543 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2653;

  $bb282:
    assume out_$i542 == 1;
    goto corral_source_split_2652;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    out_$i542 := $ne.i32(out_$i541, 0);
    goto corral_source_split_2650;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    out_$i541 := $sext.i8.i32(out_$i540);
    goto corral_source_split_2649;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    out_$i540 := $load.i8($M.2, out_$p539);
    goto corral_source_split_2648;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    out_$p539 := $add.ref($add.ref(out_$p538, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    out_$p538 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2646;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, out_$p537, out_$i534);
    goto corral_source_split_2645;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    out_$p537 := $add.ref($add.ref(in_$p490, $mul.ref(out_$i535, 24)), $mul.ref(3, 1));
    goto corral_source_split_2644;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    out_$i535 := $sext.i32.i64(out_$i497);
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    out_$i534 := $trunc.i32.i8(out_$i533);
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$i533 := $and.i32(out_$i526, out_$i532);
    goto corral_source_split_2640;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$i532 := $sext.i8.i32(out_$i531);
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$i531 := $trunc.i16.i8(out_$i530);
    goto corral_source_split_2638;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$i530 := $load.i16($M.2, out_$p529);
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$p529 := $add.ref($add.ref($add.ref(out_$p527, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(70, 1));
    goto corral_source_split_2636;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    out_$p527 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    out_$i526 := $sext.i8.i32(out_$i525);
    goto corral_source_split_2634;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    out_$i525 := $trunc.i32.i8(out_$i524);
    goto corral_source_split_2633;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    out_$i524 := $and.i32(out_$i517, out_$i523);
    goto corral_source_split_2632;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$i523 := $zext.i8.i32(out_$i522);
    goto corral_source_split_2631;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$i522 := $trunc.i16.i8(out_$i521);
    goto corral_source_split_2630;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$i521 := $load.i16($M.2, out_$p520);
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    out_$p520 := $add.ref($add.ref($add.ref(out_$p518, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(68, 1));
    goto corral_source_split_2628;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$p518 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2627;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$i517 := $zext.i8.i32(out_$i516);
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    out_$i516 := $load.i8($M.2, out_$p515);
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    out_$p515 := $add.ref($add.ref($add.ref(out_$p513, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(65, 1));
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    out_$p513 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, out_$p512, out_$i509);
    goto corral_source_split_2622;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$p512 := $add.ref($add.ref(in_$p490, $mul.ref(out_$i510, 24)), $mul.ref(0, 1));
    goto corral_source_split_2621;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    out_$i510 := $sext.i32.i64(out_$i497);
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    out_$i509 := $trunc.i32.i8(out_$i508);
    goto corral_source_split_2618;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$i508 := $add.i32(out_$i507, 1);
    goto corral_source_split_2617;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    out_$i507 := $zext.i8.i32(out_$i506);
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    out_$i506 := $load.i8($M.2, out_$p505);
    goto corral_source_split_2615;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$p505 := $add.ref($add.ref(out_$p504, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    out_$p504 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2613;

  $bb280:
    assume out_$i503 == 1;
    goto corral_source_split_2612;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$i503 := $ne.i64(out_$i502, 0);
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$i502 := $p2i.ref.i64(out_$p501);
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$p501 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.2;
    call {:si_unique_call 651} out_cmdloc_dummy_var_9 := $memset.i8(out_cmdloc_dummy_var_8, out_$p500, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.2 := out_cmdloc_dummy_var_9;
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$p500 := $add.ref(out_$p498, $mul.ref(out_$i499, 1));
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    out_$i499 := $sext.i32.i64(out_$i497);
    goto corral_source_split_2605;

  $bb279:
    assume {:verifier.code 0} true;
    out_$p498 := $bitcast.ref.ref(in_$p490);
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$p566 := $add.ref($add.ref(in_$p490, $mul.ref(out_$i564, 24)), $mul.ref(16, 1));
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$i564 := $sext.i32.i64(out_$i497);
    goto corral_source_split_2708;

  $bb287:
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    out_$i563 := 0;
    goto $bb287;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$i563 := out_$i562;
    goto $bb287;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$i562 := $sub.i32(out_$i552, out_$i561);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$i561 := $load.i32($M.2, out_$p560);
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$p560 := $add.ref($add.ref($add.ref(out_$p558, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$p558 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2700;

  $bb285:
    assume out_$i557 == 1;
    goto corral_source_split_2699;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$i557 := $ult.i32(out_$i556, out_$i552);
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i556 := $load.i32($M.2, out_$p555);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$p555 := $add.ref($add.ref($add.ref(out_$p553, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$p553 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} out_$i552 := jiffies_to_msecs(out_$i551);
    call {:si_unique_call 653} {:cexpr "ms"} boogie_si_record_i32(out_$i552);
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$i551 := $load.i64($M.2, jiffies);
    goto corral_source_split_2662;

  $bb283:
    assume !(out_$i542 == 1);
    goto corral_source_split_2661;

  $bb286:
    assume !(out_$i557 == 1);
    goto corral_source_split_2705;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$p602 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2724;

  $bb290:
    assume !(out_$i597 == 1);
    goto corral_source_split_2723;

  $bb292_dummy:
    call {:si_unique_call 1} out_$p498, out_$i499, out_$p500, out_$p501, out_$i502, out_$i503, out_$p504, out_$p505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$p512, out_$p513, out_$p515, out_$i516, out_$i517, out_$p518, out_$p520, out_$i521, out_$i522, out_$i523, out_$i524, out_$i525, out_$i526, out_$p527, out_$p529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$i535, out_$p537, out_$p538, out_$p539, out_$i540, out_$i541, out_$i542, out_$p543, out_$p545, out_$i546, out_$i547, out_$p549, out_$i551, out_$i552, out_$p553, out_$p555, out_$i556, out_$i557, out_$p558, out_$p560, out_$i561, out_$i562, out_$i563, out_$i564, out_$p566, out_$i550, out_$p567, out_$p568, out_$i569, out_$i570, out_$p572, out_$p573, out_$p574, out_$i575, out_$i576, out_$p578, out_$p579, out_$p581, out_$i582, out_$i583, out_$p585, out_$p586, out_$p588, out_$p589, out_$i590, out_$p592, out_$i593, out_$i594, out_$p595, out_$i596, out_$i597, out_$p598, out_$p599, out_$p600, out_$p602, out_$p601, out_$i603, out_$i497, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := sg_ioctl_loop_$bb278(in_$p3, in_$p490, out_$p498, out_$i499, out_$p500, out_$p501, out_$i502, out_$i503, out_$p504, out_$p505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$p512, out_$p513, out_$p515, out_$i516, out_$i517, out_$p518, out_$p520, out_$i521, out_$i522, out_$i523, out_$i524, out_$i525, out_$i526, out_$p527, out_$p529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$i535, out_$p537, out_$p538, out_$p539, out_$i540, out_$i541, out_$i542, out_$p543, out_$p545, out_$i546, out_$i547, out_$p549, out_$i551, out_$i552, out_$p553, out_$p555, out_$i556, out_$i557, out_$p558, out_$p560, out_$i561, out_$i562, out_$i563, out_$i564, out_$p566, out_$i550, out_$p567, out_$p568, out_$i569, out_$i570, out_$p572, out_$p573, out_$p574, out_$i575, out_$i576, out_$p578, out_$p579, out_$p581, out_$i582, out_$i583, out_$p585, out_$p586, out_$p588, out_$p589, out_$i590, out_$p592, out_$i593, out_$i594, out_$p595, out_$i596, out_$i597, out_$p598, out_$p599, out_$p600, out_$p602, out_$p601, out_$i603, out_$i497, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9);
    return;

  exit:
    return;
}



procedure sg_ioctl_loop_$bb278(in_$p3: ref, in_$p490: ref, in_$p498: ref, in_$i499: i64, in_$p500: ref, in_$p501: ref, in_$i502: i64, in_$i503: i1, in_$p504: ref, in_$p505: ref, in_$i506: i8, in_$i507: i32, in_$i508: i32, in_$i509: i8, in_$i510: i64, in_$p512: ref, in_$p513: ref, in_$p515: ref, in_$i516: i8, in_$i517: i32, in_$p518: ref, in_$p520: ref, in_$i521: i16, in_$i522: i8, in_$i523: i32, in_$i524: i32, in_$i525: i8, in_$i526: i32, in_$p527: ref, in_$p529: ref, in_$i530: i16, in_$i531: i8, in_$i532: i32, in_$i533: i32, in_$i534: i8, in_$i535: i64, in_$p537: ref, in_$p538: ref, in_$p539: ref, in_$i540: i8, in_$i541: i32, in_$i542: i1, in_$p543: ref, in_$p545: ref, in_$i546: i32, in_$i547: i64, in_$p549: ref, in_$i551: i64, in_$i552: i32, in_$p553: ref, in_$p555: ref, in_$i556: i32, in_$i557: i1, in_$p558: ref, in_$p560: ref, in_$i561: i32, in_$i562: i32, in_$i563: i32, in_$i564: i64, in_$p566: ref, in_$i550: i32, in_$p567: ref, in_$p568: ref, in_$i569: i8, in_$i570: i64, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$i575: i8, in_$i576: i64, in_$p578: ref, in_$p579: ref, in_$p581: ref, in_$i582: i32, in_$i583: i64, in_$p585: ref, in_$p586: ref, in_$p588: ref, in_$p589: ref, in_$i590: i64, in_$p592: ref, in_$i593: i32, in_$i594: i32, in_$p595: ref, in_$i596: i64, in_$i597: i1, in_$p598: ref, in_$p599: ref, in_$p600: ref, in_$p602: ref, in_$p601: ref, in_$i603: i1, in_$i497: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$p498: ref, out_$i499: i64, out_$p500: ref, out_$p501: ref, out_$i502: i64, out_$i503: i1, out_$p504: ref, out_$p505: ref, out_$i506: i8, out_$i507: i32, out_$i508: i32, out_$i509: i8, out_$i510: i64, out_$p512: ref, out_$p513: ref, out_$p515: ref, out_$i516: i8, out_$i517: i32, out_$p518: ref, out_$p520: ref, out_$i521: i16, out_$i522: i8, out_$i523: i32, out_$i524: i32, out_$i525: i8, out_$i526: i32, out_$p527: ref, out_$p529: ref, out_$i530: i16, out_$i531: i8, out_$i532: i32, out_$i533: i32, out_$i534: i8, out_$i535: i64, out_$p537: ref, out_$p538: ref, out_$p539: ref, out_$i540: i8, out_$i541: i32, out_$i542: i1, out_$p543: ref, out_$p545: ref, out_$i546: i32, out_$i547: i64, out_$p549: ref, out_$i551: i64, out_$i552: i32, out_$p553: ref, out_$p555: ref, out_$i556: i32, out_$i557: i1, out_$p558: ref, out_$p560: ref, out_$i561: i32, out_$i562: i32, out_$i563: i32, out_$i564: i64, out_$p566: ref, out_$i550: i32, out_$p567: ref, out_$p568: ref, out_$i569: i8, out_$i570: i64, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$i575: i8, out_$i576: i64, out_$p578: ref, out_$p579: ref, out_$p581: ref, out_$i582: i32, out_$i583: i64, out_$p585: ref, out_$p586: ref, out_$p588: ref, out_$p589: ref, out_$i590: i64, out_$p592: ref, out_$i593: i32, out_$i594: i32, out_$p595: ref, out_$i596: i64, out_$i597: i1, out_$p598: ref, out_$p599: ref, out_$p600: ref, out_$p602: ref, out_$p601: ref, out_$i603: i1, out_$i497: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8);
  modifies $M.23, $M.2;



implementation sg_ioctl_loop_$bb127(in_$p3: ref, in_$p4: ref, in_$p10: ref, in_$p15: ref, in_$p112: ref, in_$i117: i64, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$i123: i64, in_$i124: i64, in_$p125: ref, in_$i126: i32, in_$i127: i1) returns (out_$i117: i64, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$i123: i64, out_$i124: i64, out_$p125: ref, out_$i126: i32, out_$i127: i1)
{

  entry:
    out_$i117, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127 := in_$i117, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$p125, in_$i126, in_$i127;
    goto $bb127, exit;

  $bb127:
    assume {:verifier.code 0} true;
    goto corral_source_split_2180;

  $bb137:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := out_$i124;
    goto $bb137_dummy;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_2202;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} out_$i126 := srp_done(in_$p10, out_$p125);
    call {:si_unique_call 584} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2200;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} out_$i124 := prepare_to_wait_event(in_$p112, in_$p4, 1);
    call {:si_unique_call 582} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i124);
    goto corral_source_split_2199;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} schedule();
    goto corral_source_split_2198;

  $bb135:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    out_$i123 := out_$i117;
    assume true;
    goto $bb135;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i117, 0);
    goto corral_source_split_2194;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb131:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i32(out_$i120, 0);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} out_$i120 := atomic_read(out_$p119);
    call {:si_unique_call 577} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_2182;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p15, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_2181;

  $bb137_dummy:
    call {:si_unique_call 1} out_$i117, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127 := sg_ioctl_loop_$bb127(in_$p3, in_$p4, in_$p10, in_$p15, in_$p112, out_$i117, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127);
    return;

  exit:
    return;
}



procedure sg_ioctl_loop_$bb127(in_$p3: ref, in_$p4: ref, in_$p10: ref, in_$p15: ref, in_$p112: ref, in_$i117: i64, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$i123: i64, in_$i124: i64, in_$p125: ref, in_$i126: i32, in_$i127: i1) returns (out_$i117: i64, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$i123: i64, out_$i124: i64, out_$p125: ref, out_$i126: i32, out_$i127: i1);



implementation sg_ioctl_loop_$bb219(in_$p3: ref, in_$p358: ref, in_$p359: ref, in_$i360: i8, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$p364: ref, in_$i365: i8, in_$i366: i32, in_$i367: i1, in_$i368: i32, in_$i369: i32, in_$p370: ref, in_$p371: ref, in_$p372: ref, in_$p373: ref, in_$i374: i64, in_$i375: i1, in_$i357: i32, in_$i376: i32) returns (out_$p358: ref, out_$p359: ref, out_$i360: i8, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$p364: ref, out_$i365: i8, out_$i366: i32, out_$i367: i1, out_$i368: i32, out_$i369: i32, out_$p370: ref, out_$p371: ref, out_$p372: ref, out_$p373: ref, out_$i374: i64, out_$i375: i1, out_$i357: i32, out_$i376: i32)
{

  entry:
    out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$p363, out_$p364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p371, out_$p372, out_$p373, out_$i374, out_$i375, out_$i357, out_$i376 := in_$p358, in_$p359, in_$i360, in_$i361, in_$i362, in_$p363, in_$p364, in_$i365, in_$i366, in_$i367, in_$i368, in_$i369, in_$p370, in_$p371, in_$p372, in_$p373, in_$i374, in_$i375, in_$i357, in_$i376;
    goto $bb219, exit;

  $bb219:
    assume {:verifier.code 0} true;
    goto corral_source_split_2458;

  $bb227:
    assume out_$i375 == 1;
    assume {:verifier.code 0} true;
    out_$i357 := out_$i369;
    goto $bb227_dummy;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$i376 := out_$i369;
    assume true;
    goto $bb227;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$i375 := $ne.i64(out_$i374, 0);
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$i374 := $p2i.ref.i64(out_$p373);
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p373 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, in_$p3, out_$p372);
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$p372 := $load.ref($M.2, out_$p371);
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$p371 := $add.ref($add.ref(out_$p370, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$p370 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2477;

  $bb226:
    assume {:verifier.code 0} true;
    goto corral_source_split_2476;

  $bb223:
    assume {:verifier.code 0} true;
    out_$i369 := out_$i357;
    goto $bb226;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$i369 := out_$i368;
    goto $bb226;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$i368 := $add.i32(out_$i357, 1);
    call {:si_unique_call 632} {:cexpr "val"} boogie_si_record_i32(out_$i368);
    goto corral_source_split_2474;

  $bb224:
    assume out_$i367 == 1;
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$i367 := $eq.i32(out_$i366, 0);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$i366 := $sext.i8.i32(out_$i365);
    goto corral_source_split_2470;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    out_$i365 := $load.i8($M.2, out_$p364);
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$p364 := $add.ref($add.ref(out_$p363, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$p363 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2467;

  $bb221:
    assume out_$i362 == 1;
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 1);
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$i361 := $sext.i8.i32(out_$i360);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i360 := $load.i8($M.2, out_$p359);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$p359 := $add.ref($add.ref(out_$p358, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_2461;

  $bb220:
    assume {:verifier.code 0} true;
    out_$p358 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb222:
    assume {:verifier.code 0} true;
    assume !(out_$i362 == 1);
    goto $bb223;

  $bb225:
    assume {:verifier.code 0} true;
    assume !(out_$i367 == 1);
    goto $bb223;

  $bb227_dummy:
    call {:si_unique_call 1} out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$p363, out_$p364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p371, out_$p372, out_$p373, out_$i374, out_$i375, out_$i357, out_$i376 := sg_ioctl_loop_$bb219(in_$p3, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$p363, out_$p364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p371, out_$p372, out_$p373, out_$i374, out_$i375, out_$i357, out_$i376);
    return;

  exit:
    return;
}



procedure sg_ioctl_loop_$bb219(in_$p3: ref, in_$p358: ref, in_$p359: ref, in_$i360: i8, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$p364: ref, in_$i365: i8, in_$i366: i32, in_$i367: i1, in_$i368: i32, in_$i369: i32, in_$p370: ref, in_$p371: ref, in_$p372: ref, in_$p373: ref, in_$i374: i64, in_$i375: i1, in_$i357: i32, in_$i376: i32) returns (out_$p358: ref, out_$p359: ref, out_$i360: i8, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$p364: ref, out_$i365: i8, out_$i366: i32, out_$i367: i1, out_$i368: i32, out_$i369: i32, out_$p370: ref, out_$p371: ref, out_$p372: ref, out_$p373: ref, out_$i374: i64, out_$i375: i1, out_$i357: i32, out_$i376: i32);
  modifies $M.23;



implementation sg_ioctl_loop_$bb203(in_$p3: ref, in_$p323: ref, in_$p324: ref, in_$i325: i8, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$p329: ref, in_$i330: i8, in_$i331: i32, in_$i332: i1, in_$p340: ref, in_$p341: ref, in_$p342: ref, in_$p343: ref, in_$i344: i64, in_$i345: i1) returns (out_$p323: ref, out_$p324: ref, out_$i325: i8, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$p329: ref, out_$i330: i8, out_$i331: i32, out_$i332: i1, out_$p340: ref, out_$p341: ref, out_$p342: ref, out_$p343: ref, out_$i344: i64, out_$i345: i1)
{

  entry:
    out_$p323, out_$p324, out_$i325, out_$i326, out_$i327, out_$p328, out_$p329, out_$i330, out_$i331, out_$i332, out_$p340, out_$p341, out_$p342, out_$p343, out_$i344, out_$i345 := in_$p323, in_$p324, in_$i325, in_$i326, in_$i327, in_$p328, in_$p329, in_$i330, in_$i331, in_$i332, in_$p340, in_$p341, in_$p342, in_$p343, in_$i344, in_$i345;
    goto $bb203, exit;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb212:
    assume {:verifier.code 0} true;
    assume out_$i345 == 1;
    goto $bb212_dummy;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    out_$i345 := $ne.i64(out_$i344, 0);
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$i344 := $p2i.ref.i64(out_$p343);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$p343 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, in_$p3, out_$p342);
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$p342 := $load.ref($M.2, out_$p341);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$p341 := $add.ref($add.ref(out_$p340, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_2443;

  $bb211:
    assume {:verifier.code 0} true;
    out_$p340 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2442;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb206:
    assume {:verifier.code 0} true;
    assume !(out_$i327 == 1);
    goto $bb207;

  $bb209:
    assume {:verifier.code 0} true;
    assume !(out_$i332 == 1);
    goto $bb207;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    out_$i332 := $eq.i32(out_$i331, 0);
    goto corral_source_split_2432;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    out_$i331 := $sext.i8.i32(out_$i330);
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    out_$i330 := $load.i8($M.2, out_$p329);
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$p329 := $add.ref($add.ref(out_$p328, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$p328 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2428;

  $bb205:
    assume out_$i327 == 1;
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i326, 1);
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    out_$i326 := $sext.i8.i32(out_$i325);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$i325 := $load.i8($M.2, out_$p324);
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$p324 := $add.ref($add.ref(out_$p323, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_2422;

  $bb204:
    assume {:verifier.code 0} true;
    out_$p323 := $load.ref($M.23, in_$p3);
    goto corral_source_split_2421;

  $bb212_dummy:
    call {:si_unique_call 1} out_$p323, out_$p324, out_$i325, out_$i326, out_$i327, out_$p328, out_$p329, out_$i330, out_$i331, out_$i332, out_$p340, out_$p341, out_$p342, out_$p343, out_$i344, out_$i345 := sg_ioctl_loop_$bb203(in_$p3, out_$p323, out_$p324, out_$i325, out_$i326, out_$i327, out_$p328, out_$p329, out_$i330, out_$i331, out_$i332, out_$p340, out_$p341, out_$p342, out_$p343, out_$i344, out_$i345);
    return;

  exit:
    return;
}



procedure sg_ioctl_loop_$bb203(in_$p3: ref, in_$p323: ref, in_$p324: ref, in_$i325: i8, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$p329: ref, in_$i330: i8, in_$i331: i32, in_$i332: i1, in_$p340: ref, in_$p341: ref, in_$p342: ref, in_$p343: ref, in_$i344: i64, in_$i345: i1) returns (out_$p323: ref, out_$p324: ref, out_$i325: i8, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$p329: ref, out_$i330: i8, out_$i331: i32, out_$i332: i1, out_$p340: ref, out_$p341: ref, out_$p342: ref, out_$p343: ref, out_$i344: i64, out_$i345: i1);
  modifies $M.23;



implementation sg_mmap_loop_$bb23(in_$p1: ref, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$i66: i64, in_$i65: i64, in_$i67: i64, in_$i68: i32, in_$i69: i16, in_$i70: i32, in_$i71: i1, in_$i58: i32, in_$i59: i64, in_$i72: i64, in_$i73: i1) returns (out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$i66: i64, out_$i65: i64, out_$i67: i64, out_$i68: i32, out_$i69: i16, out_$i70: i32, out_$i71: i1, out_$i58: i32, out_$i59: i64, out_$i72: i64, out_$i73: i1)
{

  entry:
    out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i58, out_$i59, out_$i72, out_$i73 := in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i66, in_$i65, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i58, in_$i59, in_$i72, in_$i73;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2934;

  $bb28:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i58, out_$i59 := out_$i68, out_$i67;
    goto $bb28_dummy;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    out_$i71 := $sgt.i32(out_$i70, out_$i68);
    goto corral_source_split_2954;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i16.i32(out_$i69);
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i16($M.2, in_$p54);
    goto corral_source_split_2952;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i58, 1);
    call {:si_unique_call 686} {:cexpr "k"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_2951;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i64(out_$i59, out_$i65);
    call {:si_unique_call 685} {:cexpr "sa"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_2950;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2949;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i66;
    goto $bb27;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i62;
    goto $bb27;

  $bb25:
    assume out_$i64 == 1;
    goto corral_source_split_2944;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    out_$i64 := $ult.i64(out_$i62, out_$i63);
    goto corral_source_split_2942;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(in_$i52);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i64(out_$i61, out_$i59);
    call {:si_unique_call 684} {:cexpr "len"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i64($M.2, out_$p60);
    goto corral_source_split_2939;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_2938;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb30:
    assume out_$i73 == 1;
    goto corral_source_split_2958;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$i73 := $ugt.i64(out_$i72, out_$i59);
    goto corral_source_split_2936;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i64($M.2, in_$p53);
    goto corral_source_split_2935;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(in_$i52);
    goto corral_source_split_2947;

  $bb26:
    assume !(out_$i64 == 1);
    goto corral_source_split_2946;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i58, out_$i59, out_$i72, out_$i73 := sg_mmap_loop_$bb23(in_$p1, in_$i52, in_$p53, in_$p54, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i58, out_$i59, out_$i72, out_$i73);
    return;

  exit:
    return;
}



procedure sg_mmap_loop_$bb23(in_$p1: ref, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$i66: i64, in_$i65: i64, in_$i67: i64, in_$i68: i32, in_$i69: i16, in_$i70: i32, in_$i71: i1, in_$i58: i32, in_$i59: i64, in_$i72: i64, in_$i73: i1) returns (out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$i66: i64, out_$i65: i64, out_$i67: i64, out_$i68: i32, out_$i69: i16, out_$i70: i32, out_$i71: i1, out_$i58: i32, out_$i59: i64, out_$i72: i64, out_$i73: i1);



implementation sg_remove_sfp_usercontext_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_vslice_dummy_var_47: i32) returns (out_$p9: ref, out_$p10: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_vslice_dummy_var_47: i32)
{

  entry:
    out_$p9, out_$p10, out_$p12, out_$i13, out_$i14, out_vslice_dummy_var_47 := in_$p9, in_$p10, in_$p12, in_$i13, in_$i14, in_vslice_dummy_var_47;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb6_dummy;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.2, in_$p5);
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} out_vslice_dummy_var_47 := sg_finish_rem_req(out_$p10);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.2, out_$p9);
    goto corral_source_split_3313;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 5640), 5720)), $mul.ref(232, 1));
    goto corral_source_split_3312;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p12, out_$i13, out_$i14, out_vslice_dummy_var_47 := sg_remove_sfp_usercontext_loop_$bb4(in_$p1, in_$p5, out_$p9, out_$p10, out_$p12, out_$i13, out_$i14, out_vslice_dummy_var_47);
    return;

  exit:
    return;
}



procedure sg_remove_sfp_usercontext_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_vslice_dummy_var_47: i32) returns (out_$p9: ref, out_$p10: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_vslice_dummy_var_47: i32);
  modifies $M.2;



implementation sg_remove_scat_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$p34: ref, in_$p35: ref, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i16, in_$i72: i32, in_$i73: i1, in_$i39: i32, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1) returns (out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i16, out_$i72: i32, out_$i73: i1, out_$i39: i32, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1)
{

  entry:
    out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i39, out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79 := in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i39, in_$p74, in_$i75, in_$p76, in_$p77, in_$i78, in_$i79;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;

  $bb19:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i70;
    goto $bb19_dummy;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$i73 := $sgt.i32(out_$i72, out_$i70);
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i16.i32(out_$i71);
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i16($M.2, in_$p35);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i39, 1);
    call {:si_unique_call 802} {:cexpr "k"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} __free_pages(out_$p67, out_$i69);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.2, out_$p68);
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.2, out_$p66);
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p64, $mul.ref(out_$i65, 8));
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i39);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.2, out_$p63);
    goto corral_source_split_3598;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3597;

  $bb17:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} sdev_prefix_printk.ref.ref.ref.ref.i32.ref(.str, out_$p51, out_$p57, .str.4, out_$i39, out_$p62);
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.2, out_$p61);
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p59, $mul.ref(out_$i60, 8));
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i39);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.2, out_$p58);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.2, out_$p54);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.2, out_$p52);
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.2, out_$p50);
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.2, out_$p48);
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_3580;

  $bb16:
    assume out_$i47 == 1;
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} out_$i46 := ldv__builtin_expect(out_$i45, 0);
    call {:si_unique_call 799} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_3576;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i44);
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i1.i32(out_$i43);
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i43 := $ugt.i32(out_$i42, 5);
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 7);
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$i41 := $lshr.i32(out_$i40, 3);
    goto corral_source_split_3571;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_3570;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb21:
    assume out_$i79 == 1;
    goto corral_source_split_3612;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_3567;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.2, out_$p76);
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(out_$p74, $mul.ref(out_$i75, 8));
    goto corral_source_split_3565;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i39);
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.2, in_$p34);
    goto corral_source_split_3563;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i39, out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79 := sg_remove_scat_loop_$bb14(in_$p0, in_$p1, in_$p34, in_$p35, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i39, out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79);
    return;

  exit:
    return;
}



procedure sg_remove_scat_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$p34: ref, in_$p35: ref, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i16, in_$i72: i32, in_$i73: i1, in_$i39: i32, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1) returns (out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i16, out_$i72: i32, out_$i73: i1, out_$i39: i32, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1);



implementation sg_remove_request_loop_$bb16(in_$p1: ref, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p27: ref, in_$p28: ref) returns (out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p27: ref, out_$p28: ref)
{

  entry:
    out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p39, out_$p40, out_$i41, out_$i42, out_$p27, out_$p28 := in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p39, in_$p40, in_$i41, in_$i42, in_$p27, in_$p28;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3740;

  $bb22:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p27, out_$p28 := out_$p40, out_$p27;
    goto $bb22_dummy;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.2, out_$p39);
    goto corral_source_split_3755;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p27, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_3754;

  $bb19:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$p32, out_$p33 := out_$p28, out_$p27;
    assume true;
    goto $bb19;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i29, out_$i30);
    goto corral_source_split_3744;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_3743;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3742;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p39, out_$p40, out_$i41, out_$i42, out_$p27, out_$p28 := sg_remove_request_loop_$bb16(in_$p1, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p39, out_$p40, out_$i41, out_$i42, out_$p27, out_$p28);
    return;

  exit:
    return;
}



procedure sg_remove_request_loop_$bb16(in_$p1: ref, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p27: ref, in_$p28: ref) returns (out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p27: ref, out_$p28: ref);



implementation open_wait_loop_$bb51(in_$p0: ref, in_$p3: ref, in_$p61: ref, in_$p63: ref, in_$i66: i64, in_$p67: ref, in_$i68: i8, in_$i69: i1, in_$i71: i1, in_$i72: i64, in_$i73: i64, in_$i74: i32, in_$i75: i1) returns (out_$i66: i64, out_$p67: ref, out_$i68: i8, out_$i69: i1, out_$i71: i1, out_$i72: i64, out_$i73: i64, out_$i74: i32, out_$i75: i1)
{

  entry:
    out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75 := in_$i66, in_$p67, in_$i68, in_$i69, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75;
    goto $bb51, exit;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  $bb60:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := out_$i73;
    goto $bb60_dummy;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} out_$i74 := atomic_read(in_$p63);
    call {:si_unique_call 871} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} out_$i73 := prepare_to_wait_event(in_$p61, in_$p3, 1);
    call {:si_unique_call 869} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_3934;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} schedule();
    goto corral_source_split_3933;

  $bb58:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i66;
    assume true;
    goto $bb58;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i66, 0);
    goto corral_source_split_3929;

  $bb52:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i8.i1(out_$i68);
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.2, out_$p67);
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3916;

  $bb60_dummy:
    call {:si_unique_call 1} out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75 := open_wait_loop_$bb51(in_$p0, in_$p3, in_$p61, in_$p63, out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75);
    return;

  exit:
    return;
}



procedure open_wait_loop_$bb51(in_$p0: ref, in_$p3: ref, in_$p61: ref, in_$p63: ref, in_$i66: i64, in_$p67: ref, in_$i68: i8, in_$i69: i1, in_$i71: i1, in_$i72: i64, in_$i73: i64, in_$i74: i32, in_$i75: i1) returns (out_$i66: i64, out_$p67: ref, out_$i68: i8, out_$i69: i1, out_$i71: i1, out_$i72: i64, out_$i73: i64, out_$i74: i32, out_$i75: i1);



implementation open_wait_loop_$bb41(in_$p0: ref, in_$p3: ref, in_$p48: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i8, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i64, in_$p67: ref, in_$i68: i8, in_$i69: i1, in_$i71: i1, in_$i72: i64, in_$i73: i64, in_$i74: i32, in_$i75: i1, in_$i70: i64, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i1, in_$i81: i32, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i8, in_$i86: i1, in_$i87: i32) returns (out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i8, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i64, out_$p67: ref, out_$i68: i8, out_$i69: i1, out_$i71: i1, out_$i72: i64, out_$i73: i64, out_$i74: i32, out_$i75: i1, out_$i70: i64, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i1, out_$i81: i32, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i8, out_$i86: i1, out_$i87: i32)
{

  entry:
    out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i70, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := in_$p52, in_$p53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i70, in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb68:
    assume {:verifier.code 0} true;
    assume out_$i86 == 1;
    goto $bb68_dummy;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i78;
    assume true;
    goto $bb68;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i8.i1(out_$i85);
    goto corral_source_split_3952;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i8($M.2, in_$p48);
    goto corral_source_split_3951;

  $bb66:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, 0);
    goto corral_source_split_3947;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} out_$i83 := atomic_read(out_$p82);
    call {:si_unique_call 874} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_3946;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3945;

  $bb63:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$i81 := out_$i78;
    assume true;
    goto $bb63;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i78, 0);
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} mutex_lock_nested(out_$p79, 0);
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3939;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_3938;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i78 := 0;
    goto $bb61;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i77;
    goto $bb61;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i77 := $trunc.i64.i32(out_$i70);
    call {:si_unique_call 866} {:cexpr "__ret___1"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} finish_wait(out_$p76, in_$p3);
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3925;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i70 := 0;
    goto $bb55;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i72;
    goto $bb55;

  $bb57:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i66;
    assume true;
    goto $bb57, $bb58;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i66, 0);
    goto corral_source_split_3929;

  $bb52:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i8.i1(out_$i68);
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.2, out_$p67);
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3916;

  $bb51:
    call out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75 := open_wait_loop_$bb51(in_$p0, in_$p3, out_$p61, out_$p63, out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75);
    goto $bb51_last;

  $bb51_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i62;
    goto $bb51;

  $bb60:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := out_$i73;
    assume false;
    return;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb60;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} out_$i74 := atomic_read(out_$p63);
    call {:si_unique_call 871} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} out_$i73 := prepare_to_wait_event(out_$p61, in_$p3, 1);
    call {:si_unique_call 869} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_3934;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} schedule();
    goto corral_source_split_3933;

  $bb58:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb50:
    assume !(out_$i65 == 1);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb50;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} out_$i64 := atomic_read(out_$p63);
    call {:si_unique_call 864} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_3910;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} out_$i62 := prepare_to_wait_event(out_$p61, in_$p3, 1);
    call {:si_unique_call 862} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p60, 0);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} INIT_LIST_HEAD(out_$p59);
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3903;

  $bb46:
    assume out_$i58 == 1;
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i8.i1(out_$i57);
    goto corral_source_split_3900;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.2, out_$p56);
    goto corral_source_split_3899;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(356, 1));
    goto corral_source_split_3898;

  $bb43:
    assume out_$i55 == 1;
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 0);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} out_$i54 := atomic_read(out_$p53);
    call {:si_unique_call 859} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} __might_sleep(.str.40, 258, 0);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} mutex_unlock(out_$p52);
    goto corral_source_split_3891;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3890;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    assume out_$i65 == 1;
    goto $bb49;

  $bb54:
    assume out_$i75 == 1;
    goto corral_source_split_3922;

  $bb53:
    assume !(out_$i69 == 1);
    goto corral_source_split_3920;

  $bb44:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb45;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb45;

  $bb68_dummy:
    call {:si_unique_call 1} out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i70, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := open_wait_loop_$bb41(in_$p0, in_$p3, in_$p48, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i70, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87);
    return;

  exit:
    return;
}



procedure open_wait_loop_$bb41(in_$p0: ref, in_$p3: ref, in_$p48: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i8, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i64, in_$p67: ref, in_$i68: i8, in_$i69: i1, in_$i71: i1, in_$i72: i64, in_$i73: i64, in_$i74: i32, in_$i75: i1, in_$i70: i64, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i1, in_$i81: i32, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i8, in_$i86: i1, in_$i87: i32) returns (out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i8, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i64, out_$p67: ref, out_$i68: i8, out_$i69: i1, out_$i71: i1, out_$i72: i64, out_$i73: i64, out_$i74: i32, out_$i75: i1, out_$i70: i64, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i1, out_$i81: i32, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i8, out_$i86: i1, out_$i87: i32);
  modifies $M.2;



implementation open_wait_loop_$bb16(in_$p0: ref, in_$p2: ref, in_$p19: ref, in_$p21: ref, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i29: i1, in_$i30: i64, in_$i31: i64, in_$i32: i32, in_$i33: i1) returns (out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i29: i1, out_$i30: i64, out_$i31: i64, out_$i32: i32, out_$i33: i1)
{

  entry:
    out_$i24, out_$p25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33 := in_$i24, in_$p25, in_$i26, in_$i27, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  $bb25:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i31;
    goto $bb25_dummy;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_3864;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} out_$i32 := atomic_read(in_$p21);
    call {:si_unique_call 852} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} out_$i31 := prepare_to_wait_event(in_$p19, in_$p2, 1);
    call {:si_unique_call 850} {:cexpr "tmp"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_3862;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} schedule();
    goto corral_source_split_3861;

  $bb23:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i24;
    assume true;
    goto $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i24, 0);
    goto corral_source_split_3857;

  $bb18:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.2, out_$p25);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3844;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i24, out_$p25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33 := open_wait_loop_$bb16(in_$p0, in_$p2, in_$p19, in_$p21, out_$i24, out_$p25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33);
    return;

  exit:
    return;
}



procedure open_wait_loop_$bb16(in_$p0: ref, in_$p2: ref, in_$p19: ref, in_$p21: ref, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i29: i1, in_$i30: i64, in_$i31: i64, in_$i32: i32, in_$i33: i1) returns (out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i29: i1, out_$i30: i64, out_$i31: i64, out_$i32: i32, out_$i33: i1);



implementation open_wait_loop_$bb6(in_$p0: ref, in_$p2: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i29: i1, in_$i30: i64, in_$i31: i64, in_$i32: i32, in_$i33: i1, in_$i28: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$i38: i1, in_$i39: i32, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i29: i1, out_$i30: i64, out_$i31: i64, out_$i32: i32, out_$i33: i1, out_$i28: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$i38: i1, out_$i39: i32, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i28, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46 := in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i28, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i45 == 1;
    goto $bb34_dummy;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i36;
    assume true;
    goto $bb34;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i44, 0);
    goto corral_source_split_3882;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.2, in_$p6);
    goto corral_source_split_3881;

  $bb32:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} out_$i42 := atomic_read(out_$p41);
    call {:si_unique_call 855} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_3876;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3875;

  $bb28:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i36;
    assume true;
    goto $bb28;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i36, 0);
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} mutex_lock_nested(out_$p37, 0);
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3867;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i36 := 0;
    goto $bb26;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i35;
    goto $bb26;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i64.i32(out_$i28);
    call {:si_unique_call 847} {:cexpr "__ret"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} finish_wait(out_$p34, in_$p2);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3853;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3852;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i28 := 0;
    goto $bb20;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i30;
    goto $bb20;

  $bb22:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i24;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i24, 0);
    goto corral_source_split_3857;

  $bb18:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.2, out_$p25);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3844;

  $bb16:
    call out_$i24, out_$p25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33 := open_wait_loop_$bb16(in_$p0, in_$p2, out_$p19, out_$p21, out_$i24, out_$p25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i20;
    goto $bb16;

  $bb25:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i31;
    assume false;
    return;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb25;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_3864;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} out_$i32 := atomic_read(out_$p21);
    call {:si_unique_call 852} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} out_$i31 := prepare_to_wait_event(out_$p19, in_$p2, 1);
    call {:si_unique_call 850} {:cexpr "tmp"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_3862;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} schedule();
    goto corral_source_split_3861;

  $bb23:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb15:
    assume !(out_$i23 == 1);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} out_$i22 := atomic_read(out_$p21);
    call {:si_unique_call 845} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} out_$i20 := prepare_to_wait_event(out_$p19, in_$p2, 1);
    call {:si_unique_call 843} {:cexpr "tmp"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p18, 0);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} INIT_LIST_HEAD(out_$p17);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3831;

  $bb11:
    assume out_$i16 == 1;
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.2, out_$p14);
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_3826;

  $bb8:
    assume out_$i13 == 1;
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_$i12 := atomic_read(out_$p11);
    call {:si_unique_call 840} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_3821;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} __might_sleep(.str.40, 245, 0);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} mutex_unlock(out_$p10);
    goto corral_source_split_3819;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(96, 1));
    goto corral_source_split_3818;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i23 == 1;
    goto $bb14;

  $bb17:
    assume out_$i27 == 1;
    goto corral_source_split_3848;

  $bb19:
    assume out_$i33 == 1;
    goto corral_source_split_3850;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb10;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb10;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i28, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46 := open_wait_loop_$bb6(in_$p0, in_$p2, in_$p6, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i28, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46);
    return;

  exit:
    return;
}



procedure open_wait_loop_$bb6(in_$p0: ref, in_$p2: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i29: i1, in_$i30: i64, in_$i31: i64, in_$i32: i32, in_$i33: i1, in_$i28: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$i38: i1, in_$i39: i32, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i29: i1, out_$i30: i64, out_$i31: i64, out_$i32: i32, out_$i33: i1, out_$i28: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$i38: i1, out_$i39: i32, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32);
  modifies $M.2;



implementation sg_build_reserve_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1) returns (out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1)
{

  entry:
    out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27 := in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4125;

  $bb12:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i26;
    goto $bb12_dummy;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$i27 := $ugt.i32(out_$i26, 2048);
    goto corral_source_split_4139;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i26 := $ashr.i32(out_$i23, 1);
    call {:si_unique_call 915} {:cexpr "req_size"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} sg_remove_scat(in_$p0, in_$p2);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume !(out_$i25 == 1);
    goto corral_source_split_4136;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} out_$i24 := sg_build_indirect(in_$p2, in_$p0, out_$i23);
    call {:si_unique_call 913} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4131;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4130;

  $bb6:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i21;
    goto $bb7;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$i23 := 4096;
    goto $bb7;

  $bb5:
    assume out_$i22 == 1;
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$i22 := $ule.i32(out_$i21, 4095);
    goto corral_source_split_4126;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27 := sg_build_reserve_loop_$bb4(in_$p0, in_$p2, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure sg_build_reserve_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1) returns (out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1);
  modifies $M.2, $M.34, $M.35;



implementation sg_build_indirect_loop_$bb75(in_$p0: ref, in_$i71: i32, in_$i96: i32, in_$p161: ref, in_$p162: ref, in_$i163: i64, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i160: i32) returns (out_$p161: ref, out_$p162: ref, out_$i163: i64, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i160: i32)
{

  entry:
    out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i160 := in_$p161, in_$p162, in_$i163, in_$p164, in_$p165, in_$i166, in_$i167, in_$i160;
    goto $bb75, exit;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_4418;

  $bb77:
    assume out_$i167 == 1;
    assume {:verifier.code 0} true;
    out_$i160 := out_$i166;
    goto $bb77_dummy;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i167 := $slt.i32(out_$i166, in_$i96);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$i166 := $add.i32(out_$i160, 1);
    call {:si_unique_call 971} {:cexpr "i"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} __free_pages(out_$p165, in_$i71);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p165 := $load.ref($M.2, out_$p164);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref(out_$p162, $mul.ref(out_$i163, 8));
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    out_$i163 := $sext.i32.i64(out_$i160);
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$p162 := $load.ref($M.2, out_$p161);
    goto corral_source_split_4421;

  $bb76:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb77_dummy:
    call {:si_unique_call 1} out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i160 := sg_build_indirect_loop_$bb75(in_$p0, in_$i71, in_$i96, out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i160);
    return;

  exit:
    return;
}



procedure sg_build_indirect_loop_$bb75(in_$p0: ref, in_$i71: i32, in_$i96: i32, in_$p161: ref, in_$p162: ref, in_$i163: i64, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i160: i32) returns (out_$p161: ref, out_$p162: ref, out_$i163: i64, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i160: i32);



implementation sg_build_indirect_loop_$bb42(in_$p0: ref, in_$p1: ref, in_$i32: i32, in_$i54: i32, in_$i70: i32, in_$i71: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i64, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i78: i32, in_$i79: i32, in_$i129: i1, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i126: i32, in_$i127: i32, in_$i128: i32) returns (out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i64, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i78: i32, out_$i79: i32, out_$i129: i1, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i126: i32, out_$i127: i32, out_$i128: i32)
{

  entry:
    out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i78, out_$i79, out_$i129, out_$i130, out_$i131, out_$i132, out_$i126, out_$i127, out_$i128 := in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$p85, in_$p86, in_$i87, in_$p88, in_$p89, in_$p90, in_$i91, in_$p92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i78, in_$i79, in_$i129, in_$i130, in_$i131, in_$i132, in_$i126, in_$i127, in_$i128;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4306;

  $bb60:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i78, out_$i79 := out_$i123, out_$i124;
    goto $bb60_dummy;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$i126, out_$i127, out_$i128 := in_$i71, out_$i124, out_$i123;
    assume true;
    goto $bb60;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i125 := $sgt.i32(out_$i124, 0);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i124 := $sub.i32(out_$i79, in_$i70);
    call {:si_unique_call 966} {:cexpr "rem_sz"} boogie_si_record_i32(out_$i124);
    goto corral_source_split_4374;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i123 := $add.i32(out_$i78, 1);
    call {:si_unique_call 965} {:cexpr "k"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_4373;

  $bb58:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} sdev_prefix_printk.ref.ref.ref.ref.i32.i32.i32(.str, out_$p116, out_$p122, .str.38, out_$i78, out_$i83, in_$i70);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(out_$p121);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(out_$p120, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.2, out_$p119);
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p118, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.2, out_$p117);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.2, out_$p115);
    goto corral_source_split_4364;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p114, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.2, out_$p113);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4361;

  $bb57:
    assume out_$i112 == 1;
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i64(out_$i111, 0);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_$i111 := ldv__builtin_expect(out_$i110, 0);
    call {:si_unique_call 963} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i111);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i109);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i1.i32(out_$i108);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i108 := $ugt.i32(out_$i107, 5);
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i32(out_$i106, 7);
    goto corral_source_split_4353;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_$i106 := $lshr.i32(out_$i105, 3);
    goto corral_source_split_4352;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_4351;

  $bb52:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.35 := in_$i70;
    call {:si_unique_call 961} {:cexpr "scatter_elem_sz_prev"} boogie_si_record_i32(in_$i70);
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.34 := in_$i70;
    call {:si_unique_call 960} {:cexpr "scatter_elem_sz"} boogie_si_record_i32(in_$i70);
    goto corral_source_split_4348;

  $bb53:
    assume out_$i104 == 1;
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i64(out_$i103, 0);
    goto corral_source_split_4345;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_$i103 := ldv__builtin_expect(out_$i102, 0);
    call {:si_unique_call 959} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_4344;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i101);
    goto corral_source_split_4343;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i1.i32(out_$i100);
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$i100 := $sgt.i32(in_$i70, out_$i99);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$i99 := $M.35;
    goto corral_source_split_4340;

  $bb51:
    assume out_$i98 == 1;
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i83, out_$i97);
    goto corral_source_split_4337;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i97 := $M.35;
    goto corral_source_split_4336;

  $bb48:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    out_$i96 := out_$i78;
    assume true;
    goto $bb48;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i64(out_$i94, 0);
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p93);
    goto corral_source_split_4329;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.2, out_$p92);
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref(out_$p90, $mul.ref(out_$i91, 8));
    goto corral_source_split_4327;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i32.i64(out_$i78);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.2, out_$p89);
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4324;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p88, out_$p84);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p86, $mul.ref(out_$i87, 8));
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i78);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.2, out_$p85);
    goto corral_source_split_4320;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4319;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} out_$p84 := alloc_pages(in_$i54, in_$i71);
    goto corral_source_split_4318;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_4317;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i79;
    goto $bb46;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i82;
    goto $bb46;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    out_$i82 := $M.35;
    goto corral_source_split_4313;

  $bb44:
    assume out_$i81 == 1;
    goto corral_source_split_4312;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i80, out_$i79);
    goto corral_source_split_4310;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i80 := $M.35;
    goto corral_source_split_4309;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb62:
    assume out_$i129 == 1;
    goto corral_source_split_4379;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$i130, out_$i131, out_$i132 := in_$i71, out_$i79, out_$i78;
    assume true;
    goto $bb62;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i78, in_$i32);
    goto corral_source_split_4307;

  $bb45:
    assume !(out_$i81 == 1);
    goto corral_source_split_4315;

  $bb60_dummy:
    call {:si_unique_call 1} out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i78, out_$i79, out_$i129, out_$i130, out_$i131, out_$i132, out_$i126, out_$i127, out_$i128 := sg_build_indirect_loop_$bb42(in_$p0, in_$p1, in_$i32, in_$i54, in_$i70, in_$i71, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i78, out_$i79, out_$i129, out_$i130, out_$i131, out_$i132, out_$i126, out_$i127, out_$i128);
    return;

  exit:
    return;
}



procedure sg_build_indirect_loop_$bb42(in_$p0: ref, in_$p1: ref, in_$i32: i32, in_$i54: i32, in_$i70: i32, in_$i71: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i64, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i78: i32, in_$i79: i32, in_$i129: i1, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i126: i32, in_$i127: i32, in_$i128: i32) returns (out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i64, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i78: i32, out_$i79: i32, out_$i129: i1, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i126: i32, out_$i127: i32, out_$i128: i32);
  modifies $M.35, $M.34, $M.2;



implementation sg_build_indirect_loop_$bb38(in_$p0: ref, in_$p1: ref, in_$i13: i32, in_$i32: i32, in_$i54: i32, in_$i66: i1, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i70: i32, in_$i71: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i64, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i78: i32, in_$i79: i32, in_$i129: i1, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i126: i32, in_$i127: i32, in_$i128: i32, in_$i159: i1, in_$p161: ref, in_$p162: ref, in_$i163: i64, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i160: i32, in_$i168: i32, in_$i169: i1) returns (out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i70: i32, out_$i71: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i64, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i78: i32, out_$i79: i32, out_$i129: i1, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i126: i32, out_$i127: i32, out_$i128: i32, out_$i159: i1, out_$p161: ref, out_$p162: ref, out_$i163: i64, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i160: i32, out_$i168: i32, out_$i169: i1)
{

  entry:
    out_$i72, out_$i73, out_$i74, out_$i70, out_$i71, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i78, out_$i79, out_$i129, out_$i75, out_$i76, out_$i77, out_$i130, out_$i131, out_$i132, out_$i126, out_$i127, out_$i128, out_$i159, out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i160, out_$i168, out_$i169 := in_$i72, in_$i73, in_$i74, in_$i70, in_$i71, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$p85, in_$p86, in_$i87, in_$p88, in_$p89, in_$p90, in_$i91, in_$p92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i78, in_$i79, in_$i129, in_$i75, in_$i76, in_$i77, in_$i130, in_$i131, in_$i132, in_$i126, in_$i127, in_$i128, in_$i159, in_$p161, in_$p162, in_$i163, in_$p164, in_$p165, in_$i166, in_$i167, in_$i160, in_$i168, in_$i169;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4298;

  $bb40:
    assume in_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i70, out_$i71 := out_$i74, out_$i72;
    goto $bb40_dummy;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76, out_$i77 := out_$i72, in_$i13, 0;
    assume true;
    goto $bb40;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$i74 := $shl.i32(1, out_$i73);
    call {:si_unique_call 956} {:cexpr "ret_sz"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_4302;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i72, 12);
    goto corral_source_split_4301;

  $bb39:
    assume out_$i169 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4300;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i168;
    assume true;
    goto $bb39;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$i169 := $sge.i32(out_$i168, 0);
    goto corral_source_split_4432;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i168 := $sub.i32(out_$i71, 1);
    call {:si_unique_call 972} {:cexpr "order"} boogie_si_record_i32(out_$i168);
    goto corral_source_split_4431;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i159 == 1);
    goto $bb74;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb78:
    assume !(out_$i167 == 1);
    goto corral_source_split_4429;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i167 := $slt.i32(out_$i166, out_$i96);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$i166 := $add.i32(out_$i160, 1);
    call {:si_unique_call 971} {:cexpr "i"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} __free_pages(out_$p165, out_$i71);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p165 := $load.ref($M.2, out_$p164);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref(out_$p162, $mul.ref(out_$i163, 8));
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    out_$i163 := $sext.i32.i64(out_$i160);
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$p162 := $load.ref($M.2, out_$p161);
    goto corral_source_split_4421;

  $bb76:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    call out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i160 := sg_build_indirect_loop_$bb75(in_$p0, out_$i71, out_$i96, out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i160);
    goto $bb75_last;

  $bb75_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4418;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$i160 := 0;
    goto $bb75;

  $bb77:
    assume out_$i167 == 1;
    assume {:verifier.code 0} true;
    out_$i160 := out_$i166;
    assume false;
    return;

  $bb72:
    assume out_$i159 == 1;
    goto corral_source_split_4416;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i159 := $slt.i32(0, out_$i96);
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4332;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    out_$i96 := out_$i78;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i64(out_$i94, 0);
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p93);
    goto corral_source_split_4329;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.2, out_$p92);
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref(out_$p90, $mul.ref(out_$i91, 8));
    goto corral_source_split_4327;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i32.i64(out_$i78);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.2, out_$p89);
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4324;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p88, out_$p84);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p86, $mul.ref(out_$i87, 8));
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i78);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.2, out_$p85);
    goto corral_source_split_4320;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4319;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} out_$p84 := alloc_pages(in_$i54, out_$i71);
    goto corral_source_split_4318;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_4317;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i79;
    goto $bb46;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i82;
    goto $bb46;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    out_$i82 := $M.35;
    goto corral_source_split_4313;

  $bb44:
    assume out_$i81 == 1;
    goto corral_source_split_4312;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i80, out_$i79);
    goto corral_source_split_4310;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i80 := $M.35;
    goto corral_source_split_4309;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb62:
    assume out_$i129 == 1;
    goto corral_source_split_4379;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$i130, out_$i131, out_$i132 := out_$i71, out_$i79, out_$i78;
    assume true;
    goto $bb62;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i78, in_$i32);
    goto corral_source_split_4307;

  $bb42:
    call out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i78, out_$i79, out_$i129, out_$i130, out_$i131, out_$i132, out_$i126, out_$i127, out_$i128 := sg_build_indirect_loop_$bb42(in_$p0, in_$p1, in_$i32, in_$i54, out_$i70, out_$i71, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i78, out_$i79, out_$i129, out_$i130, out_$i131, out_$i132, out_$i126, out_$i127, out_$i128);
    goto $bb42_last;

  $bb42_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4306;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79 := 0, in_$i13;
    goto $bb42;

  $bb60:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i78, out_$i79 := out_$i123, out_$i124;
    assume false;
    return;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$i126, out_$i127, out_$i128 := out_$i71, out_$i124, out_$i123;
    assume true;
    goto $bb60;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i125 := $sgt.i32(out_$i124, 0);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i124 := $sub.i32(out_$i79, out_$i70);
    call {:si_unique_call 966} {:cexpr "rem_sz"} boogie_si_record_i32(out_$i124);
    goto corral_source_split_4374;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i123 := $add.i32(out_$i78, 1);
    call {:si_unique_call 965} {:cexpr "k"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_4373;

  $bb58:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} sdev_prefix_printk.ref.ref.ref.ref.i32.i32.i32(.str, out_$p116, out_$p122, .str.38, out_$i78, out_$i83, out_$i70);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(out_$p121);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(out_$p120, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.2, out_$p119);
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p118, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.2, out_$p117);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.2, out_$p115);
    goto corral_source_split_4364;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p114, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.2, out_$p113);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p1, $mul.ref(0, 5720)), $mul.ref(16, 1));
    goto corral_source_split_4361;

  $bb57:
    assume out_$i112 == 1;
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i64(out_$i111, 0);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_$i111 := ldv__builtin_expect(out_$i110, 0);
    call {:si_unique_call 963} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i111);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i109);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i1.i32(out_$i108);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i108 := $ugt.i32(out_$i107, 5);
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i32(out_$i106, 7);
    goto corral_source_split_4353;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_$i106 := $lshr.i32(out_$i105, 3);
    goto corral_source_split_4352;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.2, scsi_logging_level);
    goto corral_source_split_4351;

  $bb52:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.35 := out_$i70;
    call {:si_unique_call 961} {:cexpr "scatter_elem_sz_prev"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.34 := out_$i70;
    call {:si_unique_call 960} {:cexpr "scatter_elem_sz"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_4348;

  $bb53:
    assume out_$i104 == 1;
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i64(out_$i103, 0);
    goto corral_source_split_4345;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_$i103 := ldv__builtin_expect(out_$i102, 0);
    call {:si_unique_call 959} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_4344;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i101);
    goto corral_source_split_4343;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i1.i32(out_$i100);
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$i100 := $sgt.i32(out_$i70, out_$i99);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$i99 := $M.35;
    goto corral_source_split_4340;

  $bb51:
    assume out_$i98 == 1;
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i83, out_$i97);
    goto corral_source_split_4337;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i97 := $M.35;
    goto corral_source_split_4336;

  $bb48:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume !(out_$i81 == 1);
    goto corral_source_split_4315;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i72, out_$i73, out_$i74, out_$i70, out_$i71, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i78, out_$i79, out_$i129, out_$i75, out_$i76, out_$i77, out_$i130, out_$i131, out_$i132, out_$i126, out_$i127, out_$i128, out_$i159, out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i160, out_$i168, out_$i169 := sg_build_indirect_loop_$bb38(in_$p0, in_$p1, in_$i13, in_$i32, in_$i54, in_$i66, out_$i72, out_$i73, out_$i74, out_$i70, out_$i71, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i78, out_$i79, out_$i129, out_$i75, out_$i76, out_$i77, out_$i130, out_$i131, out_$i132, out_$i126, out_$i127, out_$i128, out_$i159, out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i160, out_$i168, out_$i169);
    return;

  exit:
    return;
}



procedure sg_build_indirect_loop_$bb38(in_$p0: ref, in_$p1: ref, in_$i13: i32, in_$i32: i32, in_$i54: i32, in_$i66: i1, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i70: i32, in_$i71: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i64, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i78: i32, in_$i79: i32, in_$i129: i1, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i126: i32, in_$i127: i32, in_$i128: i32, in_$i159: i1, in_$p161: ref, in_$p162: ref, in_$i163: i64, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i160: i32, in_$i168: i32, in_$i169: i1) returns (out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i70: i32, out_$i71: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i64, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i78: i32, out_$i79: i32, out_$i129: i1, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i126: i32, out_$i127: i32, out_$i128: i32, out_$i159: i1, out_$p161: ref, out_$p162: ref, out_$i163: i64, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i160: i32, out_$i168: i32, out_$i169: i1);
  modifies $M.2, $M.35, $M.34;



implementation sg_res_in_use_loop_$bb4(in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p8: ref, in_$p19: ref) returns (out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p8: ref, out_$p19: ref)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18, out_$p8, out_$p19 := in_$p9, in_$i10, in_$i11, in_$i12, in_$p13, in_$p15, in_$p16, in_$i17, in_$i18, in_$p8, in_$p19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4812;

  $bb10:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p16;
    goto $bb10_dummy;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p16;
    assume true;
    goto $bb10;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.2, out_$p15);
    goto corral_source_split_4829;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p8, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_4828;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$p13 := out_$p8;
    assume true;
    goto $bb7;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_4817;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i8.i32(out_$i10);
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i8($M.2, out_$p9);
    goto corral_source_split_4815;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 336)), $mul.ref(232, 1));
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18, out_$p8, out_$p19 := sg_res_in_use_loop_$bb4(out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18, out_$p8, out_$p19);
    return;

  exit:
    return;
}



procedure sg_res_in_use_loop_$bb4(in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p8: ref, in_$p19: ref) returns (out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p8: ref, out_$p19: ref);



implementation sg_add_request_loop_$bb21(in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p36: ref, in_$p43: ref) returns (out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p36: ref, out_$p43: ref)
{

  entry:
    out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p36, out_$p43 := in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p36, in_$p43;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5014;

  $bb23:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p36 := out_$p38;
    goto $bb23_dummy;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p38;
    assume true;
    goto $bb23;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_5021;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_5020;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.2, out_$p39);
    goto corral_source_split_5019;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.2, out_$p37);
    goto corral_source_split_5017;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p36, out_$p43 := sg_add_request_loop_$bb21(out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p36, out_$p43);
    return;

  exit:
    return;
}



procedure sg_add_request_loop_$bb21(in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p36: ref, in_$p43: ref) returns (out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p36: ref, out_$p43: ref);



implementation sg_link_reserve_loop_$bb7(in_$i27: i32, in_$p28: ref, in_$i35: i1, in_$i36: i32, in_$i53: i32, in_$i54: i32, in_$i55: i16, in_$i56: i32, in_$i57: i1, in_$i33: i32, in_$i34: i32, in_$i58: i32) returns (out_$i35: i1, out_$i36: i32, out_$i53: i32, out_$i54: i32, out_$i55: i16, out_$i56: i32, out_$i57: i1, out_$i33: i32, out_$i34: i32, out_$i58: i32)
{

  entry:
    out_$i35, out_$i36, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i33, out_$i34, out_$i58 := in_$i35, in_$i36, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i33, in_$i34, in_$i58;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5579;

  $bb13:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i53, out_$i54;
    goto $bb13_dummy;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i54;
    assume true;
    goto $bb13;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    out_$i57 := $sgt.i32(out_$i56, out_$i54);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i16.i32(out_$i55);
    goto corral_source_split_5606;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i16($M.2, in_$p28);
    goto corral_source_split_5605;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i34, 1);
    call {:si_unique_call 1204} {:cexpr "k"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_5604;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(out_$i33, in_$i27);
    call {:si_unique_call 1203} {:cexpr "rem"} boogie_si_record_i32(out_$i53);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume !(out_$i35 == 1);
    goto corral_source_split_5597;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i34;
    assume true;
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i35 := $sle.i32(out_$i33, in_$i27);
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i35, out_$i36, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i33, out_$i34, out_$i58 := sg_link_reserve_loop_$bb7(in_$i27, in_$p28, out_$i35, out_$i36, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i33, out_$i34, out_$i58);
    return;

  exit:
    return;
}



procedure sg_link_reserve_loop_$bb7(in_$i27: i32, in_$p28: ref, in_$i35: i1, in_$i36: i32, in_$i53: i32, in_$i54: i32, in_$i55: i16, in_$i56: i32, in_$i57: i1, in_$i33: i32, in_$i34: i32, in_$i58: i32) returns (out_$i35: i1, out_$i36: i32, out_$i53: i32, out_$i54: i32, out_$i55: i16, out_$i56: i32, out_$i57: i1, out_$i33: i32, out_$i34: i32, out_$i58: i32);



implementation sg_get_rq_mark_loop_$bb4(in_$i1: i32, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p19: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p9: ref, in_$p30: ref) returns (out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p19: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p9: ref, out_$p30: ref)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p21, out_$i22, out_$i23, out_$p19, out_$p26, out_$p27, out_$i28, out_$i29, out_$p9, out_$p30 := in_$p10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p21, in_$i22, in_$i23, in_$p19, in_$p26, in_$p27, in_$i28, in_$i29, in_$p9, in_$p30;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5706;

  $bb18:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p9 := out_$p27;
    goto $bb18_dummy;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p27;
    assume true;
    goto $bb18;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_5737;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.2, out_$p26);
    goto corral_source_split_5736;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p9, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_5735;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb8;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb8;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p9;
    assume true;
    goto $bb15;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, in_$i1);
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.2, out_$p21);
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_5727;

  $bb13:
    assume !(out_$i18 == 1);
    goto corral_source_split_5726;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p9;
    assume true;
    goto $bb13;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(in_$i1, $sub.i32(0, 1));
    goto corral_source_split_5720;

  $bb9:
    assume out_$i17 == 1;
    goto corral_source_split_5719;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_5717;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i8.i32(out_$i15);
    goto corral_source_split_5716;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.2, out_$p14);
    goto corral_source_split_5715;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p9, $mul.ref(0, 336)), $mul.ref(234, 1));
    goto corral_source_split_5714;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 1);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i8.i32(out_$i11);
    goto corral_source_split_5710;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.2, out_$p10);
    goto corral_source_split_5709;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_5708;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p21, out_$i22, out_$i23, out_$p19, out_$p26, out_$p27, out_$i28, out_$i29, out_$p9, out_$p30 := sg_get_rq_mark_loop_$bb4(in_$i1, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p21, out_$i22, out_$i23, out_$p19, out_$p26, out_$p27, out_$i28, out_$i29, out_$p9, out_$p30);
    return;

  exit:
    return;
}



procedure sg_get_rq_mark_loop_$bb4(in_$i1: i32, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p19: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p9: ref, in_$p30: ref) returns (out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p19: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p9: ref, out_$p30: ref);



implementation sg_read_oxfer_loop_$bb14(in_$p0: ref, in_$i33: i32, in_$p34: ref, in_$i41: i1, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$i75: i1) returns (out_$i41: i1, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$i75: i1)
{

  entry:
    out_$i41, out_$i42, out_$p43, out_$i44, out_$p53, out_$p54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i38, out_$p39, out_$i40, out_$p69, out_$p70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75 := in_$i41, in_$i42, in_$p43, in_$i44, in_$p53, in_$p54, in_$i55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i38, in_$p39, in_$i40, in_$p69, in_$p70, in_$i71, in_$p72, in_$p73, in_$i74, in_$i75;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5788;

  $bb29:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i38, out_$p39, out_$i40 := out_$i65, out_$p64, out_$i61;
    goto $bb29_dummy;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i67, out_$i65);
    goto corral_source_split_5830;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    goto corral_source_split_5829;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i16($M.2, in_$p34);
    goto corral_source_split_5828;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i38, 1);
    call {:si_unique_call 1249} {:cexpr "k"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p39, $mul.ref(out_$i63, 1));
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(in_$i33);
    goto corral_source_split_5825;

  $bb26:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    out_$i62 := $sle.i32(out_$i61, 0);
    goto corral_source_split_5821;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i40, in_$i33);
    call {:si_unique_call 1248} {:cexpr "num_read_xfer"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_5820;

  $bb23:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} out_$i59 := __copy_to_user(out_$p39, out_$p58, in_$i33);
    call {:si_unique_call 1247} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} out_$p58 := lowmem_page_address(out_$p57);
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.2, out_$p56);
    goto corral_source_split_5811;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p54, $mul.ref(out_$i55, 8));
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i38);
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.2, out_$p53);
    goto corral_source_split_5808;

  $bb17:
    assume !(out_$i41 == 1);
    out_$p53 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5807;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    out_$i42, out_$p43, out_$i44 := out_$i40, out_$p39, out_$i38;
    assume true;
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(in_$i33, out_$i40);
    goto corral_source_split_5796;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb31:
    assume out_$i75 == 1;
    goto corral_source_split_5834;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i64(out_$i74, 0);
    goto corral_source_split_5794;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$i74 := $p2i.ref.i64(out_$p73);
    goto corral_source_split_5793;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.2, out_$p72);
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p70, $mul.ref(out_$i71, 8));
    goto corral_source_split_5791;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i38);
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.2, out_$p69);
    goto corral_source_split_5789;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i41, out_$i42, out_$p43, out_$i44, out_$p53, out_$p54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i38, out_$p39, out_$i40, out_$p69, out_$p70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75 := sg_read_oxfer_loop_$bb14(in_$p0, in_$i33, in_$p34, out_$i41, out_$i42, out_$p43, out_$i44, out_$p53, out_$p54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i38, out_$p39, out_$i40, out_$p69, out_$p70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75);
    return;

  exit:
    return;
}



procedure sg_read_oxfer_loop_$bb14(in_$p0: ref, in_$i33: i32, in_$p34: ref, in_$i41: i1, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$i75: i1) returns (out_$i41: i1, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$i75: i1);



implementation sg_proc_debug_helper_loop_$bb9(in_$p0: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$p52: ref, in_$i53: i8, in_$i54: i32, in_$i55: i1, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p62: ref, in_$p70: ref, in_$i71: i32, in_$p73: ref, in_$i74: i16, in_$i75: i32, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$p88: ref, in_$i89: i32, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i98: i64, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$p104: ref, in_$i105: i32, in_$i106: i64, in_$i107: i32, in_$i103: i32, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i45: i32, in_$p46: ref, in_$i126: i32, in_$p12: ref, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32) returns (out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$p52: ref, out_$i53: i8, out_$i54: i32, out_$i55: i1, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p62: ref, out_$p70: ref, out_$i71: i32, out_$p73: ref, out_$i74: i16, out_$i75: i32, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$p88: ref, out_$i89: i32, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i98: i64, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$p104: ref, out_$i105: i32, out_$i106: i64, out_$i107: i32, out_$i103: i32, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i45: i32, out_$p46: ref, out_$i126: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32)
{

  entry:
    out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p62, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i103, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p117, out_$i118, out_$i119, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i45, out_$p46, out_$i126, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79 := in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p62, in_$p70, in_$i71, in_$p73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$p84, in_$p85, in_$p88, in_$i89, in_$p91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i98, in_$i99, in_$i100, in_$p101, in_$i102, in_$p104, in_$i105, in_$i106, in_$i107, in_$i103, in_$p108, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$p117, in_$i118, in_$i119, in_$i121, in_$p122, in_$p123, in_$i124, in_$i125, in_$i45, in_$p46, in_$i126, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6076;

  $bb35:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i45, out_$p46 := out_$i121, out_$p123;
    goto $bb35_dummy;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$i126 := out_$i121;
    assume true;
    goto $bb35;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i64(out_$i124, 0);
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$i124 := $p2i.ref.i64(out_$p123);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.2, out_$p122);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$i121 := $add.i32(out_$i45, 1);
    call {:si_unique_call 1295} {:cexpr "m"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} out_vslice_dummy_var_78 := seq_printf.ref.ref.i32.i32(in_$p0, .str.76, out_$i75, out_$i119);
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i8.i32(out_$i118);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i8($M.2, out_$p117);
    goto corral_source_split_6147;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(29, 1));
    goto corral_source_split_6146;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} out_vslice_dummy_var_79 := seq_printf.ref.ref.i32.i32(in_$p0, .str.75, out_$i103, out_$i114);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} out_vslice_dummy_var_77 := seq_printf.ref.ref.i32(in_$p0, .str.74, out_$i96);
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.2, out_$p95);
    goto corral_source_split_6138;

  $bb26:
    assume out_$i94 == 1;
    out_$p95 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i8.i32(out_$i92);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i8($M.2, out_$p91);
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} out_vslice_dummy_var_76 := seq_printf.ref.ref.i32.i32(in_$p0, .str.73, out_$i89, out_$i71);
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.2, out_$p88);
    goto corral_source_split_6130;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} out_vslice_dummy_var_75 := seq_puts(in_$p0, out_$p85);
    goto corral_source_split_6128;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$p85 := .str.72;
    goto $bb25;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$p85 := out_$p84;
    goto $bb25;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$p84 := (if out_$i83 == 1 then .str.70 else .str.71);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 1);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i8.i32(out_$i81);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i8($M.2, out_$p80);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_6119;

  $bb23:
    assume out_$i79 == 1;
    goto corral_source_split_6118;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i8.i32(out_$i77);
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.2, out_$p76);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i16.i32(out_$i74);
    call {:si_unique_call 1288} {:cexpr "usg"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i16($M.2, out_$p73);
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.2, out_$p70);
    call {:si_unique_call 1287} {:cexpr "blen"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} out_vslice_dummy_var_74 := seq_puts(in_$p0, out_$p62);
    goto corral_source_split_6105;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6104;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p62 := out_$p67;
    goto $bb19;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p62 := out_$p61;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6102;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p61 := .str.67;
    goto $bb18;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    out_$p61 := .str.66;
    goto $bb18;

  $bb16:
    assume out_$i60 == 1;
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_6098;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i58, 4);
    goto corral_source_split_6097;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.2, out_$p57);
    goto corral_source_split_6096;

  $bb13:
    assume out_$i56 == 1;
    out_$p57 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(44, 1));
    goto corral_source_split_6095;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i51, 0);
    goto corral_source_split_6088;

  $bb11:
    assume out_$i55 == 1;
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_6085;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i8.i32(out_$i53);
    goto corral_source_split_6084;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i8($M.2, out_$p52);
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(232, 1));
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i1.i32(out_$i50);
    call {:si_unique_call 1285} {:cexpr "new_interface"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_6081;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_6080;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.2, out_$p48);
    goto corral_source_split_6079;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb15;

  $bb21:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$p67 := .str.69;
    goto $bb22;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$p67 := .str.68;
    goto $bb22;

  $bb20:
    assume out_$i66 == 1;
    goto corral_source_split_6116;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 6);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.2, out_$p63);
    goto corral_source_split_6091;

  $bb12:
    assume !(out_$i55 == 1);
    out_$p63 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(80, 1));
    goto corral_source_split_6090;

  $bb24:
    assume !(out_$i79 == 1);
    goto corral_source_split_6125;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i114 := 0;
    goto $bb34;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$i114 := out_$i113;
    goto $bb34;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$i113 := $sub.i32(out_$i99, out_$i112);
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.2, out_$p111);
    goto corral_source_split_6169;

  $bb32:
    assume out_$i110 == 1;
    out_$p111 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$i110 := $ult.i32(out_$i109, out_$i99);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.2, out_$p108);
    goto corral_source_split_6165;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} out_$i107 := jiffies_to_msecs(out_$i106);
    call {:si_unique_call 1298} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i107);
    assume {:verifier.code 0} true;
    out_$i103 := out_$i107;
    goto $bb31;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i102;
    goto $bb31;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.2, out_$p101);
    call {:si_unique_call 1296} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_6157;

  $bb29:
    assume out_$i100 == 1;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(40, 1));
    goto corral_source_split_6156;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i51, 0);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} out_$i99 := jiffies_to_msecs(out_$i98);
    call {:si_unique_call 1293} {:cexpr "ms"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i64($M.2, jiffies);
    goto corral_source_split_6142;

  $bb27:
    assume !(out_$i94 == 1);
    goto corral_source_split_6141;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i105);
    goto corral_source_split_6162;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.2, out_$p104);
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p12, $mul.ref(0, 5720)), $mul.ref(184, 1));
    goto corral_source_split_6160;

  $bb30:
    assume !(out_$i100 == 1);
    goto corral_source_split_6159;

  $bb33:
    assume !(out_$i110 == 1);
    goto corral_source_split_6172;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p62, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i103, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p117, out_$i118, out_$i119, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i45, out_$p46, out_$i126, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79 := sg_proc_debug_helper_loop_$bb9(in_$p0, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p62, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i103, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p117, out_$i118, out_$i119, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i45, out_$p46, out_$i126, in_$p12, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79);
    return;

  exit:
    return;
}



procedure sg_proc_debug_helper_loop_$bb9(in_$p0: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$p52: ref, in_$i53: i8, in_$i54: i32, in_$i55: i1, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p62: ref, in_$p70: ref, in_$i71: i32, in_$p73: ref, in_$i74: i16, in_$i75: i32, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$p88: ref, in_$i89: i32, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i98: i64, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$p104: ref, in_$i105: i32, in_$i106: i64, in_$i107: i32, in_$i103: i32, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i45: i32, in_$p46: ref, in_$i126: i32, in_$p12: ref, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32) returns (out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$p52: ref, out_$i53: i8, out_$i54: i32, out_$i55: i1, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p62: ref, out_$p70: ref, out_$i71: i32, out_$p73: ref, out_$i74: i16, out_$i75: i32, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$p88: ref, out_$i89: i32, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i98: i64, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$p104: ref, out_$i105: i32, out_$i106: i64, out_$i107: i32, out_$i103: i32, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i45: i32, out_$p46: ref, out_$i126: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32);



implementation sg_proc_debug_helper_loop_$bb4(in_$p0: ref, in_$i9: i64, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$i18: i32, in_$p20: ref, in_$i21: i32, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$p52: ref, in_$i53: i8, in_$i54: i32, in_$i55: i1, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p62: ref, in_$p70: ref, in_$i71: i32, in_$p73: ref, in_$i74: i16, in_$i75: i32, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$p88: ref, in_$i89: i32, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i98: i64, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$p104: ref, in_$i105: i32, in_$i106: i64, in_$i107: i32, in_$i103: i32, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i45: i32, in_$p46: ref, in_$i126: i32, in_$i44: i32, in_$i127: i1, in_$p129: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$i136: i1, in_$i11: i32, in_$p12: ref, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32) returns (out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$i18: i32, out_$p20: ref, out_$i21: i32, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$p52: ref, out_$i53: i8, out_$i54: i32, out_$i55: i1, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p62: ref, out_$p70: ref, out_$i71: i32, out_$p73: ref, out_$i74: i16, out_$i75: i32, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$p88: ref, out_$i89: i32, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i98: i64, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$p104: ref, out_$i105: i32, out_$i106: i64, out_$i107: i32, out_$i103: i32, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i45: i32, out_$p46: ref, out_$i126: i32, out_$i44: i32, out_$i127: i1, out_$p129: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$i136: i1, out_$i11: i32, out_$p12: ref, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32)
{

  entry:
    out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$i42, out_$i43, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p62, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i103, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p117, out_$i118, out_$i119, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i45, out_$p46, out_$i126, out_$i44, out_$i127, out_$p129, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i11, out_$p12, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80 := in_$i13, in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p20, in_$i21, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p40, in_$p41, in_$i42, in_$i43, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p62, in_$p70, in_$i71, in_$p73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$p84, in_$p85, in_$p88, in_$i89, in_$p91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i98, in_$i99, in_$i100, in_$p101, in_$i102, in_$p104, in_$i105, in_$i106, in_$i107, in_$i103, in_$p108, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$p117, in_$i118, in_$i119, in_$i121, in_$p122, in_$p123, in_$i124, in_$i125, in_$i45, in_$p46, in_$i126, in_$i44, in_$i127, in_$p129, in_$p131, in_$p132, in_$p133, in_$p134, in_$i135, in_$i136, in_$i11, in_$p12, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6041;

  $bb41:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$p12 := out_$i13, out_$p132;
    goto $bb41_dummy;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i64(out_$i135, in_$i9);
    goto corral_source_split_6190;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    out_$i135 := $p2i.ref.i64(out_$p134);
    goto corral_source_split_6189;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p133, $mul.ref(0, 5720)), $mul.ref(0, 1));
    goto corral_source_split_6188;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    out_$p133 := $bitcast.ref.ref(out_$p132);
    goto corral_source_split_6187;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.2, out_$p131);
    goto corral_source_split_6186;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6185;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} _raw_read_unlock(out_$p129);
    goto corral_source_split_6184;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_6183;

  $bb39:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} out_vslice_dummy_var_80 := seq_puts(in_$p0, .str.77);
    goto corral_source_split_6181;

  $bb38:
    assume out_$i127 == 1;
    goto corral_source_split_6180;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i44, 0);
    goto corral_source_split_6178;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb8;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i126;
    goto $bb8;

  $bb36:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6176;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$i126 := out_$i121;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i64(out_$i124, 0);
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$i124 := $p2i.ref.i64(out_$p123);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.2, out_$p122);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$i121 := $add.i32(out_$i45, 1);
    call {:si_unique_call 1295} {:cexpr "m"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} out_vslice_dummy_var_78 := seq_printf.ref.ref.i32.i32(in_$p0, .str.76, out_$i75, out_$i119);
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i8.i32(out_$i118);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i8($M.2, out_$p117);
    goto corral_source_split_6147;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(29, 1));
    goto corral_source_split_6146;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} out_vslice_dummy_var_79 := seq_printf.ref.ref.i32.i32(in_$p0, .str.75, out_$i103, out_$i114);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} out_vslice_dummy_var_77 := seq_printf.ref.ref.i32(in_$p0, .str.74, out_$i96);
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.2, out_$p95);
    goto corral_source_split_6138;

  $bb26:
    assume out_$i94 == 1;
    out_$p95 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i8.i32(out_$i92);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i8($M.2, out_$p91);
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} out_vslice_dummy_var_76 := seq_printf.ref.ref.i32.i32(in_$p0, .str.73, out_$i89, out_$i71);
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.2, out_$p88);
    goto corral_source_split_6130;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(48, 1));
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} out_vslice_dummy_var_75 := seq_puts(in_$p0, out_$p85);
    goto corral_source_split_6128;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$p85 := .str.72;
    goto $bb25;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$p85 := out_$p84;
    goto $bb25;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$p84 := (if out_$i83 == 1 then .str.70 else .str.71);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 1);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i8.i32(out_$i81);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i8($M.2, out_$p80);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_6119;

  $bb23:
    assume out_$i79 == 1;
    goto corral_source_split_6118;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i8.i32(out_$i77);
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.2, out_$p76);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(235, 1));
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i16.i32(out_$i74);
    call {:si_unique_call 1288} {:cexpr "usg"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i16($M.2, out_$p73);
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.2, out_$p70);
    call {:si_unique_call 1287} {:cexpr "blen"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} out_vslice_dummy_var_74 := seq_puts(in_$p0, out_$p62);
    goto corral_source_split_6105;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6104;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p62 := out_$p67;
    goto $bb19;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p62 := out_$p61;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6102;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p61 := .str.67;
    goto $bb18;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    out_$p61 := .str.66;
    goto $bb18;

  $bb16:
    assume out_$i60 == 1;
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_6098;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i58, 4);
    goto corral_source_split_6097;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.2, out_$p57);
    goto corral_source_split_6096;

  $bb13:
    assume out_$i56 == 1;
    out_$p57 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(44, 1));
    goto corral_source_split_6095;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i51, 0);
    goto corral_source_split_6088;

  $bb11:
    assume out_$i55 == 1;
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_6085;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i8.i32(out_$i53);
    goto corral_source_split_6084;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i8($M.2, out_$p52);
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(232, 1));
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i1.i32(out_$i50);
    call {:si_unique_call 1285} {:cexpr "new_interface"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_6081;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_6080;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.2, out_$p48);
    goto corral_source_split_6079;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p62, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i103, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p117, out_$i118, out_$i119, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i45, out_$p46, out_$i126, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79 := sg_proc_debug_helper_loop_$bb9(in_$p0, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p62, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i103, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p117, out_$i118, out_$i119, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i45, out_$p46, out_$i126, out_$p12, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$i45, out_$p46 := 0, out_$p41;
    goto $bb9;

  $bb35:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i45, out_$p46 := out_$i121, out_$p123;
    assume false;
    return;

  $bb6:
    assume out_$i43 == 1;
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    out_$i44 := 0;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.2, out_$p40);
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(232, 1));
    goto corral_source_split_6069;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} out_vslice_dummy_var_73 := seq_printf.ref.ref.i32.i32.i32(in_$p0, .str.65, out_$i32, out_$i35, out_$i38);
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i8.i32(out_$i37);
    goto corral_source_split_6067;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.2, out_$p36);
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(5628, 1));
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i8.i32(out_$i34);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.2, out_$p33);
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(5625, 1));
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i8.i32(out_$i31);
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.2, out_$p30);
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(5626, 1));
    goto corral_source_split_6059;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} out_vslice_dummy_var_72 := seq_printf.ref.ref.i32.i32.i32.i32.i32(in_$p0, .str.64, out_$i13, out_$i18, out_$i21, out_$i25, out_$i28);
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i8.i32(out_$i27);
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.2, out_$p26);
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(5624, 1));
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i16($M.2, out_$p23);
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(0, 1));
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.2, out_$p20);
    goto corral_source_split_6051;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(192, 1)), $mul.ref(8, 1));
    goto corral_source_split_6050;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} out_$i18 := jiffies_to_msecs(out_$i17);
    call {:si_unique_call 1282} {:cexpr "tmp"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_6049;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_6048;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.2, out_$p15);
    goto corral_source_split_6047;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(184, 1));
    goto corral_source_split_6046;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} _raw_read_lock(out_$p14);
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(112, 1));
    goto corral_source_split_6044;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1279} {:cexpr "k"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb15;

  $bb21:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$p67 := .str.69;
    goto $bb22;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$p67 := .str.68;
    goto $bb22;

  $bb20:
    assume out_$i66 == 1;
    goto corral_source_split_6116;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 6);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.2, out_$p63);
    goto corral_source_split_6091;

  $bb12:
    assume !(out_$i55 == 1);
    out_$p63 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(80, 1));
    goto corral_source_split_6090;

  $bb24:
    assume !(out_$i79 == 1);
    goto corral_source_split_6125;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i114 := 0;
    goto $bb34;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$i114 := out_$i113;
    goto $bb34;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$i113 := $sub.i32(out_$i99, out_$i112);
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.2, out_$p111);
    goto corral_source_split_6169;

  $bb32:
    assume out_$i110 == 1;
    out_$p111 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$i110 := $ult.i32(out_$i109, out_$i99);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.2, out_$p108);
    goto corral_source_split_6165;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(76, 1));
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} out_$i107 := jiffies_to_msecs(out_$i106);
    call {:si_unique_call 1298} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i107);
    assume {:verifier.code 0} true;
    out_$i103 := out_$i107;
    goto $bb31;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i102;
    goto $bb31;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.2, out_$p101);
    call {:si_unique_call 1296} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_6157;

  $bb29:
    assume out_$i100 == 1;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 336)), $mul.ref(48, 1)), $mul.ref(40, 1));
    goto corral_source_split_6156;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i51, 0);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} out_$i99 := jiffies_to_msecs(out_$i98);
    call {:si_unique_call 1293} {:cexpr "ms"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i64($M.2, jiffies);
    goto corral_source_split_6142;

  $bb27:
    assume !(out_$i94 == 1);
    goto corral_source_split_6141;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i105);
    goto corral_source_split_6162;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.2, out_$p104);
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p12, $mul.ref(0, 5720)), $mul.ref(184, 1));
    goto corral_source_split_6160;

  $bb30:
    assume !(out_$i100 == 1);
    goto corral_source_split_6159;

  $bb33:
    assume !(out_$i110 == 1);
    goto corral_source_split_6172;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$i42, out_$i43, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p62, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i103, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p117, out_$i118, out_$i119, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i45, out_$p46, out_$i126, out_$i44, out_$i127, out_$p129, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i11, out_$p12, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80 := sg_proc_debug_helper_loop_$bb4(in_$p0, in_$i9, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$i42, out_$i43, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p62, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i103, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p117, out_$i118, out_$i119, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i45, out_$p46, out_$i126, out_$i44, out_$i127, out_$p129, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i11, out_$p12, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80);
    return;

  exit:
    return;
}



procedure sg_proc_debug_helper_loop_$bb4(in_$p0: ref, in_$i9: i64, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$i18: i32, in_$p20: ref, in_$i21: i32, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$p52: ref, in_$i53: i8, in_$i54: i32, in_$i55: i1, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p62: ref, in_$p70: ref, in_$i71: i32, in_$p73: ref, in_$i74: i16, in_$i75: i32, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$p88: ref, in_$i89: i32, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i98: i64, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$p104: ref, in_$i105: i32, in_$i106: i64, in_$i107: i32, in_$i103: i32, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i45: i32, in_$p46: ref, in_$i126: i32, in_$i44: i32, in_$i127: i1, in_$p129: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$i136: i1, in_$i11: i32, in_$p12: ref, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32) returns (out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$i18: i32, out_$p20: ref, out_$i21: i32, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$p52: ref, out_$i53: i8, out_$i54: i32, out_$i55: i1, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p62: ref, out_$p70: ref, out_$i71: i32, out_$p73: ref, out_$i74: i16, out_$i75: i32, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$p88: ref, out_$i89: i32, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i98: i64, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$p104: ref, out_$i105: i32, out_$i106: i64, out_$i107: i32, out_$i103: i32, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i45: i32, out_$p46: ref, out_$i126: i32, out_$i44: i32, out_$i127: i1, out_$p129: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$i136: i1, out_$i11: i32, out_$p12: ref, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p62: ref, in_$p64: ref, in_$p65: ref, in_$p67: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$i140: i32, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i1, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i170: i64, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i64, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i64, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$p194: ref, in_$i196: i32, in_$i197: i32, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i201: i64, in_$i202: i32, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i207: i1, in_$i208: i1, in_$i209: i1, in_$i210: i1, in_$i211: i1, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$i218: i64, in_$i219: i1, in_$i220: i32, in_$i221: i32, in_$p222: ref, in_$i223: i64, in_$i224: i1, in_$i225: i32, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$p230: ref, in_$i231: i32, in_$i232: i32, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$p236: ref, in_$i237: i32, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$p242: ref, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i252: i64, in_$i253: i1, in_$i254: i32, in_$i255: i32, in_$p256: ref, in_$i257: i64, in_$i258: i1, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i32, in_$i279: i1, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i1, in_$i294: i1, in_$i295: i1, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i299: i64, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i304: i64, in_$i306: i32, in_$i307: i1, in_$p308: ref, in_$i309: i64, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$i315: i64, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i325: i32, in_$i326: i1, in_$i327: i32, in_$p328: ref, in_$i329: i32, in_$i331: i32, in_$i332: i1, in_$i333: i32, in_$p334: ref, in_$i335: i32, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$p340: ref, in_$i341: i32, in_$i342: i32, in_$i343: i1, in_$i344: i32, in_$i345: i32, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i350: i32, in_$i351: i1, in_$p352: ref, in_$i354: i32, in_$i355: i1, in_$p356: ref, in_$p357: ref, in_$i359: i32, in_$i360: i32, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i364: i64, in_$i365: i32, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i370: i32, in_$i371: i64, in_$i373: i32, in_$i374: i1, in_$i375: i32, in_$i376: i1, in_$i377: i1, in_$i378: i1, in_$i379: i1, in_$i380: i1, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i64, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$p389: ref, in_$i390: i32, in_$i391: i32, in_$i392: i1, in_$i393: i32, in_$i394: i32, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_$p398: ref, in_$i400: i32, in_$i401: i32, in_$i402: i32, in_$i403: i1, in_$p404: ref, in_$i405: i64, in_$i406: i32, in_$i408: i32, in_$i409: i1, in_$i410: i32, in_$i411: i1, in_$i412: i1, in_$i413: i1, in_$i414: i1, in_$i415: i1, in_$i416: i32, in_$i417: i1, in_$p418: ref, in_$p419: ref, in_$p420: ref, in_$p421: ref, in_$i422: i64, in_$i423: i1, in_$i424: i32, in_$i425: i32, in_$p426: ref, in_$i427: i64, in_$i428: i1, in_$i429: i32, in_$i430: i32, in_$i431: i32, in_$i432: i1, in_$p433: ref, in_$p434: ref, in_$i435: i32, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$p440: ref, in_$i441: i32, in_$i442: i32, in_$i443: i32, in_$i444: i1, in_$p445: ref, in_$p446: ref, in_$p447: ref, in_$i449: i32, in_$i450: i1, in_$p451: ref, in_$p452: ref, in_$p453: ref, in_$p454: ref, in_$p455: ref, in_$i456: i64, in_$i457: i1, in_$i458: i32, in_$i459: i32, in_$p460: ref, in_$i461: i64, in_$i462: i1, in_$i463: i32, in_$i464: i32, in_$i465: i32, in_$i466: i1, in_$i467: i32, in_$i468: i1, in_$i469: i1, in_$i470: i1, in_$i471: i1, in_$i472: i1, in_$i473: i32, in_$i474: i1, in_$p475: ref, in_$i476: i64, in_$i478: i32, in_$i479: i1, in_$p480: ref, in_$p481: ref, in_$i482: i32, in_$i483: i32, in_$i484: i1, in_$i485: i32, in_$i486: i32, in_$i487: i32, in_$i488: i1, in_$p489: ref, in_$p490: ref, in_$i492: i32, in_$i493: i32, in_$i494: i32, in_$i495: i1, in_$p496: ref, in_$i497: i64, in_$i498: i32, in_$i500: i32, in_$i501: i1, in_$i502: i32, in_$i503: i1, in_$i504: i1, in_$i505: i1, in_$i506: i1, in_$i507: i1, in_$i508: i1, in_$i509: i32, in_$i510: i1, in_$p511: ref, in_$i512: i64, in_$i514: i32, in_$i515: i1, in_$p516: ref, in_$i517: i64, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i522: i64, in_$i524: i32, in_$i525: i1, in_$p526: ref, in_$p527: ref, in_$i528: i32, in_$i529: i32, in_$i530: i1, in_$i531: i32, in_$i532: i32, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$p536: ref, in_$i538: i32, in_$i539: i32, in_$i540: i32, in_$i541: i1, in_$p542: ref, in_$i543: i64, in_$i544: i32, in_$i546: i32, in_$i547: i1, in_$i548: i32, in_$i549: i1, in_$i550: i32, in_$i551: i1, in_$i553: i32, in_$i554: i1, in_$i555: i32, in_$i556: i1, in_$i557: i1, in_$i558: i1, in_$i559: i32, in_$i560: i1, in_$p561: ref, in_$p562: ref, in_$i563: i32, in_$i564: i1, in_$p565: ref, in_$p566: ref, in_$i568: i32, in_$i569: i1, in_$i570: i32, in_$i571: i1, in_$i572: i1, in_$i573: i1, in_$i574: i1, in_$i575: i1, in_$i576: i32, in_$i577: i1, in_$p578: ref, in_$i579: i64, in_$i581: i32, in_$i582: i1, in_$p583: ref, in_$p584: ref, in_$i585: i32, in_$i586: i32, in_$i587: i1, in_$i588: i32, in_$i589: i32, in_$i590: i32, in_$i591: i1, in_$p592: ref, in_$p593: ref, in_$i595: i32, in_$i596: i32, in_$i597: i32, in_$i598: i1, in_$p599: ref, in_$i600: i64, in_$i601: i32, in_$i603: i32, in_$i604: i1, in_$i605: i32, in_$i606: i1, in_$i607: i1, in_$i608: i1, in_$i609: i1, in_$i610: i1, in_$i611: i32, in_$i612: i1, in_$p613: ref, in_$i614: i64, in_$i616: i32, in_$i617: i1, in_$p618: ref, in_$p619: ref, in_$i620: i32, in_$i621: i32, in_$i622: i1, in_$i623: i32, in_$i624: i32, in_$i625: i32, in_$i626: i1, in_$p627: ref, in_$p628: ref, in_$i630: i32, in_$i631: i32, in_$i632: i32, in_$i633: i1, in_$p634: ref, in_$i635: i64, in_$i636: i32, in_$i638: i32, in_$i639: i1, in_$i640: i32, in_$i641: i1, in_$i642: i1, in_$i643: i1, in_$i644: i1, in_$i645: i1, in_$i646: i32, in_$i647: i1, in_$p648: ref, in_$i649: i64, in_$i651: i32, in_$i652: i1, in_$p653: ref, in_$p654: ref, in_$i655: i32, in_$i656: i32, in_$i657: i1, in_$i658: i32, in_$i659: i32, in_$i660: i32, in_$i661: i1, in_$p662: ref, in_$p663: ref, in_$i665: i32, in_$i666: i32, in_$i667: i32, in_$i668: i1, in_$p669: ref, in_$i670: i64, in_$i671: i32, in_$i673: i32, in_$i674: i1, in_$i675: i32, in_$i676: i1, in_$i677: i1, in_$i678: i1, in_$i679: i1, in_$i680: i1, in_$i681: i32, in_$i682: i1, in_$p683: ref, in_$p684: ref, in_$p685: ref, in_$p686: ref, in_$i687: i64, in_$i688: i1, in_$i689: i32, in_$i690: i32, in_$p691: ref, in_$i692: i64, in_$i693: i1, in_$i694: i32, in_$i695: i32, in_$i696: i32, in_$i697: i1, in_$p698: ref, in_$p699: ref, in_$i700: i32, in_$i701: i32, in_$i702: i32, in_$i703: i1, in_$p704: ref, in_$p705: ref, in_$i706: i32, in_$i707: i32, in_$i708: i32, in_$i709: i1, in_$p710: ref, in_$p711: ref, in_$p712: ref, in_$i714: i32, in_$i715: i1, in_$p716: ref, in_$p717: ref, in_$p718: ref, in_$p719: ref, in_$p720: ref, in_$i721: i64, in_$i722: i1, in_$i723: i32, in_$i724: i32, in_$p725: ref, in_$i726: i64, in_$i727: i1, in_$i728: i32, in_$i729: i32, in_vslice_dummy_var_114: i64, in_vslice_dummy_var_115: i64, in_vslice_dummy_var_116: i64, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i64, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i64, in_vslice_dummy_var_121: i64, in_vslice_dummy_var_122: i64, in_vslice_dummy_var_123: i64, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i64, in_vslice_dummy_var_132: i64, in_vslice_dummy_var_133: i64, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i64, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i64, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i64, in_vslice_dummy_var_140: i64, in_vslice_dummy_var_141: i64, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i64, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i64, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i64, in_vslice_dummy_var_150: i64, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i64, in_vslice_dummy_var_153: i64, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i64, in_vslice_dummy_var_156: i32) returns (out_$i140: i32, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i1, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i170: i64, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i64, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i64, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$p194: ref, out_$i196: i32, out_$i197: i32, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i201: i64, out_$i202: i32, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i207: i1, out_$i208: i1, out_$i209: i1, out_$i210: i1, out_$i211: i1, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$i218: i64, out_$i219: i1, out_$i220: i32, out_$i221: i32, out_$p222: ref, out_$i223: i64, out_$i224: i1, out_$i225: i32, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$p230: ref, out_$i231: i32, out_$i232: i32, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$p236: ref, out_$i237: i32, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$p242: ref, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i252: i64, out_$i253: i1, out_$i254: i32, out_$i255: i32, out_$p256: ref, out_$i257: i64, out_$i258: i1, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i32, out_$i279: i1, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i1, out_$i294: i1, out_$i295: i1, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i299: i64, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i304: i64, out_$i306: i32, out_$i307: i1, out_$p308: ref, out_$i309: i64, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$i315: i64, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i325: i32, out_$i326: i1, out_$i327: i32, out_$p328: ref, out_$i329: i32, out_$i331: i32, out_$i332: i1, out_$i333: i32, out_$p334: ref, out_$i335: i32, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$p340: ref, out_$i341: i32, out_$i342: i32, out_$i343: i1, out_$i344: i32, out_$i345: i32, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i350: i32, out_$i351: i1, out_$p352: ref, out_$i354: i32, out_$i355: i1, out_$p356: ref, out_$p357: ref, out_$i359: i32, out_$i360: i32, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i364: i64, out_$i365: i32, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i370: i32, out_$i371: i64, out_$i373: i32, out_$i374: i1, out_$i375: i32, out_$i376: i1, out_$i377: i1, out_$i378: i1, out_$i379: i1, out_$i380: i1, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i64, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$p389: ref, out_$i390: i32, out_$i391: i32, out_$i392: i1, out_$i393: i32, out_$i394: i32, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_$p398: ref, out_$i400: i32, out_$i401: i32, out_$i402: i32, out_$i403: i1, out_$p404: ref, out_$i405: i64, out_$i406: i32, out_$i408: i32, out_$i409: i1, out_$i410: i32, out_$i411: i1, out_$i412: i1, out_$i413: i1, out_$i414: i1, out_$i415: i1, out_$i416: i32, out_$i417: i1, out_$p418: ref, out_$p419: ref, out_$p420: ref, out_$p421: ref, out_$i422: i64, out_$i423: i1, out_$i424: i32, out_$i425: i32, out_$p426: ref, out_$i427: i64, out_$i428: i1, out_$i429: i32, out_$i430: i32, out_$i431: i32, out_$i432: i1, out_$p433: ref, out_$p434: ref, out_$i435: i32, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$p440: ref, out_$i441: i32, out_$i442: i32, out_$i443: i32, out_$i444: i1, out_$p445: ref, out_$p446: ref, out_$p447: ref, out_$i449: i32, out_$i450: i1, out_$p451: ref, out_$p452: ref, out_$p453: ref, out_$p454: ref, out_$p455: ref, out_$i456: i64, out_$i457: i1, out_$i458: i32, out_$i459: i32, out_$p460: ref, out_$i461: i64, out_$i462: i1, out_$i463: i32, out_$i464: i32, out_$i465: i32, out_$i466: i1, out_$i467: i32, out_$i468: i1, out_$i469: i1, out_$i470: i1, out_$i471: i1, out_$i472: i1, out_$i473: i32, out_$i474: i1, out_$p475: ref, out_$i476: i64, out_$i478: i32, out_$i479: i1, out_$p480: ref, out_$p481: ref, out_$i482: i32, out_$i483: i32, out_$i484: i1, out_$i485: i32, out_$i486: i32, out_$i487: i32, out_$i488: i1, out_$p489: ref, out_$p490: ref, out_$i492: i32, out_$i493: i32, out_$i494: i32, out_$i495: i1, out_$p496: ref, out_$i497: i64, out_$i498: i32, out_$i500: i32, out_$i501: i1, out_$i502: i32, out_$i503: i1, out_$i504: i1, out_$i505: i1, out_$i506: i1, out_$i507: i1, out_$i508: i1, out_$i509: i32, out_$i510: i1, out_$p511: ref, out_$i512: i64, out_$i514: i32, out_$i515: i1, out_$p516: ref, out_$i517: i64, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i522: i64, out_$i524: i32, out_$i525: i1, out_$p526: ref, out_$p527: ref, out_$i528: i32, out_$i529: i32, out_$i530: i1, out_$i531: i32, out_$i532: i32, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$p536: ref, out_$i538: i32, out_$i539: i32, out_$i540: i32, out_$i541: i1, out_$p542: ref, out_$i543: i64, out_$i544: i32, out_$i546: i32, out_$i547: i1, out_$i548: i32, out_$i549: i1, out_$i550: i32, out_$i551: i1, out_$i553: i32, out_$i554: i1, out_$i555: i32, out_$i556: i1, out_$i557: i1, out_$i558: i1, out_$i559: i32, out_$i560: i1, out_$p561: ref, out_$p562: ref, out_$i563: i32, out_$i564: i1, out_$p565: ref, out_$p566: ref, out_$i568: i32, out_$i569: i1, out_$i570: i32, out_$i571: i1, out_$i572: i1, out_$i573: i1, out_$i574: i1, out_$i575: i1, out_$i576: i32, out_$i577: i1, out_$p578: ref, out_$i579: i64, out_$i581: i32, out_$i582: i1, out_$p583: ref, out_$p584: ref, out_$i585: i32, out_$i586: i32, out_$i587: i1, out_$i588: i32, out_$i589: i32, out_$i590: i32, out_$i591: i1, out_$p592: ref, out_$p593: ref, out_$i595: i32, out_$i596: i32, out_$i597: i32, out_$i598: i1, out_$p599: ref, out_$i600: i64, out_$i601: i32, out_$i603: i32, out_$i604: i1, out_$i605: i32, out_$i606: i1, out_$i607: i1, out_$i608: i1, out_$i609: i1, out_$i610: i1, out_$i611: i32, out_$i612: i1, out_$p613: ref, out_$i614: i64, out_$i616: i32, out_$i617: i1, out_$p618: ref, out_$p619: ref, out_$i620: i32, out_$i621: i32, out_$i622: i1, out_$i623: i32, out_$i624: i32, out_$i625: i32, out_$i626: i1, out_$p627: ref, out_$p628: ref, out_$i630: i32, out_$i631: i32, out_$i632: i32, out_$i633: i1, out_$p634: ref, out_$i635: i64, out_$i636: i32, out_$i638: i32, out_$i639: i1, out_$i640: i32, out_$i641: i1, out_$i642: i1, out_$i643: i1, out_$i644: i1, out_$i645: i1, out_$i646: i32, out_$i647: i1, out_$p648: ref, out_$i649: i64, out_$i651: i32, out_$i652: i1, out_$p653: ref, out_$p654: ref, out_$i655: i32, out_$i656: i32, out_$i657: i1, out_$i658: i32, out_$i659: i32, out_$i660: i32, out_$i661: i1, out_$p662: ref, out_$p663: ref, out_$i665: i32, out_$i666: i32, out_$i667: i32, out_$i668: i1, out_$p669: ref, out_$i670: i64, out_$i671: i32, out_$i673: i32, out_$i674: i1, out_$i675: i32, out_$i676: i1, out_$i677: i1, out_$i678: i1, out_$i679: i1, out_$i680: i1, out_$i681: i32, out_$i682: i1, out_$p683: ref, out_$p684: ref, out_$p685: ref, out_$p686: ref, out_$i687: i64, out_$i688: i1, out_$i689: i32, out_$i690: i32, out_$p691: ref, out_$i692: i64, out_$i693: i1, out_$i694: i32, out_$i695: i32, out_$i696: i32, out_$i697: i1, out_$p698: ref, out_$p699: ref, out_$i700: i32, out_$i701: i32, out_$i702: i32, out_$i703: i1, out_$p704: ref, out_$p705: ref, out_$i706: i32, out_$i707: i32, out_$i708: i32, out_$i709: i1, out_$p710: ref, out_$p711: ref, out_$p712: ref, out_$i714: i32, out_$i715: i1, out_$p716: ref, out_$p717: ref, out_$p718: ref, out_$p719: ref, out_$p720: ref, out_$i721: i64, out_$i722: i1, out_$i723: i32, out_$i724: i32, out_$p725: ref, out_$i726: i64, out_$i727: i1, out_$i728: i32, out_$i729: i32, out_vslice_dummy_var_114: i64, out_vslice_dummy_var_115: i64, out_vslice_dummy_var_116: i64, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i64, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i64, out_vslice_dummy_var_121: i64, out_vslice_dummy_var_122: i64, out_vslice_dummy_var_123: i64, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i64, out_vslice_dummy_var_132: i64, out_vslice_dummy_var_133: i64, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i64, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i64, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i64, out_vslice_dummy_var_140: i64, out_vslice_dummy_var_141: i64, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i64, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i64, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i64, out_vslice_dummy_var_150: i64, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i64, out_vslice_dummy_var_153: i64, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i64, out_vslice_dummy_var_156: i32)
{

  entry:
    out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i172, out_$i173, out_$p174, out_$i175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i182, out_$i183, out_$p184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$p214, out_$p215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i232, out_$i233, out_$i234, out_$p235, out_$p236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$p242, out_$p243, out_$i245, out_$i246, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i301, out_$i302, out_$p303, out_$i304, out_$i306, out_$i307, out_$p308, out_$i309, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i325, out_$i326, out_$i327, out_$p328, out_$i329, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i337, out_$i338, out_$p339, out_$p340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$p348, out_$i350, out_$i351, out_$p352, out_$i354, out_$i355, out_$p356, out_$p357, out_$i359, out_$i360, out_$i361, out_$i362, out_$p363, out_$i364, out_$i365, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i386, out_$i387, out_$p388, out_$p389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$p397, out_$p398, out_$i400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$i423, out_$i424, out_$i425, out_$p426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$p433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$p439, out_$p440, out_$i441, out_$i442, out_$i443, out_$i444, out_$p445, out_$p446, out_$p447, out_$i449, out_$i450, out_$p451, out_$p452, out_$p453, out_$p454, out_$p455, out_$i456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$p475, out_$i476, out_$i478, out_$i479, out_$p480, out_$p481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$p489, out_$p490, out_$i492, out_$i493, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$p511, out_$i512, out_$i514, out_$i515, out_$p516, out_$i517, out_$i519, out_$i520, out_$p521, out_$i522, out_$i524, out_$i525, out_$p526, out_$p527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$p535, out_$p536, out_$i538, out_$i539, out_$i540, out_$i541, out_$p542, out_$i543, out_$i544, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$i551, out_$i553, out_$i554, out_$i555, out_$i556, out_$i557, out_$i558, out_$i559, out_$i560, out_$p561, out_$p562, out_$i563, out_$i564, out_$p565, out_$p566, out_$i568, out_$i569, out_$i570, out_$i571, out_$i572, out_$i573, out_$i574, out_$i575, out_$i576, out_$i577, out_$p578, out_$i579, out_$i581, out_$i582, out_$p583, out_$p584, out_$i585, out_$i586, out_$i587, out_$i588, out_$i589, out_$i590, out_$i591, out_$p592, out_$p593, out_$i595, out_$i596, out_$i597, out_$i598, out_$p599, out_$i600, out_$i601, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$i612, out_$p613, out_$i614, out_$i616, out_$i617, out_$p618, out_$p619, out_$i620, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i626, out_$p627, out_$p628, out_$i630, out_$i631, out_$i632, out_$i633, out_$p634, out_$i635, out_$i636, out_$i638, out_$i639, out_$i640, out_$i641, out_$i642, out_$i643, out_$i644, out_$i645, out_$i646, out_$i647, out_$p648, out_$i649, out_$i651, out_$i652, out_$p653, out_$p654, out_$i655, out_$i656, out_$i657, out_$i658, out_$i659, out_$i660, out_$i661, out_$p662, out_$p663, out_$i665, out_$i666, out_$i667, out_$i668, out_$p669, out_$i670, out_$i671, out_$i673, out_$i674, out_$i675, out_$i676, out_$i677, out_$i678, out_$i679, out_$i680, out_$i681, out_$i682, out_$p683, out_$p684, out_$p685, out_$p686, out_$i687, out_$i688, out_$i689, out_$i690, out_$p691, out_$i692, out_$i693, out_$i694, out_$i695, out_$i696, out_$i697, out_$p698, out_$p699, out_$i700, out_$i701, out_$i702, out_$i703, out_$p704, out_$p705, out_$i706, out_$i707, out_$i708, out_$i709, out_$p710, out_$p711, out_$p712, out_$i714, out_$i715, out_$p716, out_$p717, out_$p718, out_$p719, out_$p720, out_$i721, out_$i722, out_$i723, out_$i724, out_$p725, out_$i726, out_$i727, out_$i728, out_$i729, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156 := in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$p169, in_$i170, in_$i172, in_$i173, in_$p174, in_$i175, in_$i177, in_$i178, in_$p179, in_$i180, in_$i182, in_$i183, in_$p184, in_$p185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$p193, in_$p194, in_$i196, in_$i197, in_$i198, in_$i199, in_$p200, in_$i201, in_$i202, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$p214, in_$p215, in_$p216, in_$p217, in_$i218, in_$i219, in_$i220, in_$i221, in_$p222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$p229, in_$p230, in_$i231, in_$i232, in_$i233, in_$i234, in_$p235, in_$p236, in_$i237, in_$i238, in_$i239, in_$i240, in_$p241, in_$p242, in_$p243, in_$i245, in_$i246, in_$p247, in_$p248, in_$p249, in_$p250, in_$p251, in_$i252, in_$i253, in_$i254, in_$i255, in_$p256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$p298, in_$i299, in_$i301, in_$i302, in_$p303, in_$i304, in_$i306, in_$i307, in_$p308, in_$i309, in_$i311, in_$i312, in_$p313, in_$i314, in_$i315, in_$i317, in_$i318, in_$p319, in_$i321, in_$i322, in_$p323, in_$i325, in_$i326, in_$i327, in_$p328, in_$i329, in_$i331, in_$i332, in_$i333, in_$p334, in_$i335, in_$i337, in_$i338, in_$p339, in_$p340, in_$i341, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_$p348, in_$i350, in_$i351, in_$p352, in_$i354, in_$i355, in_$p356, in_$p357, in_$i359, in_$i360, in_$i361, in_$i362, in_$p363, in_$i364, in_$i365, in_$i367, in_$i368, in_$p369, in_$i370, in_$i371, in_$i373, in_$i374, in_$i375, in_$i376, in_$i377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$p383, in_$i384, in_$i386, in_$i387, in_$p388, in_$p389, in_$i390, in_$i391, in_$i392, in_$i393, in_$i394, in_$i395, in_$i396, in_$p397, in_$p398, in_$i400, in_$i401, in_$i402, in_$i403, in_$p404, in_$i405, in_$i406, in_$i408, in_$i409, in_$i410, in_$i411, in_$i412, in_$i413, in_$i414, in_$i415, in_$i416, in_$i417, in_$p418, in_$p419, in_$p420, in_$p421, in_$i422, in_$i423, in_$i424, in_$i425, in_$p426, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i432, in_$p433, in_$p434, in_$i435, in_$i436, in_$i437, in_$i438, in_$p439, in_$p440, in_$i441, in_$i442, in_$i443, in_$i444, in_$p445, in_$p446, in_$p447, in_$i449, in_$i450, in_$p451, in_$p452, in_$p453, in_$p454, in_$p455, in_$i456, in_$i457, in_$i458, in_$i459, in_$p460, in_$i461, in_$i462, in_$i463, in_$i464, in_$i465, in_$i466, in_$i467, in_$i468, in_$i469, in_$i470, in_$i471, in_$i472, in_$i473, in_$i474, in_$p475, in_$i476, in_$i478, in_$i479, in_$p480, in_$p481, in_$i482, in_$i483, in_$i484, in_$i485, in_$i486, in_$i487, in_$i488, in_$p489, in_$p490, in_$i492, in_$i493, in_$i494, in_$i495, in_$p496, in_$i497, in_$i498, in_$i500, in_$i501, in_$i502, in_$i503, in_$i504, in_$i505, in_$i506, in_$i507, in_$i508, in_$i509, in_$i510, in_$p511, in_$i512, in_$i514, in_$i515, in_$p516, in_$i517, in_$i519, in_$i520, in_$p521, in_$i522, in_$i524, in_$i525, in_$p526, in_$p527, in_$i528, in_$i529, in_$i530, in_$i531, in_$i532, in_$i533, in_$i534, in_$p535, in_$p536, in_$i538, in_$i539, in_$i540, in_$i541, in_$p542, in_$i543, in_$i544, in_$i546, in_$i547, in_$i548, in_$i549, in_$i550, in_$i551, in_$i553, in_$i554, in_$i555, in_$i556, in_$i557, in_$i558, in_$i559, in_$i560, in_$p561, in_$p562, in_$i563, in_$i564, in_$p565, in_$p566, in_$i568, in_$i569, in_$i570, in_$i571, in_$i572, in_$i573, in_$i574, in_$i575, in_$i576, in_$i577, in_$p578, in_$i579, in_$i581, in_$i582, in_$p583, in_$p584, in_$i585, in_$i586, in_$i587, in_$i588, in_$i589, in_$i590, in_$i591, in_$p592, in_$p593, in_$i595, in_$i596, in_$i597, in_$i598, in_$p599, in_$i600, in_$i601, in_$i603, in_$i604, in_$i605, in_$i606, in_$i607, in_$i608, in_$i609, in_$i610, in_$i611, in_$i612, in_$p613, in_$i614, in_$i616, in_$i617, in_$p618, in_$p619, in_$i620, in_$i621, in_$i622, in_$i623, in_$i624, in_$i625, in_$i626, in_$p627, in_$p628, in_$i630, in_$i631, in_$i632, in_$i633, in_$p634, in_$i635, in_$i636, in_$i638, in_$i639, in_$i640, in_$i641, in_$i642, in_$i643, in_$i644, in_$i645, in_$i646, in_$i647, in_$p648, in_$i649, in_$i651, in_$i652, in_$p653, in_$p654, in_$i655, in_$i656, in_$i657, in_$i658, in_$i659, in_$i660, in_$i661, in_$p662, in_$p663, in_$i665, in_$i666, in_$i667, in_$i668, in_$p669, in_$i670, in_$i671, in_$i673, in_$i674, in_$i675, in_$i676, in_$i677, in_$i678, in_$i679, in_$i680, in_$i681, in_$i682, in_$p683, in_$p684, in_$p685, in_$p686, in_$i687, in_$i688, in_$i689, in_$i690, in_$p691, in_$i692, in_$i693, in_$i694, in_$i695, in_$i696, in_$i697, in_$p698, in_$p699, in_$i700, in_$i701, in_$i702, in_$i703, in_$p704, in_$p705, in_$i706, in_$i707, in_$i708, in_$i709, in_$p710, in_$p711, in_$p712, in_$i714, in_$i715, in_$p716, in_$p717, in_$p718, in_$p719, in_$p720, in_$i721, in_$i722, in_$i723, in_$i724, in_$p725, in_$i726, in_$i727, in_$i728, in_$i729, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147, in_vslice_dummy_var_148, in_vslice_dummy_var_149, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1477} out_$i140 := __VERIFIER_nondet_int();
    call {:si_unique_call 1478} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i140);
    call {:si_unique_call 1479} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i140);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb79_dummy;

  $bb565:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb563:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb518:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb485:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb452:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb39:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_6627;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} out_vslice_dummy_var_115 := sg_proc_write_dressz(out_$p174, in_$p33, out_$i175, in_$p35);
    goto corral_source_split_6626;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i64($M.53, in_$p2);
    goto corral_source_split_6625;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    out_$p174 := $M.72;
    goto corral_source_split_6624;

  $bb57:
    assume out_$i173 == 1;
    goto corral_source_split_6623;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 2);
    goto corral_source_split_6621;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i172 := $M.77;
    goto corral_source_split_6620;

  $bb55:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1484} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6618;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} out_vslice_dummy_var_114 := sg_proc_write_dressz(out_$p169, in_$p33, out_$i170, in_$p35);
    goto corral_source_split_6617;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i64($M.53, in_$p2);
    goto corral_source_split_6616;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    out_$p169 := $M.72;
    goto corral_source_split_6615;

  $bb54:
    assume out_$i168 == 1;
    goto corral_source_split_6614;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 1);
    goto corral_source_split_6612;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    out_$i167 := $M.77;
    goto corral_source_split_6611;

  $bb52:
    assume out_$i166 == 1;
    goto corral_source_split_6610;

  $bb50:
    assume out_$i165 == 1;
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i160, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb41:
    assume out_$i161 == 1;
    assume {:verifier.code 0} true;
    out_$i165 := $slt.i32(out_$i160, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i161 := $slt.i32(out_$i160, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_6592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1480} out_$i160 := __VERIFIER_nondet_int();
    call {:si_unique_call 1481} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i160);
    call {:si_unique_call 1482} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i160);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume out_$i159 == 1;
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    out_$i159 := $ne.i32(out_$i158, 0);
    goto corral_source_split_6590;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    out_$i158 := $M.77;
    goto corral_source_split_6589;

  $bb36:
    assume out_$i157 == 1;
    goto corral_source_split_6588;

  $bb34:
    assume out_$i156 == 1;
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i140, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb30:
    assume out_$i154 == 1;
    assume {:verifier.code 0} true;
    out_$i156 := $slt.i32(out_$i140, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb22:
    assume out_$i150 == 1;
    assume {:verifier.code 0} true;
    out_$i154 := $slt.i32(out_$i140, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb3:
    assume out_$i141 == 1;
    assume {:verifier.code 0} true;
    out_$i150 := $slt.i32(out_$i140, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i141 := $slt.i32(out_$i140, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb62:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1488} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_6633;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} out_vslice_dummy_var_116 := seq_read(out_$p179, in_$p36, out_$i180, in_$p38);
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i64($M.53, in_$p0);
    goto corral_source_split_6631;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    out_$p179 := $M.72;
    goto corral_source_split_6630;

  $bb61:
    assume out_$i178 == 1;
    goto corral_source_split_6629;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 2);
    goto corral_source_split_6608;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    out_$i177 := $M.77;
    goto corral_source_split_6607;

  $bb51:
    assume !(out_$i165 == 1);
    goto corral_source_split_6606;

  $bb65:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.80 := out_$i190;
    call {:si_unique_call 1492} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_6647;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    out_$i190 := $add.i32(out_$i189, 1);
    goto corral_source_split_6646;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    out_$i189 := $M.80;
    goto corral_source_split_6645;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_6644;

  $bb66:
    assume out_$i188 == 1;
    goto corral_source_split_6643;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 0);
    goto corral_source_split_6641;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    out_$i187 := $M.93;
    goto corral_source_split_6640;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $M.93 := out_$i186;
    call {:si_unique_call 1490} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i186);
    goto corral_source_split_6639;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} out_$i186 := sg_proc_single_open_dressz(out_$p184, out_$p185);
    goto corral_source_split_6638;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$p185 := $M.72;
    goto corral_source_split_6637;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    out_$p184 := $M.71;
    goto corral_source_split_6636;

  $bb64:
    assume out_$i183 == 1;
    goto corral_source_split_6635;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 1);
    goto corral_source_split_6596;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$i182 := $M.77;
    goto corral_source_split_6595;

  $bb43:
    assume out_$i162 == 1;
    goto corral_source_split_6594;

  $bb42:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    out_$i162 := $slt.i32(out_$i160, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb71:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $M.80 := out_$i197;
    call {:si_unique_call 1495} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i197);
    goto corral_source_split_6656;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    out_$i197 := $sub.i32(out_$i196, 1);
    goto corral_source_split_6655;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$i196 := $M.80;
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1494} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6653;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} out_vslice_dummy_var_117 := single_release(out_$p193, out_$p194);
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$p194 := $M.72;
    goto corral_source_split_6651;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    out_$p193 := $M.71;
    goto corral_source_split_6650;

  $bb70:
    assume out_$i192 == 1;
    goto corral_source_split_6649;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 2);
    goto corral_source_split_6600;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    out_$i191 := $M.77;
    goto corral_source_split_6599;

  $bb45:
    assume out_$i163 == 1;
    goto corral_source_split_6598;

  $bb44:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    out_$i163 := $slt.i32(out_$i160, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb74:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1497} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_6663;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} out_vslice_dummy_var_118 := seq_lseek(out_$p200, out_$i201, out_$i202);
    goto corral_source_split_6662;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i32($M.53, in_$p1);
    goto corral_source_split_6661;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i64($M.53, in_$p3);
    goto corral_source_split_6660;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    out_$p200 := $M.72;
    goto corral_source_split_6659;

  $bb73:
    assume out_$i199 == 1;
    goto corral_source_split_6658;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 2);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    out_$i198 := $M.77;
    goto corral_source_split_6603;

  $bb47:
    assume out_$i164 == 1;
    goto corral_source_split_6602;

  $bb46:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i160, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_stop();
    goto corral_source_split_6665;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i164 == 1);
    goto $bb49;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i166 == 1);
    goto $bb49;

  $bb81:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb95:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.80 := out_$i226;
    call {:si_unique_call 1506} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i226);
    goto corral_source_split_6708;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    out_$i226 := $add.i32(out_$i225, 1);
    goto corral_source_split_6707;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    out_$i225 := $M.80;
    goto corral_source_split_6706;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6705;

  $bb99:
    assume out_$i224 == 1;
    goto corral_source_split_6704;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i64(out_$i223, 0);
    goto corral_source_split_6702;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$i223 := $p2i.ref.i64(out_$p222);
    goto corral_source_split_6701;

  $bb98:
    assume {:verifier.code 0} true;
    out_$p222 := $M.95;
    goto corral_source_split_6700;

  $bb97:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $M.80 := out_$i221;
    call {:si_unique_call 1504} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i221);
    goto corral_source_split_6698;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    out_$i221 := $add.i32(out_$i220, 1);
    goto corral_source_split_6697;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    out_$i220 := $M.80;
    goto corral_source_split_6696;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $M.3 := 3;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6695;

  $bb96:
    assume out_$i219 == 1;
    goto corral_source_split_6694;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    out_$i219 := $ne.i64(out_$i218, 0);
    goto corral_source_split_6692;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    out_$i218 := $p2i.ref.i64(out_$p217);
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    out_$p217 := $M.95;
    goto corral_source_split_6690;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.95 := out_$p216;
    goto corral_source_split_6689;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} out_$p216 := dev_seq_start(out_$p214, out_$p215);
    goto corral_source_split_6688;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    out_$p215 := $M.94;
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    out_$p214 := $M.4;
    goto corral_source_split_6686;

  $bb94:
    assume out_$i213 == 1;
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 1);
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$i212 := $M.3;
    goto corral_source_split_6682;

  $bb92:
    assume out_$i211 == 1;
    goto corral_source_split_6681;

  $bb90:
    assume out_$i210 == 1;
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i206, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb83:
    assume out_$i207 == 1;
    assume {:verifier.code 0} true;
    out_$i210 := $slt.i32(out_$i206, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i207 := $slt.i32(out_$i206, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_6667:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1499} out_$i206 := __VERIFIER_nondet_int();
    call {:si_unique_call 1500} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i206);
    call {:si_unique_call 1501} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i206);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume out_$i205 == 1;
    goto corral_source_split_6667;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    out_$i205 := $ne.i32(out_$i204, 0);
    goto corral_source_split_6586;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    out_$i204 := $M.3;
    goto corral_source_split_6585;

  $bb35:
    assume !(out_$i156 == 1);
    goto corral_source_split_6584;

  $bb108:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $M.80 := out_$i238;
    call {:si_unique_call 1512} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_6729;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    out_$i238 := $sub.i32(out_$i237, 1);
    goto corral_source_split_6728;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    out_$i237 := $M.80;
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6726;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} dev_seq_stop(out_$p235, out_$p236);
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$p236 := $M.96;
    goto corral_source_split_6724;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    out_$p235 := $M.4;
    goto corral_source_split_6723;

  $bb107:
    assume out_$i234 == 1;
    goto corral_source_split_6722;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 2);
    goto corral_source_split_6720;

  $bb106:
    assume {:verifier.code 0} true;
    out_$i233 := $M.3;
    goto corral_source_split_6719;

  $bb105:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $M.80 := out_$i232;
    call {:si_unique_call 1509} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i232);
    goto corral_source_split_6717;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    out_$i232 := $sub.i32(out_$i231, 1);
    goto corral_source_split_6716;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    out_$i231 := $M.80;
    goto corral_source_split_6715;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6714;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} dev_seq_stop(out_$p229, out_$p230);
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    out_$p230 := $M.96;
    goto corral_source_split_6712;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    out_$p229 := $M.4;
    goto corral_source_split_6711;

  $bb104:
    assume out_$i228 == 1;
    goto corral_source_split_6710;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 3);
    goto corral_source_split_6679;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    out_$i227 := $M.3;
    goto corral_source_split_6678;

  $bb91:
    assume !(out_$i210 == 1);
    goto corral_source_split_6677;

  $bb111:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1514} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6736;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} out_vslice_dummy_var_119 := sg_proc_seq_show_dev(out_$p241, out_$p243);
    goto corral_source_split_6735;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    out_$p243 := $bitcast.ref.ref(out_$p242);
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$p242 := $M.94;
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$p241 := $M.4;
    goto corral_source_split_6732;

  $bb110:
    assume out_$i240 == 1;
    goto corral_source_split_6731;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 2);
    goto corral_source_split_6671;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    out_$i239 := $M.3;
    goto corral_source_split_6670;

  $bb85:
    assume out_$i208 == 1;
    goto corral_source_split_6669;

  $bb84:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    out_$i208 := $slt.i32(out_$i206, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb114:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb119:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $M.80 := out_$i260;
    call {:si_unique_call 1519} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i260);
    goto corral_source_split_6762;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i260 := $add.i32(out_$i259, 1);
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    out_$i259 := $M.80;
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $M.3 := 3;
    call {:si_unique_call 1518} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6759;

  $bb118:
    assume out_$i258 == 1;
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    out_$i258 := $ne.i64(out_$i257, 0);
    goto corral_source_split_6756;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    out_$i257 := $p2i.ref.i64(out_$p256);
    goto corral_source_split_6755;

  $bb117:
    assume {:verifier.code 0} true;
    out_$p256 := $M.97;
    goto corral_source_split_6754;

  $bb116:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $M.80 := out_$i255;
    call {:si_unique_call 1517} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    out_$i255 := $add.i32(out_$i254, 1);
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i254 := $M.80;
    goto corral_source_split_6750;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6749;

  $bb115:
    assume out_$i253 == 1;
    goto corral_source_split_6748;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i64(out_$i252, 0);
    goto corral_source_split_6746;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    out_$i252 := $p2i.ref.i64(out_$p251);
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$p251 := $M.97;
    goto corral_source_split_6744;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $M.97 := out_$p250;
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} out_$p250 := dev_seq_next(out_$p247, out_$p248, out_$p249);
    goto corral_source_split_6742;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$p249 := $M.94;
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$p248 := $M.96;
    goto corral_source_split_6740;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    out_$p247 := $M.4;
    goto corral_source_split_6739;

  $bb113:
    assume out_$i246 == 1;
    goto corral_source_split_6738;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 2);
    goto corral_source_split_6675;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$i245 := $M.3;
    goto corral_source_split_6674;

  $bb87:
    assume out_$i209 == 1;
    goto corral_source_split_6673;

  $bb86:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i206, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_stop();
    goto corral_source_split_6764;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb88:
    assume {:verifier.code 0} true;
    assume !(out_$i209 == 1);
    goto $bb89;

  $bb93:
    assume {:verifier.code 0} true;
    assume !(out_$i211 == 1);
    goto $bb89;

  $bb126:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb127;

  SeqInstr_84:
    goto corral_source_split_6767;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} invoke_work_2();
    goto SeqInstr_83;

  $bb125:
    assume out_$i262 == 1;
    goto corral_source_split_6766;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    out_$i262 := $ne.i32(out_$i261, 0);
    goto corral_source_split_6578;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$i261 := $M.78;
    goto corral_source_split_6577;

  $bb32:
    assume out_$i155 == 1;
    goto corral_source_split_6576;

  $bb31:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    out_$i155 := $slt.i32(out_$i140, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb129:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    goto $bb130;

  SeqInstr_87:
    goto corral_source_split_6770;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} invoke_work_1();
    goto SeqInstr_86;

  $bb128:
    assume out_$i264 == 1;
    goto corral_source_split_6769;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$i264 := $ne.i32(out_$i263, 0);
    goto corral_source_split_6582;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i263 := $M.79;
    goto corral_source_split_6581;

  $bb33:
    assume !(out_$i155 == 1);
    goto corral_source_split_6580;

  $bb132:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume {:verifier.code 0} true;
    assume !(out_$i272 == 1);
    goto $bb143;

  $bb145:
    assume {:verifier.code 0} true;
    assume !(out_$i274 == 1);
    goto $bb143;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 0);
    goto corral_source_split_6784;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    out_$i273 := $M.80;
    goto corral_source_split_6783;

  $bb141:
    assume out_$i272 == 1;
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i271, 3);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$i271 := $M.81;
    goto corral_source_split_6779;

  $bb139:
    assume out_$i270 == 1;
    goto corral_source_split_6778;

  $bb134:
    assume out_$i268 == 1;
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i267, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i268 := $slt.i32(out_$i267, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_6772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} out_$i267 := __VERIFIER_nondet_int();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i267);
    call {:si_unique_call 1525} {:cexpr "tmp___28"} boogie_si_record_i32(out_$i267);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb131:
    assume out_$i266 == 1;
    goto corral_source_split_6772;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$i266 := $ne.i32(out_$i265, 0);
    goto corral_source_split_6570;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    out_$i265 := $M.81;
    goto corral_source_split_6569;

  $bb28:
    assume out_$i153 == 1;
    goto corral_source_split_6568;

  $bb24:
    assume out_$i151 == 1;
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i140, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb23:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    out_$i151 := $slt.i32(out_$i140, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb150:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb155:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$i281 := $ne.i32(out_$i280, 0);
    goto corral_source_split_6821;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i280 := $M.98;
    goto corral_source_split_6820;

  $bb152:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_file_operations_6();
    goto corral_source_split_6818;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1549} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6817;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_file_operations_11();
    goto corral_source_split_6816;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1547} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_file_operations_9();
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1545} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_file_operations_12();
    goto corral_source_split_6812;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1543} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_initialize_class_interface_15();
    goto corral_source_split_6810;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1541} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6808;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} ldv_file_operations_8();
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1538} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} ldv_file_operations_4();
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1536} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6804;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} ldv_file_operations_10();
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6802;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} ldv_file_operations_13();
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6800;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 1531} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6799;

  $bb151:
    assume out_$i279 == 1;
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i278, 0);
    goto corral_source_split_6796;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    out_$i278 := $M.98;
    goto corral_source_split_6795;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.98 := out_$i277;
    call {:si_unique_call 1530} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i277);
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} out_$i277 := init_sg();
    goto corral_source_split_6793;

  $bb149:
    assume out_$i276 == 1;
    goto corral_source_split_6792;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 1);
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    out_$i275 := $M.81;
    goto corral_source_split_6775;

  $bb136:
    assume out_$i269 == 1;
    goto corral_source_split_6774;

  $bb135:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i267, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_stop();
    goto corral_source_split_6826;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb137:
    assume {:verifier.code 0} true;
    assume !(out_$i269 == 1);
    goto $bb138;

  $bb140:
    assume {:verifier.code 0} true;
    assume !(out_$i270 == 1);
    goto $bb138;

  $bb162:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb191:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} out_vslice_dummy_var_121 := sg_write(out_$p303, in_$p42, out_$i304, in_$p48);
    goto corral_source_split_6882;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i64($M.53, in_$p12);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$p303 := $M.65;
    goto corral_source_split_6880;

  $bb190:
    assume out_$i302 == 1;
    goto corral_source_split_6879;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 2);
    goto corral_source_split_6877;

  $bb189:
    assume {:verifier.code 0} true;
    out_$i301 := $M.82;
    goto corral_source_split_6876;

  $bb188:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6874;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} out_vslice_dummy_var_120 := sg_write(out_$p298, in_$p42, out_$i299, in_$p48);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$i299 := $load.i64($M.53, in_$p12);
    goto corral_source_split_6872;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    out_$p298 := $M.65;
    goto corral_source_split_6871;

  $bb187:
    assume out_$i297 == 1;
    goto corral_source_split_6870;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 1);
    goto corral_source_split_6868;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    out_$i296 := $M.82;
    goto corral_source_split_6867;

  $bb185:
    assume out_$i295 == 1;
    goto corral_source_split_6866;

  $bb183:
    assume out_$i294 == 1;
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i284, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb177:
    assume out_$i291 == 1;
    assume {:verifier.code 0} true;
    out_$i294 := $slt.i32(out_$i284, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb164:
    assume out_$i285 == 1;
    assume {:verifier.code 0} true;
    out_$i291 := $slt.i32(out_$i284, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i285 := $slt.i32(out_$i284, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_6828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1553} out_$i284 := __VERIFIER_nondet_int();
    call {:si_unique_call 1554} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i284);
    call {:si_unique_call 1555} {:cexpr "tmp___29"} boogie_si_record_i32(out_$i284);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume out_$i283 == 1;
    goto corral_source_split_6828;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    out_$i283 := $ne.i32(out_$i282, 0);
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    out_$i282 := $M.82;
    goto corral_source_split_6573;

  $bb29:
    assume !(out_$i153 == 1);
    goto corral_source_split_6572;

  $bb195:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6889;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} out_vslice_dummy_var_122 := sg_read(out_$p308, in_$p41, out_$i309, in_$p40);
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    out_$i309 := $load.i64($M.53, in_$p13);
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$p308 := $M.65;
    goto corral_source_split_6886;

  $bb194:
    assume out_$i307 == 1;
    goto corral_source_split_6885;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i307 := $eq.i32(out_$i306, 2);
    goto corral_source_split_6864;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    out_$i306 := $M.82;
    goto corral_source_split_6863;

  $bb184:
    assume !(out_$i294 == 1);
    goto corral_source_split_6862;

  $bb198:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6896;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} out_vslice_dummy_var_123 := sg_compat_ioctl(out_$p313, out_$i314, out_$i315);
    goto corral_source_split_6895;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$i315 := $load.i64($M.53, in_$p9);
    goto corral_source_split_6894;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    out_$i314 := $load.i32($M.53, in_$p11);
    goto corral_source_split_6893;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    out_$p313 := $M.65;
    goto corral_source_split_6892;

  $bb197:
    assume out_$i312 == 1;
    goto corral_source_split_6891;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 2);
    goto corral_source_split_6852;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    out_$i311 := $M.82;
    goto corral_source_split_6851;

  $bb179:
    assume out_$i292 == 1;
    goto corral_source_split_6850;

  $bb178:
    assume !(out_$i291 == 1);
    assume {:verifier.code 0} true;
    out_$i292 := $slt.i32(out_$i284, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb204:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6909;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} out_vslice_dummy_var_125 := sg_poll(out_$p323, in_$p46);
    goto corral_source_split_6908;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    out_$p323 := $M.65;
    goto corral_source_split_6907;

  $bb203:
    assume out_$i322 == 1;
    goto corral_source_split_6906;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 2);
    goto corral_source_split_6904;

  $bb202:
    assume {:verifier.code 0} true;
    out_$i321 := $M.82;
    goto corral_source_split_6903;

  $bb201:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6901;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} out_vslice_dummy_var_124 := sg_poll(out_$p319, in_$p46);
    goto corral_source_split_6900;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    out_$p319 := $M.65;
    goto corral_source_split_6899;

  $bb200:
    assume out_$i318 == 1;
    goto corral_source_split_6898;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 1);
    goto corral_source_split_6856;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    out_$i317 := $M.82;
    goto corral_source_split_6855;

  $bb181:
    assume out_$i293 == 1;
    goto corral_source_split_6854;

  $bb180:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    out_$i293 := $slt.i32(out_$i284, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb210:
    assume !(out_$i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6926;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} out_vslice_dummy_var_127 := sg_fasync(out_$i333, out_$p334, out_$i335);
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    out_$i335 := $load.i32($M.53, in_$p10);
    goto corral_source_split_6924;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    out_$p334 := $M.65;
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$i333 := $load.i32($M.53, in_$p6);
    goto corral_source_split_6922;

  $bb209:
    assume out_$i332 == 1;
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    out_$i332 := $eq.i32(out_$i331, 2);
    goto corral_source_split_6919;

  $bb208:
    assume {:verifier.code 0} true;
    out_$i331 := $M.82;
    goto corral_source_split_6918;

  $bb207:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6916;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} out_vslice_dummy_var_126 := sg_fasync(out_$i327, out_$p328, out_$i329);
    goto corral_source_split_6915;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$i329 := $load.i32($M.53, in_$p10);
    goto corral_source_split_6914;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    out_$p328 := $M.65;
    goto corral_source_split_6913;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    out_$i327 := $load.i32($M.53, in_$p6);
    goto corral_source_split_6912;

  $bb206:
    assume out_$i326 == 1;
    goto corral_source_split_6911;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 1);
    goto corral_source_split_6860;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    out_$i325 := $M.82;
    goto corral_source_split_6859;

  $bb182:
    assume !(out_$i293 == 1);
    goto corral_source_split_6858;

  $bb213:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb215:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $M.80 := out_$i345;
    call {:si_unique_call 1575} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i345);
    goto corral_source_split_6940;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    out_$i345 := $add.i32(out_$i344, 1);
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$i344 := $M.80;
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6937;

  $bb214:
    assume out_$i343 == 1;
    goto corral_source_split_6936;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$i343 := $eq.i32(out_$i342, 0);
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i342 := $M.99;
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.99 := out_$i341;
    call {:si_unique_call 1573} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i341);
    goto corral_source_split_6932;

  SeqInstr_93:
    goto corral_source_split_6931;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} out_$i341 := sg_open(out_$p339, out_$p340);
    goto SeqInstr_92;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$p340 := $M.65;
    goto corral_source_split_6930;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    out_$p339 := $M.64;
    goto corral_source_split_6929;

  $bb212:
    assume out_$i338 == 1;
    goto corral_source_split_6928;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 1);
    goto corral_source_split_6844;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    out_$i337 := $M.82;
    goto corral_source_split_6843;

  $bb175:
    assume out_$i290 == 1;
    goto corral_source_split_6842;

  $bb166:
    assume out_$i286 == 1;
    assume {:verifier.code 0} true;
    out_$i290 := $slt.i32(out_$i284, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb165:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    out_$i286 := $slt.i32(out_$i284, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb222:
    assume !(out_$i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6953;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} out_vslice_dummy_var_129 := sg_mmap(out_$p352, in_$p44);
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    out_$p352 := $M.65;
    goto corral_source_split_6951;

  $bb221:
    assume out_$i351 == 1;
    goto corral_source_split_6950;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    out_$i351 := $eq.i32(out_$i350, 2);
    goto corral_source_split_6948;

  $bb220:
    assume {:verifier.code 0} true;
    out_$i350 := $M.82;
    goto corral_source_split_6947;

  $bb219:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} out_vslice_dummy_var_128 := sg_mmap(out_$p348, in_$p44);
    goto corral_source_split_6944;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    out_$p348 := $M.65;
    goto corral_source_split_6943;

  $bb218:
    assume out_$i347 == 1;
    goto corral_source_split_6942;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 1);
    goto corral_source_split_6848;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    out_$i346 := $M.82;
    goto corral_source_split_6847;

  $bb176:
    assume !(out_$i290 == 1);
    goto corral_source_split_6846;

  $bb225:
    assume !(out_$i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $M.80 := out_$i360;
    call {:si_unique_call 1582} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i360);
    goto corral_source_split_6962;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    out_$i360 := $sub.i32(out_$i359, 1);
    goto corral_source_split_6961;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    out_$i359 := $M.80;
    goto corral_source_split_6960;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6959;

  SeqInstr_96:
    goto corral_source_split_6958;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} out_vslice_dummy_var_130 := sg_release(out_$p356, out_$p357);
    goto SeqInstr_95;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    out_$p357 := $M.65;
    goto corral_source_split_6957;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    out_$p356 := $M.64;
    goto corral_source_split_6956;

  $bb224:
    assume out_$i355 == 1;
    goto corral_source_split_6955;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    out_$i355 := $eq.i32(out_$i354, 2);
    goto corral_source_split_6832;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i354 := $M.82;
    goto corral_source_split_6831;

  $bb168:
    assume out_$i287 == 1;
    goto corral_source_split_6830;

  $bb167:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    out_$i287 := $slt.i32(out_$i284, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb228:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6969;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} out_vslice_dummy_var_131 := no_llseek(out_$p363, out_$i364, out_$i365);
    goto corral_source_split_6968;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$i365 := $load.i32($M.53, in_$p7);
    goto corral_source_split_6967;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    out_$i364 := $load.i64($M.53, in_$p4);
    goto corral_source_split_6966;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    out_$p363 := $M.65;
    goto corral_source_split_6965;

  $bb227:
    assume out_$i362 == 1;
    goto corral_source_split_6964;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 2);
    goto corral_source_split_6836;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    out_$i361 := $M.82;
    goto corral_source_split_6835;

  $bb170:
    assume out_$i288 == 1;
    goto corral_source_split_6834;

  $bb169:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    out_$i288 := $slt.i32(out_$i284, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb231:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} out_vslice_dummy_var_132 := sg_ioctl(out_$p369, out_$i370, out_$i371);
    goto corral_source_split_6975;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    out_$i371 := $load.i64($M.53, in_$p5);
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    out_$i370 := $load.i32($M.53, in_$p8);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$p369 := $M.65;
    goto corral_source_split_6972;

  $bb230:
    assume out_$i368 == 1;
    goto corral_source_split_6971;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    out_$i368 := $eq.i32(out_$i367, 2);
    goto corral_source_split_6840;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    out_$i367 := $M.82;
    goto corral_source_split_6839;

  $bb172:
    assume out_$i289 == 1;
    goto corral_source_split_6838;

  $bb171:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i284, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} ldv_stop();
    goto corral_source_split_6978;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb173:
    assume {:verifier.code 0} true;
    assume !(out_$i289 == 1);
    goto $bb174;

  $bb186:
    assume {:verifier.code 0} true;
    assume !(out_$i295 == 1);
    goto $bb174;

  $bb237:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb251:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7002;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} out_vslice_dummy_var_133 := seq_read(out_$p383, in_$p51, out_$i384, in_$p50);
    goto corral_source_split_7001;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    out_$i384 := $load.i64($M.53, in_$p15);
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    out_$p383 := $M.57;
    goto corral_source_split_6999;

  $bb250:
    assume out_$i382 == 1;
    goto corral_source_split_6998;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i381, 2);
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    out_$i381 := $M.83;
    goto corral_source_split_6995;

  $bb248:
    assume out_$i380 == 1;
    goto corral_source_split_6994;

  $bb246:
    assume out_$i379 == 1;
    assume {:verifier.code 0} true;
    out_$i380 := $eq.i32(out_$i375, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb239:
    assume out_$i376 == 1;
    assume {:verifier.code 0} true;
    out_$i379 := $slt.i32(out_$i375, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb238:
    assume {:verifier.code 0} true;
    out_$i376 := $slt.i32(out_$i375, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_6980:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1588} out_$i375 := __VERIFIER_nondet_int();
    call {:si_unique_call 1589} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i375);
    call {:si_unique_call 1590} {:cexpr "tmp___30"} boogie_si_record_i32(out_$i375);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb236:
    assume out_$i374 == 1;
    goto corral_source_split_6980;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    out_$i374 := $ne.i32(out_$i373, 0);
    goto corral_source_split_6562;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$i373 := $M.83;
    goto corral_source_split_6561;

  $bb26:
    assume out_$i152 == 1;
    goto corral_source_split_6560;

  $bb25:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    out_$i152 := $slt.i32(out_$i140, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb255:
    assume !(out_$i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb257:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $M.80 := out_$i394;
    call {:si_unique_call 1596} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i394);
    goto corral_source_split_7016;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    out_$i394 := $add.i32(out_$i393, 1);
    goto corral_source_split_7015;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    out_$i393 := $M.80;
    goto corral_source_split_7014;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7013;

  $bb256:
    assume out_$i392 == 1;
    goto corral_source_split_7012;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 0);
    goto corral_source_split_7010;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    out_$i391 := $M.100;
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.100 := out_$i390;
    call {:si_unique_call 1594} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i390);
    goto corral_source_split_7008;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} out_$i390 := sg_proc_open_devstrs(out_$p388, out_$p389);
    goto corral_source_split_7007;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    out_$p389 := $M.57;
    goto corral_source_split_7006;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    out_$p388 := $M.56;
    goto corral_source_split_7005;

  $bb254:
    assume out_$i387 == 1;
    goto corral_source_split_7004;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    out_$i387 := $eq.i32(out_$i386, 1);
    goto corral_source_split_6992;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    out_$i386 := $M.83;
    goto corral_source_split_6991;

  $bb247:
    assume !(out_$i379 == 1);
    goto corral_source_split_6990;

  $bb261:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.80 := out_$i401;
    call {:si_unique_call 1599} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i401);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    out_$i401 := $sub.i32(out_$i400, 1);
    goto corral_source_split_7024;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    out_$i400 := $M.80;
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} out_vslice_dummy_var_134 := ldv_seq_release_16(out_$p397, out_$p398);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$p398 := $M.57;
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$p397 := $M.56;
    goto corral_source_split_7019;

  $bb260:
    assume out_$i396 == 1;
    goto corral_source_split_7018;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    out_$i396 := $eq.i32(out_$i395, 2);
    goto corral_source_split_6984;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    out_$i395 := $M.83;
    goto corral_source_split_6983;

  $bb241:
    assume out_$i377 == 1;
    goto corral_source_split_6982;

  $bb240:
    assume !(out_$i376 == 1);
    assume {:verifier.code 0} true;
    out_$i377 := $slt.i32(out_$i375, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb264:
    assume !(out_$i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7032;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} out_vslice_dummy_var_135 := seq_lseek(out_$p404, out_$i405, out_$i406);
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    out_$i406 := $load.i32($M.53, in_$p14);
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$i405 := $load.i64($M.53, in_$p16);
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$p404 := $M.57;
    goto corral_source_split_7028;

  $bb263:
    assume out_$i403 == 1;
    goto corral_source_split_7027;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    out_$i403 := $eq.i32(out_$i402, 2);
    goto corral_source_split_6988;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    out_$i402 := $M.83;
    goto corral_source_split_6987;

  $bb243:
    assume out_$i378 == 1;
    goto corral_source_split_6986;

  $bb242:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    out_$i378 := $eq.i32(out_$i375, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} ldv_stop();
    goto corral_source_split_7034;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb244:
    assume {:verifier.code 0} true;
    assume !(out_$i378 == 1);
    goto $bb245;

  $bb249:
    assume {:verifier.code 0} true;
    assume !(out_$i380 == 1);
    goto $bb245;

  $bb270:
    assume !(out_$i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb284:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb289:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $M.80 := out_$i430;
    call {:si_unique_call 1610} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i430);
    goto corral_source_split_7077;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    out_$i430 := $add.i32(out_$i429, 1);
    goto corral_source_split_7076;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    out_$i429 := $M.80;
    goto corral_source_split_7075;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7074;

  $bb288:
    assume out_$i428 == 1;
    goto corral_source_split_7073;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    out_$i428 := $eq.i64(out_$i427, 0);
    goto corral_source_split_7071;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$i427 := $p2i.ref.i64(out_$p426);
    goto corral_source_split_7070;

  $bb287:
    assume {:verifier.code 0} true;
    out_$p426 := $M.103;
    goto corral_source_split_7069;

  $bb286:
    assume !(out_$i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $M.80 := out_$i425;
    call {:si_unique_call 1608} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i425);
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    out_$i425 := $add.i32(out_$i424, 1);
    goto corral_source_split_7066;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$i424 := $M.80;
    goto corral_source_split_7065;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.84 := 3;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7064;

  $bb285:
    assume out_$i423 == 1;
    goto corral_source_split_7063;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    out_$i423 := $ne.i64(out_$i422, 0);
    goto corral_source_split_7061;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    out_$i422 := $p2i.ref.i64(out_$p421);
    goto corral_source_split_7060;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    out_$p421 := $M.103;
    goto corral_source_split_7059;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $M.103 := out_$p420;
    goto corral_source_split_7058;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} out_$p420 := dev_seq_start(out_$p418, out_$p419);
    goto corral_source_split_7057;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    out_$p419 := $M.102;
    goto corral_source_split_7056;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    out_$p418 := $M.101;
    goto corral_source_split_7055;

  $bb283:
    assume out_$i417 == 1;
    goto corral_source_split_7054;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    out_$i417 := $eq.i32(out_$i416, 1);
    goto corral_source_split_7052;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    out_$i416 := $M.84;
    goto corral_source_split_7051;

  $bb281:
    assume out_$i415 == 1;
    goto corral_source_split_7050;

  $bb279:
    assume out_$i414 == 1;
    assume {:verifier.code 0} true;
    out_$i415 := $eq.i32(out_$i410, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb272:
    assume out_$i411 == 1;
    assume {:verifier.code 0} true;
    out_$i414 := $slt.i32(out_$i410, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb271:
    assume {:verifier.code 0} true;
    out_$i411 := $slt.i32(out_$i410, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_7036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1603} out_$i410 := __VERIFIER_nondet_int();
    call {:si_unique_call 1604} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i410);
    call {:si_unique_call 1605} {:cexpr "tmp___31"} boogie_si_record_i32(out_$i410);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb269:
    assume out_$i409 == 1;
    goto corral_source_split_7036;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    out_$i409 := $ne.i32(out_$i408, 0);
    goto corral_source_split_6566;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$i408 := $M.84;
    goto corral_source_split_6565;

  $bb27:
    assume !(out_$i152 == 1);
    goto corral_source_split_6564;

  $bb297:
    assume !(out_$i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $M.80 := out_$i442;
    call {:si_unique_call 1616} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i442);
    goto corral_source_split_7098;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    out_$i442 := $sub.i32(out_$i441, 1);
    goto corral_source_split_7097;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    out_$i441 := $M.80;
    goto corral_source_split_7096;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7095;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} dev_seq_stop(out_$p439, out_$p440);
    goto corral_source_split_7094;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    out_$p440 := $M.104;
    goto corral_source_split_7093;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    out_$p439 := $M.101;
    goto corral_source_split_7092;

  $bb296:
    assume out_$i438 == 1;
    goto corral_source_split_7091;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    out_$i438 := $eq.i32(out_$i437, 2);
    goto corral_source_split_7089;

  $bb295:
    assume {:verifier.code 0} true;
    out_$i437 := $M.84;
    goto corral_source_split_7088;

  $bb294:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $M.80 := out_$i436;
    call {:si_unique_call 1613} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i436);
    goto corral_source_split_7086;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    out_$i436 := $sub.i32(out_$i435, 1);
    goto corral_source_split_7085;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    out_$i435 := $M.80;
    goto corral_source_split_7084;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1612} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7083;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} dev_seq_stop(out_$p433, out_$p434);
    goto corral_source_split_7082;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    out_$p434 := $M.104;
    goto corral_source_split_7081;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    out_$p433 := $M.101;
    goto corral_source_split_7080;

  $bb293:
    assume out_$i432 == 1;
    goto corral_source_split_7079;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    out_$i432 := $eq.i32(out_$i431, 3);
    goto corral_source_split_7048;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    out_$i431 := $M.84;
    goto corral_source_split_7047;

  $bb280:
    assume !(out_$i414 == 1);
    goto corral_source_split_7046;

  $bb300:
    assume !(out_$i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1618} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7105;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} out_vslice_dummy_var_136 := sg_proc_seq_show_debug(out_$p445, out_$p447);
    goto corral_source_split_7104;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    out_$p447 := $bitcast.ref.ref(out_$p446);
    goto corral_source_split_7103;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    out_$p446 := $M.102;
    goto corral_source_split_7102;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    out_$p445 := $M.101;
    goto corral_source_split_7101;

  $bb299:
    assume out_$i444 == 1;
    goto corral_source_split_7100;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$i444 := $eq.i32(out_$i443, 2);
    goto corral_source_split_7040;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    out_$i443 := $M.84;
    goto corral_source_split_7039;

  $bb274:
    assume out_$i412 == 1;
    goto corral_source_split_7038;

  $bb273:
    assume !(out_$i411 == 1);
    assume {:verifier.code 0} true;
    out_$i412 := $slt.i32(out_$i410, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb303:
    assume !(out_$i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb308:
    assume !(out_$i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $M.80 := out_$i464;
    call {:si_unique_call 1623} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i464);
    goto corral_source_split_7131;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    out_$i464 := $add.i32(out_$i463, 1);
    goto corral_source_split_7130;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    out_$i463 := $M.80;
    goto corral_source_split_7129;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $M.84 := 3;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7128;

  $bb307:
    assume out_$i462 == 1;
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    out_$i462 := $ne.i64(out_$i461, 0);
    goto corral_source_split_7125;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    out_$i461 := $p2i.ref.i64(out_$p460);
    goto corral_source_split_7124;

  $bb306:
    assume {:verifier.code 0} true;
    out_$p460 := $M.105;
    goto corral_source_split_7123;

  $bb305:
    assume !(out_$i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $M.80 := out_$i459;
    call {:si_unique_call 1621} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i459);
    goto corral_source_split_7121;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    out_$i459 := $add.i32(out_$i458, 1);
    goto corral_source_split_7120;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    out_$i458 := $M.80;
    goto corral_source_split_7119;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7118;

  $bb304:
    assume out_$i457 == 1;
    goto corral_source_split_7117;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    out_$i457 := $eq.i64(out_$i456, 0);
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    out_$i456 := $p2i.ref.i64(out_$p455);
    goto corral_source_split_7114;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    out_$p455 := $M.105;
    goto corral_source_split_7113;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $M.105 := out_$p454;
    goto corral_source_split_7112;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} out_$p454 := dev_seq_next(out_$p451, out_$p452, out_$p453);
    goto corral_source_split_7111;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    out_$p453 := $M.102;
    goto corral_source_split_7110;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    out_$p452 := $M.104;
    goto corral_source_split_7109;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    out_$p451 := $M.101;
    goto corral_source_split_7108;

  $bb302:
    assume out_$i450 == 1;
    goto corral_source_split_7107;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    out_$i450 := $eq.i32(out_$i449, 2);
    goto corral_source_split_7044;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    out_$i449 := $M.84;
    goto corral_source_split_7043;

  $bb276:
    assume out_$i413 == 1;
    goto corral_source_split_7042;

  $bb275:
    assume !(out_$i412 == 1);
    assume {:verifier.code 0} true;
    out_$i413 := $eq.i32(out_$i410, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_stop();
    goto corral_source_split_7133;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb277:
    assume {:verifier.code 0} true;
    assume !(out_$i413 == 1);
    goto $bb278;

  $bb282:
    assume {:verifier.code 0} true;
    assume !(out_$i415 == 1);
    goto $bb278;

  $bb315:
    assume !(out_$i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb329:
    assume !(out_$i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_7157;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} out_vslice_dummy_var_137 := seq_read(out_$p475, in_$p54, out_$i476, in_$p53);
    goto corral_source_split_7156;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    out_$i476 := $load.i64($M.53, in_$p17);
    goto corral_source_split_7155;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    out_$p475 := $M.61;
    goto corral_source_split_7154;

  $bb328:
    assume out_$i474 == 1;
    goto corral_source_split_7153;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    out_$i474 := $eq.i32(out_$i473, 2);
    goto corral_source_split_7151;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    out_$i473 := $M.85;
    goto corral_source_split_7150;

  $bb326:
    assume out_$i472 == 1;
    goto corral_source_split_7149;

  $bb324:
    assume out_$i471 == 1;
    assume {:verifier.code 0} true;
    out_$i472 := $eq.i32(out_$i467, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb317:
    assume out_$i468 == 1;
    assume {:verifier.code 0} true;
    out_$i471 := $slt.i32(out_$i467, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb316:
    assume {:verifier.code 0} true;
    out_$i468 := $slt.i32(out_$i467, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_7135:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1625} out_$i467 := __VERIFIER_nondet_int();
    call {:si_unique_call 1626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i467);
    call {:si_unique_call 1627} {:cexpr "tmp___32"} boogie_si_record_i32(out_$i467);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb314:
    assume out_$i466 == 1;
    goto corral_source_split_7135;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$i466 := $ne.i32(out_$i465, 0);
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i465 := $M.85;
    goto corral_source_split_6553;

  $bb20:
    assume out_$i149 == 1;
    goto corral_source_split_6552;

  $bb16:
    assume out_$i147 == 1;
    assume {:verifier.code 0} true;
    out_$i149 := $slt.i32(out_$i140, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb5:
    assume out_$i142 == 1;
    assume {:verifier.code 0} true;
    out_$i147 := $slt.i32(out_$i140, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb4:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i140, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb333:
    assume !(out_$i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb335:
    assume !(out_$i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $M.80 := out_$i486;
    call {:si_unique_call 1633} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i486);
    goto corral_source_split_7171;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    out_$i486 := $add.i32(out_$i485, 1);
    goto corral_source_split_7170;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    out_$i485 := $M.80;
    goto corral_source_split_7169;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1632} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_7168;

  $bb334:
    assume out_$i484 == 1;
    goto corral_source_split_7167;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    out_$i484 := $eq.i32(out_$i483, 0);
    goto corral_source_split_7165;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    out_$i483 := $M.106;
    goto corral_source_split_7164;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $M.106 := out_$i482;
    call {:si_unique_call 1631} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i482);
    goto corral_source_split_7163;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} out_$i482 := sg_proc_single_open_devhdr(out_$p480, out_$p481);
    goto corral_source_split_7162;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    out_$p481 := $M.61;
    goto corral_source_split_7161;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    out_$p480 := $M.60;
    goto corral_source_split_7160;

  $bb332:
    assume out_$i479 == 1;
    goto corral_source_split_7159;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    out_$i479 := $eq.i32(out_$i478, 1);
    goto corral_source_split_7147;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    out_$i478 := $M.85;
    goto corral_source_split_7146;

  $bb325:
    assume !(out_$i471 == 1);
    goto corral_source_split_7145;

  $bb339:
    assume !(out_$i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $M.80 := out_$i493;
    call {:si_unique_call 1636} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i493);
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    out_$i493 := $sub.i32(out_$i492, 1);
    goto corral_source_split_7179;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    out_$i492 := $M.80;
    goto corral_source_split_7178;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7177;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} out_vslice_dummy_var_138 := single_release(out_$p489, out_$p490);
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    out_$p490 := $M.61;
    goto corral_source_split_7175;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    out_$p489 := $M.60;
    goto corral_source_split_7174;

  $bb338:
    assume out_$i488 == 1;
    goto corral_source_split_7173;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    out_$i488 := $eq.i32(out_$i487, 2);
    goto corral_source_split_7139;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    out_$i487 := $M.85;
    goto corral_source_split_7138;

  $bb319:
    assume out_$i469 == 1;
    goto corral_source_split_7137;

  $bb318:
    assume !(out_$i468 == 1);
    assume {:verifier.code 0} true;
    out_$i469 := $slt.i32(out_$i467, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb342:
    assume !(out_$i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1638} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_7187;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} out_vslice_dummy_var_139 := seq_lseek(out_$p496, out_$i497, out_$i498);
    goto corral_source_split_7186;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$i498 := $load.i32($M.53, in_$p18);
    goto corral_source_split_7185;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    out_$i497 := $load.i64($M.53, in_$p19);
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    out_$p496 := $M.61;
    goto corral_source_split_7183;

  $bb341:
    assume out_$i495 == 1;
    goto corral_source_split_7182;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    out_$i495 := $eq.i32(out_$i494, 2);
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    out_$i494 := $M.85;
    goto corral_source_split_7142;

  $bb321:
    assume out_$i470 == 1;
    goto corral_source_split_7141;

  $bb320:
    assume !(out_$i469 == 1);
    assume {:verifier.code 0} true;
    out_$i470 := $eq.i32(out_$i467, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} ldv_stop();
    goto corral_source_split_7189;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb322:
    assume {:verifier.code 0} true;
    assume !(out_$i470 == 1);
    goto $bb323;

  $bb327:
    assume {:verifier.code 0} true;
    assume !(out_$i472 == 1);
    goto $bb323;

  $bb348:
    assume !(out_$i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb367:
    assume !(out_$i515 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_7226;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} out_vslice_dummy_var_141 := sg_proc_write_adio(out_$p516, in_$p57, out_$i517, in_$p56);
    goto corral_source_split_7225;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    out_$i517 := $load.i64($M.53, in_$p22);
    goto corral_source_split_7224;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    out_$p516 := $M.74;
    goto corral_source_split_7223;

  $bb366:
    assume out_$i515 == 1;
    goto corral_source_split_7222;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    out_$i515 := $eq.i32(out_$i514, 2);
    goto corral_source_split_7220;

  $bb365:
    assume {:verifier.code 0} true;
    out_$i514 := $M.86;
    goto corral_source_split_7219;

  $bb364:
    assume !(out_$i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1644} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7217;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} out_vslice_dummy_var_140 := sg_proc_write_adio(out_$p511, in_$p57, out_$i512, in_$p56);
    goto corral_source_split_7216;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    out_$i512 := $load.i64($M.53, in_$p22);
    goto corral_source_split_7215;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    out_$p511 := $M.74;
    goto corral_source_split_7214;

  $bb363:
    assume out_$i510 == 1;
    goto corral_source_split_7213;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    out_$i510 := $eq.i32(out_$i509, 1);
    goto corral_source_split_7211;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    out_$i509 := $M.86;
    goto corral_source_split_7210;

  $bb361:
    assume out_$i508 == 1;
    goto corral_source_split_7209;

  $bb359:
    assume out_$i507 == 1;
    assume {:verifier.code 0} true;
    out_$i508 := $eq.i32(out_$i502, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb350:
    assume out_$i503 == 1;
    assume {:verifier.code 0} true;
    out_$i507 := $slt.i32(out_$i502, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb349:
    assume {:verifier.code 0} true;
    out_$i503 := $slt.i32(out_$i502, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_7191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1640} out_$i502 := __VERIFIER_nondet_int();
    call {:si_unique_call 1641} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i502);
    call {:si_unique_call 1642} {:cexpr "tmp___33"} boogie_si_record_i32(out_$i502);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb347:
    assume out_$i501 == 1;
    goto corral_source_split_7191;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    out_$i501 := $ne.i32(out_$i500, 0);
    goto corral_source_split_6558;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$i500 := $M.86;
    goto corral_source_split_6557;

  $bb21:
    assume !(out_$i149 == 1);
    goto corral_source_split_6556;

  $bb371:
    assume !(out_$i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_7232;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} out_vslice_dummy_var_142 := seq_read(out_$p521, in_$p58, out_$i522, in_$p60);
    goto corral_source_split_7231;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    out_$i522 := $load.i64($M.53, in_$p21);
    goto corral_source_split_7230;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    out_$p521 := $M.74;
    goto corral_source_split_7229;

  $bb370:
    assume out_$i520 == 1;
    goto corral_source_split_7228;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    out_$i520 := $eq.i32(out_$i519, 2);
    goto corral_source_split_7207;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    out_$i519 := $M.86;
    goto corral_source_split_7206;

  $bb360:
    assume !(out_$i507 == 1);
    goto corral_source_split_7205;

  $bb374:
    assume !(out_$i525 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb376:
    assume !(out_$i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    goto $bb377;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $M.80 := out_$i532;
    call {:si_unique_call 1652} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i532);
    goto corral_source_split_7246;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    out_$i532 := $add.i32(out_$i531, 1);
    goto corral_source_split_7245;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    out_$i531 := $M.80;
    goto corral_source_split_7244;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_7243;

  $bb375:
    assume out_$i530 == 1;
    goto corral_source_split_7242;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    out_$i530 := $eq.i32(out_$i529, 0);
    goto corral_source_split_7240;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    out_$i529 := $M.107;
    goto corral_source_split_7239;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $M.107 := out_$i528;
    call {:si_unique_call 1650} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i528);
    goto corral_source_split_7238;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} out_$i528 := sg_proc_single_open_adio(out_$p526, out_$p527);
    goto corral_source_split_7237;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    out_$p527 := $M.74;
    goto corral_source_split_7236;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    out_$p526 := $M.73;
    goto corral_source_split_7235;

  $bb373:
    assume out_$i525 == 1;
    goto corral_source_split_7234;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    out_$i525 := $eq.i32(out_$i524, 1);
    goto corral_source_split_7195;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    out_$i524 := $M.86;
    goto corral_source_split_7194;

  $bb352:
    assume out_$i504 == 1;
    goto corral_source_split_7193;

  $bb351:
    assume !(out_$i503 == 1);
    assume {:verifier.code 0} true;
    out_$i504 := $slt.i32(out_$i502, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb380:
    assume !(out_$i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $M.80 := out_$i539;
    call {:si_unique_call 1655} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i539);
    goto corral_source_split_7255;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    out_$i539 := $sub.i32(out_$i538, 1);
    goto corral_source_split_7254;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    out_$i538 := $M.80;
    goto corral_source_split_7253;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7252;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} out_vslice_dummy_var_143 := single_release(out_$p535, out_$p536);
    goto corral_source_split_7251;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    out_$p536 := $M.74;
    goto corral_source_split_7250;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    out_$p535 := $M.73;
    goto corral_source_split_7249;

  $bb379:
    assume out_$i534 == 1;
    goto corral_source_split_7248;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    out_$i534 := $eq.i32(out_$i533, 2);
    goto corral_source_split_7199;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    out_$i533 := $M.86;
    goto corral_source_split_7198;

  $bb354:
    assume out_$i505 == 1;
    goto corral_source_split_7197;

  $bb353:
    assume !(out_$i504 == 1);
    assume {:verifier.code 0} true;
    out_$i505 := $slt.i32(out_$i502, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb383:
    assume !(out_$i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_7262;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} out_vslice_dummy_var_144 := seq_lseek(out_$p542, out_$i543, out_$i544);
    goto corral_source_split_7261;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    out_$i544 := $load.i32($M.53, in_$p23);
    goto corral_source_split_7260;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$i543 := $load.i64($M.53, in_$p20);
    goto corral_source_split_7259;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    out_$p542 := $M.74;
    goto corral_source_split_7258;

  $bb382:
    assume out_$i541 == 1;
    goto corral_source_split_7257;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    out_$i541 := $eq.i32(out_$i540, 2);
    goto corral_source_split_7203;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    out_$i540 := $M.86;
    goto corral_source_split_7202;

  $bb356:
    assume out_$i506 == 1;
    goto corral_source_split_7201;

  $bb355:
    assume !(out_$i505 == 1);
    assume {:verifier.code 0} true;
    out_$i506 := $eq.i32(out_$i502, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} ldv_stop();
    goto corral_source_split_7264;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb357:
    assume {:verifier.code 0} true;
    assume !(out_$i506 == 1);
    goto $bb358;

  $bb362:
    assume {:verifier.code 0} true;
    assume !(out_$i508 == 1);
    goto $bb358;

  $bb389:
    assume !(out_$i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb394:
    assume !(out_$i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_7274;

  SeqInstr_99:
    goto corral_source_split_7273;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} out_vslice_dummy_var_145 := sg_vma_fault(in_$p64, in_$p62);
    goto SeqInstr_98;

  $bb393:
    assume out_$i551 == 1;
    goto corral_source_split_7272;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$i551 := $eq.i32(out_$i550, 1);
    goto corral_source_split_7270;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    out_$i550 := $M.87;
    goto corral_source_split_7269;

  $bb391:
    assume out_$i549 == 1;
    goto corral_source_split_7268;

  $bb390:
    assume {:verifier.code 0} true;
    out_$i549 := $eq.i32(out_$i548, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  corral_source_split_7266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1659} out_$i548 := __VERIFIER_nondet_int();
    call {:si_unique_call 1660} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i548);
    call {:si_unique_call 1661} {:cexpr "tmp___34"} boogie_si_record_i32(out_$i548);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb388:
    assume out_$i547 == 1;
    goto corral_source_split_7266;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    out_$i547 := $ne.i32(out_$i546, 0);
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i546 := $M.87;
    goto corral_source_split_6545;

  $bb18:
    assume out_$i148 == 1;
    goto corral_source_split_6544;

  $bb17:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    out_$i148 := $slt.i32(out_$i140, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_stop();
    goto corral_source_split_7276;

  $bb392:
    assume !(out_$i549 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb401:
    assume !(out_$i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb411:
    assume !(out_$i560 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb412;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7292;

  SeqInstr_102:
    goto corral_source_split_7291;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} sg_remove_device(out_$p561, out_$p562);
    goto SeqInstr_101;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    out_$p562 := $M.54;
    goto corral_source_split_7290;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    out_$p561 := $M.55;
    goto corral_source_split_7289;

  $bb410:
    assume out_$i560 == 1;
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    out_$i560 := $eq.i32(out_$i559, 1);
    goto corral_source_split_7286;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$i559 := $M.88;
    goto corral_source_split_7285;

  $bb408:
    assume out_$i558 == 1;
    goto corral_source_split_7284;

  $bb403:
    assume out_$i556 == 1;
    assume {:verifier.code 0} true;
    out_$i558 := $eq.i32(out_$i555, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  $bb402:
    assume {:verifier.code 0} true;
    out_$i556 := $slt.i32(out_$i555, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  corral_source_split_7278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1665} out_$i555 := __VERIFIER_nondet_int();
    call {:si_unique_call 1666} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i555);
    call {:si_unique_call 1667} {:cexpr "tmp___35"} boogie_si_record_i32(out_$i555);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb400:
    assume out_$i554 == 1;
    goto corral_source_split_7278;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$i554 := $ne.i32(out_$i553, 0);
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i553 := $M.88;
    goto corral_source_split_6549;

  $bb19:
    assume !(out_$i148 == 1);
    goto corral_source_split_6548;

  $bb415:
    assume !(out_$i564 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb416;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7298;

  SeqInstr_105:
    goto corral_source_split_7297;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} out_vslice_dummy_var_146 := sg_add_device(out_$p565, out_$p566);
    goto SeqInstr_104;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    out_$p566 := $M.54;
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$p565 := $M.55;
    goto corral_source_split_7295;

  $bb414:
    assume out_$i564 == 1;
    goto corral_source_split_7294;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    out_$i564 := $eq.i32(out_$i563, 1);
    goto corral_source_split_7282;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    out_$i563 := $M.88;
    goto corral_source_split_7281;

  $bb405:
    assume out_$i557 == 1;
    goto corral_source_split_7280;

  $bb404:
    assume !(out_$i556 == 1);
    assume {:verifier.code 0} true;
    out_$i557 := $eq.i32(out_$i555, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} ldv_stop();
    goto corral_source_split_7300;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb406:
    assume {:verifier.code 0} true;
    assume !(out_$i557 == 1);
    goto $bb407;

  $bb409:
    assume {:verifier.code 0} true;
    assume !(out_$i558 == 1);
    goto $bb407;

  $bb421:
    assume !(out_$i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb435:
    assume !(out_$i577 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto $bb436;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 1677} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} out_vslice_dummy_var_147 := seq_read(out_$p578, in_$p65, out_$i579, in_$p67);
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$i579 := $load.i64($M.53, in_$p26);
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$p578 := $M.63;
    goto corral_source_split_7321;

  $bb434:
    assume out_$i577 == 1;
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    out_$i577 := $eq.i32(out_$i576, 2);
    goto corral_source_split_7318;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$i576 := $M.89;
    goto corral_source_split_7317;

  $bb432:
    assume out_$i575 == 1;
    goto corral_source_split_7316;

  $bb430:
    assume out_$i574 == 1;
    assume {:verifier.code 0} true;
    out_$i575 := $eq.i32(out_$i570, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  $bb423:
    assume out_$i571 == 1;
    assume {:verifier.code 0} true;
    out_$i574 := $slt.i32(out_$i570, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb430, $bb431;

  $bb422:
    assume {:verifier.code 0} true;
    out_$i571 := $slt.i32(out_$i570, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  corral_source_split_7302:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1673} out_$i570 := __VERIFIER_nondet_int();
    call {:si_unique_call 1674} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i570);
    call {:si_unique_call 1675} {:cexpr "tmp___36"} boogie_si_record_i32(out_$i570);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb420:
    assume out_$i569 == 1;
    goto corral_source_split_7302;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    out_$i569 := $ne.i32(out_$i568, 0);
    goto corral_source_split_6538;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$i568 := $M.89;
    goto corral_source_split_6537;

  $bb14:
    assume out_$i146 == 1;
    goto corral_source_split_6536;

  $bb7:
    assume out_$i143 == 1;
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i140, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb6:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    out_$i143 := $slt.i32(out_$i140, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb439:
    assume !(out_$i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb441:
    assume !(out_$i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $M.80 := out_$i589;
    call {:si_unique_call 1681} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i589);
    goto corral_source_split_7338;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    out_$i589 := $add.i32(out_$i588, 1);
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    out_$i588 := $M.80;
    goto corral_source_split_7336;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_7335;

  $bb440:
    assume out_$i587 == 1;
    goto corral_source_split_7334;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    out_$i587 := $eq.i32(out_$i586, 0);
    goto corral_source_split_7332;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    out_$i586 := $M.108;
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $M.108 := out_$i585;
    call {:si_unique_call 1679} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i585);
    goto corral_source_split_7330;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} out_$i585 := sg_proc_open_dev(out_$p583, out_$p584);
    goto corral_source_split_7329;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    out_$p584 := $M.63;
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$p583 := $M.62;
    goto corral_source_split_7327;

  $bb438:
    assume out_$i582 == 1;
    goto corral_source_split_7326;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i582 := $eq.i32(out_$i581, 1);
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    out_$i581 := $M.89;
    goto corral_source_split_7313;

  $bb431:
    assume !(out_$i574 == 1);
    goto corral_source_split_7312;

  $bb445:
    assume !(out_$i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $M.80 := out_$i596;
    call {:si_unique_call 1684} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i596);
    goto corral_source_split_7347;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    out_$i596 := $sub.i32(out_$i595, 1);
    goto corral_source_split_7346;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    out_$i595 := $M.80;
    goto corral_source_split_7345;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7344;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_vslice_dummy_var_148 := ldv_seq_release_17(out_$p592, out_$p593);
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    out_$p593 := $M.63;
    goto corral_source_split_7342;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    out_$p592 := $M.62;
    goto corral_source_split_7341;

  $bb444:
    assume out_$i591 == 1;
    goto corral_source_split_7340;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    out_$i591 := $eq.i32(out_$i590, 2);
    goto corral_source_split_7306;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    out_$i590 := $M.89;
    goto corral_source_split_7305;

  $bb425:
    assume out_$i572 == 1;
    goto corral_source_split_7304;

  $bb424:
    assume !(out_$i571 == 1);
    assume {:verifier.code 0} true;
    out_$i572 := $slt.i32(out_$i570, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  $bb448:
    assume !(out_$i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_7354;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} out_vslice_dummy_var_149 := seq_lseek(out_$p599, out_$i600, out_$i601);
    goto corral_source_split_7353;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    out_$i601 := $load.i32($M.53, in_$p25);
    goto corral_source_split_7352;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    out_$i600 := $load.i64($M.53, in_$p24);
    goto corral_source_split_7351;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    out_$p599 := $M.63;
    goto corral_source_split_7350;

  $bb447:
    assume out_$i598 == 1;
    goto corral_source_split_7349;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    out_$i598 := $eq.i32(out_$i597, 2);
    goto corral_source_split_7310;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    out_$i597 := $M.89;
    goto corral_source_split_7309;

  $bb427:
    assume out_$i573 == 1;
    goto corral_source_split_7308;

  $bb426:
    assume !(out_$i572 == 1);
    assume {:verifier.code 0} true;
    out_$i573 := $eq.i32(out_$i570, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} ldv_stop();
    goto corral_source_split_7356;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb428:
    assume {:verifier.code 0} true;
    assume !(out_$i573 == 1);
    goto $bb429;

  $bb433:
    assume {:verifier.code 0} true;
    assume !(out_$i575 == 1);
    goto $bb429;

  $bb454:
    assume !(out_$i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb468:
    assume !(out_$i612 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 1692} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7380;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} out_vslice_dummy_var_150 := seq_read(out_$p613, in_$p70, out_$i614, in_$p69);
    goto corral_source_split_7379;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    out_$i614 := $load.i64($M.53, in_$p27);
    goto corral_source_split_7378;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    out_$p613 := $M.76;
    goto corral_source_split_7377;

  $bb467:
    assume out_$i612 == 1;
    goto corral_source_split_7376;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    out_$i612 := $eq.i32(out_$i611, 2);
    goto corral_source_split_7374;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    out_$i611 := $M.90;
    goto corral_source_split_7373;

  $bb465:
    assume out_$i610 == 1;
    goto corral_source_split_7372;

  $bb463:
    assume out_$i609 == 1;
    assume {:verifier.code 0} true;
    out_$i610 := $eq.i32(out_$i605, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  $bb456:
    assume out_$i606 == 1;
    assume {:verifier.code 0} true;
    out_$i609 := $slt.i32(out_$i605, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb463, $bb464;

  $bb455:
    assume {:verifier.code 0} true;
    out_$i606 := $slt.i32(out_$i605, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  corral_source_split_7358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1688} out_$i605 := __VERIFIER_nondet_int();
    call {:si_unique_call 1689} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i605);
    call {:si_unique_call 1690} {:cexpr "tmp___37"} boogie_si_record_i32(out_$i605);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb453:
    assume out_$i604 == 1;
    goto corral_source_split_7358;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$i604 := $ne.i32(out_$i603, 0);
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$i603 := $M.90;
    goto corral_source_split_6541;

  $bb15:
    assume !(out_$i146 == 1);
    goto corral_source_split_6540;

  $bb472:
    assume !(out_$i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb474:
    assume !(out_$i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $M.80 := out_$i624;
    call {:si_unique_call 1696} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i624);
    goto corral_source_split_7394;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    out_$i624 := $add.i32(out_$i623, 1);
    goto corral_source_split_7393;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    out_$i623 := $M.80;
    goto corral_source_split_7392;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7391;

  $bb473:
    assume out_$i622 == 1;
    goto corral_source_split_7390;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    out_$i622 := $eq.i32(out_$i621, 0);
    goto corral_source_split_7388;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    out_$i621 := $M.109;
    goto corral_source_split_7387;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $M.109 := out_$i620;
    call {:si_unique_call 1694} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i620);
    goto corral_source_split_7386;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} out_$i620 := sg_proc_open_debug(out_$p618, out_$p619);
    goto corral_source_split_7385;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    out_$p619 := $M.76;
    goto corral_source_split_7384;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    out_$p618 := $M.75;
    goto corral_source_split_7383;

  $bb471:
    assume out_$i617 == 1;
    goto corral_source_split_7382;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    out_$i617 := $eq.i32(out_$i616, 1);
    goto corral_source_split_7370;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    out_$i616 := $M.90;
    goto corral_source_split_7369;

  $bb464:
    assume !(out_$i609 == 1);
    goto corral_source_split_7368;

  $bb478:
    assume !(out_$i626 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    goto $bb479;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.80 := out_$i631;
    call {:si_unique_call 1699} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i631);
    goto corral_source_split_7403;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    out_$i631 := $sub.i32(out_$i630, 1);
    goto corral_source_split_7402;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    out_$i630 := $M.80;
    goto corral_source_split_7401;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1698} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7400;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} out_vslice_dummy_var_151 := ldv_seq_release_18(out_$p627, out_$p628);
    goto corral_source_split_7399;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    out_$p628 := $M.76;
    goto corral_source_split_7398;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    out_$p627 := $M.75;
    goto corral_source_split_7397;

  $bb477:
    assume out_$i626 == 1;
    goto corral_source_split_7396;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    out_$i626 := $eq.i32(out_$i625, 2);
    goto corral_source_split_7362;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    out_$i625 := $M.90;
    goto corral_source_split_7361;

  $bb458:
    assume out_$i607 == 1;
    goto corral_source_split_7360;

  $bb457:
    assume !(out_$i606 == 1);
    assume {:verifier.code 0} true;
    out_$i607 := $slt.i32(out_$i605, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  $bb481:
    assume !(out_$i633 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    goto $bb482;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7410;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} out_vslice_dummy_var_152 := seq_lseek(out_$p634, out_$i635, out_$i636);
    goto corral_source_split_7409;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    out_$i636 := $load.i32($M.53, in_$p28);
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    out_$i635 := $load.i64($M.53, in_$p29);
    goto corral_source_split_7407;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$p634 := $M.76;
    goto corral_source_split_7406;

  $bb480:
    assume out_$i633 == 1;
    goto corral_source_split_7405;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$i633 := $eq.i32(out_$i632, 2);
    goto corral_source_split_7366;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    out_$i632 := $M.90;
    goto corral_source_split_7365;

  $bb460:
    assume out_$i608 == 1;
    goto corral_source_split_7364;

  $bb459:
    assume !(out_$i607 == 1);
    assume {:verifier.code 0} true;
    out_$i608 := $eq.i32(out_$i605, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb460, $bb461;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} ldv_stop();
    goto corral_source_split_7412;

  $bb462:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb461:
    assume {:verifier.code 0} true;
    assume !(out_$i608 == 1);
    goto $bb462;

  $bb466:
    assume {:verifier.code 0} true;
    assume !(out_$i610 == 1);
    goto $bb462;

  $bb487:
    assume !(out_$i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb515:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb509:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb501:
    assume !(out_$i647 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7436;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} out_vslice_dummy_var_153 := seq_read(out_$p648, in_$p71, out_$i649, in_$p73);
    goto corral_source_split_7435;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    out_$i649 := $load.i64($M.53, in_$p30);
    goto corral_source_split_7434;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    out_$p648 := $M.59;
    goto corral_source_split_7433;

  $bb500:
    assume out_$i647 == 1;
    goto corral_source_split_7432;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    out_$i647 := $eq.i32(out_$i646, 2);
    goto corral_source_split_7430;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    out_$i646 := $M.91;
    goto corral_source_split_7429;

  $bb498:
    assume out_$i645 == 1;
    goto corral_source_split_7428;

  $bb496:
    assume out_$i644 == 1;
    assume {:verifier.code 0} true;
    out_$i645 := $eq.i32(out_$i640, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb489:
    assume out_$i641 == 1;
    assume {:verifier.code 0} true;
    out_$i644 := $slt.i32(out_$i640, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  $bb488:
    assume {:verifier.code 0} true;
    out_$i641 := $slt.i32(out_$i640, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  corral_source_split_7414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1703} out_$i640 := __VERIFIER_nondet_int();
    call {:si_unique_call 1704} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i640);
    call {:si_unique_call 1705} {:cexpr "tmp___38"} boogie_si_record_i32(out_$i640);
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb486:
    assume out_$i639 == 1;
    goto corral_source_split_7414;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    out_$i639 := $ne.i32(out_$i638, 0);
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    out_$i638 := $M.91;
    goto corral_source_split_6529;

  $bb9:
    assume out_$i144 == 1;
    goto corral_source_split_6528;

  $bb8:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    out_$i144 := $slt.i32(out_$i140, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb505:
    assume !(out_$i652 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb507:
    assume !(out_$i657 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb508;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $M.80 := out_$i659;
    call {:si_unique_call 1711} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i659);
    goto corral_source_split_7450;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    out_$i659 := $add.i32(out_$i658, 1);
    goto corral_source_split_7449;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    out_$i658 := $M.80;
    goto corral_source_split_7448;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1710} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7447;

  $bb506:
    assume out_$i657 == 1;
    goto corral_source_split_7446;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    out_$i657 := $eq.i32(out_$i656, 0);
    goto corral_source_split_7444;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    out_$i656 := $M.110;
    goto corral_source_split_7443;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $M.110 := out_$i655;
    call {:si_unique_call 1709} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i655);
    goto corral_source_split_7442;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} out_$i655 := sg_proc_single_open_version(out_$p653, out_$p654);
    goto corral_source_split_7441;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    out_$p654 := $M.59;
    goto corral_source_split_7440;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    out_$p653 := $M.58;
    goto corral_source_split_7439;

  $bb504:
    assume out_$i652 == 1;
    goto corral_source_split_7438;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    out_$i652 := $eq.i32(out_$i651, 1);
    goto corral_source_split_7426;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    out_$i651 := $M.91;
    goto corral_source_split_7425;

  $bb497:
    assume !(out_$i644 == 1);
    goto corral_source_split_7424;

  $bb511:
    assume !(out_$i661 == 1);
    assume {:verifier.code 0} true;
    goto $bb512;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto $bb512;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $M.80 := out_$i666;
    call {:si_unique_call 1714} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i666);
    goto corral_source_split_7459;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    out_$i666 := $sub.i32(out_$i665, 1);
    goto corral_source_split_7458;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    out_$i665 := $M.80;
    goto corral_source_split_7457;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7456;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} out_vslice_dummy_var_154 := single_release(out_$p662, out_$p663);
    goto corral_source_split_7455;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    out_$p663 := $M.59;
    goto corral_source_split_7454;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    out_$p662 := $M.58;
    goto corral_source_split_7453;

  $bb510:
    assume out_$i661 == 1;
    goto corral_source_split_7452;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$i661 := $eq.i32(out_$i660, 2);
    goto corral_source_split_7418;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    out_$i660 := $M.91;
    goto corral_source_split_7417;

  $bb491:
    assume out_$i642 == 1;
    goto corral_source_split_7416;

  $bb490:
    assume !(out_$i641 == 1);
    assume {:verifier.code 0} true;
    out_$i642 := $slt.i32(out_$i640, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  $bb514:
    assume !(out_$i668 == 1);
    assume {:verifier.code 0} true;
    goto $bb515;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    goto $bb515;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1716} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7466;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} out_vslice_dummy_var_155 := seq_lseek(out_$p669, out_$i670, out_$i671);
    goto corral_source_split_7465;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    out_$i671 := $load.i32($M.53, in_$p31);
    goto corral_source_split_7464;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    out_$i670 := $load.i64($M.53, in_$p32);
    goto corral_source_split_7463;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$p669 := $M.59;
    goto corral_source_split_7462;

  $bb513:
    assume out_$i668 == 1;
    goto corral_source_split_7461;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    out_$i668 := $eq.i32(out_$i667, 2);
    goto corral_source_split_7422;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    out_$i667 := $M.91;
    goto corral_source_split_7421;

  $bb493:
    assume out_$i643 == 1;
    goto corral_source_split_7420;

  $bb492:
    assume !(out_$i642 == 1);
    assume {:verifier.code 0} true;
    out_$i643 := $eq.i32(out_$i640, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb493, $bb494;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} ldv_stop();
    goto corral_source_split_7468;

  $bb495:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb494:
    assume {:verifier.code 0} true;
    assume !(out_$i643 == 1);
    goto $bb495;

  $bb499:
    assume {:verifier.code 0} true;
    assume !(out_$i645 == 1);
    goto $bb495;

  $bb520:
    assume !(out_$i674 == 1);
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb542:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb562:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb560:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb548:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb534:
    assume !(out_$i682 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb540:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb539:
    assume !(out_$i693 == 1);
    assume {:verifier.code 0} true;
    goto $bb540;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb540;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.80 := out_$i695;
    call {:si_unique_call 1725} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i695);
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    out_$i695 := $add.i32(out_$i694, 1);
    goto corral_source_split_7510;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    out_$i694 := $M.80;
    goto corral_source_split_7509;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7508;

  $bb538:
    assume out_$i693 == 1;
    goto corral_source_split_7507;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb538, $bb539;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$i693 := $ne.i64(out_$i692, 0);
    goto corral_source_split_7505;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    out_$i692 := $p2i.ref.i64(out_$p691);
    goto corral_source_split_7504;

  $bb537:
    assume {:verifier.code 0} true;
    out_$p691 := $M.113;
    goto corral_source_split_7503;

  $bb536:
    assume !(out_$i688 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    goto $bb537;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $M.80 := out_$i690;
    call {:si_unique_call 1723} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i690);
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    out_$i690 := $add.i32(out_$i689, 1);
    goto corral_source_split_7500;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    out_$i689 := $M.80;
    goto corral_source_split_7499;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7498;

  $bb535:
    assume out_$i688 == 1;
    goto corral_source_split_7497;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb535, $bb536;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$i688 := $eq.i64(out_$i687, 0);
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    out_$i687 := $p2i.ref.i64(out_$p686);
    goto corral_source_split_7494;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    out_$p686 := $M.113;
    goto corral_source_split_7493;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $M.113 := out_$p685;
    goto corral_source_split_7492;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} out_$p685 := dev_seq_start(out_$p683, out_$p684);
    goto corral_source_split_7491;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    out_$p684 := $M.112;
    goto corral_source_split_7490;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    out_$p683 := $M.111;
    goto corral_source_split_7489;

  $bb533:
    assume out_$i682 == 1;
    goto corral_source_split_7488;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$i682 := $eq.i32(out_$i681, 1);
    goto corral_source_split_7486;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    out_$i681 := $M.92;
    goto corral_source_split_7485;

  $bb531:
    assume out_$i680 == 1;
    goto corral_source_split_7484;

  $bb529:
    assume out_$i679 == 1;
    assume {:verifier.code 0} true;
    out_$i680 := $eq.i32(out_$i675, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  $bb522:
    assume out_$i676 == 1;
    assume {:verifier.code 0} true;
    out_$i679 := $slt.i32(out_$i675, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb529, $bb530;

  $bb521:
    assume {:verifier.code 0} true;
    out_$i676 := $slt.i32(out_$i675, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  corral_source_split_7470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1718} out_$i675 := __VERIFIER_nondet_int();
    call {:si_unique_call 1719} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i675);
    call {:si_unique_call 1720} {:cexpr "tmp___39"} boogie_si_record_i32(out_$i675);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb519:
    assume out_$i674 == 1;
    goto corral_source_split_7470;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$i674 := $ne.i32(out_$i673, 0);
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$i673 := $M.92;
    goto corral_source_split_6533;

  $bb11:
    assume out_$i145 == 1;
    goto corral_source_split_6532;

  $bb10:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i140, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb547:
    assume !(out_$i703 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $M.80 := out_$i707;
    call {:si_unique_call 1731} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i707);
    goto corral_source_split_7532;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    out_$i707 := $sub.i32(out_$i706, 1);
    goto corral_source_split_7531;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    out_$i706 := $M.80;
    goto corral_source_split_7530;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1730} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7529;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} dev_seq_stop(out_$p704, out_$p705);
    goto corral_source_split_7528;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    out_$p705 := $M.114;
    goto corral_source_split_7527;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    out_$p704 := $M.111;
    goto corral_source_split_7526;

  $bb546:
    assume out_$i703 == 1;
    goto corral_source_split_7525;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    out_$i703 := $eq.i32(out_$i702, 2);
    goto corral_source_split_7523;

  $bb545:
    assume {:verifier.code 0} true;
    out_$i702 := $M.92;
    goto corral_source_split_7522;

  $bb544:
    assume !(out_$i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    goto $bb545;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $M.80 := out_$i701;
    call {:si_unique_call 1728} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i701);
    goto corral_source_split_7520;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    out_$i701 := $sub.i32(out_$i700, 1);
    goto corral_source_split_7519;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    out_$i700 := $M.80;
    goto corral_source_split_7518;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7517;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} dev_seq_stop(out_$p698, out_$p699);
    goto corral_source_split_7516;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    out_$p699 := $M.114;
    goto corral_source_split_7515;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    out_$p698 := $M.111;
    goto corral_source_split_7514;

  $bb543:
    assume out_$i697 == 1;
    goto corral_source_split_7513;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    out_$i697 := $eq.i32(out_$i696, 3);
    goto corral_source_split_7482;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    out_$i696 := $M.92;
    goto corral_source_split_7481;

  $bb530:
    assume !(out_$i679 == 1);
    goto corral_source_split_7480;

  $bb550:
    assume !(out_$i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7539;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} out_vslice_dummy_var_156 := sg_proc_seq_show_devstrs(out_$p710, out_$p712);
    goto corral_source_split_7538;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    out_$p712 := $bitcast.ref.ref(out_$p711);
    goto corral_source_split_7537;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    out_$p711 := $M.112;
    goto corral_source_split_7536;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    out_$p710 := $M.111;
    goto corral_source_split_7535;

  $bb549:
    assume out_$i709 == 1;
    goto corral_source_split_7534;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    out_$i709 := $eq.i32(out_$i708, 3);
    goto corral_source_split_7474;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    out_$i708 := $M.92;
    goto corral_source_split_7473;

  $bb524:
    assume out_$i677 == 1;
    goto corral_source_split_7472;

  $bb523:
    assume !(out_$i676 == 1);
    assume {:verifier.code 0} true;
    out_$i677 := $slt.i32(out_$i675, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  $bb553:
    assume !(out_$i715 == 1);
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb558:
    assume !(out_$i727 == 1);
    assume {:verifier.code 0} true;
    goto $bb559;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    goto $bb559;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $M.80 := out_$i729;
    call {:si_unique_call 1738} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i729);
    goto corral_source_split_7565;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    out_$i729 := $add.i32(out_$i728, 1);
    goto corral_source_split_7564;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    out_$i728 := $M.80;
    goto corral_source_split_7563;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7562;

  $bb557:
    assume out_$i727 == 1;
    goto corral_source_split_7561;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb557, $bb558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    out_$i727 := $ne.i64(out_$i726, 0);
    goto corral_source_split_7559;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    out_$i726 := $p2i.ref.i64(out_$p725);
    goto corral_source_split_7558;

  $bb556:
    assume {:verifier.code 0} true;
    out_$p725 := $M.115;
    goto corral_source_split_7557;

  $bb555:
    assume !(out_$i722 == 1);
    assume {:verifier.code 0} true;
    goto $bb556;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    goto $bb556;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $M.80 := out_$i724;
    call {:si_unique_call 1736} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i724);
    goto corral_source_split_7555;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    out_$i724 := $add.i32(out_$i723, 1);
    goto corral_source_split_7554;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    out_$i723 := $M.80;
    goto corral_source_split_7553;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7552;

  $bb554:
    assume out_$i722 == 1;
    goto corral_source_split_7551;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb554, $bb555;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    out_$i722 := $eq.i64(out_$i721, 0);
    goto corral_source_split_7549;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    out_$i721 := $p2i.ref.i64(out_$p720);
    goto corral_source_split_7548;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    out_$p720 := $M.115;
    goto corral_source_split_7547;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $M.115 := out_$p719;
    goto corral_source_split_7546;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} out_$p719 := dev_seq_next(out_$p716, out_$p717, out_$p718);
    goto corral_source_split_7545;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    out_$p718 := $M.112;
    goto corral_source_split_7544;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    out_$p717 := $M.114;
    goto corral_source_split_7543;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    out_$p716 := $M.111;
    goto corral_source_split_7542;

  $bb552:
    assume out_$i715 == 1;
    goto corral_source_split_7541;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552, $bb553;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    out_$i715 := $eq.i32(out_$i714, 3);
    goto corral_source_split_7478;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    out_$i714 := $M.92;
    goto corral_source_split_7477;

  $bb526:
    assume out_$i678 == 1;
    goto corral_source_split_7476;

  $bb525:
    assume !(out_$i677 == 1);
    assume {:verifier.code 0} true;
    out_$i678 := $eq.i32(out_$i675, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb526, $bb527;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} ldv_stop();
    goto corral_source_split_7567;

  $bb528:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb527:
    assume {:verifier.code 0} true;
    assume !(out_$i678 == 1);
    goto $bb528;

  $bb532:
    assume {:verifier.code 0} true;
    assume !(out_$i680 == 1);
    goto $bb528;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} ldv_stop();
    goto corral_source_split_7569;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i145 == 1);
    goto $bb13;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i157 == 1);
    goto $bb13;

  $bb79_dummy:
    call {:si_unique_call 1} out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i172, out_$i173, out_$p174, out_$i175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i182, out_$i183, out_$p184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$p214, out_$p215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i232, out_$i233, out_$i234, out_$p235, out_$p236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$p242, out_$p243, out_$i245, out_$i246, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i301, out_$i302, out_$p303, out_$i304, out_$i306, out_$i307, out_$p308, out_$i309, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i325, out_$i326, out_$i327, out_$p328, out_$i329, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i337, out_$i338, out_$p339, out_$p340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$p348, out_$i350, out_$i351, out_$p352, out_$i354, out_$i355, out_$p356, out_$p357, out_$i359, out_$i360, out_$i361, out_$i362, out_$p363, out_$i364, out_$i365, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i386, out_$i387, out_$p388, out_$p389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$p397, out_$p398, out_$i400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$i423, out_$i424, out_$i425, out_$p426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$p433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$p439, out_$p440, out_$i441, out_$i442, out_$i443, out_$i444, out_$p445, out_$p446, out_$p447, out_$i449, out_$i450, out_$p451, out_$p452, out_$p453, out_$p454, out_$p455, out_$i456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$p475, out_$i476, out_$i478, out_$i479, out_$p480, out_$p481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$p489, out_$p490, out_$i492, out_$i493, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$p511, out_$i512, out_$i514, out_$i515, out_$p516, out_$i517, out_$i519, out_$i520, out_$p521, out_$i522, out_$i524, out_$i525, out_$p526, out_$p527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$p535, out_$p536, out_$i538, out_$i539, out_$i540, out_$i541, out_$p542, out_$i543, out_$i544, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$i551, out_$i553, out_$i554, out_$i555, out_$i556, out_$i557, out_$i558, out_$i559, out_$i560, out_$p561, out_$p562, out_$i563, out_$i564, out_$p565, out_$p566, out_$i568, out_$i569, out_$i570, out_$i571, out_$i572, out_$i573, out_$i574, out_$i575, out_$i576, out_$i577, out_$p578, out_$i579, out_$i581, out_$i582, out_$p583, out_$p584, out_$i585, out_$i586, out_$i587, out_$i588, out_$i589, out_$i590, out_$i591, out_$p592, out_$p593, out_$i595, out_$i596, out_$i597, out_$i598, out_$p599, out_$i600, out_$i601, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$i612, out_$p613, out_$i614, out_$i616, out_$i617, out_$p618, out_$p619, out_$i620, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i626, out_$p627, out_$p628, out_$i630, out_$i631, out_$i632, out_$i633, out_$p634, out_$i635, out_$i636, out_$i638, out_$i639, out_$i640, out_$i641, out_$i642, out_$i643, out_$i644, out_$i645, out_$i646, out_$i647, out_$p648, out_$i649, out_$i651, out_$i652, out_$p653, out_$p654, out_$i655, out_$i656, out_$i657, out_$i658, out_$i659, out_$i660, out_$i661, out_$p662, out_$p663, out_$i665, out_$i666, out_$i667, out_$i668, out_$p669, out_$i670, out_$i671, out_$i673, out_$i674, out_$i675, out_$i676, out_$i677, out_$i678, out_$i679, out_$i680, out_$i681, out_$i682, out_$p683, out_$p684, out_$p685, out_$p686, out_$i687, out_$i688, out_$i689, out_$i690, out_$p691, out_$i692, out_$i693, out_$i694, out_$i695, out_$i696, out_$i697, out_$p698, out_$p699, out_$i700, out_$i701, out_$i702, out_$i703, out_$p704, out_$p705, out_$i706, out_$i707, out_$i708, out_$i709, out_$p710, out_$p711, out_$p712, out_$i714, out_$i715, out_$p716, out_$p717, out_$p718, out_$p719, out_$p720, out_$i721, out_$i722, out_$i723, out_$i724, out_$p725, out_$i726, out_$i727, out_$i728, out_$i729, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p35, in_$p36, in_$p38, in_$p40, in_$p41, in_$p42, in_$p44, in_$p46, in_$p48, in_$p50, in_$p51, in_$p53, in_$p54, in_$p56, in_$p57, in_$p58, in_$p60, in_$p62, in_$p64, in_$p65, in_$p67, in_$p69, in_$p70, in_$p71, in_$p73, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i172, out_$i173, out_$p174, out_$i175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i182, out_$i183, out_$p184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$p214, out_$p215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i232, out_$i233, out_$i234, out_$p235, out_$p236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$p242, out_$p243, out_$i245, out_$i246, out_$p247, out_$p248, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i301, out_$i302, out_$p303, out_$i304, out_$i306, out_$i307, out_$p308, out_$i309, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i325, out_$i326, out_$i327, out_$p328, out_$i329, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i337, out_$i338, out_$p339, out_$p340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$p348, out_$i350, out_$i351, out_$p352, out_$i354, out_$i355, out_$p356, out_$p357, out_$i359, out_$i360, out_$i361, out_$i362, out_$p363, out_$i364, out_$i365, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i386, out_$i387, out_$p388, out_$p389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$p397, out_$p398, out_$i400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$i423, out_$i424, out_$i425, out_$p426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$p433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$p439, out_$p440, out_$i441, out_$i442, out_$i443, out_$i444, out_$p445, out_$p446, out_$p447, out_$i449, out_$i450, out_$p451, out_$p452, out_$p453, out_$p454, out_$p455, out_$i456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$p475, out_$i476, out_$i478, out_$i479, out_$p480, out_$p481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$p489, out_$p490, out_$i492, out_$i493, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$p511, out_$i512, out_$i514, out_$i515, out_$p516, out_$i517, out_$i519, out_$i520, out_$p521, out_$i522, out_$i524, out_$i525, out_$p526, out_$p527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$p535, out_$p536, out_$i538, out_$i539, out_$i540, out_$i541, out_$p542, out_$i543, out_$i544, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$i551, out_$i553, out_$i554, out_$i555, out_$i556, out_$i557, out_$i558, out_$i559, out_$i560, out_$p561, out_$p562, out_$i563, out_$i564, out_$p565, out_$p566, out_$i568, out_$i569, out_$i570, out_$i571, out_$i572, out_$i573, out_$i574, out_$i575, out_$i576, out_$i577, out_$p578, out_$i579, out_$i581, out_$i582, out_$p583, out_$p584, out_$i585, out_$i586, out_$i587, out_$i588, out_$i589, out_$i590, out_$i591, out_$p592, out_$p593, out_$i595, out_$i596, out_$i597, out_$i598, out_$p599, out_$i600, out_$i601, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$i612, out_$p613, out_$i614, out_$i616, out_$i617, out_$p618, out_$p619, out_$i620, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i626, out_$p627, out_$p628, out_$i630, out_$i631, out_$i632, out_$i633, out_$p634, out_$i635, out_$i636, out_$i638, out_$i639, out_$i640, out_$i641, out_$i642, out_$i643, out_$i644, out_$i645, out_$i646, out_$i647, out_$p648, out_$i649, out_$i651, out_$i652, out_$p653, out_$p654, out_$i655, out_$i656, out_$i657, out_$i658, out_$i659, out_$i660, out_$i661, out_$p662, out_$p663, out_$i665, out_$i666, out_$i667, out_$i668, out_$p669, out_$i670, out_$i671, out_$i673, out_$i674, out_$i675, out_$i676, out_$i677, out_$i678, out_$i679, out_$i680, out_$i681, out_$i682, out_$p683, out_$p684, out_$p685, out_$p686, out_$i687, out_$i688, out_$i689, out_$i690, out_$p691, out_$i692, out_$i693, out_$i694, out_$i695, out_$i696, out_$i697, out_$p698, out_$p699, out_$i700, out_$i701, out_$i702, out_$i703, out_$p704, out_$p705, out_$i706, out_$i707, out_$i708, out_$i709, out_$p710, out_$p711, out_$p712, out_$i714, out_$i715, out_$p716, out_$p717, out_$p718, out_$p719, out_$p720, out_$i721, out_$i722, out_$i723, out_$i724, out_$p725, out_$i726, out_$i727, out_$i728, out_$i729, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p62: ref, in_$p64: ref, in_$p65: ref, in_$p67: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$i140: i32, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i1, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i170: i64, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i64, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i64, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$p194: ref, in_$i196: i32, in_$i197: i32, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i201: i64, in_$i202: i32, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i207: i1, in_$i208: i1, in_$i209: i1, in_$i210: i1, in_$i211: i1, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$i218: i64, in_$i219: i1, in_$i220: i32, in_$i221: i32, in_$p222: ref, in_$i223: i64, in_$i224: i1, in_$i225: i32, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$p230: ref, in_$i231: i32, in_$i232: i32, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$p236: ref, in_$i237: i32, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$p242: ref, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i252: i64, in_$i253: i1, in_$i254: i32, in_$i255: i32, in_$p256: ref, in_$i257: i64, in_$i258: i1, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i32, in_$i279: i1, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i1, in_$i294: i1, in_$i295: i1, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i299: i64, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i304: i64, in_$i306: i32, in_$i307: i1, in_$p308: ref, in_$i309: i64, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$i315: i64, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i325: i32, in_$i326: i1, in_$i327: i32, in_$p328: ref, in_$i329: i32, in_$i331: i32, in_$i332: i1, in_$i333: i32, in_$p334: ref, in_$i335: i32, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$p340: ref, in_$i341: i32, in_$i342: i32, in_$i343: i1, in_$i344: i32, in_$i345: i32, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i350: i32, in_$i351: i1, in_$p352: ref, in_$i354: i32, in_$i355: i1, in_$p356: ref, in_$p357: ref, in_$i359: i32, in_$i360: i32, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i364: i64, in_$i365: i32, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i370: i32, in_$i371: i64, in_$i373: i32, in_$i374: i1, in_$i375: i32, in_$i376: i1, in_$i377: i1, in_$i378: i1, in_$i379: i1, in_$i380: i1, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i64, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$p389: ref, in_$i390: i32, in_$i391: i32, in_$i392: i1, in_$i393: i32, in_$i394: i32, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_$p398: ref, in_$i400: i32, in_$i401: i32, in_$i402: i32, in_$i403: i1, in_$p404: ref, in_$i405: i64, in_$i406: i32, in_$i408: i32, in_$i409: i1, in_$i410: i32, in_$i411: i1, in_$i412: i1, in_$i413: i1, in_$i414: i1, in_$i415: i1, in_$i416: i32, in_$i417: i1, in_$p418: ref, in_$p419: ref, in_$p420: ref, in_$p421: ref, in_$i422: i64, in_$i423: i1, in_$i424: i32, in_$i425: i32, in_$p426: ref, in_$i427: i64, in_$i428: i1, in_$i429: i32, in_$i430: i32, in_$i431: i32, in_$i432: i1, in_$p433: ref, in_$p434: ref, in_$i435: i32, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$p440: ref, in_$i441: i32, in_$i442: i32, in_$i443: i32, in_$i444: i1, in_$p445: ref, in_$p446: ref, in_$p447: ref, in_$i449: i32, in_$i450: i1, in_$p451: ref, in_$p452: ref, in_$p453: ref, in_$p454: ref, in_$p455: ref, in_$i456: i64, in_$i457: i1, in_$i458: i32, in_$i459: i32, in_$p460: ref, in_$i461: i64, in_$i462: i1, in_$i463: i32, in_$i464: i32, in_$i465: i32, in_$i466: i1, in_$i467: i32, in_$i468: i1, in_$i469: i1, in_$i470: i1, in_$i471: i1, in_$i472: i1, in_$i473: i32, in_$i474: i1, in_$p475: ref, in_$i476: i64, in_$i478: i32, in_$i479: i1, in_$p480: ref, in_$p481: ref, in_$i482: i32, in_$i483: i32, in_$i484: i1, in_$i485: i32, in_$i486: i32, in_$i487: i32, in_$i488: i1, in_$p489: ref, in_$p490: ref, in_$i492: i32, in_$i493: i32, in_$i494: i32, in_$i495: i1, in_$p496: ref, in_$i497: i64, in_$i498: i32, in_$i500: i32, in_$i501: i1, in_$i502: i32, in_$i503: i1, in_$i504: i1, in_$i505: i1, in_$i506: i1, in_$i507: i1, in_$i508: i1, in_$i509: i32, in_$i510: i1, in_$p511: ref, in_$i512: i64, in_$i514: i32, in_$i515: i1, in_$p516: ref, in_$i517: i64, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i522: i64, in_$i524: i32, in_$i525: i1, in_$p526: ref, in_$p527: ref, in_$i528: i32, in_$i529: i32, in_$i530: i1, in_$i531: i32, in_$i532: i32, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$p536: ref, in_$i538: i32, in_$i539: i32, in_$i540: i32, in_$i541: i1, in_$p542: ref, in_$i543: i64, in_$i544: i32, in_$i546: i32, in_$i547: i1, in_$i548: i32, in_$i549: i1, in_$i550: i32, in_$i551: i1, in_$i553: i32, in_$i554: i1, in_$i555: i32, in_$i556: i1, in_$i557: i1, in_$i558: i1, in_$i559: i32, in_$i560: i1, in_$p561: ref, in_$p562: ref, in_$i563: i32, in_$i564: i1, in_$p565: ref, in_$p566: ref, in_$i568: i32, in_$i569: i1, in_$i570: i32, in_$i571: i1, in_$i572: i1, in_$i573: i1, in_$i574: i1, in_$i575: i1, in_$i576: i32, in_$i577: i1, in_$p578: ref, in_$i579: i64, in_$i581: i32, in_$i582: i1, in_$p583: ref, in_$p584: ref, in_$i585: i32, in_$i586: i32, in_$i587: i1, in_$i588: i32, in_$i589: i32, in_$i590: i32, in_$i591: i1, in_$p592: ref, in_$p593: ref, in_$i595: i32, in_$i596: i32, in_$i597: i32, in_$i598: i1, in_$p599: ref, in_$i600: i64, in_$i601: i32, in_$i603: i32, in_$i604: i1, in_$i605: i32, in_$i606: i1, in_$i607: i1, in_$i608: i1, in_$i609: i1, in_$i610: i1, in_$i611: i32, in_$i612: i1, in_$p613: ref, in_$i614: i64, in_$i616: i32, in_$i617: i1, in_$p618: ref, in_$p619: ref, in_$i620: i32, in_$i621: i32, in_$i622: i1, in_$i623: i32, in_$i624: i32, in_$i625: i32, in_$i626: i1, in_$p627: ref, in_$p628: ref, in_$i630: i32, in_$i631: i32, in_$i632: i32, in_$i633: i1, in_$p634: ref, in_$i635: i64, in_$i636: i32, in_$i638: i32, in_$i639: i1, in_$i640: i32, in_$i641: i1, in_$i642: i1, in_$i643: i1, in_$i644: i1, in_$i645: i1, in_$i646: i32, in_$i647: i1, in_$p648: ref, in_$i649: i64, in_$i651: i32, in_$i652: i1, in_$p653: ref, in_$p654: ref, in_$i655: i32, in_$i656: i32, in_$i657: i1, in_$i658: i32, in_$i659: i32, in_$i660: i32, in_$i661: i1, in_$p662: ref, in_$p663: ref, in_$i665: i32, in_$i666: i32, in_$i667: i32, in_$i668: i1, in_$p669: ref, in_$i670: i64, in_$i671: i32, in_$i673: i32, in_$i674: i1, in_$i675: i32, in_$i676: i1, in_$i677: i1, in_$i678: i1, in_$i679: i1, in_$i680: i1, in_$i681: i32, in_$i682: i1, in_$p683: ref, in_$p684: ref, in_$p685: ref, in_$p686: ref, in_$i687: i64, in_$i688: i1, in_$i689: i32, in_$i690: i32, in_$p691: ref, in_$i692: i64, in_$i693: i1, in_$i694: i32, in_$i695: i32, in_$i696: i32, in_$i697: i1, in_$p698: ref, in_$p699: ref, in_$i700: i32, in_$i701: i32, in_$i702: i32, in_$i703: i1, in_$p704: ref, in_$p705: ref, in_$i706: i32, in_$i707: i32, in_$i708: i32, in_$i709: i1, in_$p710: ref, in_$p711: ref, in_$p712: ref, in_$i714: i32, in_$i715: i1, in_$p716: ref, in_$p717: ref, in_$p718: ref, in_$p719: ref, in_$p720: ref, in_$i721: i64, in_$i722: i1, in_$i723: i32, in_$i724: i32, in_$p725: ref, in_$i726: i64, in_$i727: i1, in_$i728: i32, in_$i729: i32, in_vslice_dummy_var_114: i64, in_vslice_dummy_var_115: i64, in_vslice_dummy_var_116: i64, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i64, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i64, in_vslice_dummy_var_121: i64, in_vslice_dummy_var_122: i64, in_vslice_dummy_var_123: i64, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i64, in_vslice_dummy_var_132: i64, in_vslice_dummy_var_133: i64, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i64, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i64, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i64, in_vslice_dummy_var_140: i64, in_vslice_dummy_var_141: i64, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i64, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i64, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i64, in_vslice_dummy_var_150: i64, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i64, in_vslice_dummy_var_153: i64, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i64, in_vslice_dummy_var_156: i32) returns (out_$i140: i32, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i1, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i170: i64, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i64, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i64, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$p194: ref, out_$i196: i32, out_$i197: i32, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i201: i64, out_$i202: i32, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i207: i1, out_$i208: i1, out_$i209: i1, out_$i210: i1, out_$i211: i1, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$i218: i64, out_$i219: i1, out_$i220: i32, out_$i221: i32, out_$p222: ref, out_$i223: i64, out_$i224: i1, out_$i225: i32, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$p230: ref, out_$i231: i32, out_$i232: i32, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$p236: ref, out_$i237: i32, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$p242: ref, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i252: i64, out_$i253: i1, out_$i254: i32, out_$i255: i32, out_$p256: ref, out_$i257: i64, out_$i258: i1, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i32, out_$i279: i1, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i1, out_$i294: i1, out_$i295: i1, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i299: i64, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i304: i64, out_$i306: i32, out_$i307: i1, out_$p308: ref, out_$i309: i64, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$i315: i64, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i325: i32, out_$i326: i1, out_$i327: i32, out_$p328: ref, out_$i329: i32, out_$i331: i32, out_$i332: i1, out_$i333: i32, out_$p334: ref, out_$i335: i32, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$p340: ref, out_$i341: i32, out_$i342: i32, out_$i343: i1, out_$i344: i32, out_$i345: i32, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i350: i32, out_$i351: i1, out_$p352: ref, out_$i354: i32, out_$i355: i1, out_$p356: ref, out_$p357: ref, out_$i359: i32, out_$i360: i32, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i364: i64, out_$i365: i32, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i370: i32, out_$i371: i64, out_$i373: i32, out_$i374: i1, out_$i375: i32, out_$i376: i1, out_$i377: i1, out_$i378: i1, out_$i379: i1, out_$i380: i1, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i64, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$p389: ref, out_$i390: i32, out_$i391: i32, out_$i392: i1, out_$i393: i32, out_$i394: i32, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_$p398: ref, out_$i400: i32, out_$i401: i32, out_$i402: i32, out_$i403: i1, out_$p404: ref, out_$i405: i64, out_$i406: i32, out_$i408: i32, out_$i409: i1, out_$i410: i32, out_$i411: i1, out_$i412: i1, out_$i413: i1, out_$i414: i1, out_$i415: i1, out_$i416: i32, out_$i417: i1, out_$p418: ref, out_$p419: ref, out_$p420: ref, out_$p421: ref, out_$i422: i64, out_$i423: i1, out_$i424: i32, out_$i425: i32, out_$p426: ref, out_$i427: i64, out_$i428: i1, out_$i429: i32, out_$i430: i32, out_$i431: i32, out_$i432: i1, out_$p433: ref, out_$p434: ref, out_$i435: i32, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$p440: ref, out_$i441: i32, out_$i442: i32, out_$i443: i32, out_$i444: i1, out_$p445: ref, out_$p446: ref, out_$p447: ref, out_$i449: i32, out_$i450: i1, out_$p451: ref, out_$p452: ref, out_$p453: ref, out_$p454: ref, out_$p455: ref, out_$i456: i64, out_$i457: i1, out_$i458: i32, out_$i459: i32, out_$p460: ref, out_$i461: i64, out_$i462: i1, out_$i463: i32, out_$i464: i32, out_$i465: i32, out_$i466: i1, out_$i467: i32, out_$i468: i1, out_$i469: i1, out_$i470: i1, out_$i471: i1, out_$i472: i1, out_$i473: i32, out_$i474: i1, out_$p475: ref, out_$i476: i64, out_$i478: i32, out_$i479: i1, out_$p480: ref, out_$p481: ref, out_$i482: i32, out_$i483: i32, out_$i484: i1, out_$i485: i32, out_$i486: i32, out_$i487: i32, out_$i488: i1, out_$p489: ref, out_$p490: ref, out_$i492: i32, out_$i493: i32, out_$i494: i32, out_$i495: i1, out_$p496: ref, out_$i497: i64, out_$i498: i32, out_$i500: i32, out_$i501: i1, out_$i502: i32, out_$i503: i1, out_$i504: i1, out_$i505: i1, out_$i506: i1, out_$i507: i1, out_$i508: i1, out_$i509: i32, out_$i510: i1, out_$p511: ref, out_$i512: i64, out_$i514: i32, out_$i515: i1, out_$p516: ref, out_$i517: i64, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i522: i64, out_$i524: i32, out_$i525: i1, out_$p526: ref, out_$p527: ref, out_$i528: i32, out_$i529: i32, out_$i530: i1, out_$i531: i32, out_$i532: i32, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$p536: ref, out_$i538: i32, out_$i539: i32, out_$i540: i32, out_$i541: i1, out_$p542: ref, out_$i543: i64, out_$i544: i32, out_$i546: i32, out_$i547: i1, out_$i548: i32, out_$i549: i1, out_$i550: i32, out_$i551: i1, out_$i553: i32, out_$i554: i1, out_$i555: i32, out_$i556: i1, out_$i557: i1, out_$i558: i1, out_$i559: i32, out_$i560: i1, out_$p561: ref, out_$p562: ref, out_$i563: i32, out_$i564: i1, out_$p565: ref, out_$p566: ref, out_$i568: i32, out_$i569: i1, out_$i570: i32, out_$i571: i1, out_$i572: i1, out_$i573: i1, out_$i574: i1, out_$i575: i1, out_$i576: i32, out_$i577: i1, out_$p578: ref, out_$i579: i64, out_$i581: i32, out_$i582: i1, out_$p583: ref, out_$p584: ref, out_$i585: i32, out_$i586: i32, out_$i587: i1, out_$i588: i32, out_$i589: i32, out_$i590: i32, out_$i591: i1, out_$p592: ref, out_$p593: ref, out_$i595: i32, out_$i596: i32, out_$i597: i32, out_$i598: i1, out_$p599: ref, out_$i600: i64, out_$i601: i32, out_$i603: i32, out_$i604: i1, out_$i605: i32, out_$i606: i1, out_$i607: i1, out_$i608: i1, out_$i609: i1, out_$i610: i1, out_$i611: i32, out_$i612: i1, out_$p613: ref, out_$i614: i64, out_$i616: i32, out_$i617: i1, out_$p618: ref, out_$p619: ref, out_$i620: i32, out_$i621: i32, out_$i622: i1, out_$i623: i32, out_$i624: i32, out_$i625: i32, out_$i626: i1, out_$p627: ref, out_$p628: ref, out_$i630: i32, out_$i631: i32, out_$i632: i32, out_$i633: i1, out_$p634: ref, out_$i635: i64, out_$i636: i32, out_$i638: i32, out_$i639: i1, out_$i640: i32, out_$i641: i1, out_$i642: i1, out_$i643: i1, out_$i644: i1, out_$i645: i1, out_$i646: i32, out_$i647: i1, out_$p648: ref, out_$i649: i64, out_$i651: i32, out_$i652: i1, out_$p653: ref, out_$p654: ref, out_$i655: i32, out_$i656: i32, out_$i657: i1, out_$i658: i32, out_$i659: i32, out_$i660: i32, out_$i661: i1, out_$p662: ref, out_$p663: ref, out_$i665: i32, out_$i666: i32, out_$i667: i32, out_$i668: i1, out_$p669: ref, out_$i670: i64, out_$i671: i32, out_$i673: i32, out_$i674: i1, out_$i675: i32, out_$i676: i1, out_$i677: i1, out_$i678: i1, out_$i679: i1, out_$i680: i1, out_$i681: i32, out_$i682: i1, out_$p683: ref, out_$p684: ref, out_$p685: ref, out_$p686: ref, out_$i687: i64, out_$i688: i1, out_$i689: i32, out_$i690: i32, out_$p691: ref, out_$i692: i64, out_$i693: i1, out_$i694: i32, out_$i695: i32, out_$i696: i32, out_$i697: i1, out_$p698: ref, out_$p699: ref, out_$i700: i32, out_$i701: i32, out_$i702: i32, out_$i703: i1, out_$p704: ref, out_$p705: ref, out_$i706: i32, out_$i707: i32, out_$i708: i32, out_$i709: i1, out_$p710: ref, out_$p711: ref, out_$p712: ref, out_$i714: i32, out_$i715: i1, out_$p716: ref, out_$p717: ref, out_$p718: ref, out_$p719: ref, out_$p720: ref, out_$i721: i64, out_$i722: i1, out_$i723: i32, out_$i724: i32, out_$p725: ref, out_$i726: i64, out_$i727: i1, out_$i728: i32, out_$i729: i32, out_vslice_dummy_var_114: i64, out_vslice_dummy_var_115: i64, out_vslice_dummy_var_116: i64, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i64, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i64, out_vslice_dummy_var_121: i64, out_vslice_dummy_var_122: i64, out_vslice_dummy_var_123: i64, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i64, out_vslice_dummy_var_132: i64, out_vslice_dummy_var_133: i64, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i64, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i64, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i64, out_vslice_dummy_var_140: i64, out_vslice_dummy_var_141: i64, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i64, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i64, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i64, out_vslice_dummy_var_150: i64, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i64, out_vslice_dummy_var_153: i64, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i64, out_vslice_dummy_var_156: i32);
  modifies $M.77, $M.0, $M.1, $CurrAddr, $M.80, $M.93, $M.3, $M.95, $M.2, $M.19, $M.97, $M.18, $M.24, $M.26, $M.28, $M.30, $M.32, assertsPassed, $M.25, $M.66, $M.67, $M.68, $M.69, $M.56, $M.57, $M.83, $M.71, $M.72, $M.60, $M.61, $M.85, $M.73, $M.74, $M.86, $M.54, $M.55, $M.88, $M.87, $M.62, $M.63, $M.89, $M.75, $M.76, $M.90, $M.58, $M.59, $M.91, $M.64, $M.65, $M.82, $M.81, $M.98, $M.34, $M.35, $M.33, $M.8, $M.7, $M.116, $M.22, $M.23, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.51, $M.99, $M.100, $M.4, $M.84, $M.103, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.92, $M.113, $M.115;



implementation {:SIextraRecBound 7} sg_proc_init_loop_$bb5(in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i32, in_$i15: i16, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i16, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i24: i32, in_$i25: i1, in_$i5: i32, in_vslice_dummy_var_158: ref) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i32, out_$i15: i16, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i16, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i24: i32, out_$i25: i1, out_$i5: i32, out_vslice_dummy_var_158: ref)
{

  entry:
    out_$i6, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i24, out_$i25, out_$i5, out_vslice_dummy_var_158 := in_$i6, in_$p8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$i24, in_$i25, in_$i5, in_vslice_dummy_var_158;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7675;

  $bb7:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i24;
    goto $bb7_dummy;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 7);
    goto corral_source_split_7692;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1786} {:cexpr "k"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_7691;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} out_vslice_dummy_var_158 := proc_create(out_$p17, out_$i19, out_$p20, out_$p22);
    goto corral_source_split_7690;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.117, out_$p21);
    goto corral_source_split_7689;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    out_$p20 := $M.116;
    out_$p21 := $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(out_$i6, 16)), $mul.ref(8, 1));
    goto corral_source_split_7688;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i32.i16(out_$i18);
    goto corral_source_split_7687;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(out_$i15);
    goto corral_source_split_7686;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.119, out_$p16);
    goto corral_source_split_7685;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i32.i16(out_$i14);
    call {:si_unique_call 1784} {:cexpr "mask"} boogie_si_record_i16(out_$i15);
    out_$p16 := $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(out_$i6, 16)), $mul.ref(0, 1));
    goto corral_source_split_7684;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    out_$i14 := (if out_$i13 == 1 then 420 else 292);
    goto corral_source_split_7683;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, 0);
    goto corral_source_split_7682;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_7681;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.118, out_$p10);
    goto corral_source_split_7680;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 224)), $mul.ref(24, 1));
    goto corral_source_split_7679;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.117, out_$p8);
    goto corral_source_split_7678;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    out_$p8 := $add.ref($add.ref($add.ref(sg_proc_leaf_arr, $mul.ref(0, 112)), $mul.ref(out_$i6, 16)), $mul.ref(8, 1));
    goto corral_source_split_7677;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i6, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i24, out_$i25, out_$i5, out_vslice_dummy_var_158 := sg_proc_init_loop_$bb5(out_$i6, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i24, out_$i25, out_$i5, out_vslice_dummy_var_158);
    return;

  exit:
    return;
}



procedure sg_proc_init_loop_$bb5(in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i32, in_$i15: i16, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i16, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i24: i32, in_$i25: i1, in_$i5: i32, in_vslice_dummy_var_158: ref) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i32, out_$i15: i16, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i16, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i24: i32, out_$i25: i1, out_$i5: i32, out_vslice_dummy_var_158: ref);


