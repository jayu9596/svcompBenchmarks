var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: [ref]i32;

var $M.3: i32;

var $M.4: i32;

var $M.5: i32;

var $M.6: i32;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.10: i32;

var $M.11: i32;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]i24;

var $M.17: [ref]i8;

var $M.18: i32;

var $M.19: ref;

var $M.20: ref;

var $M.21: ref;

var $M.22: ref;

var $M.23: i8;

var $M.24: [ref]ref;

var $M.25: [ref]i64;

var $M.26: ref;

var $M.27: ref;

var $M.28: i32;

var $M.29: i32;

var $M.30: ref;

var $M.31: i32;

var $M.32: i32;

var $M.33: ref;

var $M.34: i32;

var $M.35: i32;

var $M.36: ref;

var $M.37: i32;

var $M.38: i32;

var $M.39: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: [ref]i8;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.65: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 445420);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 3084);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 4112);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 5140);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 6168);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 7196);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 8224);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 9252);

const pch_udc_ops_group0: ref;

axiom pch_udc_ops_group0 == $sub.ref(0, 10284);

const pch_udc_ops_group1: ref;

axiom pch_udc_ops_group1 == $sub.ref(0, 11316);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 12344);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 13376);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 14404);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 15436);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 16464);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 17496);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 18524);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 19556);

const pch_udc_ep_ops_group0: ref;

axiom pch_udc_ep_ops_group0 == $sub.ref(0, 20588);

const pch_udc_ep_ops_group1: ref;

axiom pch_udc_ep_ops_group1 == $sub.ref(0, 21620);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 22648);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 23676);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 24704);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 25732);

const pch_udc_driver_group0: ref;

axiom pch_udc_driver_group0 == $sub.ref(0, 26764);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 27796);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 28828);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 29860);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 30892);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 31920);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 32948);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 33976);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 35004);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 36032);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 37060);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 38088);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 39116);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 40144);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 41172);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 42200);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 43228);

const __mod_pci__pch_udc_pcidev_id_device_table: ref;

axiom __mod_pci__pch_udc_pcidev_id_device_table == $sub.ref(0, 44284);

const pch_udc_ops: ref;

axiom pch_udc_ops == $sub.ref(0, 45388);

const vbus_gpio_port: ref;

axiom vbus_gpio_port == $sub.ref(0, 46416);

const pch_udc_ep_ops: ref;

axiom pch_udc_ep_ops == $sub.ref(0, 47520);

const {:count 4} pch_udc_pcidev_id: ref;

axiom pch_udc_pcidev_id == $sub.ref(0, 48672);

const pch_udc_driver: ref;

axiom pch_udc_driver == $sub.ref(0, 50008);

const udc_stall_spinlock: ref;

axiom udc_stall_spinlock == $sub.ref(0, 51104);

const {:count 6} ep0_string: ref;

axiom ep0_string == $sub.ref(0, 52134);

const speed_fs: ref;

axiom speed_fs == $sub.ref(0, 53159);

const {:count 19} .str.27: ref;

axiom .str.27 == $sub.ref(0, 54202);

const .str: ref;

axiom .str == $sub.ref(0, 55234);

const {:count 30} .str.93: ref;

axiom .str.93 == $sub.ref(0, 56288);

const {:count 15} .str.94: ref;

axiom .str.94 == $sub.ref(0, 57327);

const {:count 37} .str.89: ref;

axiom .str.89 == $sub.ref(0, 58388);

const {:count 16} .str.90: ref;

axiom .str.90 == $sub.ref(0, 59428);

const {:count 34} .str.91: ref;

axiom .str.91 == $sub.ref(0, 60486);

const {:count 15} .str.92: ref;

axiom .str.92 == $sub.ref(0, 61525);

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 41} .str.13: ref;

axiom .str.13 == $sub.ref(0, 62590);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 46} .str.30: ref;

axiom .str.30 == $sub.ref(0, 63660);

const {:count 14} .str.31: ref;

axiom .str.31 == $sub.ref(0, 64698);

const {:count 40} .str.32: ref;

axiom .str.32 == $sub.ref(0, 65762);

const {:count 29} .str.33: ref;

axiom .str.33 == $sub.ref(0, 66815);

const {:count 46} .str.34: ref;

axiom .str.34 == $sub.ref(0, 67885);

const {:count 17} .str.35: ref;

axiom .str.35 == $sub.ref(0, 68926);

const {:count 26} .str.36: ref;

axiom .str.36 == $sub.ref(0, 69976);

const {:count 21} .str.37: ref;

axiom .str.37 == $sub.ref(0, 71021);

const {:count 14} .str.82: ref;

axiom .str.82 == $sub.ref(0, 72059);

const {:count 33} .str.83: ref;

axiom .str.83 == $sub.ref(0, 73116);

const {:count 15} .str.84: ref;

axiom .str.84 == $sub.ref(0, 74155);

const {:count 15} .str.85: ref;

axiom .str.85 == $sub.ref(0, 75194);

const {:count 34} .str.86: ref;

axiom .str.86 == $sub.ref(0, 76252);

const {:count 41} .str.87: ref;

axiom .str.87 == $sub.ref(0, 77317);

const {:count 40} .str.88: ref;

axiom .str.88 == $sub.ref(0, 78381);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 12} .str.1: ref;

axiom .str.1 == $sub.ref(0, 79417);

const {:count 219} .str.2: ref;

axiom .str.2 == $sub.ref(0, 80660);

const {:count 14} .str.3: ref;

axiom .str.3 == $sub.ref(0, 81698);

const {:count 44} .str.23: ref;

axiom .str.23 == $sub.ref(0, 82766);

const {:count 27} .str.24: ref;

axiom .str.24 == $sub.ref(0, 83817);

const {:count 22} .str.14: ref;

axiom .str.14 == $sub.ref(0, 84863);

const {:count 21} .str.15: ref;

axiom .str.15 == $sub.ref(0, 85908);

const {:count 3} .str.17: ref;

axiom .str.17 == $sub.ref(0, 86935);

const {:count 4} .str.18: ref;

axiom .str.18 == $sub.ref(0, 87963);

const {:count 34} .str.16: ref;

axiom .str.16 == $sub.ref(0, 89021);

const {:count 16} .str.11: ref;

axiom .str.11 == $sub.ref(0, 90061);

const {:count 22} .str.22: ref;

axiom .str.22 == $sub.ref(0, 91107);

const {:count 46} .str.21: ref;

axiom .str.21 == $sub.ref(0, 92177);

const {:count 16} .str.4: ref;

axiom .str.4 == $sub.ref(0, 93217);

const {:count 11} .str.5: ref;

axiom .str.5 == $sub.ref(0, 94252);

const {:count 10} .str.6: ref;

axiom .str.6 == $sub.ref(0, 95286);

const {:count 13} .str.7: ref;

axiom .str.7 == $sub.ref(0, 96323);

const {:count 5} .str.8: ref;

axiom .str.8 == $sub.ref(0, 97352);

const {:count 4} .str.9: ref;

axiom .str.9 == $sub.ref(0, 98380);

const {:count 6} .str.10: ref;

axiom .str.10 == $sub.ref(0, 99410);

const {:count 31} .str.19: ref;

axiom .str.19 == $sub.ref(0, 100465);

const {:count 13} .str.20: ref;

axiom .str.20 == $sub.ref(0, 101502);

const {:count 17} .str.12: ref;

axiom .str.12 == $sub.ref(0, 102543);

const {:count 39} .str.70: ref;

axiom .str.70 == $sub.ref(0, 103606);

const {:count 19} .str.71: ref;

axiom .str.71 == $sub.ref(0, 104649);

const {:count 9} .str.72: ref;

axiom .str.72 == $sub.ref(0, 105682);

const {:count 51} .str.73: ref;

axiom .str.73 == $sub.ref(0, 106757);

const {:count 32} .str.74: ref;

axiom .str.74 == $sub.ref(0, 107813);

const {:count 12} .str.75: ref;

axiom .str.75 == $sub.ref(0, 108849);

const {:count 32} .str.76: ref;

axiom .str.76 == $sub.ref(0, 109905);

const {:count 45} .str.77: ref;

axiom .str.77 == $sub.ref(0, 110974);

const {:count 24} .str.80: ref;

axiom .str.80 == $sub.ref(0, 112022);

const {:count 10} .str.81: ref;

axiom .str.81 == $sub.ref(0, 113056);

const {:count 24} .str.78: ref;

axiom .str.78 == $sub.ref(0, 114104);

const {:count 10} .str.79: ref;

axiom .str.79 == $sub.ref(0, 115138);

const {:count 7} .str.38: ref;

axiom .str.38 == $sub.ref(0, 116169);

const {:count 6} .str.39: ref;

axiom .str.39 == $sub.ref(0, 117199);

const {:count 7} .str.40: ref;

axiom .str.40 == $sub.ref(0, 118230);

const {:count 6} .str.41: ref;

axiom .str.41 == $sub.ref(0, 119260);

const {:count 7} .str.42: ref;

axiom .str.42 == $sub.ref(0, 120291);

const {:count 6} .str.43: ref;

axiom .str.43 == $sub.ref(0, 121321);

const {:count 7} .str.44: ref;

axiom .str.44 == $sub.ref(0, 122352);

const {:count 6} .str.45: ref;

axiom .str.45 == $sub.ref(0, 123382);

const {:count 7} .str.46: ref;

axiom .str.46 == $sub.ref(0, 124413);

const {:count 6} .str.47: ref;

axiom .str.47 == $sub.ref(0, 125443);

const {:count 7} .str.48: ref;

axiom .str.48 == $sub.ref(0, 126474);

const {:count 6} .str.49: ref;

axiom .str.49 == $sub.ref(0, 127504);

const {:count 7} .str.50: ref;

axiom .str.50 == $sub.ref(0, 128535);

const {:count 6} .str.51: ref;

axiom .str.51 == $sub.ref(0, 129565);

const {:count 7} .str.52: ref;

axiom .str.52 == $sub.ref(0, 130596);

const {:count 6} .str.53: ref;

axiom .str.53 == $sub.ref(0, 131626);

const {:count 7} .str.54: ref;

axiom .str.54 == $sub.ref(0, 132657);

const {:count 6} .str.55: ref;

axiom .str.55 == $sub.ref(0, 133687);

const {:count 7} .str.56: ref;

axiom .str.56 == $sub.ref(0, 134718);

const {:count 7} .str.57: ref;

axiom .str.57 == $sub.ref(0, 135749);

const {:count 8} .str.58: ref;

axiom .str.58 == $sub.ref(0, 136781);

const {:count 7} .str.59: ref;

axiom .str.59 == $sub.ref(0, 137812);

const {:count 8} .str.60: ref;

axiom .str.60 == $sub.ref(0, 138844);

const {:count 7} .str.61: ref;

axiom .str.61 == $sub.ref(0, 139875);

const {:count 8} .str.62: ref;

axiom .str.62 == $sub.ref(0, 140907);

const {:count 7} .str.63: ref;

axiom .str.63 == $sub.ref(0, 141938);

const {:count 8} .str.64: ref;

axiom .str.64 == $sub.ref(0, 142970);

const {:count 7} .str.65: ref;

axiom .str.65 == $sub.ref(0, 144001);

const {:count 8} .str.66: ref;

axiom .str.66 == $sub.ref(0, 145033);

const {:count 7} .str.67: ref;

axiom .str.67 == $sub.ref(0, 146064);

const {:count 8} .str.68: ref;

axiom .str.68 == $sub.ref(0, 147096);

const {:count 45} .str.25: ref;

axiom .str.25 == $sub.ref(0, 148165);

const {:count 12} .str.26: ref;

axiom .str.26 == $sub.ref(0, 149201);

const {:count 33} .str.28: ref;

axiom .str.28 == $sub.ref(0, 150258);

const {:count 21} .str.29: ref;

axiom .str.29 == $sub.ref(0, 151303);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 152335);

const {:count 3} .str.1.175: ref;

axiom .str.1.175 == $sub.ref(0, 153362);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 154400);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 155428);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 156460);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 157492);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const pch_udc_probe: ref;

axiom pch_udc_probe == $sub.ref(0, 158524);

procedure pch_udc_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.4, $M.19, $M.3, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9, assertsPassed;



implementation pch_udc_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i16;
  var $i16: i16;
  var $p17: ref;
  var $p20: ref;
  var $i21: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p29: ref;
  var $i30: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p38: ref;
  var $i39: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i16;
  var $i56: i16;
  var $i57: i16;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i16;
  var $i86: i16;
  var $i87: i16;
  var $p89: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $i52: i32;
  var $i8: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := kzalloc(6512, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i9 := pci_enable_device($p0);
    call {:si_unique_call 5} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i15 := $and.i16($i14, $sub.i16(0, 2));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i16 := $or.i16($i15, 1);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i16);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} pci_set_drvdata($p0, $p17);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    call {:si_unique_call 9} {:cexpr "resource"} boogie_si_record_i64($i21);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i26 == 1);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i30, $i34);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p47 := __request_region(iomem_resource, $i21, $i46, .str, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(6320, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, $i21);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i56 := $and.i16($i55, $sub.i16(0, 17));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i57 := $or.i16($i56, 16);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, $i57);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p58 := ioremap_nocache($i21, $i46);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(6328, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p58);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(6328, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i70 := pch_udc_pcd_init($p4);
    call {:si_unique_call 17} {:cexpr "tmp___2"} boogie_si_record_i32($i70);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p4);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i75 := ldv_request_irq_27($i73, pch_udc_isr, 128, .str, $p74);
    call {:si_unique_call 19} {:cexpr "tmp___3"} boogie_si_record_i32($i75);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(6336, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.0, $p84);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i86 := $and.i16($i85, $sub.i16(0, 9));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i87 := $or.i16($i86, 8);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p84, $i87);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} pci_set_master($p0);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_37 := pci_try_set_mwi($p0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_38 := spinlock_check($p89);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(6200, 1)), $mul.ref(0, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} __raw_spin_lock_init($p93, .str.37, $p2);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $p0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, pch_udc_ops);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i97 := init_dma_pools($p4);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 26} {:cexpr "retval"} boogie_si_record_i32($i97);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, .str);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(116, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, 3);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} pch_udc_set_disconnect($p4);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(0, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i105 := usb_add_gadget_udc_release($p103, $p104, gadget_release);
    call {:si_unique_call 29} {:cexpr "retval"} boogie_si_record_i32($i105);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb33:
    assume $i106 == 1;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i52 := $i105;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} pch_udc_remove($p0);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i8 := $i52;
    goto $bb3;

  $bb30:
    assume $i98 == 1;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i52 := $i97;
    goto $bb16;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i76 == 1;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} vslice_dummy_var_36 := dev_err.ref.ref.ref.i32($p77, .str.36, .str.31, $i79);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 19);
    goto $bb16;

  $bb24:
    assume $i71 == 1;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 19);
    goto $bb16;

  $bb21:
    assume $i67 == 1;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_35 := dev_err.ref.ref.ref($p68, .str.35, .str.31);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 19);
    goto $bb16;

  $bb18:
    assume $i63 == 1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_34 := printk.ref.ref(.str.34, .str.31);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 12);
    goto $bb16;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_33 := dev_err.ref.ref.ref($p50, .str.33, .str.31);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 16);
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i44 := $sub.i64($i39, $i43);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 1);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb9;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p4);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} kfree($p11);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} vslice_dummy_var_32 := printk.ref.ref(.str.32, .str.31);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} vslice_dummy_var_31 := printk.ref.ref(.str.30, .str.31);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const pch_udc_remove: ref;

axiom pch_udc_remove == $sub.ref(0, 159556);

procedure pch_udc_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation pch_udc_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $i36: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p94: ref;
  var $i95: i64;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p103: ref;
  var $i104: i64;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(0, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} usb_del_gadget_udc($p3);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6288, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6296, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6304, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} kfree($p65);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} pch_vbus_gpio_free($p2);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} pch_udc_exit($p2);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p2);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(6264, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6328, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p2);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref(6264, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p2);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref(6264, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p2);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} kfree($p117);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i116 == 1;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} pci_disable_device($p0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb25:
    assume $i84 == 1;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6320, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i91 == 1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p94);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.0, $p98);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i95, $i99);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i100 == 1);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} __release_region(iomem_resource, $i86, $i111);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.0, $p103);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i109 := $sub.i64($i104, $i108);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 1);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i111 := $i110;
    goto $bb32;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb28;

  $bb22:
    assume $i77 == 1;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6328, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} iounmap($p79);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i70 == 1;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p2);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} ldv_free_irq_26($i72, $p73);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6296, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} dma_unmap_single_attrs($p61, $i63, 64, 2, $0.ref);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6288, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} dma_pool_destroy($p55);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6288, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(72, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} dma_pool_free($p44, $p49, $i53);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6288, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(64, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} dma_pool_free($p27, $p32, $i36);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} dma_pool_destroy($p15);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_39 := dev_err.ref.ref.ref($p8, .str.91, .str.92);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_suspend: ref;

axiom pch_udc_suspend == $sub.ref(0, 160588);

procedure pch_udc_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $CurrAddr;



implementation pch_udc_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i11: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, $i1);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p4 := pci_get_drvdata($p0);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} pch_udc_disable_interrupts($p5, 127);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} pch_udc_disable_ep_interrupts($p5, $sub.i32(0, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} pci_disable_device($p0);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_40 := pci_enable_wake($p0, 3, 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i7 := pci_save_state($p0);
    call {:si_unique_call 53} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i14 := pci_choose_state($p0, $i13);
    call {:si_unique_call 56} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_42 := pci_set_power_state($p0, $i14);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_41 := dev_err.ref.ref.ref($p9, .str.89, .str.90);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const pch_udc_resume: ref;

axiom pch_udc_resume == $sub.ref(0, 161620);

procedure pch_udc_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_resume($p0: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i6: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_43 := pci_set_power_state($p0, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} pci_restore_state($p0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i2 := pci_enable_device($p0);
    call {:si_unique_call 61} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} vslice_dummy_var_45 := pci_enable_wake($p0, 3, 0);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} vslice_dummy_var_44 := dev_err.ref.ref.ref($p4, .str.93, .str.94);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb3;
}



const pch_udc_shutdown: ref;

axiom pch_udc_shutdown == $sub.ref(0, 162652);

procedure pch_udc_shutdown($p0: ref);
  free requires assertsPassed;



implementation pch_udc_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} pch_udc_disable_interrupts($p2, 127);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} pch_udc_disable_ep_interrupts($p2, $sub.i32(0, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} pch_udc_set_disconnect($p2);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 163684);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pch_udc_disable_interrupts: ref;

axiom pch_udc_disable_interrupts == $sub.ref(0, 164716);

procedure pch_udc_disable_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_disable_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} {:cexpr "pch_udc_disable_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} pch_udc_bit_set($p0, 1040, $i2);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_disable_ep_interrupts: ref;

axiom pch_udc_disable_ep_interrupts == $sub.ref(0, 165748);

procedure pch_udc_disable_ep_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_disable_ep_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} {:cexpr "pch_udc_disable_ep_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} pch_udc_bit_set($p0, 1048, $i2);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_set_disconnect: ref;

axiom pch_udc_set_disconnect == $sub.ref(0, 166780);

procedure pch_udc_set_disconnect($p0: ref);
  free requires assertsPassed;



implementation pch_udc_set_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} pch_udc_bit_set($p0, 1028, 1024);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_bit_set: ref;

axiom pch_udc_bit_set == $sub.ref(0, 167812);

procedure pch_udc_bit_set($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_bit_set($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} {:cexpr "pch_udc_bit_set:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 75} {:cexpr "pch_udc_bit_set:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i3 := pch_udc_readl($p0, $i1);
    call {:si_unique_call 77} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i4, $i2);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} pch_udc_writel($p0, $i5, $i1);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_readl: ref;

axiom pch_udc_readl == $sub.ref(0, 168844);

procedure pch_udc_readl($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_readl($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} {:cexpr "pch_udc_readl:arg:reg"} boogie_si_record_i64($i1);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6328, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($i1, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i5 := ioread32($p4);
    call {:si_unique_call 81} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const pch_udc_writel: ref;

axiom pch_udc_writel == $sub.ref(0, 169876);

procedure pch_udc_writel($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_writel($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} {:cexpr "pch_udc_writel:arg:val"} boogie_si_record_i64($i1);
    call {:si_unique_call 83} {:cexpr "pch_udc_writel:arg:reg"} boogie_si_record_i64($i2);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6328, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($i2, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} iowrite32($i3, $p6);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    return;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 170908);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    return;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 171940);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 172972);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 174004);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 89} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 90} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 175036);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 176068);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 1} true;
    call {:si_unique_call 91} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 92} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 177100);

procedure dev_err.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 93} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 94} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 1} true;
    call {:si_unique_call 95} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 96} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 97} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 98} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 101} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 1} true;
    call {:si_unique_call 103} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 104} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_enable_wake: ref;

axiom pci_enable_wake == $sub.ref(0, 178132);

procedure pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} {:cexpr "pci_enable_wake:arg:state"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 106} {:cexpr "pci_enable_wake:arg:enable"} boogie_si_record_i1($i2);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i5 := __pci_enable_wake($p0, $i1, 0, $i4);
    call {:si_unique_call 108} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __pci_enable_wake: ref;

axiom __pci_enable_wake == $sub.ref(0, 179164);

procedure __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} {:cexpr "__pci_enable_wake:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 110} {:cexpr "__pci_enable_wake:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 111} {:cexpr "__pci_enable_wake:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 113} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 180196);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 181228);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 114} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 115} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_choose_state: ref;

axiom pci_choose_state == $sub.ref(0, 182260);

procedure pci_choose_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation pci_choose_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p3, $i1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 1} true;
    call {:si_unique_call 117} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 118} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usb_del_gadget_udc: ref;

axiom usb_del_gadget_udc == $sub.ref(0, 183292);

procedure usb_del_gadget_udc($p0: ref);
  free requires assertsPassed;



implementation usb_del_gadget_udc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    return;
}



const dma_pool_destroy: ref;

axiom dma_pool_destroy == $sub.ref(0, 184324);

procedure dma_pool_destroy($p0: ref);
  free requires assertsPassed;



implementation dma_pool_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    return;
}



const dma_pool_free: ref;

axiom dma_pool_free == $sub.ref(0, 185356);

procedure dma_pool_free($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation dma_pool_free($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} {:cexpr "dma_pool_free:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 186388);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 121} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 122} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p5 := get_dma_ops($p0);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 125} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 127} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 129} devirtbounce.1($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 128} devirtbounce(0, .str.13, 36, 12);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 187420);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} free_($p0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    return;
}



const pch_vbus_gpio_free: ref;

axiom pch_vbus_gpio_free == $sub.ref(0, 188452);

procedure pch_vbus_gpio_free($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation pch_vbus_gpio_free($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(4, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(0, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(0, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} gpio_free($i15);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(4, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} ldv_free_irq_21($i7, $p8);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_exit: ref;

axiom pch_udc_exit == $sub.ref(0, 189484);

procedure pch_udc_exit($p0: ref);
  free requires assertsPassed;



implementation pch_udc_exit($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} pch_udc_bit_set($p0, 1040, 127);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} pch_udc_bit_set($p0, 1048, 4294967295);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} pch_udc_set_disconnect($p0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_26: ref;

axiom ldv_free_irq_26 == $sub.ref(0, 190516);

procedure ldv_free_irq_26($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_free_irq_26($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} {:cexpr "ldv_free_irq_26:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} free_irq($i0, $p1);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 191548);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 192580);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 141} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 193612);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 194644);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.7;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.9;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i16 := $M.10;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 147} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i12 := $M.8;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 146} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i8 := $M.6;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 145} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i4 := $M.4;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 144} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_free_irq_21: ref;

axiom ldv_free_irq_21 == $sub.ref(0, 195676);

procedure ldv_free_irq_21($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_free_irq_21($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} {:cexpr "ldv_free_irq_21:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} free_irq($i0, $p1);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    return;
}



const gpio_free: ref;

axiom gpio_free == $sub.ref(0, 196708);

procedure gpio_free($i0: i32);
  free requires assertsPassed;



implementation gpio_free($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} {:cexpr "gpio_free:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 197740);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 152} $free($p0);
    return;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 198772);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 154} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 199804);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 200836);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 157} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 201868);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 159} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 160} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 161} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 202900);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 163} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} ldv_check_alloc_flags($i1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 203932);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 1} true;
    call {:si_unique_call 167} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 169} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 170} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 204964);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} dev_set_drvdata($p2, $p1);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 205996);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 173} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 174} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p5 := external_alloc();
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 207028);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 177} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p2 := external_alloc();
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pch_udc_pcd_init: ref;

axiom pch_udc_pcd_init == $sub.ref(0, 208060);

procedure pch_udc_pcd_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.4, $M.19, $M.3, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9, $CurrAddr;



implementation pch_udc_pcd_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} pch_udc_init($p0);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} pch_udc_pcd_reinit($p0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i1 := $M.11;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} vslice_dummy_var_46 := pch_vbus_gpio_init($p0, $i1);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const pch_udc_isr: ref;

axiom pch_udc_isr == $sub.ref(0, 209092);

procedure pch_udc_isr($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.18, $M.3, $M.5, $M.7, $M.9, $M.24, $M.4, $M.19, $M.6, $M.20, $M.8, $M.21, $M.10, $M.22, assertsPassed;



implementation pch_udc_isr($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i41: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i29: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 183} {:cexpr "pch_udc_isr:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i4 := pch_udc_read_device_interrupts($p3);
    call {:si_unique_call 185} {:cexpr "dev_intr"} boogie_si_record_i32($i4);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i5 := pch_udc_read_ep_interrupts($p3);
    call {:si_unique_call 187} {:cexpr "ep_intr"} boogie_si_record_i32($i5);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, $i5);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i4, 0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i5, 0);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i4, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} spin_lock($p34);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i4, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i5, 0);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} spin_unlock($p49);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb26:
    assume $i36 == 1;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} pch_udc_read_all_epstatus($p3, $i5);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i5, 1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i5, 65536);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb34;

  $bb34:
    call $i42, $i43, $i44, $i45, $i46, $i41 := pch_udc_isr_loop_$bb34($p3, $i5, $i42, $i43, $i44, $i45, $i46, $i41);
    goto $bb34_last;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32(1, $i41);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, $i5);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i41, 1);
    call {:si_unique_call 204} {:cexpr "i"} boogie_si_record_i32($i45);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i46 := $sle.i32($i45, 3);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i47 := $and.i32(131072, $i5);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i50 := $and.i32(262144, $i5);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i52 := $and.i32(524288, $i5);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb54:
    assume $i53 == 1;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} pch_udc_svc_data_out($p3, 3);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb50:
    assume $i51 == 1;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} pch_udc_svc_data_out($p3, 2);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume $i48 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} pch_udc_svc_data_out($p3, 1);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb39:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i41 := $i45;
    goto $bb39_dummy;

  $bb36:
    assume $i44 == 1;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} pch_udc_svc_data_in($p3, $i41);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} pch_udc_postsvc_epinters($p3, $i41);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb31:
    assume $i40 == 1;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} pch_udc_svc_control_out($p3);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i38 == 1;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} pch_udc_svc_control_in($p3);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} pch_udc_postsvc_epinters($p3, 0);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} pch_udc_dev_isr($p3, $i4);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i5, 0);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb19;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb8;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} pch_udc_write_ep_interrupts($p3, $i5);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} pch_udc_write_device_interrupts($p3, $i4);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i7 := pch_udc_readl($p3, 1024);
    call {:si_unique_call 189} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i4);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p9, .str);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p10, .str.1);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p11, .str.2);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p12, .str.3);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.16, $p14);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 2865);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p14, $i17);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p18, 1);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.17, $p19);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 191} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} pch_udc_writel($p3, 1, 1276);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb8;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vslice_dummy_var_47 := __dynamic_dev_dbg.ref.ref.ref($p2, $p27, .str.3);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb39_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_679;
}



const ldv_request_irq_27: ref;

axiom ldv_request_irq_27 == $sub.ref(0, 210124);

procedure ldv_request_irq_27($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.19, $M.3, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9;



implementation ldv_request_irq_27($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} {:cexpr "ldv_request_irq_27:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 210} {:cexpr "ldv_request_irq_27:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 212} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i6 := reg_check_1($p1);
    call {:si_unique_call 214} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 211156);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    return;
}



const pci_try_set_mwi: ref;

axiom pci_try_set_mwi == $sub.ref(0, 212188);

procedure pci_try_set_mwi($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_try_set_mwi($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 216} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 217} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 213220);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 214252);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    return;
}



const init_dma_pools: ref;

axiom init_dma_pools == $sub.ref(0, 215284);

procedure init_dma_pools($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation init_dma_pools($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p59: ref;
  var $p62: ref;
  var $p65: ref;
  var $p68: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i14: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p4 := dma_pool_create(.str.82, $p3, 16, 0, 0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $p18 := dma_pool_create(.str.85, $p17, 16, 0, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6288, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p18);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6288, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6288, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(64, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $p33 := ldv_dma_pool_alloc_24($p29, 208, $p32);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p33);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(72, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p49 := ldv_dma_pool_alloc_25($p45, 208, $p48);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p49);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $0.ref);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p65, 0);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $0.ref);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, 0);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p72 := kzalloc(64, 208);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6304, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $p72);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6304, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6304, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i83 := dma_map_single_attrs($p80, $p82, 64, 2, $0.ref);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6296, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, $i83);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb14:
    assume $i77 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i52 == 1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} vslice_dummy_var_51 := dev_err.ref.ref.ref($p55, .str.88, .str.84);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} vslice_dummy_var_50 := dev_err.ref.ref.ref($p39, .str.87, .str.84);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} vslice_dummy_var_49 := dev_err.ref.ref.ref($p26, .str.86, .str.84);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} vslice_dummy_var_48 := dev_err.ref.ref.ref($p12, .str.83, .str.84);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;
}



const gadget_release: ref;

axiom gadget_release == $sub.ref(0, 216316);

procedure gadget_release($p0: ref);
  free requires assertsPassed;



implementation gadget_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} kfree($p3);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    return;
}



const usb_add_gadget_udc_release: ref;

axiom usb_add_gadget_udc_release == $sub.ref(0, 217348);

procedure usb_add_gadget_udc_release($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_add_gadget_udc_release($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 1} true;
    call {:si_unique_call 230} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 231} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dma_pool_create: ref;

axiom dma_pool_create == $sub.ref(0, 218380);

procedure dma_pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dma_pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} {:cexpr "dma_pool_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 233} {:cexpr "dma_pool_create:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 234} {:cexpr "dma_pool_create:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p5 := external_alloc();
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_dma_pool_alloc_24: ref;

axiom ldv_dma_pool_alloc_24 == $sub.ref(0, 219412);

procedure ldv_dma_pool_alloc_24($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_24($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var vslice_dummy_var_52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "ldv_dma_pool_alloc_24:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} ldv_check_alloc_flags($i1);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_52 := dma_pool_alloc($p0, $i1, $p2);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_dma_pool_alloc_25: ref;

axiom ldv_dma_pool_alloc_25 == $sub.ref(0, 220444);

procedure ldv_dma_pool_alloc_25($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_25($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var vslice_dummy_var_53: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} {:cexpr "ldv_dma_pool_alloc_25:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} ldv_check_alloc_flags($i1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vslice_dummy_var_53 := dma_pool_alloc($p0, $i1, $p2);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 221476);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 243} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p5 := get_dma_ops($p0);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 247} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 249} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i14 := __phys_addr($i13);
    call {:si_unique_call 252} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 253} $i21 := devirtbounce.2($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 254} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i23 := __phys_addr($i22);
    call {:si_unique_call 256} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 250} devirtbounce(0, .str.13, 19, 12);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 222508);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 223540);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 259} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 260} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 261} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 224572);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 263} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 264} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 265} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 266} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 225604);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i1 := $M.18;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} ldv_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const dma_pool_alloc: ref;

axiom dma_pool_alloc == $sub.ref(0, 226636);

procedure dma_pool_alloc($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_pool_alloc($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} {:cexpr "dma_pool_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p3 := external_alloc();
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 227668);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 271} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 272} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 228700);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 273} __VERIFIER_error();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 229732);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 275} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 230764);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(pch_vbus_gpio_irq));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 231796);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.4, $M.19, $M.3, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.5;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.7;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.9;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.10 := $i0;
    call {:si_unique_call 285} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $M.22 := $p1;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 286} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.8 := $i0;
    call {:si_unique_call 283} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $M.21 := $p1;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 284} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $M.6 := $i0;
    call {:si_unique_call 281} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $M.20 := $p1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 282} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $M.4 := $i0;
    call {:si_unique_call 279} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $M.19 := $p1;
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 280} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_vbus_gpio_irq: ref;

axiom pch_vbus_gpio_irq == $sub.ref(0, 232828);

procedure pch_vbus_gpio_irq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_vbus_gpio_irq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p18: ref;
  var $i11: i32;
  var vslice_dummy_var_54: i1;
  var vslice_dummy_var_55: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} {:cexpr "pch_vbus_gpio_irq:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(0, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(4, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i12 := pch_vbus_gpio_get_value($p2);
    call {:si_unique_call 289} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(8, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} vslice_dummy_var_55 := schedule_work($p18);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(88, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_54 := schedule_work($p15);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const pch_vbus_gpio_get_value: ref;

axiom pch_vbus_gpio_get_value == $sub.ref(0, 233860);

procedure pch_vbus_gpio_get_value($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_vbus_gpio_get_value($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(0, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(0, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i8 := gpio_get_value($i7);
    call {:si_unique_call 293} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 294} {:cexpr "vbus"} boogie_si_record_i32($i10);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 234892);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i2 := queue_work($p1, $p0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 296} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 235924);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 298} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 236956);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 299} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 1} true;
    call {:si_unique_call 300} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 301} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gpio_get_value: ref;

axiom gpio_get_value == $sub.ref(0, 237988);

procedure gpio_get_value($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_get_value($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} {:cexpr "gpio_get_value:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i1 := __gpio_get_value($i0);
    call {:si_unique_call 304} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __gpio_get_value: ref;

axiom __gpio_get_value == $sub.ref(0, 239020);

procedure __gpio_get_value($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __gpio_get_value($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "__gpio_get_value:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p1 := gpio_to_desc($i0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i2 := gpiod_get_raw_value($p1);
    call {:si_unique_call 308} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gpio_to_desc: ref;

axiom gpio_to_desc == $sub.ref(0, 240052);

procedure gpio_to_desc($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation gpio_to_desc($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} {:cexpr "gpio_to_desc:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p1 := external_alloc();
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const gpiod_get_raw_value: ref;

axiom gpiod_get_raw_value == $sub.ref(0, 241084);

procedure gpiod_get_raw_value($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpiod_get_raw_value($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 311} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 312} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 242116);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 313} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 314} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pch_udc_read_device_interrupts: ref;

axiom pch_udc_read_device_interrupts == $sub.ref(0, 243148);

procedure pch_udc_read_device_interrupts($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_device_interrupts($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i1 := pch_udc_readl($p0, 1036);
    call {:si_unique_call 318} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_ep_interrupts: ref;

axiom pch_udc_read_ep_interrupts == $sub.ref(0, 244180);

procedure pch_udc_read_ep_interrupts($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_ep_interrupts($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i1 := pch_udc_readl($p0, 1044);
    call {:si_unique_call 320} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 245212);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 1} true;
    call {:si_unique_call 321} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 322} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pch_udc_write_device_interrupts: ref;

axiom pch_udc_write_device_interrupts == $sub.ref(0, 246244);

procedure pch_udc_write_device_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_write_device_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "pch_udc_write_device_interrupts:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} pch_udc_writel($p0, $i2, 1036);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_write_ep_interrupts: ref;

axiom pch_udc_write_ep_interrupts == $sub.ref(0, 247276);

procedure pch_udc_write_ep_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_write_ep_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} {:cexpr "pch_udc_write_ep_interrupts:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} pch_udc_writel($p0, $i2, 1044);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 248308);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} ldv_spin_lock();
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} ldv_spin_lock_1($p0);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_dev_isr: ref;

axiom pch_udc_dev_isr == $sub.ref(0, 249340);

procedure pch_udc_dev_isr($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $M.18, $CurrAddr, $M.3, $M.5, $M.7, $M.9, $M.24, $M.4, $M.19, $M.6, $M.20, $M.8, $M.21, $M.10, $M.22, assertsPassed;



implementation pch_udc_dev_isr($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i24;
  var $i39: i24;
  var $i40: i24;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i1;
  var $i104: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i24;
  var $i119: i24;
  var $i120: i24;
  var $p121: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i24;
  var $i141: i24;
  var $i142: i24;
  var $p143: ref;
  var $p144: ref;
  var $i145: i8;
  var $i146: i64;
  var $i147: i64;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i24;
  var $i163: i24;
  var $i164: i24;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i24;
  var $i185: i24;
  var $i186: i24;
  var $p187: ref;
  var $p188: ref;
  var $i189: i8;
  var $i190: i64;
  var $i191: i64;
  var $i192: i64;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i1;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 335} {:cexpr "pch_udc_dev_isr:arg:dev_intr"} boogie_si_record_i32($i1);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i1, 8);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i1, 64);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i1, 2);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i1, 1);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i1, 16);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i1, 32);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i1, 4);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i1, 128);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    return;

  $bb63:
    assume $i177 == 1;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p178, .str);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p179, .str.4);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p180, .str.2);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p181, .str.10);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i184 := $load.i24($M.16, $p183);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i185 := $and.i24($i184, $sub.i24(0, 262144));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i186 := $or.i24($i185, 2845);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p183, $i186);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p187, 1);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.17, $p188);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i64($i189);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i191 := $and.i64($i190, 1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i192 := ldv__builtin_expect($i191, 0);
    call {:si_unique_call 366} {:cexpr "tmp___4"} boogie_si_record_i64($i192);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i193 := $ne.i64($i192, 0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume $i193 == 1;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_62 := __dynamic_dev_dbg.ref.ref.ref($p7, $p196, .str.10);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb57:
    assume $i155 == 1;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p156, .str);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p157, .str.4);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p158, .str.2);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p159, .str.9);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i162 := $load.i24($M.16, $p161);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i163 := $and.i24($i162, $sub.i24(0, 262144));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i164 := $or.i24($i163, 2842);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p161, $i164);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p165, 1);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.17, $p166);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i64($i167);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, 1);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i170 := ldv__builtin_expect($i169, 0);
    call {:si_unique_call 363} {:cexpr "tmp___3"} boogie_si_record_i64($i170);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume $i171 == 1;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vslice_dummy_var_61 := __dynamic_dev_dbg.ref.ref.ref($p6, $p174, .str.9);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb51:
    assume $i133 == 1;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p134, .str);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p135, .str.4);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p136, .str.2);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p137, .str.8);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i140 := $load.i24($M.16, $p139);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i141 := $and.i24($i140, $sub.i24(0, 262144));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i142 := $or.i24($i141, 2839);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p139, $i142);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p143, 1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.17, $p144);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i64($i145);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i147 := $and.i64($i146, 1);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i148 := ldv__builtin_expect($i147, 0);
    call {:si_unique_call 360} {:cexpr "tmp___2"} boogie_si_record_i64($i148);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i149 := $ne.i64($i148, 0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i149 == 1;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} vslice_dummy_var_60 := __dynamic_dev_dbg.ref.ref.ref($p5, $p152, .str.8);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i75 := pch_vbus_gpio_get_value($p0);
    call {:si_unique_call 350} {:cexpr "vbus"} boogie_si_record_i32($i75);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p0);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(6264, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p99, $mul.ref(6264, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p112, .str);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p113, .str.4);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p114, .str.2);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p115, .str.7);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i118 := $load.i24($M.16, $p117);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i119 := $and.i24($i118, $sub.i24(0, 262144));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i120 := $or.i24($i119, 2835);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p117, $i120);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p121, 1);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.17, $p122);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i64($i123);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i125 := $and.i64($i124, 1);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i126 := ldv__builtin_expect($i125, 0);
    call {:si_unique_call 356} {:cexpr "tmp___1"} boogie_si_record_i64($i126);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i127 == 1;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} vslice_dummy_var_59 := __dynamic_dev_dbg.ref.ref.ref($p4, $p130, .str.7);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb39:
    assume $i103 == 1;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i75, 1);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb41;

  $bb42:
    assume $i104 == 1;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(4, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb41;

  $bb44:
    assume $i108 == 1;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(8, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_58 := schedule_work($p110);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb27:
    assume $i80 == 1;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i75, 1);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb29;

  $bb30:
    assume $i81 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} pch_udc_reconnect($p0);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i85 == 1;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb34;

  $bb35:
    assume $i91 == 1;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} spin_unlock($p92);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1));
    call {:si_unique_call 352} devirtbounce.3($p96, $p97);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} spin_lock($p98);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb21:
    assume $i61 == 1;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb23;

  $bb24:
    assume $i67 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} spin_unlock($p68);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1));
    call {:si_unique_call 347} devirtbounce.3($p72, $p73);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} spin_lock($p74);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} pch_udc_svc_cfg_interrupt($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i53 == 1;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} pch_udc_svc_intf_interrupt($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} pch_udc_svc_enum_interrupt($p0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p32, .str);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p33, .str.4);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p34, .str.2);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p35, .str.6);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i38 := $load.i24($M.16, $p37);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i39 := $and.i24($i38, $sub.i24(0, 262144));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i40 := $or.i24($i39, 2804);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p37, $i40);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p41, 1);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.17, $p42);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i64($i43);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 342} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i47 == 1;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_57 := __dynamic_dev_dbg.ref.ref.ref($p3, $p50, .str.6);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} pch_udc_svc_ur_interrupt($p0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p10, .str);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p11, .str.4);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p12, .str.2);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p13, .str.5);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.16, $p15);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 2799);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p15, $i18);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p19, 1);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.17, $p20);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 338} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_56 := __dynamic_dev_dbg.ref.ref.ref($p2, $p28, .str.5);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_udc_read_all_epstatus: ref;

axiom pch_udc_read_all_epstatus == $sub.ref(0, 250372);

procedure pch_udc_read_all_epstatus($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_udc_read_all_epstatus($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} {:cexpr "pch_udc_read_all_epstatus:arg:ep_intr"} boogie_si_record_i32($i1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $and.i32(1, $i1);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $and.i32(65536, $i1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $and.i32(2, $i1);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $and.i32(131072, $i1);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i45 := $and.i32(4, $i1);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i56 := $and.i32(262144, $i1);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i67 := $and.i32(8, $i1);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i78 := $and.i32(524288, $i1);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i79 == 1;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(7, 144));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i83 := pch_udc_read_ep_status($p82);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i84 := $zext.i32.i64($i83);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p81, $mul.ref(7, 144)), $mul.ref(136, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p85, $i84);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p81, $mul.ref(7, 144)), $mul.ref(136, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i87);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} pch_udc_clear_ep_status($p82, $i88);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i68 == 1;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref(6, 144));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i72 := pch_udc_read_ep_status($p71);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i72);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p70, $mul.ref(6, 144)), $mul.ref(136, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p74, $i73);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p70, $mul.ref(6, 144)), $mul.ref(136, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i76);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} pch_udc_clear_ep_status($p71, $i77);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(5, 144));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i61 := pch_udc_read_ep_status($p60);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p59, $mul.ref(5, 144)), $mul.ref(136, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, $i62);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p59, $mul.ref(5, 144)), $mul.ref(136, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} pch_udc_clear_ep_status($p60, $i66);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i46 == 1;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(4, 144));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i50 := pch_udc_read_ep_status($p49);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p48, $mul.ref(4, 144)), $mul.ref(136, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i51);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p48, $mul.ref(4, 144)), $mul.ref(136, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} pch_udc_clear_ep_status($p49, $i55);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(3, 144));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i39 := pch_udc_read_ep_status($p38);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p37, $mul.ref(3, 144)), $mul.ref(136, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, $i40);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p37, $mul.ref(3, 144)), $mul.ref(136, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i43);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} pch_udc_clear_ep_status($p38, $i44);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(2, 144));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i28 := pch_udc_read_ep_status($p27);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(2, 144)), $mul.ref(136, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i29);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(2, 144)), $mul.ref(136, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} pch_udc_clear_ep_status($p27, $i33);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(1, 144));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i17 := pch_udc_read_ep_status($p16);
    call {:si_unique_call 373} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref(1, 144)), $mul.ref(136, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(1, 144)), $mul.ref(136, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} pch_udc_clear_ep_status($p16, $i22);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i6 := pch_udc_read_ep_status($p5);
    call {:si_unique_call 370} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i7);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} pch_udc_clear_ep_status($p5, $i11);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_udc_svc_control_in: ref;

axiom pch_udc_svc_control_in == $sub.ref(0, 251404);

procedure pch_udc_svc_control_in($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18;



implementation pch_udc_svc_control_in($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(1, 144));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    call {:si_unique_call 387} {:cexpr "epsts"} boogie_si_record_i32($i8);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, 0);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i8, 184551104);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i8, 128);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i8, 512);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i8, 1024);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i8, 64);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i8, 1024);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb19;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i8, 16777216);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb19;

  $bb22:
    assume $i36 == 1;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} pch_udc_start_next_txrequest($p2);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(6264, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} pch_udc_complete_transfer($p2);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 1073741823);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i27);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} pch_udc_ep_clear_nak($p5);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} pch_udc_set_dma($p0, 1);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} pch_udc_ep_set_rrdy($p5);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_postsvc_epinters: ref;

axiom pch_udc_postsvc_epinters == $sub.ref(0, 252436);

procedure pch_udc_postsvc_epinters($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_postsvc_epinters($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} {:cexpr "pch_udc_postsvc_epinters:arg:ep_num"} boogie_si_record_i32($i1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 2);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 144));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(112, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i8 := list_empty($p7);
    call {:si_unique_call 396} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(96, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(128, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, 31);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p6);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(128, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i21 := (if $i20 == 1 then 0 else 16);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i15, $i21);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32(1, $i22);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} pch_udc_enable_ep_interrupts($p11, $i23);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} pch_udc_ep_clear_nak($p6);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_svc_control_out: ref;

axiom pch_udc_svc_control_out == $sub.ref(0, 253468);

procedure pch_udc_svc_control_out($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr, $M.24, $M.4, $M.19, $M.3, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9, assertsPassed;



implementation pch_udc_svc_control_out($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i16;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i16;
  var $i67: i16;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i92: i1;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i8;
  var $i108: i8;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $i119: i16;
  var $i120: i16;
  var $p121: ref;
  var $i122: i16;
  var $i123: i16;
  var $i124: i16;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $i136: i64;
  var $p137: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(1, 144));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(136, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    call {:si_unique_call 399} {:cexpr "stat"} boogie_si_record_i32($i6);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(136, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i6, 48);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i8, 4);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i6, 48);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i126 := $lshr.i32($i125, 4);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} pch_udc_ep_set_rrdy($p3);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i127 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p0);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p128, $mul.ref(6264, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i130);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 0);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb30;

  $bb31:
    assume $i132 == 1;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} pch_udc_ep_set_ddptr($p3, 0);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(112, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i134 := list_empty($p133);
    call {:si_unique_call 419} {:cexpr "tmp"} boogie_si_record_i32($i134);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} pch_udc_set_dma($p0, 1);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i135 == 1;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i136 := $zext.i32.i64($i6);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(136, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p137, $i136);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} pch_udc_svc_data_out($p0, 0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i13 := $and.i16($i12, $sub.i16(0, 3));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i13);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 65));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i18);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, $sub.i8(0, 65));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i23);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p24);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p27);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 400} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p28, $p29, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} pch_udc_init_setup_buff($p31);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i8($i37, 5);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, 1);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} pch_udc_ep_fifo_flush($p33, $i40);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(0, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i44 := $sext.i8.i32($i43);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i45 == 1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(0, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $p51);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} spin_unlock($p54);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(0, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 33);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1));
    call {:si_unique_call 405} $i74 := devirtbounce.4($p71, $p72, $p73);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 406} {:cexpr "setup_supported"} boogie_si_record_i32($i74);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} spin_lock($p75);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(0, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i79 := $sext.i8.i32($i78);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i92 := $sge.i32($i74, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i74, 0);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i101 == 1);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.0, $p121);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i123 := $and.i16($i122, $sub.i16(0, 513));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i124 := $or.i16($i123, 512);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p121, $i124);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i101 == 1;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} pch_udc_ep_set_stall($p103);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(96, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i108 := $and.i8($i107, 31);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p3);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p110, $mul.ref(128, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i115 := (if $i114 == 1 then 0 else 16);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i109, $i115);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i117 := $shl.i32(1, $i116);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} pch_udc_enable_ep_interrupts($p105, $i117);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i119 := $load.i16($M.0, $p118);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i120 := $and.i16($i119, $sub.i16(0, 3));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, $i120);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} pch_udc_set_dma($p0, 1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb15:
    assume $i92 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i93 := $sle.i32($i74, 63);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb17;

  $bb18:
    assume $i93 == 1;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} pch_udc_ep_clear_nak($p95);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(0, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i99 := $sext.i8.i32($i98);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i100 := $sge.i32($i99, 0);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i100 == 1;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} pch_udc_set_dma($p0, 1);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} pch_udc_ep_clear_nak($p3);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12:
    assume $i80 == 1;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 1073741823);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i85);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(72, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i90);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} pch_udc_ep_set_ddptr($p3, $i91);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i59 == 1;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(1, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 255);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb8;

  $bb9:
    assume $i64 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i67 := $and.i16($i66, $sub.i16(0, 5));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $i67);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i45 == 1;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p48);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_udc_svc_data_in: ref;

axiom pch_udc_svc_data_in == $sub.ref(0, 254500);

procedure pch_udc_svc_data_in($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18;



implementation pch_udc_svc_data_in($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i8;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "pch_udc_svc_data_in:arg:ep_num"} boogie_si_record_i32($i1);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 2);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 144));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(136, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 423} {:cexpr "epsts"} boogie_si_record_i32($i9);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(136, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 0);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i9, 251659968);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i9, 128);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i9, 512);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i9, 67108864);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i9, 33554432);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i9, 1024);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i9, 64);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i9, 67108864);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb25;

  $bb26:
    assume $i59 == 1;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i9, 1024);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb25;

  $bb28:
    assume $i61 == 1;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i9, 16777216);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb25;

  $bb30:
    assume $i63 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} pch_udc_start_next_txrequest($p6);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} pch_udc_complete_transfer($p6);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p0);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(6264, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} pch_udc_ep_set_stall($p6);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(96, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(128, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i44 := $and.i8($i43, 31);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p6);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(128, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i51 := (if $i50 == 1 then 0 else 16);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i45, $i51);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32(1, $i52);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} pch_udc_enable_ep_interrupts($p41, $i53);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} pch_udc_ep_clear_stall($p6);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} pch_udc_ep_set_stall($p6);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(96, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(128, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, 31);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p6);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(128, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i30 := (if $i29 == 1 then 0 else 16);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i24, $i30);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32(1, $i31);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} pch_udc_enable_ep_interrupts($p20, $i32);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_svc_data_out: ref;

axiom pch_udc_svc_data_out == $sub.ref(0, 255532);

procedure pch_udc_svc_data_out($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18;



implementation pch_udc_svc_data_out($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i8;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i8;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} {:cexpr "pch_udc_svc_data_out:arg:ep_num"} boogie_si_record_i32($i1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 2);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p3, $mul.ref($i6, 144));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(136, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    call {:si_unique_call 432} {:cexpr "epsts"} boogie_si_record_i32($i10);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(136, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, 0);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i10, 128);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i10, 512);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i10, 67108864);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i10, 33554432);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i10, 48);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i73 := $lshr.i32($i72, 4);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(112, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i97 := list_empty($p96);
    call {:si_unique_call 445} {:cexpr "tmp___0"} boogie_si_record_i32($i97);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i98 == 1;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} pch_udc_set_dma($p0, 1);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(96, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(6264, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i81 == 1);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} pch_udc_complete_receiver($p7);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i81 == 1;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} pch_udc_ep_set_stall($p7);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(96, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(128, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i86 := $and.i8($i85, 31);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p7);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref(128, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i93 := (if $i92 == 1 then 0 else 16);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i87, $i93);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i95 := $shl.i32(1, $i94);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} pch_udc_enable_ep_interrupts($p83, $i95);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref(6264, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i57 == 1);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} pch_udc_ep_set_stall($p7);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(96, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(128, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i62 := $and.i8($i61, 31);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p7);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(128, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i69 := (if $i68 == 1 then 0 else 16);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i63, $i69);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i71 := $shl.i32(1, $i70);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} pch_udc_enable_ep_interrupts($p59, $i71);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i57 == 1;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} pch_udc_ep_clear_stall($p7);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} pch_udc_ep_set_stall($p7);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(96, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(128, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i41 := $and.i8($i40, 31);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p7);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(128, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i48 := (if $i47 == 1 then 0 else 16);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i42, $i48);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i50 := $shl.i32(1, $i49);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} pch_udc_enable_ep_interrupts($p38, $i50);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(112, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i15 := list_empty($p14);
    call {:si_unique_call 434} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $sub.i32(0, 1073741824));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, $sub.i32(0, 2147483648));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p21);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(128, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} pch_udc_start_rxrequest($p7, $p21);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 256564);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} ldv_spin_unlock();
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} ldv_spin_unlock_5($p0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 257596);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 449} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 258628);

procedure ldv_spin_unlock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} _raw_spin_unlock($p2);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 259660);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 260692);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pch_udc_start_rxrequest: ref;

axiom pch_udc_start_rxrequest == $sub.ref(0, 261724);

procedure pch_udc_start_rxrequest($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_udc_start_rxrequest($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i8;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} pch_udc_clear_dma($p3, 1);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1073741823);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 134217728);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i13 == 1);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p14 := $p5;
    goto $bb4;

  $bb4:
    call $p14, $p15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $i25, $i26, $i27 := pch_udc_start_rxrequest_loop_$bb4($p14, $p15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $i25, $i26, $i27);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p18 := phys_to_virt($i17);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 1073741823);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 134217728);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $p14 := $p18;
    goto $bb8_dummy;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} pch_udc_ep_set_ddptr($p0, $i30);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i33 := $and.i8($i32, $sub.i8(0, 2));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i34 := $or.i8($i33, 1);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i34);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, 31);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32(65536, $i40);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} pch_udc_enable_ep_interrupts($p36, $i41);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} pch_udc_set_dma($p43, 1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} pch_udc_ep_clear_nak($p0);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} pch_udc_ep_set_rrdy($p0);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const pch_udc_ep_set_stall: ref;

axiom pch_udc_ep_set_stall == $sub.ref(0, 262756);

procedure pch_udc_ep_set_stall($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_stall($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(128, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} pch_udc_ep_bit_set($p0, 0, 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} pch_udc_ep_bit_set($p0, 0, 2);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} pch_udc_ep_bit_set($p0, 0, 1);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_enable_ep_interrupts: ref;

axiom pch_udc_enable_ep_interrupts == $sub.ref(0, 263788);

procedure pch_udc_enable_ep_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_enable_ep_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} {:cexpr "pch_udc_enable_ep_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} pch_udc_bit_clr($p0, 1048, $i2);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_clear_stall: ref;

axiom pch_udc_ep_clear_stall == $sub.ref(0, 264820);

procedure pch_udc_ep_clear_stall($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_clear_stall($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} pch_udc_ep_bit_clr($p0, 0, 1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} pch_udc_ep_bit_set($p0, 0, 256);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_complete_receiver: ref;

axiom pch_udc_complete_receiver == $sub.ref(0, 265852);

procedure pch_udc_complete_receiver($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18;



implementation pch_udc_complete_receiver($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p21: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $p28: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i8;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i4 := list_empty($p3);
    call {:si_unique_call 466} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} pch_udc_clear_dma($p12, 1);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} pch_udc_ep_set_ddptr($p0, 0);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 1073741824));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, $sub.i32(0, 2147483648));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    assume {:verifier.code 0} true;
    $p21 := $p23;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 805306368);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p28 := $p21;
    goto $bb11;

  $bb11:
    call $p28, $p41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $p49, $p53, $p54, $i55, $i56, $i57, $p62, $i63, $i64, $p65, $p66, $p67, $i68, $i69, $i70 := pch_udc_complete_receiver_loop_$bb11($p9, $p28, $p41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $p49, $p53, $p54, $i55, $i56, $i57, $p62, $i63, $i64, $p65, $p66, $p67, $i68, $i69, $i70);
    goto $bb11_last;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, $sub.i32(0, 1073741824));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, $sub.i32(0, 2147483648));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p28);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i55, $i56);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    call {:si_unique_call 472} {:cexpr "addr"} boogie_si_record_i64($i64);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p65 := phys_to_virt($i64);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 805306368);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $p28 := $p65;
    goto $bb24_dummy;

  $bb12:
    assume $i70 == 1;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 805306368);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} vslice_dummy_var_63 := dev_err.ref.ref.i32.i32($p31, .str.23, $i36, $i39);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_64 := dev_err.ref.ref($p60, .str.24);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 134217728);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p49 := $p28;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb16:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 65535);
    call {:si_unique_call 470} {:cexpr "count"} boogie_si_record_i32($i52);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i52, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i76 := $i52;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i81 := $or.i32($i80, 134217728);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i81);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p49, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i87 := $or.i32($i86, $sub.i32(0, 1073741824));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p49, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(128, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i91 := $and.i8($i90, $sub.i8(0, 2));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, $i91);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i76);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} complete_req($p0, $p10, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i95 := list_empty($p94);
    call {:si_unique_call 476} {:cexpr "tmp___1"} boogie_si_record_i32($i95);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 0);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb31:
    assume $i96 == 1;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p100, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} pch_udc_start_rxrequest($p0, $p101);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i71 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 65536);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb27;

  $bb28:
    assume $i75 == 1;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i76 := 65536;
    goto $bb30;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb9;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p21 := $p20;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;
}



const pch_udc_set_dma: ref;

axiom pch_udc_set_dma == $sub.ref(0, 266884);

procedure pch_udc_set_dma($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_set_dma($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} {:cexpr "pch_udc_set_dma:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} pch_udc_bit_set($p0, 1028, 8);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} pch_udc_bit_set($p0, 1028, 4);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_clear_dma: ref;

axiom pch_udc_clear_dma == $sub.ref(0, 267916);

procedure pch_udc_clear_dma($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_clear_dma($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} {:cexpr "pch_udc_clear_dma:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} pch_udc_bit_clr($p0, 1028, 8);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} pch_udc_bit_clr($p0, 1028, 4);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_set_ddptr: ref;

axiom pch_udc_ep_set_ddptr == $sub.ref(0, 268948);

procedure pch_udc_ep_set_ddptr($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_ddptr($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} {:cexpr "pch_udc_ep_set_ddptr:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} pch_udc_ep_writel($p0, $i2, 20);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    return;
}



const phys_to_virt: ref;

axiom phys_to_virt == $sub.ref(0, 269980);

procedure phys_to_virt($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation phys_to_virt($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} {:cexpr "phys_to_virt:arg:address"} boogie_si_record_i64($i0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, $sub.i64(0, 131941395333120));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const complete_req: ref;

axiom complete_req == $sub.ref(0, 271012);

procedure complete_req($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18;



implementation complete_req($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i8;
  var $p90: ref;
  var $i91: i8;
  var $i92: i8;
  var $i93: i8;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $p107: ref;
  var $i108: i8;
  var $i109: i8;
  var $i110: i8;
  var $i111: i8;
  var $i112: i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} {:cexpr "complete_req:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i8($i4, 6);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, 1);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 488} {:cexpr "halted"} boogie_si_record_i32($i7);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} list_del_init($p8);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $sub.i32(0, 115));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(128, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i92 := $and.i8($i91, $sub.i8(0, 65));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i93 := $or.i8($i92, 64);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, $i93);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p16, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} spin_unlock($p94);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(128, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 0);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1));
    call {:si_unique_call 499} devirtbounce.5($p102, $p103, $p104);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p16, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} spin_lock($p105);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i7);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i109 := $and.i8($i106, 1);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i110 := $shl.i8($i109, 6);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i111 := $and.i8($i108, $sub.i8(0, 65));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i112 := $or.i8($i111, $i110);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, $i112);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i99 == 1;
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} pch_udc_ep_clear_rrdy($p0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, $sub.i64(0, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(128, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i56 == 1);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p16, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} dma_unmap_single_attrs($p68, $i70, $i74, 2, $0.ref);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i78 := $zext.i32.i64($i77);
    call {:si_unique_call 494} {:cexpr "__len"} boogie_si_record_i64($i78);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 495} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p81, $p83, $i78, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} kfree($p85);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p86, $sub.i64(0, 1));
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i89 := $and.i8($i88, $sub.i8(0, 3));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i89);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i56 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p16, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} dma_unmap_single_attrs($p59, $i61, $i65, 1, $0.ref);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(128, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p16, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} dma_unmap_single_attrs($p42, $i45, $i49, 2, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, $sub.i64(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p16, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} dma_unmap_single_attrs($p32, $i35, $i39, 1, $0.ref);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i2);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 272044);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} __list_del_entry($p0);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} INIT_LIST_HEAD($p0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 273076);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const pch_udc_ep_clear_rrdy: ref;

axiom pch_udc_ep_clear_rrdy == $sub.ref(0, 274108);

procedure pch_udc_ep_clear_rrdy($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_clear_rrdy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} pch_udc_ep_bit_clr($p0, 0, 512);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_bit_clr: ref;

axiom pch_udc_ep_bit_clr == $sub.ref(0, 275140);

procedure pch_udc_ep_bit_clr($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_ep_bit_clr($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} {:cexpr "pch_udc_ep_bit_clr:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 505} {:cexpr "pch_udc_ep_bit_clr:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i3 := pch_udc_ep_readl($p0, $i1);
    call {:si_unique_call 507} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i5 := $xor.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i4, $i5);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} pch_udc_ep_writel($p0, $i6, $i1);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_readl: ref;

axiom pch_udc_ep_readl == $sub.ref(0, 276172);

procedure pch_udc_ep_readl($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_ep_readl($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} {:cexpr "pch_udc_ep_readl:arg:reg"} boogie_si_record_i64($i1);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 6520)), $mul.ref(6328, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, $i1);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i10 := ioread32($p9);
    call {:si_unique_call 511} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const pch_udc_ep_writel: ref;

axiom pch_udc_ep_writel == $sub.ref(0, 277204);

procedure pch_udc_ep_writel($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_ep_writel($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} {:cexpr "pch_udc_ep_writel:arg:val"} boogie_si_record_i64($i1);
    call {:si_unique_call 513} {:cexpr "pch_udc_ep_writel:arg:reg"} boogie_si_record_i64($i2);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 6520)), $mul.ref(6328, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, $i2);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p7, $mul.ref($i10, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} iowrite32($i3, $p11);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 278236);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 279268);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_bit_clr: ref;

axiom pch_udc_bit_clr == $sub.ref(0, 280300);

procedure pch_udc_bit_clr($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_bit_clr($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} {:cexpr "pch_udc_bit_clr:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 516} {:cexpr "pch_udc_bit_clr:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i3 := pch_udc_readl($p0, $i1);
    call {:si_unique_call 518} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i5 := $xor.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i4, $i5);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} pch_udc_writel($p0, $i6, $i1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_bit_set: ref;

axiom pch_udc_ep_bit_set == $sub.ref(0, 281332);

procedure pch_udc_ep_bit_set($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_ep_bit_set($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} {:cexpr "pch_udc_ep_bit_set:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 521} {:cexpr "pch_udc_ep_bit_set:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i3 := pch_udc_ep_readl($p0, $i1);
    call {:si_unique_call 523} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i4, $i2);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} pch_udc_ep_writel($p0, $i5, $i1);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_clear_nak: ref;

axiom pch_udc_ep_clear_nak == $sub.ref(0, 282364);

procedure pch_udc_ep_clear_nak($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_clear_nak($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i15: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i19: i32;
  var $i14: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i33: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i37: i32;
  var $i32: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i8;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i3 := pch_udc_ep_readl($p0, 0);
    call {:si_unique_call 526} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 64);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(128, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i29 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 535} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 64);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i32 := 10000;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i41 := $i32;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i42 == 1;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i48 := $and.i8($i47, 31);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p0);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(128, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p55 := (if $i54 == 1 then .str.17 else .str.18);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_66 := dev_err.ref.ref.ref.i32.ref($p45, .str.16, .str.15, $i49, $p55);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb22:
    assume $i31 == 1;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i33 := 10000;
    goto $bb25;

  $bb25:
    call $i34, $i35, $i36, $i33, $i38, $i39, $i40, $i37 := pch_udc_ep_clear_nak_loop_$bb25($p0, $i34, $i35, $i36, $i33, $i38, $i39, $i40, $i37);
    goto $bb25_last;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i33, 1);
    call {:si_unique_call 536} {:cexpr "loopcnt"} boogie_si_record_i32($i38);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb31;

  $bb29:
    assume $i39 == 1;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} pch_udc_ep_bit_set($p0, 0, 256);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __const_udelay(21475);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i34 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 540} {:cexpr "tmp___1"} boogie_si_record_i32($i34);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 64);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i37 := $i38;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i32 := $i37;
    goto $bb24;

  $bb27:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i38;
    goto $bb27_dummy;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i11 := pch_udc_read_ep_status($p0);
    call {:si_unique_call 528} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 256);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i14 := 10000;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i23 := $i14;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_65 := dev_err.ref.ref.ref($p27, .str.14, .str.15);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i15 := 10000;
    goto $bb10;

  $bb10:
    call $i16, $i17, $i18, $i15, $i20, $i21, $i22, $i19 := pch_udc_ep_clear_nak_loop_$bb10($p0, $i16, $i17, $i18, $i15, $i20, $i21, $i22, $i19);
    goto $bb10_last;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i15, 1);
    call {:si_unique_call 529} {:cexpr "loopcnt"} boogie_si_record_i32($i20);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb16;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __const_udelay(21475);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i16 := pch_udc_read_ep_status($p0);
    call {:si_unique_call 532} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 256);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i14 := $i19;
    goto $bb9;

  $bb12:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i20;
    goto $bb12_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2495;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2465;
}



const pch_udc_ep_set_rrdy: ref;

axiom pch_udc_ep_set_rrdy == $sub.ref(0, 283396);

procedure pch_udc_ep_set_rrdy($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_rrdy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} pch_udc_ep_bit_set($p0, 0, 512);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 284428);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_read_ep_status: ref;

axiom pch_udc_read_ep_status == $sub.ref(0, 285460);

procedure pch_udc_read_ep_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_ep_status($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i1 := pch_udc_ep_readl($p0, 4);
    call {:si_unique_call 545} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_ep_control: ref;

axiom pch_udc_read_ep_control == $sub.ref(0, 286492);

procedure pch_udc_read_ep_control($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_ep_control($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i1 := pch_udc_ep_readl($p0, 0);
    call {:si_unique_call 547} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_complete_transfer: ref;

axiom pch_udc_complete_transfer == $sub.ref(0, 287524);

procedure pch_udc_complete_transfer($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18;



implementation pch_udc_complete_transfer($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i8;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i8;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i8;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i4 := list_empty($p3);
    call {:si_unique_call 549} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, $sub.i32(0, 1073741824));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, $sub.i32(0, 2147483648));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 805306368);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i37);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $sub.i32(0, 939524096));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $sub.i32(0, 939524096));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} complete_req($p0, $p10, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(128, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i48 := $and.i8($i47, $sub.i8(0, 2));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i48);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i50 := list_empty($p49);
    call {:si_unique_call 553} {:cexpr "tmp___0"} boogie_si_record_i32($i50);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i51 == 1);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i70 := $and.i8($i69, 31);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(128, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i77 := (if $i76 == 1 then 0 else 16);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i71, $i77);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i79 := $shl.i32(1, $i78);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} pch_udc_disable_ep_interrupts($p67, $i79);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i51 == 1;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} pch_udc_wait_ep_stall($p0);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} pch_udc_ep_clear_nak($p0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i56 := $and.i8($i55, 31);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(128, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i63 := (if $i62 == 1 then 0 else 16);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i57, $i63);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32(1, $i64);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} pch_udc_enable_ep_interrupts($p53, $i65);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 805306368);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_67 := dev_err.ref.ref.i32.i32($p25, .str.21, $i30, $i33);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_start_next_txrequest: ref;

axiom pch_udc_start_next_txrequest == $sub.ref(0, 288556);

procedure pch_udc_start_next_txrequest($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_udc_start_next_txrequest($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i8;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i1 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 559} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 8);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i5 := list_empty($p4);
    call {:si_unique_call 561} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(128, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} pch_udc_wait_ep_stall($p0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(128, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, $sub.i8(0, 2));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i24 := $or.i8($i23, 1);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i24);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} pch_udc_ep_set_ddptr($p0, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1073741823);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 134217728);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i34 == 1);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p35 := $p26;
    goto $bb17;

  $bb17:
    call $p35, $p36, $i37, $i38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $i48 := pch_udc_start_next_txrequest_loop_$bb17($p35, $p36, $i37, $i38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $i48);
    goto $bb17_last;

  $bb20:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p39 := phys_to_virt($i38);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 1073741823);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 134217728);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $p35 := $p39;
    goto $bb21_dummy;

  $bb18:
    assume $i48 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(88, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i50);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} pch_udc_ep_set_ddptr($p0, $i51);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} pch_udc_set_dma($p53, 2);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} pch_udc_ep_set_pd($p0);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i58 := $and.i8($i57, 31);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(128, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i65 := (if $i64 == 1 then 0 else 16);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i59, $i65);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32(1, $i66);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} pch_udc_enable_ep_interrupts($p55, $i67);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} pch_udc_ep_clear_nak($p0);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb15;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;
}



const pch_udc_wait_ep_stall: ref;

axiom pch_udc_wait_ep_stall == $sub.ref(0, 289588);

procedure pch_udc_wait_ep_stall($p0: ref);
  free requires assertsPassed;



implementation pch_udc_wait_ep_stall($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i5: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i9: i32;
  var $i4: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i1 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 571} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i4 := 10000;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $i4;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} vslice_dummy_var_68 := dev_err.ref.ref.ref($p19, .str.11, .str.22);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i5 := 10000;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9 := pch_udc_wait_ep_stall_loop_$bb4($p0, $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9);
    goto $bb4_last;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i5, 1);
    call {:si_unique_call 572} {:cexpr "count"} boogie_si_record_i32($i10);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb10;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} __const_udelay(21475);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i6 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 575} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2742;
}



const pch_udc_ep_set_pd: ref;

axiom pch_udc_ep_set_pd == $sub.ref(0, 290620);

procedure pch_udc_ep_set_pd($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_pd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} pch_udc_ep_bit_set($p0, 0, 8);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_init_setup_buff: ref;

axiom pch_udc_init_setup_buff == $sub.ref(0, 291652);

procedure pch_udc_init_setup_buff($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_udc_init_setup_buff($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($u0, 1);
    call {:si_unique_call 578} {:cexpr "pky_marker"} boogie_si_record_i32($i3);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 579} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p6, $sub.i8(0, 1), 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_fifo_flush: ref;

axiom pch_udc_ep_fifo_flush == $sub.ref(0, 292684);

procedure pch_udc_ep_fifo_flush($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_fifo_flush($p0: ref, $i1: i32)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} {:cexpr "pch_udc_ep_fifo_flush:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} pch_udc_ep_bit_set($p0, 0, 2);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 293716);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const pch_udc_clear_ep_status: ref;

axiom pch_udc_clear_ep_status == $sub.ref(0, 294748);

procedure pch_udc_clear_ep_status($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_clear_ep_status($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} {:cexpr "pch_udc_clear_ep_status:arg:stat"} boogie_si_record_i32($i1);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_svc_ur_interrupt: ref;

axiom pch_udc_svc_ur_interrupt == $sub.ref(0, 295780);

procedure pch_udc_svc_ur_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.3, $M.5, $M.7, $M.9, $CurrAddr;



implementation pch_udc_svc_ur_interrupt($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i16;
  var $p8: ref;
  var $i9: i16;
  var $i10: i16;
  var $p11: ref;
  var $i12: i16;
  var $i13: i16;
  var $p14: ref;
  var $i15: i16;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i8;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i8;
  var $i55: i8;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i8;
  var $i63: i8;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i8;
  var $i79: i8;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i8;
  var $i87: i8;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i8;
  var $i95: i8;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} pch_udc_clear_dma($p0, 2);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} pch_udc_disable_ep_interrupts($p0, $sub.i32(0, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} pch_udc_write_ep_interrupts($p0, $sub.i32(0, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} pch_udc_clear_ep_status($p2, 520095472);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} pch_udc_clear_ep_control($p2);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} pch_udc_ep_set_ddptr($p2, 0);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} pch_udc_write_csr($p4, 0, 0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(1, 144));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} pch_udc_clear_ep_status($p99, 520095472);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} pch_udc_clear_ep_control($p99);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} pch_udc_ep_set_ddptr($p99, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p98, $mul.ref(1, 144)), $mul.ref(96, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} pch_udc_write_csr($p101, 0, 1);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(2, 144));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} pch_udc_clear_ep_status($p104, 520095472);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} pch_udc_clear_ep_control($p104);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} pch_udc_ep_set_ddptr($p104, 0);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p103, $mul.ref(2, 144)), $mul.ref(96, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} pch_udc_write_csr($p106, 0, 2);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(3, 144));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} pch_udc_clear_ep_status($p109, 520095472);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} pch_udc_clear_ep_control($p109);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} pch_udc_ep_set_ddptr($p109, 0);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p108, $mul.ref(3, 144)), $mul.ref(96, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} pch_udc_write_csr($p111, 0, 3);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p113, $mul.ref(4, 144));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} pch_udc_clear_ep_status($p114, 520095472);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} pch_udc_clear_ep_control($p114);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} pch_udc_ep_set_ddptr($p114, 0);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p113, $mul.ref(4, 144)), $mul.ref(96, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} pch_udc_write_csr($p116, 0, 4);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p118, $mul.ref(5, 144));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} pch_udc_clear_ep_status($p119, 520095472);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} pch_udc_clear_ep_control($p119);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} pch_udc_ep_set_ddptr($p119, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p118, $mul.ref(5, 144)), $mul.ref(96, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} pch_udc_write_csr($p121, 0, 5);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p123, $mul.ref(6, 144));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} pch_udc_clear_ep_status($p124, 520095472);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} pch_udc_clear_ep_control($p124);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} pch_udc_ep_set_ddptr($p124, 0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p123, $mul.ref(6, 144)), $mul.ref(96, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} pch_udc_write_csr($p126, 0, 6);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p128, $mul.ref(7, 144));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} pch_udc_clear_ep_status($p129, 520095472);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} pch_udc_clear_ep_control($p129);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} pch_udc_ep_set_ddptr($p129, 0);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p128, $mul.ref(7, 144)), $mul.ref(96, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} pch_udc_write_csr($p131, 0, 7);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p133, $mul.ref(8, 144));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} pch_udc_clear_ep_status($p134, 520095472);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} pch_udc_clear_ep_control($p134);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} pch_udc_ep_set_ddptr($p134, 0);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p133, $mul.ref(8, 144)), $mul.ref(96, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} pch_udc_write_csr($p136, 0, 8);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(9, 144));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} pch_udc_clear_ep_status($p139, 520095472);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} pch_udc_clear_ep_control($p139);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} pch_udc_ep_set_ddptr($p139, 0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p138, $mul.ref(9, 144)), $mul.ref(96, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} pch_udc_write_csr($p141, 0, 9);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p143, $mul.ref(10, 144));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} pch_udc_clear_ep_status($p144, 520095472);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} pch_udc_clear_ep_control($p144);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} pch_udc_ep_set_ddptr($p144, 0);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p143, $mul.ref(10, 144)), $mul.ref(96, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} pch_udc_write_csr($p146, 0, 10);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p148, $mul.ref(11, 144));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} pch_udc_clear_ep_status($p149, 520095472);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} pch_udc_clear_ep_control($p149);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} pch_udc_ep_set_ddptr($p149, 0);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p148, $mul.ref(11, 144)), $mul.ref(96, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} pch_udc_write_csr($p151, 0, 11);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p153, $mul.ref(12, 144));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} pch_udc_clear_ep_status($p154, 520095472);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} pch_udc_clear_ep_control($p154);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} pch_udc_ep_set_ddptr($p154, 0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p153, $mul.ref(12, 144)), $mul.ref(96, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} pch_udc_write_csr($p156, 0, 12);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p158, $mul.ref(13, 144));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} pch_udc_clear_ep_status($p159, 520095472);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} pch_udc_clear_ep_control($p159);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} pch_udc_ep_set_ddptr($p159, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p158, $mul.ref(13, 144)), $mul.ref(96, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} pch_udc_write_csr($p161, 0, 13);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p163, $mul.ref(14, 144));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} pch_udc_clear_ep_status($p164, 520095472);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} pch_udc_clear_ep_control($p164);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} pch_udc_ep_set_ddptr($p164, 0);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p163, $mul.ref(14, 144)), $mul.ref(96, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} pch_udc_write_csr($p166, 0, 14);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref(15, 144));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} pch_udc_clear_ep_status($p169, 520095472);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} pch_udc_clear_ep_control($p169);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} pch_udc_ep_set_ddptr($p169, 0);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p168, $mul.ref(15, 144)), $mul.ref(96, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} pch_udc_write_csr($p171, 0, 15);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p173, $mul.ref(16, 144));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} pch_udc_clear_ep_status($p174, 520095472);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} pch_udc_clear_ep_control($p174);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} pch_udc_ep_set_ddptr($p174, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p173, $mul.ref(16, 144)), $mul.ref(96, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} pch_udc_write_csr($p176, 0, 16);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p178, $mul.ref(17, 144));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} pch_udc_clear_ep_status($p179, 520095472);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} pch_udc_clear_ep_control($p179);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} pch_udc_ep_set_ddptr($p179, 0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p178, $mul.ref(17, 144)), $mul.ref(96, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} pch_udc_write_csr($p181, 0, 17);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p183, $mul.ref(18, 144));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} pch_udc_clear_ep_status($p184, 520095472);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} pch_udc_clear_ep_control($p184);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} pch_udc_ep_set_ddptr($p184, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p183, $mul.ref(18, 144)), $mul.ref(96, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} pch_udc_write_csr($p186, 0, 18);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p187);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p188, $mul.ref(19, 144));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} pch_udc_clear_ep_status($p189, 520095472);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} pch_udc_clear_ep_control($p189);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} pch_udc_ep_set_ddptr($p189, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p188, $mul.ref(19, 144)), $mul.ref(96, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} pch_udc_write_csr($p191, 0, 19);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p193, $mul.ref(20, 144));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} pch_udc_clear_ep_status($p194, 520095472);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} pch_udc_clear_ep_control($p194);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} pch_udc_ep_set_ddptr($p194, 0);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p193, $mul.ref(20, 144)), $mul.ref(96, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} pch_udc_write_csr($p196, 0, 20);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($p198, $mul.ref(21, 144));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} pch_udc_clear_ep_status($p199, 520095472);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} pch_udc_clear_ep_control($p199);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} pch_udc_ep_set_ddptr($p199, 0);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p198, $mul.ref(21, 144)), $mul.ref(96, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} pch_udc_write_csr($p201, 0, 21);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p202);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($p203, $mul.ref(22, 144));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} pch_udc_clear_ep_status($p204, 520095472);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} pch_udc_clear_ep_control($p204);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} pch_udc_ep_set_ddptr($p204, 0);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p203, $mul.ref(22, 144)), $mul.ref(96, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $p205);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} pch_udc_write_csr($p206, 0, 22);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p208, $mul.ref(23, 144));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} pch_udc_clear_ep_status($p209, 520095472);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} pch_udc_clear_ep_control($p209);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} pch_udc_ep_set_ddptr($p209, 0);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p208, $mul.ref(23, 144)), $mul.ref(96, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} pch_udc_write_csr($p211, 0, 23);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p213, $mul.ref(24, 144));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} pch_udc_clear_ep_status($p214, 520095472);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} pch_udc_clear_ep_control($p214);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} pch_udc_ep_set_ddptr($p214, 0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p213, $mul.ref(24, 144)), $mul.ref(96, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} pch_udc_write_csr($p216, 0, 24);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p217);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($p218, $mul.ref(25, 144));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} pch_udc_clear_ep_status($p219, 520095472);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} pch_udc_clear_ep_control($p219);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} pch_udc_ep_set_ddptr($p219, 0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p218, $mul.ref(25, 144)), $mul.ref(96, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} pch_udc_write_csr($p221, 0, 25);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p223, $mul.ref(26, 144));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} pch_udc_clear_ep_status($p224, 520095472);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} pch_udc_clear_ep_control($p224);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} pch_udc_ep_set_ddptr($p224, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p223, $mul.ref(26, 144)), $mul.ref(96, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} pch_udc_write_csr($p226, 0, 26);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p228 := $bitcast.ref.ref($p227);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($p228, $mul.ref(27, 144));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} pch_udc_clear_ep_status($p229, 520095472);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} pch_udc_clear_ep_control($p229);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} pch_udc_ep_set_ddptr($p229, 0);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p228, $mul.ref(27, 144)), $mul.ref(96, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} pch_udc_write_csr($p231, 0, 27);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p232);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($p233, $mul.ref(28, 144));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} pch_udc_clear_ep_status($p234, 520095472);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} pch_udc_clear_ep_control($p234);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} pch_udc_ep_set_ddptr($p234, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p233, $mul.ref(28, 144)), $mul.ref(96, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} pch_udc_write_csr($p236, 0, 28);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p238 := $bitcast.ref.ref($p237);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($p238, $mul.ref(29, 144));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} pch_udc_clear_ep_status($p239, 520095472);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} pch_udc_clear_ep_control($p239);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} pch_udc_ep_set_ddptr($p239, 0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p238, $mul.ref(29, 144)), $mul.ref(96, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} pch_udc_write_csr($p241, 0, 29);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($p243, $mul.ref(30, 144));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} pch_udc_clear_ep_status($p244, 520095472);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} pch_udc_clear_ep_control($p244);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} pch_udc_ep_set_ddptr($p244, 0);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p243, $mul.ref(30, 144)), $mul.ref(96, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} pch_udc_write_csr($p246, 0, 30);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p247);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p248, $mul.ref(31, 144));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} pch_udc_clear_ep_status($p249, 520095472);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} pch_udc_clear_ep_control($p249);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} pch_udc_ep_set_ddptr($p249, 0);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p248, $mul.ref(31, 144)), $mul.ref(96, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} pch_udc_write_csr($p251, 0, 31);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i7 := $and.i16($i6, $sub.i16(0, 3));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $i7);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i10 := $and.i16($i9, $sub.i16(0, 5));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $i10);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i13 := $and.i16($i12, $sub.i16(0, 513));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i13);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i16 := $and.i16($i15, $sub.i16(0, 257));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i16);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} pch_udc_ep_set_nak($p18);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i21 := $lshr.i8($i20, 5);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i22 := $and.i8($i21, 1);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} pch_udc_ep_fifo_flush($p18, $i23);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} empty_req_queue($p18);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(1, 144));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} pch_udc_ep_set_nak($p43);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i46 := $lshr.i8($i45, 5);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i46, 1);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} pch_udc_ep_fifo_flush($p43, $i48);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} empty_req_queue($p43);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(2, 144));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} pch_udc_ep_set_nak($p51);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p50, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i54 := $lshr.i8($i53, 5);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i55 := $and.i8($i54, 1);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} pch_udc_ep_fifo_flush($p51, $i56);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} empty_req_queue($p51);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(3, 144));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} pch_udc_ep_set_nak($p59);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i62 := $lshr.i8($i61, 5);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i63 := $and.i8($i62, 1);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} pch_udc_ep_fifo_flush($p59, $i64);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} empty_req_queue($p59);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(4, 144));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} pch_udc_ep_set_nak($p67);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p66, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i70 := $lshr.i8($i69, 5);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i71 := $and.i8($i70, 1);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} pch_udc_ep_fifo_flush($p67, $i72);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} empty_req_queue($p67);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(5, 144));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} pch_udc_ep_set_nak($p75);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p74, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i78 := $lshr.i8($i77, 5);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i79 := $and.i8($i78, 1);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} pch_udc_ep_fifo_flush($p75, $i80);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} empty_req_queue($p75);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p82, $mul.ref(6, 144));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} pch_udc_ep_set_nak($p83);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p82, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i86 := $lshr.i8($i85, 5);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i87 := $and.i8($i86, 1);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} pch_udc_ep_fifo_flush($p83, $i88);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} empty_req_queue($p83);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(7, 144));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} pch_udc_ep_set_nak($p91);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p90, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i94 := $lshr.i8($i93, 5);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i95 := $and.i8($i94, 1);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} pch_udc_ep_fifo_flush($p91, $i96);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} empty_req_queue($p91);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb11;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} spin_unlock($p34);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1));
    call {:si_unique_call 602} devirtbounce.3($p38, $p39);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} spin_lock($p40);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const pch_udc_svc_enum_interrupt: ref;

axiom pch_udc_svc_enum_interrupt == $sub.ref(0, 296812);

procedure pch_udc_svc_enum_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_udc_svc_enum_interrupt($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i1 := pch_udc_read_device_status($p0);
    call {:si_unique_call 743} {:cexpr "dev_stat"} boogie_si_record_i32($i1);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 24576);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 13);
    call {:si_unique_call 744} {:cexpr "dev_speed"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call {:si_unique_call 751} devirtbounce(0, .str.2, 2693, 12);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call pch_udc_svc_enum_interrupt_loop_$bb13();
    goto $bb13_last;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i8);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} pch_udc_activate_control_ep($p0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} pch_udc_enable_ep_interrupts($p0, 65537);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} pch_udc_set_dma($p0, 2);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} pch_udc_set_dma($p0, 1);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(1, 144));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} pch_udc_ep_set_rrdy($p13);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} pch_udc_enable_interrupts($p0, 95);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i8 := 2;
    goto $bb11;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i8 := 3;
    goto $bb11;

  $bb13_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;
}



const pch_udc_svc_intf_interrupt: ref;

axiom pch_udc_svc_intf_interrupt == $sub.ref(0, 297844);

procedure pch_udc_svc_intf_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr, $M.24, $M.4, $M.19, $M.3, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9, assertsPassed;



implementation pch_udc_svc_intf_interrupt($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i16;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i16;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i16;
  var $p26: ref;
  var $p28: ref;
  var $i29: i16;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i8;
  var $p55: ref;
  var $i56: i16;
  var $i57: i16;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i8;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i8;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i8;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i8;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i8;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i8;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p120: ref;
  var $i121: i8;
  var $i122: i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i1 := pch_udc_read_device_status($p0);
    call {:si_unique_call 753} {:cexpr "dev_stat"} boogie_si_record_i32($i1);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 240);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 4);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6340, 1)), $mul.ref(2, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i4);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i1, 3840);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i7, 8);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6340, 1)), $mul.ref(4, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i9);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i14 := $and.i16($i13, $sub.i16(0, 257));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i15 := $or.i16($i14, 256);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $i15);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 754} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p17, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(1, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 11);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6340, 1)), $mul.ref(4, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(2, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i24);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6340, 1)), $mul.ref(2, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(4, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $i29);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i32 := pch_udc_read_csr($p0, 1);
    call {:si_unique_call 756} {:cexpr "reg"} boogie_si_record_i32($i32);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 30721));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6340, 1)), $mul.ref(2, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i38 := $shl.i32($i37, 11);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i33, $i38);
    call {:si_unique_call 757} {:cexpr "reg"} boogie_si_record_i32($i39);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, $sub.i32(0, 491521));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6340, 1)), $mul.ref(4, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i45 := $shl.i32($i44, 15);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i40, $i45);
    call {:si_unique_call 758} {:cexpr "reg"} boogie_si_record_i32($i46);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} pch_udc_write_csr($p0, $i47, 1);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} pch_udc_ep_clear_stall($p49);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i54 := $and.i8($i53, $sub.i8(0, 65));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i54);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p68, $mul.ref(1, 144));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} pch_udc_ep_clear_stall($p69);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i74 := $and.i8($i73, $sub.i8(0, 65));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i74);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(2, 144));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} pch_udc_ep_clear_stall($p77);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i82 := $and.i8($i81, $sub.i8(0, 65));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, $i82);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(3, 144));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} pch_udc_ep_clear_stall($p85);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i90 := $and.i8($i89, $sub.i8(0, 65));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, $i90);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(4, 144));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} pch_udc_ep_clear_stall($p93);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i98 := $and.i8($i97, $sub.i8(0, 65));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, $i98);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p100, $mul.ref(5, 144));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} pch_udc_ep_clear_stall($p101);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i106 := $and.i8($i105, $sub.i8(0, 65));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, $i106);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(6, 144));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} pch_udc_ep_clear_stall($p109);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i114 := $and.i8($i113, $sub.i8(0, 65));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, $i114);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p116, $mul.ref(7, 144));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} pch_udc_ep_clear_stall($p117);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i122 := $and.i8($i121, $sub.i8(0, 65));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, $i122);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i57 := $and.i16($i56, $sub.i16(0, 3));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, $i57);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} spin_unlock($p58);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1));
    call {:si_unique_call 763} $i65 := devirtbounce.4($p62, $p63, $p64);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 764} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} spin_lock($p66);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const pch_udc_svc_cfg_interrupt: ref;

axiom pch_udc_svc_cfg_interrupt == $sub.ref(0, 298876);

procedure pch_udc_svc_cfg_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr, $M.24, $M.4, $M.19, $M.3, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9, assertsPassed;



implementation pch_udc_svc_cfg_interrupt($p0: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i16;
  var $i4: i16;
  var $i5: i16;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i16;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i8;
  var $p37: ref;
  var $i38: i16;
  var $i39: i16;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i8;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i8;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i8;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i8;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i1 := pch_udc_read_device_status($p0);
    call {:si_unique_call 773} {:cexpr "dev_stat"} boogie_si_record_i32($i1);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i4 := $and.i16($i3, $sub.i16(0, 257));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i5 := $or.i16($i4, 256);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, $i5);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i1);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 15);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6340, 1)), $mul.ref(0, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i9);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 774} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p13, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(1, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 9);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6340, 1)), $mul.ref(0, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1)), $mul.ref(2, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i18);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i21 := pch_udc_read_csr($p0, 1);
    call {:si_unique_call 776} {:cexpr "reg"} boogie_si_record_i32($i21);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, $sub.i32(0, 1921));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6340, 1)), $mul.ref(0, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i27 := $shl.i32($i26, 7);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i22, $i27);
    call {:si_unique_call 777} {:cexpr "reg"} boogie_si_record_i32($i28);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} pch_udc_write_csr($p0, $i29, 1);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} pch_udc_ep_clear_stall($p31);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i36 := $and.i8($i35, $sub.i8(0, 65));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i36);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(1, 144));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} pch_udc_ep_clear_stall($p51);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i56 := $and.i8($i55, $sub.i8(0, 65));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i56);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(2, 144));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} pch_udc_ep_clear_stall($p59);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i64 := $and.i8($i63, $sub.i8(0, 65));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i64);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(3, 144));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} pch_udc_ep_clear_stall($p67);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i72 := $and.i8($i71, $sub.i8(0, 65));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, $i72);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(4, 144));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} pch_udc_ep_clear_stall($p75);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i80 := $and.i8($i79, $sub.i8(0, 65));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $i80);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p82, $mul.ref(5, 144));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} pch_udc_ep_clear_stall($p83);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i88 := $and.i8($i87, $sub.i8(0, 65));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, $i88);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(6, 144));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} pch_udc_ep_clear_stall($p91);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i96 := $and.i8($i95, $sub.i8(0, 65));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, $i96);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(7, 144));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} pch_udc_ep_clear_stall($p99);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i104 := $and.i8($i103, $sub.i8(0, 65));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, $i104);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i39 := $and.i16($i38, $sub.i16(0, 3));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $i39);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} spin_unlock($p40);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6312, 1));
    call {:si_unique_call 782} $i47 := devirtbounce.4($p44, $p45, $p46);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 783} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} spin_lock($p48);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const pch_udc_reconnect: ref;

axiom pch_udc_reconnect == $sub.ref(0, 299908);

procedure pch_udc_reconnect($p0: ref);
  free requires assertsPassed;



implementation pch_udc_reconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} pch_udc_init($p0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} pch_udc_bit_clr($p0, 1040, 72);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} pch_udc_bit_set($p0, 1028, 1);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} pch_udc_bit_clr($p0, 1028, 1024);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} pch_udc_bit_clr($p0, 1028, 1);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} __const_udelay(4295000);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_init: ref;

axiom pch_udc_init == $sub.ref(0, 300940);

procedure pch_udc_init($p0: ref);
  free requires assertsPassed;



implementation pch_udc_init($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i4: i8;
  var $i5: i1;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} pch_udc_writel($p0, 1, 1276);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} pch_udc_writel($p0, 3, 1276);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb5, $bb6;

  $bb6:
    assume !(1 == 1);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} pch_udc_writel($p0, 1, 1276);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} pch_udc_writel($p0, 0, 1276);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb11, $bb12;

  $bb12:
    assume !(1 == 1);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} pch_udc_bit_set($p0, 1040, 127);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} pch_udc_bit_set($p0, 1036, 127);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} pch_udc_bit_set($p0, 1048, 4294967295);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} pch_udc_bit_set($p0, 1044, 4294967295);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i4 := $M.23;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i5 == 1);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} pch_udc_bit_set($p0, 1024, 131080);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} pch_udc_bit_set($p0, 1028, 521077632);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i5 == 1;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} pch_udc_bit_set($p0, 1024, 131081);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume 1 == 1;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} __const_udelay(4295000);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume 1 == 1;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} __const_udelay(4295000);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_69 := printk.ref.ref(.str.19, .str.20);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_read_device_status: ref;

axiom pch_udc_read_device_status == $sub.ref(0, 301972);

procedure pch_udc_read_device_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_device_status($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i1 := pch_udc_readl($p0, 1032);
    call {:si_unique_call 815} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_csr: ref;

axiom pch_udc_read_csr == $sub.ref(0, 303004);

procedure pch_udc_read_csr($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_csr($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $i6: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} {:cexpr "pch_udc_read_csr:arg:ep"} boogie_si_record_i32($i1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 320);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i2, 4);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    call {:si_unique_call 817} {:cexpr "reg"} boogie_si_record_i64($i4);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} pch_udc_csr_busy($p0);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_70 := pch_udc_readl($p0, $i4);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} pch_udc_csr_busy($p0);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i6 := pch_udc_readl($p0, $i4);
    call {:si_unique_call 822} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pch_udc_write_csr: ref;

axiom pch_udc_write_csr == $sub.ref(0, 304036);

procedure pch_udc_write_csr($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;



implementation pch_udc_write_csr($p0: ref, $i1: i64, $i2: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} {:cexpr "pch_udc_write_csr:arg:val"} boogie_si_record_i64($i1);
    call {:si_unique_call 824} {:cexpr "pch_udc_write_csr:arg:ep"} boogie_si_record_i32($i2);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 320);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i3, 4);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    call {:si_unique_call 825} {:cexpr "reg"} boogie_si_record_i64($i5);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} pch_udc_csr_busy($p0);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} pch_udc_writel($p0, $i1, $i5);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} pch_udc_csr_busy($p0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_csr_busy: ref;

axiom pch_udc_csr_busy == $sub.ref(0, 305068);

procedure pch_udc_csr_busy($p0: ref);
  free requires assertsPassed;



implementation pch_udc_csr_busy($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i5: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i9: i32;
  var $i4: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i1 := pch_udc_readl($p0, 1264);
    call {:si_unique_call 830} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i4 := 200;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $i4;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_71 := dev_err.ref.ref.ref($p17, .str.11, .str.12);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i5 := 200;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9 := pch_udc_csr_busy_loop_$bb4($p0, $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9);
    goto $bb4_last;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i5, 1);
    call {:si_unique_call 831} {:cexpr "count"} boogie_si_record_i32($i10);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb10;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} cpu_relax();
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i6 := pch_udc_readl($p0, 1264);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3605;
}



const cpu_relax: ref;

axiom cpu_relax == $sub.ref(0, 306100);

procedure cpu_relax();
  free requires assertsPassed;



implementation cpu_relax()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} rep_nop();
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    return;
}



const rep_nop: ref;

axiom rep_nop == $sub.ref(0, 307132);

procedure rep_nop();
  free requires assertsPassed;



implementation rep_nop()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} devirtbounce.6(0);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_activate_control_ep: ref;

axiom pch_udc_activate_control_ep == $sub.ref(0, 308164);

procedure pch_udc_activate_control_ep($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_udc_activate_control_ep($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} pch_udc_clear_ep_control($p2);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i8($i4, 5);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, 1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} pch_udc_ep_fifo_flush($p2, $i7);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i8($i9, 5);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i11 := $and.i8($i10, 1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} pch_udc_ep_set_bufsz($p2, 16, $i12);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} pch_udc_ep_set_maxpkt($p2, 64);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, 0);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, 0);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(1, 144));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} pch_udc_clear_ep_control($p19);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i8($i21, 5);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, 1);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} pch_udc_ep_fifo_flush($p19, $i24);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i8($i26, 5);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i27, 1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} pch_udc_ep_set_bufsz($p19, 16, $i29);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} pch_udc_ep_set_maxpkt($p19, 64);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(96, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64(33554432);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} pch_udc_write_csr($p31, $i32, 1);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} pch_udc_init_setup_buff($p34);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(64, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} pch_udc_ep_set_subptr($p19, $i37);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(72, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i64.i32($i39);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} pch_udc_ep_set_ddptr($p19, $i40);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 134217728);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6296, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i46);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(72, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i52);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} pch_udc_ep_clear_nak($p19);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_enable_interrupts: ref;

axiom pch_udc_enable_interrupts == $sub.ref(0, 309196);

procedure pch_udc_enable_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_enable_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} {:cexpr "pch_udc_enable_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} pch_udc_bit_clr($p0, 1040, $i2);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_clear_ep_control: ref;

axiom pch_udc_clear_ep_control == $sub.ref(0, 310228);

procedure pch_udc_clear_ep_control($p0: ref);
  free requires assertsPassed;



implementation pch_udc_clear_ep_control($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_set_bufsz: ref;

axiom pch_udc_ep_set_bufsz == $sub.ref(0, 311260);

procedure pch_udc_ep_set_bufsz($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_bufsz($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} {:cexpr "pch_udc_ep_set_bufsz:arg:buf_size"} boogie_si_record_i32($i1);
    call {:si_unique_call 854} {:cexpr "pch_udc_ep_set_bufsz:arg:ep_in"} boogie_si_record_i32($i2);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i9 := pch_udc_ep_readl($p0, 12);
    call {:si_unique_call 860} {:cexpr "data"} boogie_si_record_i32($i9);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i1, 16);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i9, 65535);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i10, $i11);
    call {:si_unique_call 861} {:cexpr "data"} boogie_si_record_i32($i12);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} pch_udc_ep_writel($p0, $i13, 12);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i4 := pch_udc_ep_readl($p0, 8);
    call {:si_unique_call 856} {:cexpr "data"} boogie_si_record_i32($i4);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, $sub.i32(0, 65536));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 65535);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i5, $i6);
    call {:si_unique_call 857} {:cexpr "data"} boogie_si_record_i32($i7);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} pch_udc_ep_writel($p0, $i8, 8);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_set_maxpkt: ref;

axiom pch_udc_ep_set_maxpkt == $sub.ref(0, 312292);

procedure pch_udc_ep_set_maxpkt($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_maxpkt($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} {:cexpr "pch_udc_ep_set_maxpkt:arg:pkt_size"} boogie_si_record_i32($i1);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i2 := pch_udc_ep_readl($p0, 12);
    call {:si_unique_call 865} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 65536));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 65535);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i3, $i4);
    call {:si_unique_call 866} {:cexpr "data"} boogie_si_record_i32($i5);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} pch_udc_ep_writel($p0, $i6, 12);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_set_subptr: ref;

axiom pch_udc_ep_set_subptr == $sub.ref(0, 313324);

procedure pch_udc_ep_set_subptr($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_subptr($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} {:cexpr "pch_udc_ep_set_subptr:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} pch_udc_ep_writel($p0, $i2, 16);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_set_nak: ref;

axiom pch_udc_ep_set_nak == $sub.ref(0, 314356);

procedure pch_udc_ep_set_nak($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_nak($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} pch_udc_ep_bit_set($p0, 0, 128);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    return;
}



const empty_req_queue: ref;

axiom empty_req_queue == $sub.ref(0, 315388);

procedure empty_req_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18;



implementation empty_req_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, $sub.i8(0, 65));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i4 := $or.i8($i3, 64);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i4);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i6 := list_empty($p5);
    call {:si_unique_call 872} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $p12, $i13, $i14 := empty_req_queue_loop_$bb4($p0, $p5, $p9, $p10, $p11, $p12, $i13, $i14);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} complete_req($p0, $p12, $sub.i32(0, 108));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $i13 := list_empty($p5);
    call {:si_unique_call 875} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 316420);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 876} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 317452);

procedure ldv_spin_lock_1($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} _raw_spin_lock($p2);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 318484);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_pcd_reinit: ref;

axiom pch_udc_pcd_reinit == $sub.ref(0, 319516);

procedure pch_udc_pcd_reinit($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.0, $CurrAddr;



implementation pch_udc_pcd_reinit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i8;
  var $i46: i8;
  var $p47: ref;
  var $i48: i8;
  var $i49: i8;
  var $p50: ref;
  var $i51: i8;
  var $i52: i8;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i8;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $p91: ref;
  var $p95: ref;
  var $p99: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i8;
  var $i116: i8;
  var $p117: ref;
  var $i118: i8;
  var $i119: i8;
  var $p120: ref;
  var $i121: i8;
  var $i122: i8;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i8;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i8;
  var $i145: i32;
  var $i146: i32;
  var $i147: i64;
  var $p148: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i8;
  var $i161: i8;
  var $i162: i8;
  var $p163: ref;
  var $i164: i8;
  var $i165: i8;
  var $i166: i8;
  var $p167: ref;
  var $i168: i8;
  var $i169: i8;
  var $i170: i8;
  var $p171: ref;
  var $p172: ref;
  var $p174: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i8;
  var $i184: i8;
  var $i185: i32;
  var $i186: i32;
  var $i187: i32;
  var $i188: i64;
  var $p189: ref;
  var $p190: ref;
  var $i191: i8;
  var $i192: i8;
  var $i193: i32;
  var $i194: i32;
  var $i195: i64;
  var $p196: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i8;
  var $i209: i8;
  var $i210: i8;
  var $p211: ref;
  var $i212: i8;
  var $i213: i8;
  var $i214: i8;
  var $p215: ref;
  var $i216: i8;
  var $i217: i8;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i8;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i8;
  var $i231: i8;
  var $i232: i32;
  var $i233: i32;
  var $i234: i32;
  var $i235: i64;
  var $p236: ref;
  var $p237: ref;
  var $i238: i8;
  var $i239: i8;
  var $i240: i32;
  var $i241: i32;
  var $i242: i64;
  var $p243: ref;
  var $p244: ref;
  var $p246: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i8;
  var $i256: i8;
  var $i257: i8;
  var $p258: ref;
  var $i259: i8;
  var $i260: i8;
  var $i261: i8;
  var $p262: ref;
  var $i263: i8;
  var $i264: i8;
  var $i265: i8;
  var $p266: ref;
  var $p267: ref;
  var $p269: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $i274: i8;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $i278: i8;
  var $i279: i8;
  var $i280: i32;
  var $i281: i32;
  var $i282: i32;
  var $i283: i64;
  var $p284: ref;
  var $p285: ref;
  var $i286: i8;
  var $i287: i8;
  var $i288: i32;
  var $i289: i32;
  var $i290: i64;
  var $p291: ref;
  var $p292: ref;
  var $p294: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $i303: i8;
  var $i304: i8;
  var $i305: i8;
  var $p306: ref;
  var $i307: i8;
  var $i308: i8;
  var $i309: i8;
  var $p310: ref;
  var $i311: i8;
  var $i312: i8;
  var $p313: ref;
  var $p314: ref;
  var $p316: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i8;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $i325: i8;
  var $i326: i8;
  var $i327: i32;
  var $i328: i32;
  var $i329: i32;
  var $i330: i64;
  var $p331: ref;
  var $p332: ref;
  var $i333: i8;
  var $i334: i8;
  var $i335: i32;
  var $i336: i32;
  var $i337: i64;
  var $p338: ref;
  var $p339: ref;
  var $p341: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $i350: i8;
  var $i351: i8;
  var $i352: i8;
  var $p353: ref;
  var $i354: i8;
  var $i355: i8;
  var $i356: i8;
  var $p357: ref;
  var $i358: i8;
  var $i359: i8;
  var $i360: i8;
  var $p361: ref;
  var $p362: ref;
  var $p364: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $i369: i8;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $i373: i8;
  var $i374: i8;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $i378: i64;
  var $p379: ref;
  var $p380: ref;
  var $i381: i8;
  var $i382: i8;
  var $i383: i32;
  var $i384: i32;
  var $i385: i64;
  var $p386: ref;
  var $p387: ref;
  var $p389: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $i398: i8;
  var $i399: i8;
  var $i400: i8;
  var $p401: ref;
  var $i402: i8;
  var $i403: i8;
  var $i404: i8;
  var $p405: ref;
  var $i406: i8;
  var $i407: i8;
  var $p408: ref;
  var $p409: ref;
  var $p411: ref;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $i416: i8;
  var $i417: i32;
  var $i418: i1;
  var $p419: ref;
  var $i420: i8;
  var $i421: i8;
  var $i422: i32;
  var $i423: i32;
  var $i424: i32;
  var $i425: i64;
  var $p426: ref;
  var $p427: ref;
  var $i428: i8;
  var $i429: i8;
  var $i430: i32;
  var $i431: i32;
  var $i432: i64;
  var $p433: ref;
  var $p434: ref;
  var $p436: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $i445: i8;
  var $i446: i8;
  var $i447: i8;
  var $p448: ref;
  var $i449: i8;
  var $i450: i8;
  var $i451: i8;
  var $p452: ref;
  var $i453: i8;
  var $i454: i8;
  var $i455: i8;
  var $p456: ref;
  var $p457: ref;
  var $p459: ref;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $i464: i8;
  var $i465: i32;
  var $i466: i1;
  var $p467: ref;
  var $i468: i8;
  var $i469: i8;
  var $i470: i32;
  var $i471: i32;
  var $i472: i32;
  var $i473: i64;
  var $p474: ref;
  var $p475: ref;
  var $i476: i8;
  var $i477: i8;
  var $i478: i32;
  var $i479: i32;
  var $i480: i64;
  var $p481: ref;
  var $p482: ref;
  var $p484: ref;
  var $p486: ref;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $i493: i8;
  var $i494: i8;
  var $i495: i8;
  var $p496: ref;
  var $i497: i8;
  var $i498: i8;
  var $i499: i8;
  var $p500: ref;
  var $i501: i8;
  var $i502: i8;
  var $p503: ref;
  var $p504: ref;
  var $p506: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $i511: i8;
  var $i512: i32;
  var $i513: i1;
  var $p514: ref;
  var $i515: i8;
  var $i516: i8;
  var $i517: i32;
  var $i518: i32;
  var $i519: i32;
  var $i520: i64;
  var $p521: ref;
  var $p522: ref;
  var $i523: i8;
  var $i524: i8;
  var $i525: i32;
  var $i526: i32;
  var $i527: i64;
  var $p528: ref;
  var $p529: ref;
  var $p531: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $i540: i8;
  var $i541: i8;
  var $i542: i8;
  var $p543: ref;
  var $i544: i8;
  var $i545: i8;
  var $i546: i8;
  var $p547: ref;
  var $i548: i8;
  var $i549: i8;
  var $i550: i8;
  var $p551: ref;
  var $p552: ref;
  var $p554: ref;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $i559: i8;
  var $i560: i32;
  var $i561: i1;
  var $p562: ref;
  var $i563: i8;
  var $i564: i8;
  var $i565: i32;
  var $i566: i32;
  var $i567: i32;
  var $i568: i64;
  var $p569: ref;
  var $p570: ref;
  var $i571: i8;
  var $i572: i8;
  var $i573: i32;
  var $i574: i32;
  var $i575: i64;
  var $p576: ref;
  var $p577: ref;
  var $p579: ref;
  var $p581: ref;
  var $p582: ref;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $i588: i8;
  var $i589: i8;
  var $i590: i8;
  var $p591: ref;
  var $i592: i8;
  var $i593: i8;
  var $i594: i8;
  var $p595: ref;
  var $i596: i8;
  var $i597: i8;
  var $p598: ref;
  var $p599: ref;
  var $p601: ref;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $i606: i8;
  var $i607: i32;
  var $i608: i1;
  var $p609: ref;
  var $i610: i8;
  var $i611: i8;
  var $i612: i32;
  var $i613: i32;
  var $i614: i32;
  var $i615: i64;
  var $p616: ref;
  var $p617: ref;
  var $i618: i8;
  var $i619: i8;
  var $i620: i32;
  var $i621: i32;
  var $i622: i64;
  var $p623: ref;
  var $p624: ref;
  var $p626: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $p631: ref;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $i635: i8;
  var $i636: i8;
  var $i637: i8;
  var $p638: ref;
  var $i639: i8;
  var $i640: i8;
  var $i641: i8;
  var $p642: ref;
  var $i643: i8;
  var $i644: i8;
  var $i645: i8;
  var $p646: ref;
  var $p647: ref;
  var $p649: ref;
  var $p651: ref;
  var $p652: ref;
  var $p653: ref;
  var $i654: i8;
  var $i655: i32;
  var $i656: i1;
  var $p657: ref;
  var $i658: i8;
  var $i659: i8;
  var $i660: i32;
  var $i661: i32;
  var $i662: i32;
  var $i663: i64;
  var $p664: ref;
  var $p665: ref;
  var $i666: i8;
  var $i667: i8;
  var $i668: i32;
  var $i669: i32;
  var $i670: i64;
  var $p671: ref;
  var $p672: ref;
  var $p674: ref;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $p682: ref;
  var $i683: i8;
  var $i684: i8;
  var $i685: i8;
  var $p686: ref;
  var $i687: i8;
  var $i688: i8;
  var $i689: i8;
  var $p690: ref;
  var $i691: i8;
  var $i692: i8;
  var $p693: ref;
  var $p694: ref;
  var $p696: ref;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $i701: i8;
  var $i702: i32;
  var $i703: i1;
  var $p704: ref;
  var $i705: i8;
  var $i706: i8;
  var $i707: i32;
  var $i708: i32;
  var $i709: i32;
  var $i710: i64;
  var $p711: ref;
  var $p712: ref;
  var $i713: i8;
  var $i714: i8;
  var $i715: i32;
  var $i716: i32;
  var $i717: i64;
  var $p718: ref;
  var $p719: ref;
  var $p721: ref;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $p727: ref;
  var $p728: ref;
  var $p729: ref;
  var $i730: i8;
  var $i731: i8;
  var $i732: i8;
  var $p733: ref;
  var $i734: i8;
  var $i735: i8;
  var $i736: i8;
  var $p737: ref;
  var $i738: i8;
  var $i739: i8;
  var $i740: i8;
  var $p741: ref;
  var $p742: ref;
  var $p744: ref;
  var $p746: ref;
  var $p747: ref;
  var $p748: ref;
  var $i749: i8;
  var $i750: i32;
  var $i751: i1;
  var $p752: ref;
  var $i753: i8;
  var $i754: i8;
  var $i755: i32;
  var $i756: i32;
  var $i757: i32;
  var $i758: i64;
  var $p759: ref;
  var $p760: ref;
  var $i761: i8;
  var $i762: i8;
  var $i763: i32;
  var $i764: i32;
  var $i765: i64;
  var $p766: ref;
  var $p767: ref;
  var $p769: ref;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $p775: ref;
  var $p776: ref;
  var $p777: ref;
  var $i778: i8;
  var $i779: i8;
  var $i780: i8;
  var $p781: ref;
  var $i782: i8;
  var $i783: i8;
  var $i784: i8;
  var $p785: ref;
  var $i786: i8;
  var $i787: i8;
  var $p788: ref;
  var $p789: ref;
  var $p791: ref;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $i796: i8;
  var $i797: i32;
  var $i798: i1;
  var $p799: ref;
  var $i800: i8;
  var $i801: i8;
  var $i802: i32;
  var $i803: i32;
  var $i804: i32;
  var $i805: i64;
  var $p806: ref;
  var $p807: ref;
  var $i808: i8;
  var $i809: i8;
  var $i810: i32;
  var $i811: i32;
  var $i812: i64;
  var $p813: ref;
  var $p814: ref;
  var $p816: ref;
  var $p818: ref;
  var $p819: ref;
  var $p820: ref;
  var $p821: ref;
  var $p822: ref;
  var $p823: ref;
  var $p824: ref;
  var $i825: i8;
  var $i826: i8;
  var $i827: i8;
  var $p828: ref;
  var $i829: i8;
  var $i830: i8;
  var $i831: i8;
  var $p832: ref;
  var $i833: i8;
  var $i834: i8;
  var $i835: i8;
  var $p836: ref;
  var $p837: ref;
  var $p839: ref;
  var $p841: ref;
  var $p842: ref;
  var $p843: ref;
  var $i844: i8;
  var $i845: i32;
  var $i846: i1;
  var $p847: ref;
  var $i848: i8;
  var $i849: i8;
  var $i850: i32;
  var $i851: i32;
  var $i852: i32;
  var $i853: i64;
  var $p854: ref;
  var $p855: ref;
  var $i856: i8;
  var $i857: i8;
  var $i858: i32;
  var $i859: i32;
  var $i860: i64;
  var $p861: ref;
  var $p862: ref;
  var $p864: ref;
  var $p866: ref;
  var $p867: ref;
  var $p868: ref;
  var $p869: ref;
  var $p870: ref;
  var $p871: ref;
  var $p872: ref;
  var $i873: i8;
  var $i874: i8;
  var $i875: i8;
  var $p876: ref;
  var $i877: i8;
  var $i878: i8;
  var $i879: i8;
  var $p880: ref;
  var $i881: i8;
  var $i882: i8;
  var $p883: ref;
  var $p884: ref;
  var $p886: ref;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $i891: i8;
  var $i892: i32;
  var $i893: i1;
  var $p894: ref;
  var $i895: i8;
  var $i896: i8;
  var $i897: i32;
  var $i898: i32;
  var $i899: i32;
  var $i900: i64;
  var $p901: ref;
  var $p902: ref;
  var $i903: i8;
  var $i904: i8;
  var $i905: i32;
  var $i906: i32;
  var $i907: i64;
  var $p908: ref;
  var $p909: ref;
  var $p911: ref;
  var $p913: ref;
  var $p914: ref;
  var $p915: ref;
  var $p916: ref;
  var $p917: ref;
  var $p918: ref;
  var $p919: ref;
  var $i920: i8;
  var $i921: i8;
  var $i922: i8;
  var $p923: ref;
  var $i924: i8;
  var $i925: i8;
  var $i926: i8;
  var $p927: ref;
  var $i928: i8;
  var $i929: i8;
  var $i930: i8;
  var $p931: ref;
  var $p932: ref;
  var $p934: ref;
  var $p936: ref;
  var $p937: ref;
  var $p938: ref;
  var $i939: i8;
  var $i940: i32;
  var $i941: i1;
  var $p942: ref;
  var $i943: i8;
  var $i944: i8;
  var $i945: i32;
  var $i946: i32;
  var $i947: i32;
  var $i948: i64;
  var $p949: ref;
  var $p950: ref;
  var $i951: i8;
  var $i952: i8;
  var $i953: i32;
  var $i954: i32;
  var $i955: i64;
  var $p956: ref;
  var $p957: ref;
  var $p959: ref;
  var $p961: ref;
  var $p962: ref;
  var $p963: ref;
  var $p964: ref;
  var $p965: ref;
  var $p966: ref;
  var $p967: ref;
  var $i968: i8;
  var $i969: i8;
  var $i970: i8;
  var $p971: ref;
  var $i972: i8;
  var $i973: i8;
  var $i974: i8;
  var $p975: ref;
  var $i976: i8;
  var $i977: i8;
  var $p978: ref;
  var $p979: ref;
  var $p981: ref;
  var $p983: ref;
  var $p984: ref;
  var $p985: ref;
  var $i986: i8;
  var $i987: i32;
  var $i988: i1;
  var $p989: ref;
  var $i990: i8;
  var $i991: i8;
  var $i992: i32;
  var $i993: i32;
  var $i994: i32;
  var $i995: i64;
  var $p996: ref;
  var $p997: ref;
  var $i998: i8;
  var $i999: i8;
  var $i1000: i32;
  var $i1001: i32;
  var $i1002: i64;
  var $p1003: ref;
  var $p1004: ref;
  var $p1006: ref;
  var $p1008: ref;
  var $p1009: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $p1012: ref;
  var $p1013: ref;
  var $p1014: ref;
  var $i1015: i8;
  var $i1016: i8;
  var $i1017: i8;
  var $p1018: ref;
  var $i1019: i8;
  var $i1020: i8;
  var $i1021: i8;
  var $p1022: ref;
  var $i1023: i8;
  var $i1024: i8;
  var $i1025: i8;
  var $p1026: ref;
  var $p1027: ref;
  var $p1029: ref;
  var $p1031: ref;
  var $p1032: ref;
  var $p1033: ref;
  var $i1034: i8;
  var $i1035: i32;
  var $i1036: i1;
  var $p1037: ref;
  var $i1038: i8;
  var $i1039: i8;
  var $i1040: i32;
  var $i1041: i32;
  var $i1042: i32;
  var $i1043: i64;
  var $p1044: ref;
  var $p1045: ref;
  var $i1046: i8;
  var $i1047: i8;
  var $i1048: i32;
  var $i1049: i32;
  var $i1050: i64;
  var $p1051: ref;
  var $p1052: ref;
  var $p1054: ref;
  var $p1056: ref;
  var $p1057: ref;
  var $p1058: ref;
  var $p1059: ref;
  var $p1060: ref;
  var $p1061: ref;
  var $p1062: ref;
  var $i1063: i8;
  var $i1064: i8;
  var $i1065: i8;
  var $p1066: ref;
  var $i1067: i8;
  var $i1068: i8;
  var $i1069: i8;
  var $p1070: ref;
  var $i1071: i8;
  var $i1072: i8;
  var $p1073: ref;
  var $p1074: ref;
  var $p1076: ref;
  var $p1078: ref;
  var $p1079: ref;
  var $p1080: ref;
  var $i1081: i8;
  var $i1082: i32;
  var $i1083: i1;
  var $p1084: ref;
  var $i1085: i8;
  var $i1086: i8;
  var $i1087: i32;
  var $i1088: i32;
  var $i1089: i32;
  var $i1090: i64;
  var $p1091: ref;
  var $p1092: ref;
  var $i1093: i8;
  var $i1094: i8;
  var $i1095: i32;
  var $i1096: i32;
  var $i1097: i64;
  var $p1098: ref;
  var $p1099: ref;
  var $p1101: ref;
  var $p1103: ref;
  var $p1104: ref;
  var $p1105: ref;
  var $p1106: ref;
  var $p1107: ref;
  var $p1108: ref;
  var $p1109: ref;
  var $i1110: i8;
  var $i1111: i8;
  var $i1112: i8;
  var $p1113: ref;
  var $i1114: i8;
  var $i1115: i8;
  var $i1116: i8;
  var $p1117: ref;
  var $i1118: i8;
  var $i1119: i8;
  var $i1120: i8;
  var $p1121: ref;
  var $p1122: ref;
  var $p1124: ref;
  var $p1126: ref;
  var $p1127: ref;
  var $p1128: ref;
  var $i1129: i8;
  var $i1130: i32;
  var $i1131: i1;
  var $p1132: ref;
  var $i1133: i8;
  var $i1134: i8;
  var $i1135: i32;
  var $i1136: i32;
  var $i1137: i32;
  var $i1138: i64;
  var $p1139: ref;
  var $p1140: ref;
  var $i1141: i8;
  var $i1142: i8;
  var $i1143: i32;
  var $i1144: i32;
  var $i1145: i64;
  var $p1146: ref;
  var $p1147: ref;
  var $p1149: ref;
  var $p1151: ref;
  var $p1152: ref;
  var $p1153: ref;
  var $p1154: ref;
  var $p1155: ref;
  var $p1156: ref;
  var $p1157: ref;
  var $i1158: i8;
  var $i1159: i8;
  var $i1160: i8;
  var $p1161: ref;
  var $i1162: i8;
  var $i1163: i8;
  var $i1164: i8;
  var $p1165: ref;
  var $i1166: i8;
  var $i1167: i8;
  var $p1168: ref;
  var $p1169: ref;
  var $p1171: ref;
  var $p1173: ref;
  var $p1174: ref;
  var $p1175: ref;
  var $i1176: i8;
  var $i1177: i32;
  var $i1178: i1;
  var $p1179: ref;
  var $i1180: i8;
  var $i1181: i8;
  var $i1182: i32;
  var $i1183: i32;
  var $i1184: i32;
  var $i1185: i64;
  var $p1186: ref;
  var $p1187: ref;
  var $i1188: i8;
  var $i1189: i8;
  var $i1190: i32;
  var $i1191: i32;
  var $i1192: i64;
  var $p1193: ref;
  var $p1194: ref;
  var $p1196: ref;
  var $p1198: ref;
  var $p1199: ref;
  var $p1200: ref;
  var $p1201: ref;
  var $p1202: ref;
  var $p1203: ref;
  var $p1204: ref;
  var $i1205: i8;
  var $i1206: i8;
  var $i1207: i8;
  var $p1208: ref;
  var $i1209: i8;
  var $i1210: i8;
  var $i1211: i8;
  var $p1212: ref;
  var $i1213: i8;
  var $i1214: i8;
  var $i1215: i8;
  var $p1216: ref;
  var $p1217: ref;
  var $p1219: ref;
  var $p1221: ref;
  var $p1222: ref;
  var $p1223: ref;
  var $i1224: i8;
  var $i1225: i32;
  var $i1226: i1;
  var $p1227: ref;
  var $i1228: i8;
  var $i1229: i8;
  var $i1230: i32;
  var $i1231: i32;
  var $i1232: i32;
  var $i1233: i64;
  var $p1234: ref;
  var $p1235: ref;
  var $i1236: i8;
  var $i1237: i8;
  var $i1238: i32;
  var $i1239: i32;
  var $i1240: i64;
  var $p1241: ref;
  var $p1242: ref;
  var $p1244: ref;
  var $p1246: ref;
  var $p1247: ref;
  var $p1248: ref;
  var $p1249: ref;
  var $p1250: ref;
  var $p1251: ref;
  var $p1252: ref;
  var $i1253: i8;
  var $i1254: i8;
  var $i1255: i8;
  var $p1256: ref;
  var $i1257: i8;
  var $i1258: i8;
  var $i1259: i8;
  var $p1260: ref;
  var $i1261: i8;
  var $i1262: i8;
  var $p1263: ref;
  var $p1264: ref;
  var $p1266: ref;
  var $p1268: ref;
  var $p1269: ref;
  var $p1270: ref;
  var $i1271: i8;
  var $i1272: i32;
  var $i1273: i1;
  var $p1274: ref;
  var $i1275: i8;
  var $i1276: i8;
  var $i1277: i32;
  var $i1278: i32;
  var $i1279: i32;
  var $i1280: i64;
  var $p1281: ref;
  var $p1282: ref;
  var $i1283: i8;
  var $i1284: i8;
  var $i1285: i32;
  var $i1286: i32;
  var $i1287: i64;
  var $p1288: ref;
  var $p1289: ref;
  var $p1291: ref;
  var $p1293: ref;
  var $p1294: ref;
  var $p1295: ref;
  var $p1296: ref;
  var $p1297: ref;
  var $p1298: ref;
  var $p1299: ref;
  var $i1300: i8;
  var $i1301: i8;
  var $i1302: i8;
  var $p1303: ref;
  var $i1304: i8;
  var $i1305: i8;
  var $i1306: i8;
  var $p1307: ref;
  var $i1308: i8;
  var $i1309: i8;
  var $i1310: i8;
  var $p1311: ref;
  var $p1312: ref;
  var $p1314: ref;
  var $p1316: ref;
  var $p1317: ref;
  var $p1318: ref;
  var $i1319: i8;
  var $i1320: i32;
  var $i1321: i1;
  var $p1322: ref;
  var $i1323: i8;
  var $i1324: i8;
  var $i1325: i32;
  var $i1326: i32;
  var $i1327: i32;
  var $i1328: i64;
  var $p1329: ref;
  var $p1330: ref;
  var $i1331: i8;
  var $i1332: i8;
  var $i1333: i32;
  var $i1334: i32;
  var $i1335: i64;
  var $p1336: ref;
  var $p1337: ref;
  var $p1339: ref;
  var $p1341: ref;
  var $p1342: ref;
  var $p1343: ref;
  var $p1344: ref;
  var $p1345: ref;
  var $p1346: ref;
  var $p1347: ref;
  var $i1348: i8;
  var $i1349: i8;
  var $i1350: i8;
  var $p1351: ref;
  var $i1352: i8;
  var $i1353: i8;
  var $i1354: i8;
  var $p1355: ref;
  var $i1356: i8;
  var $i1357: i8;
  var $p1358: ref;
  var $p1359: ref;
  var $p1361: ref;
  var $p1363: ref;
  var $p1364: ref;
  var $p1365: ref;
  var $i1366: i8;
  var $i1367: i32;
  var $i1368: i1;
  var $p1369: ref;
  var $i1370: i8;
  var $i1371: i8;
  var $i1372: i32;
  var $i1373: i32;
  var $i1374: i32;
  var $i1375: i64;
  var $p1376: ref;
  var $p1377: ref;
  var $i1378: i8;
  var $i1379: i8;
  var $i1380: i32;
  var $i1381: i32;
  var $i1382: i64;
  var $p1383: ref;
  var $p1384: ref;
  var $p1386: ref;
  var $p1388: ref;
  var $p1389: ref;
  var $p1390: ref;
  var $p1391: ref;
  var $p1392: ref;
  var $p1393: ref;
  var $p1394: ref;
  var $i1395: i8;
  var $i1396: i8;
  var $i1397: i8;
  var $p1398: ref;
  var $i1399: i8;
  var $i1400: i8;
  var $i1401: i8;
  var $p1402: ref;
  var $i1403: i8;
  var $i1404: i8;
  var $i1405: i8;
  var $p1406: ref;
  var $p1407: ref;
  var $p1409: ref;
  var $p1411: ref;
  var $p1412: ref;
  var $p1413: ref;
  var $i1414: i8;
  var $i1415: i32;
  var $i1416: i1;
  var $p1417: ref;
  var $i1418: i8;
  var $i1419: i8;
  var $i1420: i32;
  var $i1421: i32;
  var $i1422: i32;
  var $i1423: i64;
  var $p1424: ref;
  var $p1425: ref;
  var $i1426: i8;
  var $i1427: i8;
  var $i1428: i32;
  var $i1429: i32;
  var $i1430: i64;
  var $p1431: ref;
  var $p1432: ref;
  var $p1434: ref;
  var $p1436: ref;
  var $p1437: ref;
  var $p1438: ref;
  var $p1439: ref;
  var $p1440: ref;
  var $p1441: ref;
  var $p1442: ref;
  var $i1443: i8;
  var $i1444: i8;
  var $i1445: i8;
  var $p1446: ref;
  var $i1447: i8;
  var $i1448: i8;
  var $i1449: i8;
  var $p1450: ref;
  var $i1451: i8;
  var $i1452: i8;
  var $p1453: ref;
  var $p1454: ref;
  var $p1456: ref;
  var $p1458: ref;
  var $p1459: ref;
  var $p1460: ref;
  var $i1461: i8;
  var $i1462: i32;
  var $i1463: i1;
  var $p1464: ref;
  var $i1465: i8;
  var $i1466: i8;
  var $i1467: i32;
  var $i1468: i32;
  var $i1469: i32;
  var $i1470: i64;
  var $p1471: ref;
  var $p1472: ref;
  var $i1473: i8;
  var $i1474: i8;
  var $i1475: i32;
  var $i1476: i32;
  var $i1477: i64;
  var $p1478: ref;
  var $p1479: ref;
  var $p1481: ref;
  var $p1483: ref;
  var $p1484: ref;
  var $p1485: ref;
  var $p1486: ref;
  var $p1487: ref;
  var $p1488: ref;
  var $p1489: ref;
  var $i1490: i8;
  var $i1491: i8;
  var $i1492: i8;
  var $p1493: ref;
  var $i1494: i8;
  var $i1495: i8;
  var $i1496: i8;
  var $p1497: ref;
  var $i1498: i8;
  var $i1499: i8;
  var $i1500: i8;
  var $p1501: ref;
  var $p1502: ref;
  var $p1504: ref;
  var $p1506: ref;
  var $p1507: ref;
  var $p1508: ref;
  var $i1509: i8;
  var $i1510: i32;
  var $i1511: i1;
  var $p1512: ref;
  var $i1513: i8;
  var $i1514: i8;
  var $i1515: i32;
  var $i1516: i32;
  var $i1517: i32;
  var $i1518: i64;
  var $p1519: ref;
  var $p1520: ref;
  var $i1521: i8;
  var $i1522: i8;
  var $i1523: i32;
  var $i1524: i32;
  var $i1525: i64;
  var $p1526: ref;
  var $p1527: ref;
  var $p1529: ref;
  var $p1531: ref;
  var $p1532: ref;
  var $p1533: ref;
  var $p1534: ref;
  var $p1535: ref;
  var $p1536: ref;
  var $p1537: ref;
  var $i1538: i8;
  var $i1539: i8;
  var $i1540: i8;
  var $p1541: ref;
  var $i1542: i8;
  var $i1543: i8;
  var $i1544: i8;
  var $p1545: ref;
  var $i1546: i8;
  var $i1547: i8;
  var $p1548: ref;
  var $p1549: ref;
  var $p1551: ref;
  var $p1553: ref;
  var $p1554: ref;
  var $p1555: ref;
  var $i1556: i8;
  var $i1557: i32;
  var $i1558: i1;
  var $p1559: ref;
  var $i1560: i8;
  var $i1561: i8;
  var $i1562: i32;
  var $i1563: i32;
  var $i1564: i32;
  var $i1565: i64;
  var $p1566: ref;
  var $p1567: ref;
  var $i1568: i8;
  var $i1569: i8;
  var $i1570: i32;
  var $i1571: i32;
  var $i1572: i64;
  var $p1573: ref;
  var $p1574: ref;
  var $p1576: ref;
  var $p1578: ref;
  var $p1579: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p1 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p2, ep0_string);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(1, 8));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, .str.38);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(2, 8));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p4, .str.39);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(3, 8));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, .str.40);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(4, 8));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p6, .str.41);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(5, 8));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p7, .str.42);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(6, 8));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p8, .str.43);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(7, 8));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p9, .str.44);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(8, 8));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p10, .str.45);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(9, 8));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p11, .str.46);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(10, 8));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p12, .str.47);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(11, 8));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p13, .str.48);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(12, 8));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p14, .str.49);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(13, 8));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p15, .str.50);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(14, 8));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p16, .str.51);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(15, 8));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p17, .str.52);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(16, 8));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p18, .str.53);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(17, 8));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p19, .str.54);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(18, 8));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p20, .str.55);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(19, 8));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p21, .str.56);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(20, 8));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p22, .str.57);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(21, 8));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p23, .str.58);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(22, 8));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p24, .str.59);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(23, 8));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p25, .str.60);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(24, 8));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p26, .str.61);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(25, 8));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p27, .str.62);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(26, 8));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p28, .str.63);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(27, 8));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p29, .str.64);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(28, 8));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p30, .str.65);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(29, 8));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p31, .str.66);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(30, 8));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p32, .str.67);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(31, 8));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p33, .str.68);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} INIT_LIST_HEAD($p37);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 880} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p39, 0, 4608, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p0);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i45 := $and.i8($i44, $sub.i8(0, 65));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i46 := $or.i8($i45, 64);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i46);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i49 := $and.i8($i48, $sub.i8(0, 32));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i49);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i52 := $and.i8($i51, $sub.i8(0, 33));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i53 := $or.i8($i52, 32);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i53);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.24, $p54);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p55);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, pch_udc_ep_ops);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p41);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(128, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i64 == 1);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i74 := $and.i8($i73, 31);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 16);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i77 := $mul.i32($i76, 32);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p79, $i78);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} usb_ep_set_maxpacket_limit($p80, 512);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} list_add_tail($p82, $p84);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} INIT_LIST_HEAD($p85);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p110, $mul.ref(1, 144));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(96, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p112, $p0);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i115 := $and.i8($i114, $sub.i8(0, 65));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i116 := $or.i8($i115, 64);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, $i116);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i119 := $and.i8($i118, $sub.i8(0, 32));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, $i119);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i122 := $and.i8($i121, $sub.i8(0, 33));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, $i122);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(1, 8));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.24, $p123);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, $p124);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p128, pch_udc_ep_ops);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p111);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref(128, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i133 == 1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.0, $p134);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i136 := $and.i8($i135, 31);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i137, 16);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i139 := $mul.i32($i138, 32);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i139);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(104, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p141, $i140);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(0, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} usb_ep_set_maxpacket_limit($p149, 512);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} list_add_tail($p151, $p153);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(112, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} INIT_LIST_HEAD($p154);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p156, $mul.ref(2, 144));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(96, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p158, $p0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i161 := $and.i8($i160, $sub.i8(0, 65));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i162 := $or.i8($i161, 64);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p159, $i162);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.0, $p163);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i165 := $and.i8($i164, $sub.i8(0, 32));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i166 := $or.i8($i165, 1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p163, $i166);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i169 := $and.i8($i168, $sub.i8(0, 33));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i170 := $or.i8($i169, 32);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p167, $i170);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(2, 8));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.24, $p171);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p174, $p172);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p176, pch_udc_ep_ops);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p157);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p177, $mul.ref(128, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i181 == 1);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.0, $p182);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i184 := $and.i8($i183, 31);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i184);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i185, 16);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i187 := $mul.i32($i186, 32);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i187);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(104, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p189, $i188);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(0, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} usb_ep_set_maxpacket_limit($p197, 512);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} list_add_tail($p199, $p201);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(112, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} INIT_LIST_HEAD($p202);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p204, $mul.ref(3, 144));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(96, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p206, $p0);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.0, $p207);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i209 := $and.i8($i208, $sub.i8(0, 65));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i210 := $or.i8($i209, 64);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p207, $i210);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i212 := $load.i8($M.0, $p211);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i213 := $and.i8($i212, $sub.i8(0, 32));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i214 := $or.i8($i213, 1);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p211, $i214);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i216 := $load.i8($M.0, $p215);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i217 := $and.i8($i216, $sub.i8(0, 33));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p215, $i217);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(3, 8));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.24, $p218);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p221, $p219);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p223, pch_udc_ep_ops);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p205);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($p224, $mul.ref(128, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.0, $p225);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i32($i226);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i228 := $ne.i32($i227, 0);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i228 == 1);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.0, $p229);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i231 := $and.i8($i230, 31);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i232, 16);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i234 := $mul.i32($i233, 32);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i235 := $sext.i32.i64($i234);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(104, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p236, $i235);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(0, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} usb_ep_set_maxpacket_limit($p244, 512);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} list_add_tail($p246, $p248);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(112, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} INIT_LIST_HEAD($p249);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($p251, $mul.ref(4, 144));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(96, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p253, $p0);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.0, $p254);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i256 := $and.i8($i255, $sub.i8(0, 65));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i257 := $or.i8($i256, 64);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p254, $i257);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.0, $p258);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i260 := $and.i8($i259, $sub.i8(0, 32));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i261 := $or.i8($i260, 2);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p258, $i261);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.0, $p262);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i264 := $and.i8($i263, $sub.i8(0, 33));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i265 := $or.i8($i264, 32);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p262, $i265);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(4, 8));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.24, $p266);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p269, $p267);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p271, pch_udc_ep_ops);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p272 := $bitcast.ref.ref($p252);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p272, $mul.ref(128, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.0, $p273);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i274);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i276 == 1);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i278 := $load.i8($M.0, $p277);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i279 := $and.i8($i278, 31);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i280 := $zext.i8.i32($i279);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i281 := $add.i32($i280, 16);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i282 := $mul.i32($i281, 32);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i283 := $sext.i32.i64($i282);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(104, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p284, $i283);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(0, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} usb_ep_set_maxpacket_limit($p292, 512);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} list_add_tail($p294, $p296);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(112, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} INIT_LIST_HEAD($p297);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p299 := $bitcast.ref.ref($p298);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($p299, $mul.ref(5, 144));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(96, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p301, $p0);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i303 := $load.i8($M.0, $p302);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i304 := $and.i8($i303, $sub.i8(0, 65));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i305 := $or.i8($i304, 64);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p302, $i305);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i307 := $load.i8($M.0, $p306);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i308 := $and.i8($i307, $sub.i8(0, 32));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i309 := $or.i8($i308, 2);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p306, $i309);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i311 := $load.i8($M.0, $p310);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i312 := $and.i8($i311, $sub.i8(0, 33));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p310, $i312);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(5, 8));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.24, $p313);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p316, $p314);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p318, pch_udc_ep_ops);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p300);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($p319, $mul.ref(128, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.0, $p320);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i32($i321);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i323 == 1);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i325 := $load.i8($M.0, $p324);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i326 := $and.i8($i325, 31);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i327 := $zext.i8.i32($i326);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i328 := $add.i32($i327, 16);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i329 := $mul.i32($i328, 32);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i330 := $sext.i32.i64($i329);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(104, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p331, $i330);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(0, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} usb_ep_set_maxpacket_limit($p339, 512);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} list_add_tail($p341, $p343);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(112, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} INIT_LIST_HEAD($p344);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p346 := $bitcast.ref.ref($p345);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($p346, $mul.ref(6, 144));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(96, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p348, $p0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i350 := $load.i8($M.0, $p349);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i351 := $and.i8($i350, $sub.i8(0, 65));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i352 := $or.i8($i351, 64);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p349, $i352);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i354 := $load.i8($M.0, $p353);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i355 := $and.i8($i354, $sub.i8(0, 32));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i356 := $or.i8($i355, 3);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p353, $i356);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i358 := $load.i8($M.0, $p357);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i359 := $and.i8($i358, $sub.i8(0, 33));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i360 := $or.i8($i359, 32);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p357, $i360);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(6, 8));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.24, $p361);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p364, $p362);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p366, pch_udc_ep_ops);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p367 := $bitcast.ref.ref($p347);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($p367, $mul.ref(128, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i369 := $load.i8($M.0, $p368);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i370 := $zext.i8.i32($i369);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i371 := $ne.i32($i370, 0);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i371 == 1);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i373 := $load.i8($M.0, $p372);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i374 := $and.i8($i373, 31);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i375 := $zext.i8.i32($i374);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i376 := $add.i32($i375, 16);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i377 := $mul.i32($i376, 32);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i378 := $sext.i32.i64($i377);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(104, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p379, $i378);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(0, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} usb_ep_set_maxpacket_limit($p387, 512);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} list_add_tail($p389, $p391);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(112, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} INIT_LIST_HEAD($p392);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p394 := $bitcast.ref.ref($p393);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($p394, $mul.ref(7, 144));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(96, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p396, $p0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i398 := $load.i8($M.0, $p397);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i399 := $and.i8($i398, $sub.i8(0, 65));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i400 := $or.i8($i399, 64);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p397, $i400);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i402 := $load.i8($M.0, $p401);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i403 := $and.i8($i402, $sub.i8(0, 32));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i404 := $or.i8($i403, 3);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p401, $i404);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i406 := $load.i8($M.0, $p405);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i407 := $and.i8($i406, $sub.i8(0, 33));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p405, $i407);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(7, 8));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.24, $p408);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p411, $p409);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p413, pch_udc_ep_ops);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p414 := $bitcast.ref.ref($p395);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($p414, $mul.ref(128, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i416 := $load.i8($M.0, $p415);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i417 := $zext.i8.i32($i416);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i418 := $ne.i32($i417, 0);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i418 == 1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i420 := $load.i8($M.0, $p419);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i421 := $and.i8($i420, 31);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i422 := $zext.i8.i32($i421);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i423 := $add.i32($i422, 16);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i424 := $mul.i32($i423, 32);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i425 := $sext.i32.i64($i424);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(104, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p426, $i425);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(0, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} usb_ep_set_maxpacket_limit($p434, 512);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} list_add_tail($p436, $p438);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(112, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} INIT_LIST_HEAD($p439);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p441 := $bitcast.ref.ref($p440);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($p441, $mul.ref(8, 144));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(96, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p443, $p0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(128, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.0, $p444);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i446 := $and.i8($i445, $sub.i8(0, 65));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i447 := $or.i8($i446, 64);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p444, $i447);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(128, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i449 := $load.i8($M.0, $p448);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i450 := $and.i8($i449, $sub.i8(0, 32));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i451 := $or.i8($i450, 4);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p448, $i451);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(128, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i453 := $load.i8($M.0, $p452);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i454 := $and.i8($i453, $sub.i8(0, 33));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i455 := $or.i8($i454, 32);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p452, $i455);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(8, 8));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.24, $p456);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p459, $p457);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p461, pch_udc_ep_ops);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p462 := $bitcast.ref.ref($p442);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($p462, $mul.ref(128, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i464 := $load.i8($M.0, $p463);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i465 := $zext.i8.i32($i464);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i466 := $ne.i32($i465, 0);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i466 == 1);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(128, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i468 := $load.i8($M.0, $p467);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i469 := $and.i8($i468, 31);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i470 := $zext.i8.i32($i469);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i471 := $add.i32($i470, 16);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i472 := $mul.i32($i471, 32);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i473 := $sext.i32.i64($i472);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(104, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p474, $i473);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(0, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} usb_ep_set_maxpacket_limit($p482, 512);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} list_add_tail($p484, $p486);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(112, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} INIT_LIST_HEAD($p487);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p489 := $bitcast.ref.ref($p488);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($p489, $mul.ref(9, 144));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(96, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p491, $p0);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(128, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i493 := $load.i8($M.0, $p492);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i494 := $and.i8($i493, $sub.i8(0, 65));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i495 := $or.i8($i494, 64);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p492, $i495);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(128, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i497 := $load.i8($M.0, $p496);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i498 := $and.i8($i497, $sub.i8(0, 32));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i499 := $or.i8($i498, 4);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p496, $i499);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(128, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i501 := $load.i8($M.0, $p500);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i502 := $and.i8($i501, $sub.i8(0, 33));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p500, $i502);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(9, 8));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p504 := $load.ref($M.24, $p503);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p506, $p504);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p508, pch_udc_ep_ops);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p490);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($p509, $mul.ref(128, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i511 := $load.i8($M.0, $p510);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i512 := $zext.i8.i32($i511);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i513 := $ne.i32($i512, 0);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i513} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i513 == 1);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(128, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i515 := $load.i8($M.0, $p514);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i516 := $and.i8($i515, 31);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i517 := $zext.i8.i32($i516);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i518 := $add.i32($i517, 16);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i519 := $mul.i32($i518, 32);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i520 := $sext.i32.i64($i519);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(104, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p521, $i520);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(0, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} usb_ep_set_maxpacket_limit($p529, 512);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} list_add_tail($p531, $p533);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(112, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} INIT_LIST_HEAD($p534);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p536 := $bitcast.ref.ref($p535);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($p536, $mul.ref(10, 144));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(96, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p538, $p0);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(128, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i540 := $load.i8($M.0, $p539);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i541 := $and.i8($i540, $sub.i8(0, 65));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i542 := $or.i8($i541, 64);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p539, $i542);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(128, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i544 := $load.i8($M.0, $p543);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i545 := $and.i8($i544, $sub.i8(0, 32));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i546 := $or.i8($i545, 5);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p543, $i546);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(128, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i548 := $load.i8($M.0, $p547);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i549 := $and.i8($i548, $sub.i8(0, 33));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i550 := $or.i8($i549, 32);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p547, $i550);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(10, 8));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p552 := $load.ref($M.24, $p551);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p554, $p552);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p556, pch_udc_ep_ops);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p557 := $bitcast.ref.ref($p537);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($p557, $mul.ref(128, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i559 := $load.i8($M.0, $p558);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i560 := $zext.i8.i32($i559);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i561 := $ne.i32($i560, 0);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i561} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i561 == 1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(128, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i563 := $load.i8($M.0, $p562);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i564 := $and.i8($i563, 31);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i565 := $zext.i8.i32($i564);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i566 := $add.i32($i565, 16);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i567 := $mul.i32($i566, 32);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i568 := $sext.i32.i64($i567);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(104, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p569, $i568);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(0, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} usb_ep_set_maxpacket_limit($p577, 512);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} list_add_tail($p579, $p581);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(112, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} INIT_LIST_HEAD($p582);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p584 := $bitcast.ref.ref($p583);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($p584, $mul.ref(11, 144));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(96, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p586, $p0);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(128, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i588 := $load.i8($M.0, $p587);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i589 := $and.i8($i588, $sub.i8(0, 65));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i590 := $or.i8($i589, 64);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p587, $i590);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(128, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i592 := $load.i8($M.0, $p591);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i593 := $and.i8($i592, $sub.i8(0, 32));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i594 := $or.i8($i593, 5);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p591, $i594);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(128, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i596 := $load.i8($M.0, $p595);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i597 := $and.i8($i596, $sub.i8(0, 33));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p595, $i597);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(11, 8));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p599 := $load.ref($M.24, $p598);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p601, $p599);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p603, pch_udc_ep_ops);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p604 := $bitcast.ref.ref($p585);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($p604, $mul.ref(128, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i606 := $load.i8($M.0, $p605);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i607 := $zext.i8.i32($i606);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i608 := $ne.i32($i607, 0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i608} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i608 == 1);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(128, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i610 := $load.i8($M.0, $p609);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i611 := $and.i8($i610, 31);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i612 := $zext.i8.i32($i611);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i613 := $add.i32($i612, 16);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i614 := $mul.i32($i613, 32);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i615 := $sext.i32.i64($i614);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(104, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p616, $i615);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(0, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} usb_ep_set_maxpacket_limit($p624, 512);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} list_add_tail($p626, $p628);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(112, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} INIT_LIST_HEAD($p629);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p631 := $bitcast.ref.ref($p630);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($p631, $mul.ref(12, 144));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(96, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p633, $p0);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(128, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i635 := $load.i8($M.0, $p634);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i636 := $and.i8($i635, $sub.i8(0, 65));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i637 := $or.i8($i636, 64);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p634, $i637);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(128, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i639 := $load.i8($M.0, $p638);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i640 := $and.i8($i639, $sub.i8(0, 32));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i641 := $or.i8($i640, 6);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p638, $i641);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(128, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i643 := $load.i8($M.0, $p642);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i644 := $and.i8($i643, $sub.i8(0, 33));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i645 := $or.i8($i644, 32);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p642, $i645);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(12, 8));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p647 := $load.ref($M.24, $p646);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p649, $p647);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p651, pch_udc_ep_ops);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p652 := $bitcast.ref.ref($p632);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($p652, $mul.ref(128, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i654 := $load.i8($M.0, $p653);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i655 := $zext.i8.i32($i654);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i656 := $ne.i32($i655, 0);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i656 == 1);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(128, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i658 := $load.i8($M.0, $p657);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i659 := $and.i8($i658, 31);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i660 := $zext.i8.i32($i659);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i661 := $add.i32($i660, 16);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i662 := $mul.i32($i661, 32);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i663 := $sext.i32.i64($i662);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(104, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p664, $i663);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(0, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} usb_ep_set_maxpacket_limit($p672, 512);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} list_add_tail($p674, $p676);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(112, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} INIT_LIST_HEAD($p677);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p679 := $bitcast.ref.ref($p678);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($p679, $mul.ref(13, 144));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(96, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p681, $p0);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(128, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i683 := $load.i8($M.0, $p682);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i684 := $and.i8($i683, $sub.i8(0, 65));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i685 := $or.i8($i684, 64);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p682, $i685);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(128, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i687 := $load.i8($M.0, $p686);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i688 := $and.i8($i687, $sub.i8(0, 32));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i689 := $or.i8($i688, 6);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p686, $i689);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(128, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i691 := $load.i8($M.0, $p690);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i692 := $and.i8($i691, $sub.i8(0, 33));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p690, $i692);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(13, 8));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p694 := $load.ref($M.24, $p693);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p696, $p694);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p698, pch_udc_ep_ops);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p699 := $bitcast.ref.ref($p680);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($p699, $mul.ref(128, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i701 := $load.i8($M.0, $p700);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i702 := $zext.i8.i32($i701);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i703 := $ne.i32($i702, 0);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i703} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i703 == 1);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(128, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i705 := $load.i8($M.0, $p704);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i706 := $and.i8($i705, 31);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i707 := $zext.i8.i32($i706);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i708 := $add.i32($i707, 16);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i709 := $mul.i32($i708, 32);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i710 := $sext.i32.i64($i709);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(104, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p711, $i710);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(0, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} usb_ep_set_maxpacket_limit($p719, 512);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} list_add_tail($p721, $p723);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(112, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} INIT_LIST_HEAD($p724);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p726 := $bitcast.ref.ref($p725);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($p726, $mul.ref(14, 144));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(96, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p728, $p0);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(128, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i730 := $load.i8($M.0, $p729);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i731 := $and.i8($i730, $sub.i8(0, 65));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i732 := $or.i8($i731, 64);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p729, $i732);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(128, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i734 := $load.i8($M.0, $p733);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i735 := $and.i8($i734, $sub.i8(0, 32));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i736 := $or.i8($i735, 7);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p733, $i736);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(128, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i738 := $load.i8($M.0, $p737);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i739 := $and.i8($i738, $sub.i8(0, 33));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i740 := $or.i8($i739, 32);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p737, $i740);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(14, 8));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p742 := $load.ref($M.24, $p741);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p744, $p742);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p746, pch_udc_ep_ops);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p747 := $bitcast.ref.ref($p727);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($p747, $mul.ref(128, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i749 := $load.i8($M.0, $p748);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i750 := $zext.i8.i32($i749);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i751 := $ne.i32($i750, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i751} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i751 == 1);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(128, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i753 := $load.i8($M.0, $p752);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i754 := $and.i8($i753, 31);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i755 := $zext.i8.i32($i754);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i756 := $add.i32($i755, 16);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i757 := $mul.i32($i756, 32);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i758 := $sext.i32.i64($i757);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(104, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p759, $i758);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(0, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} usb_ep_set_maxpacket_limit($p767, 512);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} list_add_tail($p769, $p771);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(112, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} INIT_LIST_HEAD($p772);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p774 := $bitcast.ref.ref($p773);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($p774, $mul.ref(15, 144));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(96, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p776, $p0);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(128, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i778 := $load.i8($M.0, $p777);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i779 := $and.i8($i778, $sub.i8(0, 65));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i780 := $or.i8($i779, 64);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p777, $i780);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(128, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i782 := $load.i8($M.0, $p781);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i783 := $and.i8($i782, $sub.i8(0, 32));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i784 := $or.i8($i783, 7);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p781, $i784);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(128, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i786 := $load.i8($M.0, $p785);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i787 := $and.i8($i786, $sub.i8(0, 33));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p785, $i787);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(15, 8));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p789 := $load.ref($M.24, $p788);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p791, $p789);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p793, pch_udc_ep_ops);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p794 := $bitcast.ref.ref($p775);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($p794, $mul.ref(128, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i796 := $load.i8($M.0, $p795);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i797 := $zext.i8.i32($i796);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i798 := $ne.i32($i797, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i798} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i798 == 1);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(128, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i800 := $load.i8($M.0, $p799);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i801 := $and.i8($i800, 31);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i802 := $zext.i8.i32($i801);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i803 := $add.i32($i802, 16);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i804 := $mul.i32($i803, 32);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i805 := $sext.i32.i64($i804);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p806 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(104, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p806, $i805);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(0, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} usb_ep_set_maxpacket_limit($p814, 512);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p818 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} list_add_tail($p816, $p818);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(112, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} INIT_LIST_HEAD($p819);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p821 := $bitcast.ref.ref($p820);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($p821, $mul.ref(16, 144));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(96, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p823, $p0);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(128, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i825 := $load.i8($M.0, $p824);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i826 := $and.i8($i825, $sub.i8(0, 65));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i827 := $or.i8($i826, 64);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p824, $i827);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p828 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(128, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i829 := $load.i8($M.0, $p828);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i830 := $and.i8($i829, $sub.i8(0, 32));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i831 := $or.i8($i830, 8);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p828, $i831);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(128, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i833 := $load.i8($M.0, $p832);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i834 := $and.i8($i833, $sub.i8(0, 33));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i835 := $or.i8($i834, 32);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p832, $i835);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(16, 8));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p837 := $load.ref($M.24, $p836);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p839 := $add.ref($add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p839, $p837);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p841, pch_udc_ep_ops);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p842 := $bitcast.ref.ref($p822);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($p842, $mul.ref(128, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i844 := $load.i8($M.0, $p843);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i845 := $zext.i8.i32($i844);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i846 := $ne.i32($i845, 0);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i846} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i846 == 1);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p847 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(128, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i848 := $load.i8($M.0, $p847);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i849 := $and.i8($i848, 31);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i850 := $zext.i8.i32($i849);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i851 := $add.i32($i850, 16);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i852 := $mul.i32($i851, 32);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i853 := $sext.i32.i64($i852);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p854 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(104, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p854, $i853);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(0, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} usb_ep_set_maxpacket_limit($p862, 512);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} list_add_tail($p864, $p866);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(112, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} INIT_LIST_HEAD($p867);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p869 := $bitcast.ref.ref($p868);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($p869, $mul.ref(17, 144));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(96, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p871, $p0);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p872 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(128, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i873 := $load.i8($M.0, $p872);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i874 := $and.i8($i873, $sub.i8(0, 65));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i875 := $or.i8($i874, 64);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p872, $i875);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(128, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i877 := $load.i8($M.0, $p876);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i878 := $and.i8($i877, $sub.i8(0, 32));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i879 := $or.i8($i878, 8);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p876, $i879);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(128, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i881 := $load.i8($M.0, $p880);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i882 := $and.i8($i881, $sub.i8(0, 33));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p880, $i882);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(17, 8));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p884 := $load.ref($M.24, $p883);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p886, $p884);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p888, pch_udc_ep_ops);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p889 := $bitcast.ref.ref($p870);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p890 := $add.ref($p889, $mul.ref(128, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i891 := $load.i8($M.0, $p890);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i892 := $zext.i8.i32($i891);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i893 := $ne.i32($i892, 0);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i893} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i893 == 1);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p894 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(128, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i895 := $load.i8($M.0, $p894);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i896 := $and.i8($i895, 31);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i897 := $zext.i8.i32($i896);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i898 := $add.i32($i897, 16);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i899 := $mul.i32($i898, 32);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i900 := $sext.i32.i64($i899);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(104, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p901, $i900);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(0, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} usb_ep_set_maxpacket_limit($p909, 512);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} list_add_tail($p911, $p913);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(112, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} INIT_LIST_HEAD($p914);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p916 := $bitcast.ref.ref($p915);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p917 := $add.ref($p916, $mul.ref(18, 144));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(96, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p918, $p0);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p919 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(128, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i920 := $load.i8($M.0, $p919);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i921 := $and.i8($i920, $sub.i8(0, 65));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i922 := $or.i8($i921, 64);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p919, $i922);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p923 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(128, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i924 := $load.i8($M.0, $p923);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i925 := $and.i8($i924, $sub.i8(0, 32));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i926 := $or.i8($i925, 9);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p923, $i926);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(128, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i928 := $load.i8($M.0, $p927);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i929 := $and.i8($i928, $sub.i8(0, 33));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i930 := $or.i8($i929, 32);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p927, $i930);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(18, 8));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p932 := $load.ref($M.24, $p931);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p934, $p932);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p936, pch_udc_ep_ops);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p937 := $bitcast.ref.ref($p917);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($p937, $mul.ref(128, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i939 := $load.i8($M.0, $p938);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i940 := $zext.i8.i32($i939);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i941 := $ne.i32($i940, 0);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i941} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i941 == 1);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p942 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(128, 1));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i943 := $load.i8($M.0, $p942);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i944 := $and.i8($i943, 31);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i945 := $zext.i8.i32($i944);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i946 := $add.i32($i945, 16);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i947 := $mul.i32($i946, 32);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i948 := $sext.i32.i64($i947);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p949 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(104, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p949, $i948);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p957 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(0, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} usb_ep_set_maxpacket_limit($p957, 512);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p959 := $add.ref($add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p961 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} list_add_tail($p959, $p961);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p962 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(112, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} INIT_LIST_HEAD($p962);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p964 := $bitcast.ref.ref($p963);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($p964, $mul.ref(19, 144));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p966 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(96, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p966, $p0);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(128, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i968 := $load.i8($M.0, $p967);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i969 := $and.i8($i968, $sub.i8(0, 65));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i970 := $or.i8($i969, 64);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p967, $i970);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p971 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(128, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i972 := $load.i8($M.0, $p971);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i973 := $and.i8($i972, $sub.i8(0, 32));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i974 := $or.i8($i973, 9);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p971, $i974);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p975 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(128, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i976 := $load.i8($M.0, $p975);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i977 := $and.i8($i976, $sub.i8(0, 33));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p975, $i977);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p978 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(19, 8));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p979 := $load.ref($M.24, $p978);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p981, $p979);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p983 := $add.ref($add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p983, pch_udc_ep_ops);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p984 := $bitcast.ref.ref($p965);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p985 := $add.ref($p984, $mul.ref(128, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i986 := $load.i8($M.0, $p985);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i987 := $zext.i8.i32($i986);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i988 := $ne.i32($i987, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i988} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i988 == 1);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p989 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(128, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i990 := $load.i8($M.0, $p989);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i991 := $and.i8($i990, 31);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i992 := $zext.i8.i32($i991);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i993 := $add.i32($i992, 16);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i994 := $mul.i32($i993, 32);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i995 := $sext.i32.i64($i994);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(104, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p996, $i995);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p1004 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(0, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} usb_ep_set_maxpacket_limit($p1004, 512);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p1006 := $add.ref($add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p1008 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} list_add_tail($p1006, $p1008);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(112, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} INIT_LIST_HEAD($p1009);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p1010 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p1011 := $bitcast.ref.ref($p1010);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p1012 := $add.ref($p1011, $mul.ref(20, 144));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(96, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1013, $p0);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p1014 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(128, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i1015 := $load.i8($M.0, $p1014);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i1016 := $and.i8($i1015, $sub.i8(0, 65));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i1017 := $or.i8($i1016, 64);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1014, $i1017);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p1018 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(128, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i1019 := $load.i8($M.0, $p1018);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i1020 := $and.i8($i1019, $sub.i8(0, 32));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i1021 := $or.i8($i1020, 10);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1018, $i1021);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p1022 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(128, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i1023 := $load.i8($M.0, $p1022);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i1024 := $and.i8($i1023, $sub.i8(0, 33));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i1025 := $or.i8($i1024, 32);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1022, $i1025);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p1026 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(20, 8));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p1027 := $load.ref($M.24, $p1026);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p1029 := $add.ref($add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1029, $p1027);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p1031 := $add.ref($add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1031, pch_udc_ep_ops);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p1032 := $bitcast.ref.ref($p1012);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p1033 := $add.ref($p1032, $mul.ref(128, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i1034 := $load.i8($M.0, $p1033);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i1035 := $zext.i8.i32($i1034);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i1036 := $ne.i32($i1035, 0);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1036} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i1036 == 1);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(128, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i1038 := $load.i8($M.0, $p1037);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i1039 := $and.i8($i1038, 31);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i1040 := $zext.i8.i32($i1039);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i1041 := $add.i32($i1040, 16);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i1042 := $mul.i32($i1041, 32);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i1043 := $sext.i32.i64($i1042);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p1044 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(104, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1044, $i1043);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p1052 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(0, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} usb_ep_set_maxpacket_limit($p1052, 512);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p1054 := $add.ref($add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p1056 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} list_add_tail($p1054, $p1056);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p1057 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(112, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} INIT_LIST_HEAD($p1057);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p1059 := $bitcast.ref.ref($p1058);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($p1059, $mul.ref(21, 144));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p1061 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(96, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1061, $p0);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p1062 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(128, 1));
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i1063 := $load.i8($M.0, $p1062);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i1064 := $and.i8($i1063, $sub.i8(0, 65));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i1065 := $or.i8($i1064, 64);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1062, $i1065);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(128, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i1067 := $load.i8($M.0, $p1066);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i1068 := $and.i8($i1067, $sub.i8(0, 32));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i1069 := $or.i8($i1068, 10);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1066, $i1069);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p1070 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(128, 1));
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i1071 := $load.i8($M.0, $p1070);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i1072 := $and.i8($i1071, $sub.i8(0, 33));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1070, $i1072);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p1073 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(21, 8));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p1074 := $load.ref($M.24, $p1073);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p1076 := $add.ref($add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1076, $p1074);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p1078 := $add.ref($add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1078, pch_udc_ep_ops);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p1079 := $bitcast.ref.ref($p1060);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p1080 := $add.ref($p1079, $mul.ref(128, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i1081 := $load.i8($M.0, $p1080);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i1082 := $zext.i8.i32($i1081);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i1083 := $ne.i32($i1082, 0);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1083} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i1083 == 1);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p1084 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(128, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i1085 := $load.i8($M.0, $p1084);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i1086 := $and.i8($i1085, 31);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i1087 := $zext.i8.i32($i1086);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i1088 := $add.i32($i1087, 16);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i1089 := $mul.i32($i1088, 32);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i1090 := $sext.i32.i64($i1089);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p1091 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(104, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1091, $i1090);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p1099 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(0, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} usb_ep_set_maxpacket_limit($p1099, 512);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p1101 := $add.ref($add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p1103 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} list_add_tail($p1101, $p1103);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p1104 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(112, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} INIT_LIST_HEAD($p1104);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p1105 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p1106 := $bitcast.ref.ref($p1105);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p1107 := $add.ref($p1106, $mul.ref(22, 144));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p1108 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(96, 1));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1108, $p0);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p1109 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(128, 1));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i1110 := $load.i8($M.0, $p1109);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i1111 := $and.i8($i1110, $sub.i8(0, 65));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i1112 := $or.i8($i1111, 64);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1109, $i1112);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p1113 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(128, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i1114 := $load.i8($M.0, $p1113);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i1115 := $and.i8($i1114, $sub.i8(0, 32));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i1116 := $or.i8($i1115, 11);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1113, $i1116);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p1117 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(128, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i1118 := $load.i8($M.0, $p1117);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i1119 := $and.i8($i1118, $sub.i8(0, 33));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i1120 := $or.i8($i1119, 32);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1117, $i1120);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p1121 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(22, 8));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p1122 := $load.ref($M.24, $p1121);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p1124 := $add.ref($add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1124, $p1122);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p1126 := $add.ref($add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1126, pch_udc_ep_ops);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p1127 := $bitcast.ref.ref($p1107);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p1128 := $add.ref($p1127, $mul.ref(128, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i1129 := $load.i8($M.0, $p1128);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i1130 := $zext.i8.i32($i1129);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i1131 := $ne.i32($i1130, 0);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1131} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i1131 == 1);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p1132 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(128, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i1133 := $load.i8($M.0, $p1132);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i1134 := $and.i8($i1133, 31);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i1135 := $zext.i8.i32($i1134);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i1136 := $add.i32($i1135, 16);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i1137 := $mul.i32($i1136, 32);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i1138 := $sext.i32.i64($i1137);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p1139 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(104, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1139, $i1138);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p1147 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(0, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} usb_ep_set_maxpacket_limit($p1147, 512);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p1149 := $add.ref($add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p1151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} list_add_tail($p1149, $p1151);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p1152 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(112, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} INIT_LIST_HEAD($p1152);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p1153 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p1154 := $bitcast.ref.ref($p1153);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p1155 := $add.ref($p1154, $mul.ref(23, 144));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p1156 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(96, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1156, $p0);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p1157 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(128, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i1158 := $load.i8($M.0, $p1157);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i1159 := $and.i8($i1158, $sub.i8(0, 65));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i1160 := $or.i8($i1159, 64);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1157, $i1160);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p1161 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(128, 1));
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i1162 := $load.i8($M.0, $p1161);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i1163 := $and.i8($i1162, $sub.i8(0, 32));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i1164 := $or.i8($i1163, 11);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1161, $i1164);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p1165 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(128, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i1166 := $load.i8($M.0, $p1165);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i1167 := $and.i8($i1166, $sub.i8(0, 33));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1165, $i1167);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p1168 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(23, 8));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p1169 := $load.ref($M.24, $p1168);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p1171 := $add.ref($add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1171, $p1169);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p1173 := $add.ref($add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1173, pch_udc_ep_ops);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p1174 := $bitcast.ref.ref($p1155);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p1175 := $add.ref($p1174, $mul.ref(128, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i1176 := $load.i8($M.0, $p1175);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i1177 := $zext.i8.i32($i1176);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i1178 := $ne.i32($i1177, 0);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1178} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i1178 == 1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p1179 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(128, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i1180 := $load.i8($M.0, $p1179);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i1181 := $and.i8($i1180, 31);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i1182 := $zext.i8.i32($i1181);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i1183 := $add.i32($i1182, 16);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i1184 := $mul.i32($i1183, 32);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i1185 := $sext.i32.i64($i1184);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p1186 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(104, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1186, $i1185);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p1194 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(0, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} usb_ep_set_maxpacket_limit($p1194, 512);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p1196 := $add.ref($add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p1198 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} list_add_tail($p1196, $p1198);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p1199 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(112, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} INIT_LIST_HEAD($p1199);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p1200 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p1201 := $bitcast.ref.ref($p1200);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p1202 := $add.ref($p1201, $mul.ref(24, 144));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p1203 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(96, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1203, $p0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p1204 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(128, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i1205 := $load.i8($M.0, $p1204);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i1206 := $and.i8($i1205, $sub.i8(0, 65));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i1207 := $or.i8($i1206, 64);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1204, $i1207);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p1208 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(128, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i1209 := $load.i8($M.0, $p1208);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i1210 := $and.i8($i1209, $sub.i8(0, 32));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i1211 := $or.i8($i1210, 12);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1208, $i1211);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p1212 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(128, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i1213 := $load.i8($M.0, $p1212);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i1214 := $and.i8($i1213, $sub.i8(0, 33));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i1215 := $or.i8($i1214, 32);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1212, $i1215);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p1216 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(24, 8));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p1217 := $load.ref($M.24, $p1216);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p1219 := $add.ref($add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1219, $p1217);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p1221 := $add.ref($add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1221, pch_udc_ep_ops);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p1222 := $bitcast.ref.ref($p1202);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p1223 := $add.ref($p1222, $mul.ref(128, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i1224 := $load.i8($M.0, $p1223);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i1225 := $zext.i8.i32($i1224);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i1226 := $ne.i32($i1225, 0);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1226} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i1226 == 1);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p1227 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(128, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i1228 := $load.i8($M.0, $p1227);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i1229 := $and.i8($i1228, 31);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i1230 := $zext.i8.i32($i1229);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i1231 := $add.i32($i1230, 16);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i1232 := $mul.i32($i1231, 32);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i1233 := $sext.i32.i64($i1232);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p1234 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(104, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1234, $i1233);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p1242 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(0, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} usb_ep_set_maxpacket_limit($p1242, 512);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p1244 := $add.ref($add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p1246 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} list_add_tail($p1244, $p1246);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p1247 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(112, 1));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} INIT_LIST_HEAD($p1247);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p1248 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p1249 := $bitcast.ref.ref($p1248);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p1250 := $add.ref($p1249, $mul.ref(25, 144));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p1251 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(96, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1251, $p0);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p1252 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(128, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i1253 := $load.i8($M.0, $p1252);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i1254 := $and.i8($i1253, $sub.i8(0, 65));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i1255 := $or.i8($i1254, 64);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1252, $i1255);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p1256 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(128, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i1257 := $load.i8($M.0, $p1256);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i1258 := $and.i8($i1257, $sub.i8(0, 32));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i1259 := $or.i8($i1258, 12);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1256, $i1259);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p1260 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(128, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i1261 := $load.i8($M.0, $p1260);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i1262 := $and.i8($i1261, $sub.i8(0, 33));
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1260, $i1262);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p1263 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(25, 8));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p1264 := $load.ref($M.24, $p1263);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p1266 := $add.ref($add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1266, $p1264);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p1268 := $add.ref($add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1268, pch_udc_ep_ops);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p1269 := $bitcast.ref.ref($p1250);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p1270 := $add.ref($p1269, $mul.ref(128, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i1271 := $load.i8($M.0, $p1270);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i1272 := $zext.i8.i32($i1271);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i1273 := $ne.i32($i1272, 0);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1273} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i1273 == 1);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p1274 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(128, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i1275 := $load.i8($M.0, $p1274);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i1276 := $and.i8($i1275, 31);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i1277 := $zext.i8.i32($i1276);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i1278 := $add.i32($i1277, 16);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i1279 := $mul.i32($i1278, 32);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i1280 := $sext.i32.i64($i1279);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p1281 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(104, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1281, $i1280);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p1289 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(0, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} usb_ep_set_maxpacket_limit($p1289, 512);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p1291 := $add.ref($add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p1293 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} list_add_tail($p1291, $p1293);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p1294 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(112, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} INIT_LIST_HEAD($p1294);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p1295 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p1296 := $bitcast.ref.ref($p1295);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p1297 := $add.ref($p1296, $mul.ref(26, 144));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p1298 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(96, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1298, $p0);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p1299 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(128, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i1300 := $load.i8($M.0, $p1299);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i1301 := $and.i8($i1300, $sub.i8(0, 65));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i1302 := $or.i8($i1301, 64);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1299, $i1302);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p1303 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(128, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i1304 := $load.i8($M.0, $p1303);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i1305 := $and.i8($i1304, $sub.i8(0, 32));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i1306 := $or.i8($i1305, 13);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1303, $i1306);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p1307 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(128, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i1308 := $load.i8($M.0, $p1307);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i1309 := $and.i8($i1308, $sub.i8(0, 33));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i1310 := $or.i8($i1309, 32);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1307, $i1310);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p1311 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(26, 8));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p1312 := $load.ref($M.24, $p1311);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p1314 := $add.ref($add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1314, $p1312);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p1316 := $add.ref($add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1316, pch_udc_ep_ops);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p1317 := $bitcast.ref.ref($p1297);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p1318 := $add.ref($p1317, $mul.ref(128, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i1319 := $load.i8($M.0, $p1318);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i1320 := $zext.i8.i32($i1319);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i1321 := $ne.i32($i1320, 0);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1321} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i1321 == 1);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p1322 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(128, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i1323 := $load.i8($M.0, $p1322);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i1324 := $and.i8($i1323, 31);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i1325 := $zext.i8.i32($i1324);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i1326 := $add.i32($i1325, 16);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i1327 := $mul.i32($i1326, 32);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i1328 := $sext.i32.i64($i1327);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p1329 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(104, 1));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1329, $i1328);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p1337 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(0, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} usb_ep_set_maxpacket_limit($p1337, 512);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p1339 := $add.ref($add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p1341 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} list_add_tail($p1339, $p1341);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p1342 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(112, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} INIT_LIST_HEAD($p1342);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p1343 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p1344 := $bitcast.ref.ref($p1343);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p1345 := $add.ref($p1344, $mul.ref(27, 144));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p1346 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(96, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1346, $p0);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p1347 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(128, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i1348 := $load.i8($M.0, $p1347);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i1349 := $and.i8($i1348, $sub.i8(0, 65));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i1350 := $or.i8($i1349, 64);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1347, $i1350);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p1351 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(128, 1));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i1352 := $load.i8($M.0, $p1351);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i1353 := $and.i8($i1352, $sub.i8(0, 32));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i1354 := $or.i8($i1353, 13);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1351, $i1354);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p1355 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(128, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i1356 := $load.i8($M.0, $p1355);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i1357 := $and.i8($i1356, $sub.i8(0, 33));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1355, $i1357);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p1358 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(27, 8));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p1359 := $load.ref($M.24, $p1358);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p1361 := $add.ref($add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1361, $p1359);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p1363 := $add.ref($add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1363, pch_udc_ep_ops);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p1364 := $bitcast.ref.ref($p1345);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p1365 := $add.ref($p1364, $mul.ref(128, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i1366 := $load.i8($M.0, $p1365);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i1367 := $zext.i8.i32($i1366);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i1368 := $ne.i32($i1367, 0);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1368} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i1368 == 1);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p1369 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(128, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i1370 := $load.i8($M.0, $p1369);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i1371 := $and.i8($i1370, 31);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i1372 := $zext.i8.i32($i1371);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i1373 := $add.i32($i1372, 16);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i1374 := $mul.i32($i1373, 32);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i1375 := $sext.i32.i64($i1374);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p1376 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(104, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1376, $i1375);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p1384 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(0, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} usb_ep_set_maxpacket_limit($p1384, 512);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p1386 := $add.ref($add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p1388 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} list_add_tail($p1386, $p1388);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p1389 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(112, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} INIT_LIST_HEAD($p1389);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p1390 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p1391 := $bitcast.ref.ref($p1390);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p1392 := $add.ref($p1391, $mul.ref(28, 144));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p1393 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(96, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1393, $p0);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p1394 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(128, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i1395 := $load.i8($M.0, $p1394);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i1396 := $and.i8($i1395, $sub.i8(0, 65));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i1397 := $or.i8($i1396, 64);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1394, $i1397);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p1398 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(128, 1));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i1399 := $load.i8($M.0, $p1398);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i1400 := $and.i8($i1399, $sub.i8(0, 32));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i1401 := $or.i8($i1400, 14);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1398, $i1401);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p1402 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(128, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i1403 := $load.i8($M.0, $p1402);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i1404 := $and.i8($i1403, $sub.i8(0, 33));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i1405 := $or.i8($i1404, 32);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1402, $i1405);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p1406 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(28, 8));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p1407 := $load.ref($M.24, $p1406);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p1409 := $add.ref($add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1409, $p1407);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p1411 := $add.ref($add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1411, pch_udc_ep_ops);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p1412 := $bitcast.ref.ref($p1392);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p1413 := $add.ref($p1412, $mul.ref(128, 1));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i1414 := $load.i8($M.0, $p1413);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i1415 := $zext.i8.i32($i1414);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i1416 := $ne.i32($i1415, 0);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1416} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i1416 == 1);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p1417 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(128, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i1418 := $load.i8($M.0, $p1417);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i1419 := $and.i8($i1418, 31);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i1420 := $zext.i8.i32($i1419);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i1421 := $add.i32($i1420, 16);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i1422 := $mul.i32($i1421, 32);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i1423 := $sext.i32.i64($i1422);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p1424 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(104, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1424, $i1423);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p1432 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(0, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} usb_ep_set_maxpacket_limit($p1432, 512);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p1434 := $add.ref($add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p1436 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} list_add_tail($p1434, $p1436);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p1437 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(112, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} INIT_LIST_HEAD($p1437);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p1438 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p1439 := $bitcast.ref.ref($p1438);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p1440 := $add.ref($p1439, $mul.ref(29, 144));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p1441 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(96, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1441, $p0);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p1442 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(128, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i1443 := $load.i8($M.0, $p1442);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i1444 := $and.i8($i1443, $sub.i8(0, 65));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i1445 := $or.i8($i1444, 64);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1442, $i1445);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p1446 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(128, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i1447 := $load.i8($M.0, $p1446);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i1448 := $and.i8($i1447, $sub.i8(0, 32));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i1449 := $or.i8($i1448, 14);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1446, $i1449);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p1450 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(128, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i1451 := $load.i8($M.0, $p1450);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i1452 := $and.i8($i1451, $sub.i8(0, 33));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1450, $i1452);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p1453 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(29, 8));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p1454 := $load.ref($M.24, $p1453);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p1456 := $add.ref($add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1456, $p1454);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p1458 := $add.ref($add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1458, pch_udc_ep_ops);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p1459 := $bitcast.ref.ref($p1440);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p1460 := $add.ref($p1459, $mul.ref(128, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i1461 := $load.i8($M.0, $p1460);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i1462 := $zext.i8.i32($i1461);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i1463 := $ne.i32($i1462, 0);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1463} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i1463 == 1);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p1464 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(128, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i1465 := $load.i8($M.0, $p1464);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i1466 := $and.i8($i1465, 31);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i1467 := $zext.i8.i32($i1466);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i1468 := $add.i32($i1467, 16);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i1469 := $mul.i32($i1468, 32);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i1470 := $sext.i32.i64($i1469);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p1471 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(104, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1471, $i1470);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p1479 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(0, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} usb_ep_set_maxpacket_limit($p1479, 512);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p1481 := $add.ref($add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p1483 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} list_add_tail($p1481, $p1483);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p1484 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(112, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} INIT_LIST_HEAD($p1484);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p1485 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p1486 := $bitcast.ref.ref($p1485);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p1487 := $add.ref($p1486, $mul.ref(30, 144));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p1488 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(96, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1488, $p0);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p1489 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(128, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i1490 := $load.i8($M.0, $p1489);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i1491 := $and.i8($i1490, $sub.i8(0, 65));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i1492 := $or.i8($i1491, 64);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1489, $i1492);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p1493 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(128, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i1494 := $load.i8($M.0, $p1493);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i1495 := $and.i8($i1494, $sub.i8(0, 32));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i1496 := $or.i8($i1495, 15);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1493, $i1496);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p1497 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(128, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i1498 := $load.i8($M.0, $p1497);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i1499 := $and.i8($i1498, $sub.i8(0, 33));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i1500 := $or.i8($i1499, 32);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1497, $i1500);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p1501 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(30, 8));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p1502 := $load.ref($M.24, $p1501);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p1504 := $add.ref($add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1504, $p1502);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p1506 := $add.ref($add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1506, pch_udc_ep_ops);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p1507 := $bitcast.ref.ref($p1487);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p1508 := $add.ref($p1507, $mul.ref(128, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i1509 := $load.i8($M.0, $p1508);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i1510 := $zext.i8.i32($i1509);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i1511 := $ne.i32($i1510, 0);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1511} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i1511 == 1);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p1512 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(128, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i1513 := $load.i8($M.0, $p1512);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i1514 := $and.i8($i1513, 31);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i1515 := $zext.i8.i32($i1514);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i1516 := $add.i32($i1515, 16);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i1517 := $mul.i32($i1516, 32);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i1518 := $sext.i32.i64($i1517);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p1519 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(104, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1519, $i1518);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p1527 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(0, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} usb_ep_set_maxpacket_limit($p1527, 512);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p1529 := $add.ref($add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p1531 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} list_add_tail($p1529, $p1531);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p1532 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(112, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} INIT_LIST_HEAD($p1532);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p1533 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p1534 := $bitcast.ref.ref($p1533);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p1535 := $add.ref($p1534, $mul.ref(31, 144));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p1536 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(96, 1));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1536, $p0);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p1537 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(128, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i1538 := $load.i8($M.0, $p1537);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i1539 := $and.i8($i1538, $sub.i8(0, 65));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i1540 := $or.i8($i1539, 64);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1537, $i1540);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p1541 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(128, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i1542 := $load.i8($M.0, $p1541);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i1543 := $and.i8($i1542, $sub.i8(0, 32));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i1544 := $or.i8($i1543, 15);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1541, $i1544);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p1545 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(128, 1));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i1546 := $load.i8($M.0, $p1545);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i1547 := $and.i8($i1546, $sub.i8(0, 33));
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1545, $i1547);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p1548 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(31, 8));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p1549 := $load.ref($M.24, $p1548);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p1551 := $add.ref($add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1551, $p1549);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p1553 := $add.ref($add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1553, pch_udc_ep_ops);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p1554 := $bitcast.ref.ref($p1535);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p1555 := $add.ref($p1554, $mul.ref(128, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i1556 := $load.i8($M.0, $p1555);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i1557 := $zext.i8.i32($i1556);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i1558 := $ne.i32($i1557, 0);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1558} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i1558 == 1);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p1559 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(128, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i1560 := $load.i8($M.0, $p1559);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i1561 := $and.i8($i1560, 31);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i1562 := $zext.i8.i32($i1561);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i1563 := $add.i32($i1562, 16);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i1564 := $mul.i32($i1563, 32);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i1565 := $sext.i32.i64($i1564);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p1566 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(104, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1566, $i1565);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p1574 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(0, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} usb_ep_set_maxpacket_limit($p1574, 512);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p1576 := $add.ref($add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p1578 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} list_add_tail($p1576, $p1578);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p1579 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(112, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} INIT_LIST_HEAD($p1579);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} usb_ep_set_maxpacket_limit($p88, 64);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(0, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} usb_ep_set_maxpacket_limit($p91, 64);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} list_del_init($p95);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(1, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} list_del_init($p99);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1592, 1)), $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p102);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} INIT_LIST_HEAD($p108);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    return;

  $bb128:
    assume $i1558 == 1;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p1567 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(128, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i1568 := $load.i8($M.0, $p1567);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i1569 := $and.i8($i1568, 31);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i1570 := $zext.i8.i32($i1569);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i1571 := $mul.i32($i1570, 32);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i1572 := $sext.i32.i64($i1571);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p1573 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(104, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1573, $i1572);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb124:
    assume $i1511 == 1;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p1520 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(128, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i1521 := $load.i8($M.0, $p1520);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i1522 := $and.i8($i1521, 31);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i1523 := $zext.i8.i32($i1522);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i1524 := $mul.i32($i1523, 32);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i1525 := $sext.i32.i64($i1524);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p1526 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(104, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1526, $i1525);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb120:
    assume $i1463 == 1;
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p1472 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(128, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i1473 := $load.i8($M.0, $p1472);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i1474 := $and.i8($i1473, 31);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i1475 := $zext.i8.i32($i1474);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i1476 := $mul.i32($i1475, 32);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i1477 := $sext.i32.i64($i1476);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p1478 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(104, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1478, $i1477);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb116:
    assume $i1416 == 1;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p1425 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(128, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i1426 := $load.i8($M.0, $p1425);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i1427 := $and.i8($i1426, 31);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i1428 := $zext.i8.i32($i1427);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i1429 := $mul.i32($i1428, 32);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i1430 := $sext.i32.i64($i1429);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p1431 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(104, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1431, $i1430);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb112:
    assume $i1368 == 1;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p1377 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(128, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i1378 := $load.i8($M.0, $p1377);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i1379 := $and.i8($i1378, 31);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i1380 := $zext.i8.i32($i1379);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i1381 := $mul.i32($i1380, 32);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i1382 := $sext.i32.i64($i1381);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p1383 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(104, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1383, $i1382);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb108:
    assume $i1321 == 1;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p1330 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(128, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i1331 := $load.i8($M.0, $p1330);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i1332 := $and.i8($i1331, 31);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i1333 := $zext.i8.i32($i1332);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i1334 := $mul.i32($i1333, 32);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i1335 := $sext.i32.i64($i1334);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p1336 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(104, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1336, $i1335);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb104:
    assume $i1273 == 1;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p1282 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(128, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i1283 := $load.i8($M.0, $p1282);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i1284 := $and.i8($i1283, 31);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i1285 := $zext.i8.i32($i1284);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i1286 := $mul.i32($i1285, 32);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i1287 := $sext.i32.i64($i1286);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p1288 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(104, 1));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1288, $i1287);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb100:
    assume $i1226 == 1;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p1235 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(128, 1));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i1236 := $load.i8($M.0, $p1235);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i1237 := $and.i8($i1236, 31);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i1238 := $zext.i8.i32($i1237);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i1239 := $mul.i32($i1238, 32);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i1240 := $sext.i32.i64($i1239);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p1241 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(104, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1241, $i1240);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb96:
    assume $i1178 == 1;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p1187 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(128, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i1188 := $load.i8($M.0, $p1187);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i1189 := $and.i8($i1188, 31);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i1190 := $zext.i8.i32($i1189);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i1191 := $mul.i32($i1190, 32);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i1192 := $sext.i32.i64($i1191);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p1193 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(104, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1193, $i1192);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb92:
    assume $i1131 == 1;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p1140 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(128, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i1141 := $load.i8($M.0, $p1140);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i1142 := $and.i8($i1141, 31);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i1143 := $zext.i8.i32($i1142);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i1144 := $mul.i32($i1143, 32);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i1145 := $sext.i32.i64($i1144);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p1146 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(104, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1146, $i1145);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb88:
    assume $i1083 == 1;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p1092 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(128, 1));
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i1093 := $load.i8($M.0, $p1092);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i1094 := $and.i8($i1093, 31);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i1095 := $zext.i8.i32($i1094);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i1096 := $mul.i32($i1095, 32);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i1097 := $sext.i32.i64($i1096);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p1098 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(104, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1098, $i1097);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume $i1036 == 1;
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p1045 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(128, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i1046 := $load.i8($M.0, $p1045);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i1047 := $and.i8($i1046, 31);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i1048 := $zext.i8.i32($i1047);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i1049 := $mul.i32($i1048, 32);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i1050 := $sext.i32.i64($i1049);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p1051 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(104, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1051, $i1050);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb80:
    assume $i988 == 1;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p997 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(128, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i998 := $load.i8($M.0, $p997);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i999 := $and.i8($i998, 31);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i1000 := $zext.i8.i32($i999);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i1001 := $mul.i32($i1000, 32);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i1002 := $sext.i32.i64($i1001);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p1003 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(104, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1003, $i1002);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume $i941 == 1;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p950 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(128, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i951 := $load.i8($M.0, $p950);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i952 := $and.i8($i951, 31);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i953 := $zext.i8.i32($i952);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i954 := $mul.i32($i953, 32);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i955 := $sext.i32.i64($i954);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(104, 1));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p956, $i955);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb72:
    assume $i893 == 1;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(128, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i903 := $load.i8($M.0, $p902);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i904 := $and.i8($i903, 31);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i905 := $zext.i8.i32($i904);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i906 := $mul.i32($i905, 32);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i907 := $sext.i32.i64($i906);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p908 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(104, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p908, $i907);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume $i846 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(128, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i856 := $load.i8($M.0, $p855);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i857 := $and.i8($i856, 31);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i858 := $zext.i8.i32($i857);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i859 := $mul.i32($i858, 32);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i860 := $sext.i32.i64($i859);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(104, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p861, $i860);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb64:
    assume $i798 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(128, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i808 := $load.i8($M.0, $p807);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i809 := $and.i8($i808, 31);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i810 := $zext.i8.i32($i809);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i811 := $mul.i32($i810, 32);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i812 := $sext.i32.i64($i811);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(104, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p813, $i812);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume $i751 == 1;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(128, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i761 := $load.i8($M.0, $p760);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i762 := $and.i8($i761, 31);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i763 := $zext.i8.i32($i762);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i764 := $mul.i32($i763, 32);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i765 := $sext.i32.i64($i764);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(104, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p766, $i765);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume $i703 == 1;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(128, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i713 := $load.i8($M.0, $p712);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i714 := $and.i8($i713, 31);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i715 := $zext.i8.i32($i714);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i716 := $mul.i32($i715, 32);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i717 := $sext.i32.i64($i716);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(104, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p718, $i717);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i656 == 1;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(128, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i666 := $load.i8($M.0, $p665);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i667 := $and.i8($i666, 31);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i668 := $zext.i8.i32($i667);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i669 := $mul.i32($i668, 32);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i670 := $sext.i32.i64($i669);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(104, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p671, $i670);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume $i608 == 1;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(128, 1));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i618 := $load.i8($M.0, $p617);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i619 := $and.i8($i618, 31);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i620 := $zext.i8.i32($i619);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i621 := $mul.i32($i620, 32);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i622 := $sext.i32.i64($i621);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(104, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p623, $i622);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i561 == 1;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(128, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i571 := $load.i8($M.0, $p570);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i572 := $and.i8($i571, 31);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i573 := $zext.i8.i32($i572);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i574 := $mul.i32($i573, 32);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i575 := $sext.i32.i64($i574);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(104, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p576, $i575);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb40:
    assume $i513 == 1;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(128, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i523 := $load.i8($M.0, $p522);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i524 := $and.i8($i523, 31);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i525 := $zext.i8.i32($i524);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i526 := $mul.i32($i525, 32);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i527 := $sext.i32.i64($i526);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(104, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p528, $i527);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i466 == 1;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(128, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i476 := $load.i8($M.0, $p475);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i477 := $and.i8($i476, 31);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i478 := $zext.i8.i32($i477);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i479 := $mul.i32($i478, 32);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i480 := $sext.i32.i64($i479);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(104, 1));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p481, $i480);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i418 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i428 := $load.i8($M.0, $p427);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i429 := $and.i8($i428, 31);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i32($i429);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i431 := $mul.i32($i430, 32);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i432 := $sext.i32.i64($i431);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(104, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p433, $i432);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i371 == 1;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i381 := $load.i8($M.0, $p380);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i382 := $and.i8($i381, 31);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i383 := $zext.i8.i32($i382);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i384 := $mul.i32($i383, 32);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i385 := $sext.i32.i64($i384);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(104, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p386, $i385);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i323 == 1;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i333 := $load.i8($M.0, $p332);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i334 := $and.i8($i333, 31);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i335 := $zext.i8.i32($i334);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i336 := $mul.i32($i335, 32);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i337 := $sext.i32.i64($i336);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(104, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p338, $i337);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i276 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.0, $p285);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i287 := $and.i8($i286, 31);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i289 := $mul.i32($i288, 32);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i290 := $sext.i32.i64($i289);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(104, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p291, $i290);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i228 == 1;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.0, $p237);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i239 := $and.i8($i238, 31);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i241 := $mul.i32($i240, 32);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(104, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p243, $i242);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i181 == 1;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.0, $p190);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i192 := $and.i8($i191, 31);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i192);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i194 := $mul.i32($i193, 32);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i195 := $sext.i32.i64($i194);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(104, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p196, $i195);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i133 == 1;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p142);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i144 := $and.i8($i143, 31);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i146 := $mul.i32($i145, 32);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i146);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(104, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p148, $i147);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i64 == 1;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i67 := $and.i8($i66, 31);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i69 := $mul.i32($i68, 32);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, $i70);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_vbus_gpio_init: ref;

axiom pch_vbus_gpio_init == $sub.ref(0, 320548);

procedure pch_vbus_gpio_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.19, $M.3, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9, $CurrAddr;



implementation pch_vbus_gpio_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p37: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $p62: ref;
  var $p65: ref;
  var $i11: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 986} {:cexpr "pch_vbus_gpio_init:arg:vbus_gpio_port___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(0, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(4, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 0);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i12 := gpio_is_valid($i1);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 988} {:cexpr "tmp"} boogie_si_record_i8($i13);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 989} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i18 := gpio_request($i1, .str.72);
    call {:si_unique_call 992} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(0, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i1);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} vslice_dummy_var_74 := gpio_direction_input($i1);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(8, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} __init_work($p25, 0);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, 137438953408);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 996} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p30, $p31, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} lockdep_init_map($p34, .str.74, $p2, 0);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} INIT_LIST_HEAD($p37);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, pch_vbus_gpio_work_fall);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i41 := gpio_to_irq($i1);
    call {:si_unique_call 1000} {:cexpr "irq_num"} boogie_si_record_i32($i41);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 0);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} vslice_dummy_var_75 := irq_set_irq_type($i41, 3);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $i45 := ldv_request_irq_20($i41, pch_vbus_gpio_irq, 0, .str.75, $p44);
    call {:si_unique_call 1003} {:cexpr "err"} boogie_si_record_i32($i45);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_76 := printk.ref.ref.i32.i32(.str.77, .str.71, $i41, $i45);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(4, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i41);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(88, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} __init_work($p50, 0);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, 137438953408);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p5);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 1005} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p55, $p56, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(88, 1)), $mul.ref(32, 1));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} lockdep_init_map($p59, .str.76, $p4, 0);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} INIT_LIST_HEAD($p62);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(88, 1)), $mul.ref(24, 1));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, pch_vbus_gpio_work_rise);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_73 := printk.ref.ref.i32.i32(.str.73, .str.71, $i1, $i18);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_72 := printk.ref.ref.i32(.str.70, .str.71, $i1);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const gpio_is_valid: ref;

axiom gpio_is_valid == $sub.ref(0, 321580);

procedure gpio_is_valid($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation gpio_is_valid($i0: i32) returns ($r: i1)
{
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} {:cexpr "gpio_is_valid:arg:number"} boogie_si_record_i32($i0);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, 0);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i0, 255);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const gpio_request: ref;

axiom gpio_request == $sub.ref(0, 322612);

procedure gpio_request($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_request($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} {:cexpr "gpio_request:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1011} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1012} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gpio_direction_input: ref;

axiom gpio_direction_input == $sub.ref(0, 323644);

procedure gpio_direction_input($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_direction_input($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} {:cexpr "gpio_direction_input:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $p1 := gpio_to_desc($i0);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i2 := gpiod_direction_input($p1);
    call {:si_unique_call 1016} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 324676);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 325708);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    return;
}



const pch_vbus_gpio_work_fall: ref;

axiom pch_vbus_gpio_work_fall == $sub.ref(0, 326740);

procedure pch_vbus_gpio_work_fall($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.3, $M.5, $M.7, $M.9;



implementation pch_vbus_gpio_work_fall($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i1;
  var $i139: i32;
  var $i140: i1;
  var $i141: i1;
  var $i142: i32;
  var $i143: i1;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i1;
  var $i151: i32;
  var $i152: i1;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i1;
  var $i157: i32;
  var $i158: i1;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $i174: i1;
  var $i175: i32;
  var $i176: i1;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i1;
  var $i181: i32;
  var $i182: i1;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $i195: i1;
  var $i196: i32;
  var $i197: i1;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $i201: i1;
  var $i202: i32;
  var $i203: i1;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $i210: i1;
  var $i211: i32;
  var $i212: i1;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $i219: i1;
  var $i220: i32;
  var $i221: i1;
  var $i222: i1;
  var $i223: i32;
  var $i224: i1;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i1;
  var $i229: i32;
  var $i230: i1;
  var $i231: i1;
  var $i232: i32;
  var $i233: i1;
  var $i234: i1;
  var $i235: i32;
  var $i236: i1;
  var $i237: i1;
  var $i238: i32;
  var $i239: i1;
  var $i240: i1;
  var $i241: i32;
  var $i242: i1;
  var $i243: i1;
  var $i244: i32;
  var $i245: i1;
  var $i246: i1;
  var $i247: i32;
  var $i248: i1;
  var $i249: i1;
  var $i250: i32;
  var $i251: i1;
  var $i252: i1;
  var $i253: i32;
  var $i254: i1;
  var $i255: i1;
  var $i256: i32;
  var $i257: i1;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i1;
  var $i268: i32;
  var $i269: i1;
  var $i270: i1;
  var $i271: i32;
  var $i272: i1;
  var $i273: i1;
  var $i274: i32;
  var $i275: i1;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $i279: i1;
  var $i280: i32;
  var $i281: i1;
  var $i282: i1;
  var $i283: i32;
  var $i284: i1;
  var $i285: i1;
  var $i286: i32;
  var $i287: i1;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $i291: i1;
  var $i292: i32;
  var $i293: i1;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i297: i1;
  var $i298: i32;
  var $i299: i1;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i1;
  var $i304: i32;
  var $i305: i1;
  var $i306: i1;
  var $i307: i32;
  var $i308: i1;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $i324: i1;
  var $i325: i32;
  var $i326: i1;
  var $i327: i1;
  var $i328: i32;
  var $i329: i1;
  var $i330: i1;
  var $i331: i32;
  var $i332: i1;
  var $i333: i1;
  var $i334: i32;
  var $i335: i1;
  var $i336: i1;
  var $i337: i32;
  var $i338: i1;
  var $i339: i1;
  var $i340: i32;
  var $i341: i1;
  var $i342: i1;
  var $i343: i32;
  var $i344: i1;
  var $i345: i1;
  var $i346: i32;
  var $i347: i1;
  var $i348: i1;
  var $i349: i32;
  var $i350: i1;
  var $i351: i1;
  var $i352: i32;
  var $i353: i1;
  var $i354: i1;
  var $i355: i32;
  var $i356: i1;
  var $i357: i1;
  var $i358: i32;
  var $i359: i1;
  var $i360: i1;
  var $i361: i32;
  var $i362: i1;
  var $i363: i1;
  var $i364: i32;
  var $i365: i1;
  var $i366: i1;
  var $i367: i32;
  var $i368: i1;
  var $i369: i1;
  var $i370: i32;
  var $i371: i1;
  var $i372: i1;
  var $i373: i32;
  var $i374: i1;
  var $i375: i1;
  var $i376: i32;
  var $i377: i1;
  var $i378: i1;
  var $i379: i32;
  var $i380: i1;
  var $i381: i1;
  var $i382: i32;
  var $i383: i1;
  var $i384: i1;
  var $i385: i32;
  var $i386: i1;
  var $i387: i1;
  var $i388: i32;
  var $i389: i1;
  var $i390: i1;
  var $i391: i32;
  var $i392: i1;
  var $i393: i1;
  var $i394: i32;
  var $i395: i1;
  var $i396: i1;
  var $i397: i32;
  var $i398: i1;
  var $i399: i1;
  var $i400: i32;
  var $i401: i1;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $i405: i1;
  var $i406: i32;
  var $i407: i1;
  var $i408: i1;
  var $i409: i32;
  var $i410: i1;
  var $i411: i1;
  var $i412: i32;
  var $i413: i1;
  var $i414: i1;
  var $i415: i32;
  var $i416: i1;
  var $i417: i1;
  var $i418: i32;
  var $i419: i1;
  var $i420: i1;
  var $i421: i32;
  var $i422: i1;
  var $i423: i1;
  var $i424: i32;
  var $i425: i1;
  var $i426: i1;
  var $i427: i32;
  var $i428: i1;
  var $i429: i1;
  var $i430: i32;
  var $i431: i1;
  var $i432: i1;
  var $i433: i32;
  var $i434: i1;
  var $i435: i1;
  var $i436: i32;
  var $i437: i1;
  var $i438: i1;
  var $i439: i32;
  var $i440: i1;
  var $i441: i1;
  var $i442: i32;
  var $i443: i1;
  var $i444: i1;
  var $i445: i32;
  var $i446: i1;
  var $i447: i1;
  var $i448: i32;
  var $i449: i1;
  var $i450: i1;
  var $i451: i32;
  var $i452: i1;
  var $i453: i1;
  var $i454: i32;
  var $i455: i1;
  var $i456: i1;
  var $i457: i32;
  var $i458: i1;
  var $i459: i1;
  var $i460: i32;
  var $i461: i1;
  var $i462: i1;
  var $i463: i32;
  var $i464: i1;
  var $i465: i1;
  var $i466: i32;
  var $i467: i1;
  var $i468: i1;
  var $i469: i32;
  var $i470: i1;
  var $i471: i1;
  var $i472: i32;
  var $i473: i1;
  var $i474: i1;
  var $i475: i32;
  var $i476: i1;
  var $i477: i1;
  var $i478: i32;
  var $i479: i1;
  var $i480: i1;
  var $i481: i32;
  var $i482: i1;
  var $i483: i1;
  var $i484: i32;
  var $i485: i1;
  var $i486: i1;
  var $i487: i32;
  var $i488: i1;
  var $i489: i1;
  var $i490: i32;
  var $i491: i1;
  var $i492: i1;
  var $i493: i32;
  var $i494: i1;
  var $i495: i1;
  var $i496: i32;
  var $i497: i1;
  var $i498: i1;
  var $i499: i32;
  var $i500: i1;
  var $i501: i1;
  var $i502: i32;
  var $i503: i1;
  var $i504: i1;
  var $i505: i32;
  var $i506: i1;
  var $i507: i1;
  var $i508: i32;
  var $i509: i1;
  var $i510: i1;
  var $i511: i32;
  var $i512: i1;
  var $i513: i1;
  var $i514: i32;
  var $i515: i1;
  var $i516: i1;
  var $i517: i32;
  var $i518: i1;
  var $i519: i1;
  var $i520: i32;
  var $i521: i1;
  var $i522: i1;
  var $i523: i32;
  var $i524: i1;
  var $i525: i1;
  var $i526: i32;
  var $i527: i1;
  var $i528: i1;
  var $i529: i32;
  var $i530: i1;
  var $i531: i1;
  var $i532: i32;
  var $i533: i1;
  var $i534: i1;
  var $i535: i32;
  var $i536: i1;
  var $i537: i1;
  var $i538: i32;
  var $i539: i1;
  var $i540: i1;
  var $i541: i32;
  var $i542: i1;
  var $i543: i1;
  var $i544: i32;
  var $i545: i1;
  var $i546: i1;
  var $i547: i32;
  var $i548: i1;
  var $i549: i1;
  var $i550: i32;
  var $i551: i1;
  var $i552: i1;
  var $i553: i32;
  var $i554: i1;
  var $i555: i1;
  var $i556: i32;
  var $i557: i1;
  var $i558: i1;
  var $i559: i32;
  var $i560: i1;
  var $i561: i1;
  var $i562: i32;
  var $i563: i1;
  var $i564: i1;
  var $i565: i32;
  var $i566: i1;
  var $i567: i1;
  var $i568: i32;
  var $i569: i1;
  var $i570: i1;
  var $i571: i32;
  var $i572: i1;
  var $i573: i1;
  var $i574: i32;
  var $i575: i1;
  var $i576: i1;
  var $i577: i32;
  var $i578: i1;
  var $i579: i1;
  var $i580: i32;
  var $i581: i1;
  var $i582: i1;
  var $i583: i32;
  var $i584: i1;
  var $i585: i1;
  var $i586: i32;
  var $i587: i1;
  var $i588: i1;
  var $i589: i32;
  var $i590: i1;
  var $i591: i1;
  var $i592: i32;
  var $i593: i1;
  var $i594: i1;
  var $i595: i32;
  var $i596: i1;
  var $i597: i1;
  var $i598: i32;
  var $i599: i1;
  var $i600: i1;
  var $i601: i32;
  var $i602: i1;
  var $i603: i1;
  var $i604: i32;
  var $i605: i1;
  var $i606: i1;
  var $i607: i32;
  var $i608: i1;
  var $i609: i1;
  var $i610: i32;
  var $i611: i1;
  var $i612: i1;
  var $i613: i32;
  var $i614: i1;
  var $i615: i1;
  var $i616: i32;
  var $i617: i1;
  var $i618: i1;
  var $i619: i32;
  var $i620: i1;
  var $i621: i1;
  var $i622: i32;
  var $i623: i1;
  var $i624: i1;
  var $i625: i32;
  var $i626: i1;
  var $i627: i1;
  var $i628: i32;
  var $i629: i1;
  var $i630: i1;
  var $i631: i32;
  var $i632: i1;
  var $i633: i1;
  var $i634: i32;
  var $i635: i1;
  var $i636: i1;
  var $i637: i32;
  var $i638: i1;
  var $i639: i1;
  var $i640: i32;
  var $i641: i1;
  var $i642: i1;
  var $i643: i32;
  var $i644: i1;
  var $i645: i1;
  var $i646: i32;
  var $i647: i1;
  var $i648: i1;
  var $i649: i32;
  var $i650: i1;
  var $i651: i1;
  var $i652: i32;
  var $i653: i1;
  var $i654: i1;
  var $i655: i32;
  var $i656: i1;
  var $i657: i1;
  var $i658: i32;
  var $i659: i1;
  var $i660: i1;
  var $i661: i32;
  var $i662: i1;
  var $i663: i1;
  var $i664: i32;
  var $i665: i1;
  var $i666: i1;
  var $i667: i32;
  var $i668: i1;
  var $i669: i1;
  var $i670: i32;
  var $i671: i1;
  var $i672: i1;
  var $i673: i32;
  var $i674: i1;
  var $i675: i1;
  var $i676: i32;
  var $i677: i1;
  var $i678: i1;
  var $i679: i32;
  var $i680: i1;
  var $i681: i1;
  var $i682: i32;
  var $i683: i1;
  var $i684: i1;
  var $i685: i32;
  var $i686: i1;
  var $i687: i1;
  var $i688: i32;
  var $i689: i1;
  var $i690: i1;
  var $i691: i32;
  var $i692: i1;
  var $i693: i1;
  var $i694: i32;
  var $i695: i1;
  var $i696: i1;
  var $i697: i32;
  var $i698: i1;
  var $i699: i1;
  var $i700: i32;
  var $i701: i1;
  var $i702: i1;
  var $i703: i32;
  var $i704: i1;
  var $i705: i1;
  var $i706: i32;
  var $i707: i1;
  var $i708: i1;
  var $i709: i32;
  var $i710: i1;
  var $i711: i1;
  var $i712: i32;
  var $i713: i1;
  var $i714: i1;
  var $i715: i32;
  var $i716: i1;
  var $i717: i1;
  var $i718: i32;
  var $i719: i1;
  var $i720: i1;
  var $i721: i32;
  var $i722: i1;
  var $i723: i1;
  var $i724: i32;
  var $i725: i1;
  var $i726: i1;
  var $i727: i32;
  var $i728: i1;
  var $i729: i1;
  var $i730: i32;
  var $i731: i1;
  var $i732: i1;
  var $i733: i32;
  var $i734: i1;
  var $i735: i1;
  var $i736: i32;
  var $i737: i1;
  var $i738: i1;
  var $i739: i32;
  var $i740: i1;
  var $i741: i1;
  var $i742: i32;
  var $i743: i1;
  var $i744: i1;
  var $i745: i32;
  var $i746: i1;
  var $i747: i1;
  var $i748: i32;
  var $i749: i1;
  var $i750: i1;
  var $i751: i32;
  var $i752: i1;
  var $i753: i1;
  var $i754: i32;
  var $i755: i1;
  var $i756: i1;
  var $i757: i32;
  var $i758: i1;
  var $i759: i1;
  var $i760: i32;
  var $i761: i1;
  var $i762: i1;
  var $i763: i32;
  var $i764: i1;
  var $i765: i1;
  var $i766: i32;
  var $i767: i1;
  var $i768: i1;
  var $i769: i32;
  var $i770: i1;
  var $i771: i1;
  var $i772: i32;
  var $i773: i1;
  var $i774: i1;
  var $i775: i32;
  var $i776: i1;
  var $i777: i1;
  var $i778: i32;
  var $i779: i1;
  var $i780: i1;
  var $i781: i32;
  var $i782: i1;
  var $i783: i1;
  var $i784: i32;
  var $i785: i1;
  var $i786: i1;
  var $i787: i32;
  var $i788: i1;
  var $i789: i1;
  var $i790: i32;
  var $i791: i1;
  var $i792: i1;
  var $i793: i32;
  var $i794: i1;
  var $i795: i1;
  var $i796: i32;
  var $i797: i1;
  var $i798: i1;
  var $i799: i32;
  var $i800: i1;
  var $i801: i1;
  var $i802: i32;
  var $i803: i1;
  var $i804: i1;
  var $i805: i32;
  var $i806: i1;
  var $i807: i1;
  var $i808: i32;
  var $i809: i1;
  var $i810: i1;
  var $i811: i32;
  var $i812: i1;
  var $i813: i1;
  var $i814: i32;
  var $i815: i1;
  var $i816: i1;
  var $i817: i32;
  var $i818: i1;
  var $i819: i1;
  var $i820: i32;
  var $i821: i1;
  var $i822: i1;
  var $i823: i32;
  var $i824: i1;
  var $i825: i1;
  var $i826: i32;
  var $i827: i1;
  var $i828: i1;
  var $i829: i32;
  var $i830: i1;
  var $i831: i1;
  var $i832: i32;
  var $i833: i1;
  var $i834: i1;
  var $i835: i32;
  var $i836: i1;
  var $i837: i1;
  var $i838: i32;
  var $i839: i1;
  var $i840: i1;
  var $i841: i32;
  var $i842: i1;
  var $i843: i1;
  var $i844: i32;
  var $i845: i1;
  var $i846: i1;
  var $i847: i32;
  var $i848: i1;
  var $i849: i1;
  var $i850: i32;
  var $i851: i1;
  var $i852: i1;
  var $i853: i32;
  var $i854: i1;
  var $i855: i1;
  var $i856: i32;
  var $i857: i1;
  var $i858: i1;
  var $i859: i32;
  var $i860: i1;
  var $i861: i1;
  var $i862: i32;
  var $i863: i1;
  var $i864: i1;
  var $i865: i32;
  var $i866: i1;
  var $i867: i1;
  var $i868: i32;
  var $i869: i1;
  var $i870: i1;
  var $i871: i32;
  var $i872: i1;
  var $i873: i1;
  var $i874: i32;
  var $i875: i1;
  var $i876: i1;
  var $i877: i32;
  var $i878: i1;
  var $i879: i1;
  var $i880: i32;
  var $i881: i1;
  var $i882: i1;
  var $i883: i32;
  var $i884: i1;
  var $i885: i1;
  var $i886: i32;
  var $i887: i1;
  var $i888: i1;
  var $i889: i32;
  var $i890: i1;
  var $i891: i1;
  var $i892: i32;
  var $i893: i1;
  var $i894: i1;
  var $i895: i32;
  var $i896: i1;
  var $i897: i1;
  var $i898: i32;
  var $i899: i1;
  var $i900: i1;
  var $i901: i32;
  var $i902: i1;
  var $i903: i1;
  var $i904: i32;
  var $i905: i1;
  var $i906: i1;
  var $i907: i32;
  var $i908: i1;
  var $i909: i1;
  var $i910: i32;
  var $i911: i1;
  var $i912: i1;
  var $i913: i32;
  var $i914: i1;
  var $i915: i1;
  var $i916: i32;
  var $i917: i1;
  var $i918: i1;
  var $i919: i32;
  var $i920: i1;
  var $i921: i1;
  var $i922: i32;
  var $i923: i1;
  var $i924: i1;
  var $i925: i32;
  var $i926: i1;
  var $i927: i1;
  var $i928: i32;
  var $i929: i1;
  var $i930: i1;
  var $i931: i32;
  var $i932: i1;
  var $i933: i1;
  var $i934: i32;
  var $i935: i1;
  var $i936: i1;
  var $i937: i32;
  var $i938: i1;
  var $i939: i1;
  var $i940: i32;
  var $i941: i1;
  var $i942: i1;
  var $i943: i32;
  var $i944: i1;
  var $i945: i1;
  var $i946: i32;
  var $i947: i1;
  var $i948: i1;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 8), 168));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520)), $mul.ref(6352, 1)), $mul.ref(0, 1));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i10 := pch_vbus_gpio_get_value($p5);
    call {:si_unique_call 1021} {:cexpr "vbus"} boogie_si_record_i32($i10);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($sub.i32(0, 1), $i10);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} __const_udelay(4295000);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} __const_udelay(4295000);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} __const_udelay(4295000);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} __const_udelay(4295000);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} __const_udelay(4295000);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} __const_udelay(4295000);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} __const_udelay(4295000);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} __const_udelay(4295000);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} __const_udelay(4295000);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i52 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i10, $i52);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} __const_udelay(4295000);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} __const_udelay(4295000);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} __const_udelay(4295000);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} __const_udelay(4295000);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} __const_udelay(4295000);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} __const_udelay(4295000);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} __const_udelay(4295000);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} __const_udelay(4295000);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} __const_udelay(4295000);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i55 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i52, $i55);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} __const_udelay(4295000);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} __const_udelay(4295000);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} __const_udelay(4295000);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} __const_udelay(4295000);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} __const_udelay(4295000);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __const_udelay(4295000);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} __const_udelay(4295000);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} __const_udelay(4295000);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} __const_udelay(4295000);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i58 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i55, $i58);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} __const_udelay(4295000);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} __const_udelay(4295000);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} __const_udelay(4295000);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} __const_udelay(4295000);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} __const_udelay(4295000);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} __const_udelay(4295000);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} __const_udelay(4295000);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} __const_udelay(4295000);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} __const_udelay(4295000);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $i61 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i58, $i61);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} __const_udelay(4295000);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} __const_udelay(4295000);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} __const_udelay(4295000);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} __const_udelay(4295000);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} __const_udelay(4295000);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} __const_udelay(4295000);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} __const_udelay(4295000);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} __const_udelay(4295000);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} __const_udelay(4295000);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i64 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i61, $i64);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} __const_udelay(4295000);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} __const_udelay(4295000);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} __const_udelay(4295000);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} __const_udelay(4295000);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} __const_udelay(4295000);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} __const_udelay(4295000);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} __const_udelay(4295000);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} __const_udelay(4295000);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} __const_udelay(4295000);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i67 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i64, $i67);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} __const_udelay(4295000);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} __const_udelay(4295000);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} __const_udelay(4295000);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} __const_udelay(4295000);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} __const_udelay(4295000);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} __const_udelay(4295000);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} __const_udelay(4295000);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} __const_udelay(4295000);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} __const_udelay(4295000);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i70 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i67, $i70);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb154, $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} __const_udelay(4295000);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} __const_udelay(4295000);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} __const_udelay(4295000);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} __const_udelay(4295000);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} __const_udelay(4295000);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} __const_udelay(4295000);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} __const_udelay(4295000);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} __const_udelay(4295000);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} __const_udelay(4295000);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i73 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i70, $i73);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} __const_udelay(4295000);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} __const_udelay(4295000);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} __const_udelay(4295000);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} __const_udelay(4295000);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} __const_udelay(4295000);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} __const_udelay(4295000);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} __const_udelay(4295000);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} __const_udelay(4295000);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} __const_udelay(4295000);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i76 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i73, $i76);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb192, $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __const_udelay(4295000);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} __const_udelay(4295000);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} __const_udelay(4295000);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} __const_udelay(4295000);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} __const_udelay(4295000);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} __const_udelay(4295000);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __const_udelay(4295000);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} __const_udelay(4295000);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} __const_udelay(4295000);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i79 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i76, $i79);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} __const_udelay(4295000);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} __const_udelay(4295000);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} __const_udelay(4295000);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} __const_udelay(4295000);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} __const_udelay(4295000);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} __const_udelay(4295000);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} __const_udelay(4295000);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} __const_udelay(4295000);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} __const_udelay(4295000);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i82 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i79, $i82);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} __const_udelay(4295000);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} __const_udelay(4295000);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} __const_udelay(4295000);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} __const_udelay(4295000);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} __const_udelay(4295000);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} __const_udelay(4295000);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} __const_udelay(4295000);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} __const_udelay(4295000);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} __const_udelay(4295000);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i85 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i82, $i85);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} __const_udelay(4295000);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} __const_udelay(4295000);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} __const_udelay(4295000);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} __const_udelay(4295000);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} __const_udelay(4295000);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} __const_udelay(4295000);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} __const_udelay(4295000);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} __const_udelay(4295000);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} __const_udelay(4295000);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i88 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i85, $i88);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb268, $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} __const_udelay(4295000);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} __const_udelay(4295000);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} __const_udelay(4295000);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} __const_udelay(4295000);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} __const_udelay(4295000);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} __const_udelay(4295000);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} __const_udelay(4295000);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} __const_udelay(4295000);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} __const_udelay(4295000);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i91 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i88, $i91);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb287, $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} __const_udelay(4295000);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} __const_udelay(4295000);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} __const_udelay(4295000);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} __const_udelay(4295000);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} __const_udelay(4295000);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} __const_udelay(4295000);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} __const_udelay(4295000);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} __const_udelay(4295000);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} __const_udelay(4295000);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $i94 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i91, $i94);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} __const_udelay(4295000);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} __const_udelay(4295000);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} __const_udelay(4295000);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} __const_udelay(4295000);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} __const_udelay(4295000);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} __const_udelay(4295000);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} __const_udelay(4295000);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} __const_udelay(4295000);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} __const_udelay(4295000);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $i97 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i94, $i97);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} __const_udelay(4295000);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} __const_udelay(4295000);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} __const_udelay(4295000);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} __const_udelay(4295000);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} __const_udelay(4295000);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} __const_udelay(4295000);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} __const_udelay(4295000);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} __const_udelay(4295000);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} __const_udelay(4295000);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i100 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i97, $i100);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __const_udelay(4295000);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} __const_udelay(4295000);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} __const_udelay(4295000);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} __const_udelay(4295000);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} __const_udelay(4295000);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} __const_udelay(4295000);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} __const_udelay(4295000);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} __const_udelay(4295000);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} __const_udelay(4295000);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i103 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i100, $i103);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} __const_udelay(4295000);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} __const_udelay(4295000);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} __const_udelay(4295000);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} __const_udelay(4295000);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} __const_udelay(4295000);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} __const_udelay(4295000);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} __const_udelay(4295000);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} __const_udelay(4295000);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} __const_udelay(4295000);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i106 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i103, $i106);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb382, $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} __const_udelay(4295000);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} __const_udelay(4295000);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} __const_udelay(4295000);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} __const_udelay(4295000);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} __const_udelay(4295000);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} __const_udelay(4295000);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} __const_udelay(4295000);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} __const_udelay(4295000);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} __const_udelay(4295000);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i109 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i106, $i109);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb401, $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} __const_udelay(4295000);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} __const_udelay(4295000);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} __const_udelay(4295000);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} __const_udelay(4295000);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} __const_udelay(4295000);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} __const_udelay(4295000);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} __const_udelay(4295000);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} __const_udelay(4295000);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} __const_udelay(4295000);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i112 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i109, $i112);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb420, $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} __const_udelay(4295000);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} __const_udelay(4295000);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} __const_udelay(4295000);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} __const_udelay(4295000);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} __const_udelay(4295000);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} __const_udelay(4295000);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} __const_udelay(4295000);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} __const_udelay(4295000);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} __const_udelay(4295000);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i115 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i112, $i115);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb439, $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} __const_udelay(4295000);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} __const_udelay(4295000);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} __const_udelay(4295000);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} __const_udelay(4295000);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} __const_udelay(4295000);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} __const_udelay(4295000);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} __const_udelay(4295000);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} __const_udelay(4295000);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} __const_udelay(4295000);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i118 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i115, $i118);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb458, $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} __const_udelay(4295000);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} __const_udelay(4295000);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} __const_udelay(4295000);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} __const_udelay(4295000);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} __const_udelay(4295000);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} __const_udelay(4295000);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} __const_udelay(4295000);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} __const_udelay(4295000);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} __const_udelay(4295000);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i121 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i118, $i121);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb477, $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} __const_udelay(4295000);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} __const_udelay(4295000);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} __const_udelay(4295000);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} __const_udelay(4295000);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} __const_udelay(4295000);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} __const_udelay(4295000);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} __const_udelay(4295000);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} __const_udelay(4295000);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} __const_udelay(4295000);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $i124 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i121, $i124);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb496, $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} __const_udelay(4295000);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} __const_udelay(4295000);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} __const_udelay(4295000);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} __const_udelay(4295000);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} __const_udelay(4295000);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} __const_udelay(4295000);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} __const_udelay(4295000);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} __const_udelay(4295000);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} __const_udelay(4295000);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i127 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i124, $i127);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb515, $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} __const_udelay(4295000);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} __const_udelay(4295000);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} __const_udelay(4295000);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} __const_udelay(4295000);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} __const_udelay(4295000);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} __const_udelay(4295000);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} __const_udelay(4295000);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} __const_udelay(4295000);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} __const_udelay(4295000);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i130 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i127, $i130);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} __const_udelay(4295000);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} __const_udelay(4295000);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} __const_udelay(4295000);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} __const_udelay(4295000);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} __const_udelay(4295000);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} __const_udelay(4295000);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} __const_udelay(4295000);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} __const_udelay(4295000);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} __const_udelay(4295000);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i133 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i130, $i133);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb553, $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    assume !($i134 == 1);
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} __const_udelay(4295000);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} __const_udelay(4295000);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} __const_udelay(4295000);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} __const_udelay(4295000);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} __const_udelay(4295000);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} __const_udelay(4295000);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} __const_udelay(4295000);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} __const_udelay(4295000);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} __const_udelay(4295000);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i136 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i133, $i136);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb572, $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} __const_udelay(4295000);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} __const_udelay(4295000);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} __const_udelay(4295000);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} __const_udelay(4295000);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} __const_udelay(4295000);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} __const_udelay(4295000);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} __const_udelay(4295000);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} __const_udelay(4295000);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} __const_udelay(4295000);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i139 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i136, $i139);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb591, $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} __const_udelay(4295000);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} __const_udelay(4295000);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} __const_udelay(4295000);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} __const_udelay(4295000);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} __const_udelay(4295000);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} __const_udelay(4295000);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} __const_udelay(4295000);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} __const_udelay(4295000);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} __const_udelay(4295000);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i142 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i139, $i142);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb610, $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} __const_udelay(4295000);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} __const_udelay(4295000);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} __const_udelay(4295000);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} __const_udelay(4295000);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} __const_udelay(4295000);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} __const_udelay(4295000);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} __const_udelay(4295000);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} __const_udelay(4295000);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} __const_udelay(4295000);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i145 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i142, $i145);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb629, $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} __const_udelay(4295000);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} __const_udelay(4295000);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} __const_udelay(4295000);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} __const_udelay(4295000);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} __const_udelay(4295000);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} __const_udelay(4295000);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} __const_udelay(4295000);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} __const_udelay(4295000);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} __const_udelay(4295000);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i148 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i145, $i148);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb648, $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} __const_udelay(4295000);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} __const_udelay(4295000);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} __const_udelay(4295000);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} __const_udelay(4295000);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} __const_udelay(4295000);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} __const_udelay(4295000);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} __const_udelay(4295000);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} __const_udelay(4295000);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} __const_udelay(4295000);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i151 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i148, $i151);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb667, $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} __const_udelay(4295000);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} __const_udelay(4295000);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} __const_udelay(4295000);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} __const_udelay(4295000);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} __const_udelay(4295000);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} __const_udelay(4295000);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} __const_udelay(4295000);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} __const_udelay(4295000);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} __const_udelay(4295000);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i154 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i151, $i154);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb686, $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} __const_udelay(4295000);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} __const_udelay(4295000);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} __const_udelay(4295000);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} __const_udelay(4295000);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} __const_udelay(4295000);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} __const_udelay(4295000);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} __const_udelay(4295000);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    goto $bb700;

  $bb700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} __const_udelay(4295000);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} __const_udelay(4295000);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i157 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i154, $i157);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb705, $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} __const_udelay(4295000);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} __const_udelay(4295000);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} __const_udelay(4295000);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} __const_udelay(4295000);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} __const_udelay(4295000);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} __const_udelay(4295000);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} __const_udelay(4295000);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} __const_udelay(4295000);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} __const_udelay(4295000);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $i160 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i157, $i160);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb724, $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} __const_udelay(4295000);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} __const_udelay(4295000);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} __const_udelay(4295000);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} __const_udelay(4295000);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} __const_udelay(4295000);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} __const_udelay(4295000);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} __const_udelay(4295000);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} __const_udelay(4295000);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} __const_udelay(4295000);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i163 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i160, $i163);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb743, $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} __const_udelay(4295000);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} __const_udelay(4295000);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} __const_udelay(4295000);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} __const_udelay(4295000);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} __const_udelay(4295000);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} __const_udelay(4295000);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} __const_udelay(4295000);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} __const_udelay(4295000);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} __const_udelay(4295000);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb760;

  $bb760:
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $i166 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i163, $i166);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb762, $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    assume !($i167 == 1);
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} __const_udelay(4295000);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} __const_udelay(4295000);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} __const_udelay(4295000);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} __const_udelay(4295000);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    goto $bb773;

  $bb773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} __const_udelay(4295000);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} __const_udelay(4295000);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} __const_udelay(4295000);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} __const_udelay(4295000);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} __const_udelay(4295000);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $i169 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i166, $i169);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb781, $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} __const_udelay(4295000);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} __const_udelay(4295000);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} __const_udelay(4295000);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} __const_udelay(4295000);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} __const_udelay(4295000);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} __const_udelay(4295000);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} __const_udelay(4295000);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} __const_udelay(4295000);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} __const_udelay(4295000);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i172 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i169, $i172);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb800, $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} __const_udelay(4295000);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} __const_udelay(4295000);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} __const_udelay(4295000);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} __const_udelay(4295000);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} __const_udelay(4295000);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} __const_udelay(4295000);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} __const_udelay(4295000);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} __const_udelay(4295000);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} __const_udelay(4295000);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i175 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i172, $i175);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb819, $bb820;

  $bb820:
    assume {:verifier.code 0} true;
    assume !($i176 == 1);
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} __const_udelay(4295000);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} __const_udelay(4295000);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} __const_udelay(4295000);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} __const_udelay(4295000);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} __const_udelay(4295000);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} __const_udelay(4295000);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} __const_udelay(4295000);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} __const_udelay(4295000);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} __const_udelay(4295000);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i178 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i175, $i178);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb838, $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    assume !($i179 == 1);
    goto $bb840;

  $bb840:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb844:
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} __const_udelay(4295000);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} __const_udelay(4295000);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} __const_udelay(4295000);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} __const_udelay(4295000);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} __const_udelay(4295000);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} __const_udelay(4295000);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} __const_udelay(4295000);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} __const_udelay(4295000);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} __const_udelay(4295000);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    goto $bb854;

  $bb854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb855;

  $bb855:
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $i181 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i178, $i181);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb857, $bb858;

  $bb858:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb859;

  $bb859:
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb863:
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} __const_udelay(4295000);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} __const_udelay(4295000);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} __const_udelay(4295000);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} __const_udelay(4295000);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} __const_udelay(4295000);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} __const_udelay(4295000);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    goto $bb870;

  $bb870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} __const_udelay(4295000);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    goto $bb871;

  $bb871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} __const_udelay(4295000);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} __const_udelay(4295000);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $i184 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i181, $i184);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb876, $bb877;

  $bb877:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    goto $bb882;

  $bb882:
    assume {:verifier.code 0} true;
    goto $bb883;

  $bb883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} __const_udelay(4295000);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} __const_udelay(4295000);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} __const_udelay(4295000);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} __const_udelay(4295000);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} __const_udelay(4295000);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} __const_udelay(4295000);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} __const_udelay(4295000);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} __const_udelay(4295000);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    goto $bb891;

  $bb891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} __const_udelay(4295000);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    goto $bb892;

  $bb892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    goto $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $i187 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i184, $i187);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb895, $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    goto $bb900;

  $bb900:
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb901:
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} __const_udelay(4295000);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    goto $bb903;

  $bb903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} __const_udelay(4295000);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} __const_udelay(4295000);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} __const_udelay(4295000);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} __const_udelay(4295000);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} __const_udelay(4295000);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} __const_udelay(4295000);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} __const_udelay(4295000);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    goto $bb910;

  $bb910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} __const_udelay(4295000);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    goto $bb913;

  $bb913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $i190 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i187, $i190);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb914, $bb915;

  $bb915:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    goto $bb919;

  $bb919:
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} __const_udelay(4295000);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} __const_udelay(4295000);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} __const_udelay(4295000);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} __const_udelay(4295000);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} __const_udelay(4295000);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} __const_udelay(4295000);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} __const_udelay(4295000);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} __const_udelay(4295000);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} __const_udelay(4295000);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb931:
    assume {:verifier.code 0} true;
    goto $bb932;

  $bb932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $i193 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i190, $i193);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb933, $bb934;

  $bb934:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb935;

  $bb935:
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    goto $bb939;

  $bb939:
    assume {:verifier.code 0} true;
    goto $bb940;

  $bb940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} __const_udelay(4295000);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} __const_udelay(4295000);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} __const_udelay(4295000);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    goto $bb943;

  $bb943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} __const_udelay(4295000);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} __const_udelay(4295000);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} __const_udelay(4295000);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} __const_udelay(4295000);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} __const_udelay(4295000);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} __const_udelay(4295000);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    goto $bb949;

  $bb949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb950;

  $bb950:
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $i196 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i193, $i196);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb952, $bb953;

  $bb953:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    goto $bb959;

  $bb959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} __const_udelay(4295000);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} __const_udelay(4295000);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} __const_udelay(4295000);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} __const_udelay(4295000);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    goto $bb963;

  $bb963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} __const_udelay(4295000);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} __const_udelay(4295000);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} __const_udelay(4295000);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} __const_udelay(4295000);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} __const_udelay(4295000);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} $i199 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i196, $i199);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb971, $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb973;

  $bb973:
    assume {:verifier.code 0} true;
    goto $bb976;

  $bb976:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} __const_udelay(4295000);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb979;

  $bb979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} __const_udelay(4295000);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    goto $bb980;

  $bb980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} __const_udelay(4295000);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} __const_udelay(4295000);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    goto $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} __const_udelay(4295000);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    goto $bb983;

  $bb983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} __const_udelay(4295000);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} __const_udelay(4295000);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} __const_udelay(4295000);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} __const_udelay(4295000);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} $i202 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i199, $i202);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb990, $bb991;

  $bb991:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb995:
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} __const_udelay(4295000);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    goto $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} __const_udelay(4295000);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} __const_udelay(4295000);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    goto $bb1000;

  $bb1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} __const_udelay(4295000);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} __const_udelay(4295000);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} __const_udelay(4295000);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    goto $bb1003;

  $bb1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} __const_udelay(4295000);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} __const_udelay(4295000);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} __const_udelay(4295000);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1007:
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i205 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i202, $i205);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb1009, $bb1010;

  $bb1010:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb1011;

  $bb1011:
    assume {:verifier.code 0} true;
    goto $bb1014;

  $bb1014:
    assume {:verifier.code 0} true;
    goto $bb1015;

  $bb1015:
    assume {:verifier.code 0} true;
    goto $bb1016;

  $bb1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} __const_udelay(4295000);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} __const_udelay(4295000);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    goto $bb1018;

  $bb1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} __const_udelay(4295000);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    goto $bb1019;

  $bb1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} __const_udelay(4295000);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    goto $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} __const_udelay(4295000);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    goto $bb1021;

  $bb1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} __const_udelay(4295000);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    goto $bb1022;

  $bb1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} __const_udelay(4295000);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    goto $bb1023;

  $bb1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} __const_udelay(4295000);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto $bb1024;

  $bb1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} __const_udelay(4295000);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    goto $bb1025;

  $bb1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1026;

  $bb1026:
    assume {:verifier.code 0} true;
    goto $bb1027;

  $bb1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i208 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i205, $i208);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb1028, $bb1029;

  $bb1029:
    assume {:verifier.code 0} true;
    assume !($i209 == 1);
    goto $bb1030;

  $bb1030:
    assume {:verifier.code 0} true;
    goto $bb1033;

  $bb1033:
    assume {:verifier.code 0} true;
    goto $bb1034;

  $bb1034:
    assume {:verifier.code 0} true;
    goto $bb1035;

  $bb1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} __const_udelay(4295000);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    goto $bb1036;

  $bb1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} __const_udelay(4295000);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    goto $bb1037;

  $bb1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} __const_udelay(4295000);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    goto $bb1038;

  $bb1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} __const_udelay(4295000);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb1039;

  $bb1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} __const_udelay(4295000);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    goto $bb1040;

  $bb1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} __const_udelay(4295000);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    goto $bb1041;

  $bb1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} __const_udelay(4295000);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    goto $bb1042;

  $bb1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} __const_udelay(4295000);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    goto $bb1043;

  $bb1043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} __const_udelay(4295000);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    goto $bb1044;

  $bb1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1045;

  $bb1045:
    assume {:verifier.code 0} true;
    goto $bb1046;

  $bb1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $i211 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i208, $i211);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb1047, $bb1048;

  $bb1048:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb1049;

  $bb1049:
    assume {:verifier.code 0} true;
    goto $bb1052;

  $bb1052:
    assume {:verifier.code 0} true;
    goto $bb1053;

  $bb1053:
    assume {:verifier.code 0} true;
    goto $bb1054;

  $bb1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} __const_udelay(4295000);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb1055;

  $bb1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} __const_udelay(4295000);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    goto $bb1056;

  $bb1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} __const_udelay(4295000);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    goto $bb1057;

  $bb1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} __const_udelay(4295000);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    goto $bb1058;

  $bb1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} __const_udelay(4295000);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    goto $bb1059;

  $bb1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} __const_udelay(4295000);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    goto $bb1060;

  $bb1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} __const_udelay(4295000);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    goto $bb1061;

  $bb1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} __const_udelay(4295000);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    goto $bb1062;

  $bb1062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} __const_udelay(4295000);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    goto $bb1063;

  $bb1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1064;

  $bb1064:
    assume {:verifier.code 0} true;
    goto $bb1065;

  $bb1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $i214 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i211, $i214);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb1066, $bb1067;

  $bb1067:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb1068;

  $bb1068:
    assume {:verifier.code 0} true;
    goto $bb1071;

  $bb1071:
    assume {:verifier.code 0} true;
    goto $bb1072;

  $bb1072:
    assume {:verifier.code 0} true;
    goto $bb1073;

  $bb1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} __const_udelay(4295000);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    goto $bb1074;

  $bb1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} __const_udelay(4295000);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    goto $bb1075;

  $bb1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} __const_udelay(4295000);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    goto $bb1076;

  $bb1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} __const_udelay(4295000);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    goto $bb1077;

  $bb1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} __const_udelay(4295000);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    goto $bb1078;

  $bb1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} __const_udelay(4295000);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    goto $bb1079;

  $bb1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} __const_udelay(4295000);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    goto $bb1080;

  $bb1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} __const_udelay(4295000);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    goto $bb1081;

  $bb1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} __const_udelay(4295000);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto $bb1082;

  $bb1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1083;

  $bb1083:
    assume {:verifier.code 0} true;
    goto $bb1084;

  $bb1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $i217 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i214, $i217);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb1085, $bb1086;

  $bb1086:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb1087;

  $bb1087:
    assume {:verifier.code 0} true;
    goto $bb1090;

  $bb1090:
    assume {:verifier.code 0} true;
    goto $bb1091;

  $bb1091:
    assume {:verifier.code 0} true;
    goto $bb1092;

  $bb1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} __const_udelay(4295000);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    goto $bb1093;

  $bb1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} __const_udelay(4295000);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb1094;

  $bb1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} __const_udelay(4295000);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    goto $bb1095;

  $bb1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} __const_udelay(4295000);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    goto $bb1096;

  $bb1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} __const_udelay(4295000);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    goto $bb1097;

  $bb1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} __const_udelay(4295000);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    goto $bb1098;

  $bb1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} __const_udelay(4295000);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb1099;

  $bb1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} __const_udelay(4295000);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    goto $bb1100;

  $bb1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} __const_udelay(4295000);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    goto $bb1101;

  $bb1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1102;

  $bb1102:
    assume {:verifier.code 0} true;
    goto $bb1103;

  $bb1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $i220 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i217, $i220);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb1104, $bb1105;

  $bb1105:
    assume {:verifier.code 0} true;
    assume !($i221 == 1);
    goto $bb1106;

  $bb1106:
    assume {:verifier.code 0} true;
    goto $bb1109;

  $bb1109:
    assume {:verifier.code 0} true;
    goto $bb1110;

  $bb1110:
    assume {:verifier.code 0} true;
    goto $bb1111;

  $bb1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} __const_udelay(4295000);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    goto $bb1112;

  $bb1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} __const_udelay(4295000);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    goto $bb1113;

  $bb1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} __const_udelay(4295000);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb1114;

  $bb1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} __const_udelay(4295000);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    goto $bb1115;

  $bb1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} __const_udelay(4295000);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    goto $bb1116;

  $bb1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} __const_udelay(4295000);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    goto $bb1117;

  $bb1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} __const_udelay(4295000);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    goto $bb1118;

  $bb1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} __const_udelay(4295000);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    goto $bb1119;

  $bb1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} __const_udelay(4295000);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    goto $bb1120;

  $bb1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1121;

  $bb1121:
    assume {:verifier.code 0} true;
    goto $bb1122;

  $bb1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $i223 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i220, $i223);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb1123, $bb1124;

  $bb1124:
    assume {:verifier.code 0} true;
    assume !($i224 == 1);
    goto $bb1125;

  $bb1125:
    assume {:verifier.code 0} true;
    goto $bb1128;

  $bb1128:
    assume {:verifier.code 0} true;
    goto $bb1129;

  $bb1129:
    assume {:verifier.code 0} true;
    goto $bb1130;

  $bb1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} __const_udelay(4295000);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    goto $bb1131;

  $bb1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} __const_udelay(4295000);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    goto $bb1132;

  $bb1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} __const_udelay(4295000);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    goto $bb1133;

  $bb1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} __const_udelay(4295000);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    goto $bb1134;

  $bb1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} __const_udelay(4295000);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    goto $bb1135;

  $bb1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} __const_udelay(4295000);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    goto $bb1136;

  $bb1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} __const_udelay(4295000);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    goto $bb1137;

  $bb1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} __const_udelay(4295000);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    goto $bb1138;

  $bb1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} __const_udelay(4295000);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    goto $bb1139;

  $bb1139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1140;

  $bb1140:
    assume {:verifier.code 0} true;
    goto $bb1141;

  $bb1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $i226 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i223, $i226);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb1142, $bb1143;

  $bb1143:
    assume {:verifier.code 0} true;
    assume !($i227 == 1);
    goto $bb1144;

  $bb1144:
    assume {:verifier.code 0} true;
    goto $bb1147;

  $bb1147:
    assume {:verifier.code 0} true;
    goto $bb1148;

  $bb1148:
    assume {:verifier.code 0} true;
    goto $bb1149;

  $bb1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} __const_udelay(4295000);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    goto $bb1150;

  $bb1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} __const_udelay(4295000);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    goto $bb1151;

  $bb1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} __const_udelay(4295000);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    goto $bb1152;

  $bb1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} __const_udelay(4295000);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    goto $bb1153;

  $bb1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} __const_udelay(4295000);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    goto $bb1154;

  $bb1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} __const_udelay(4295000);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    goto $bb1155;

  $bb1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} __const_udelay(4295000);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    goto $bb1156;

  $bb1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} __const_udelay(4295000);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    goto $bb1157;

  $bb1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} __const_udelay(4295000);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    goto $bb1158;

  $bb1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1159;

  $bb1159:
    assume {:verifier.code 0} true;
    goto $bb1160;

  $bb1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $i229 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i226, $i229);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb1161, $bb1162;

  $bb1162:
    assume {:verifier.code 0} true;
    assume !($i230 == 1);
    goto $bb1163;

  $bb1163:
    assume {:verifier.code 0} true;
    goto $bb1166;

  $bb1166:
    assume {:verifier.code 0} true;
    goto $bb1167;

  $bb1167:
    assume {:verifier.code 0} true;
    goto $bb1168;

  $bb1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} __const_udelay(4295000);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    goto $bb1169;

  $bb1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} __const_udelay(4295000);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb1170;

  $bb1170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} __const_udelay(4295000);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    goto $bb1171;

  $bb1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} __const_udelay(4295000);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    goto $bb1172;

  $bb1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} __const_udelay(4295000);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    goto $bb1173;

  $bb1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} __const_udelay(4295000);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    goto $bb1174;

  $bb1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} __const_udelay(4295000);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    goto $bb1175;

  $bb1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} __const_udelay(4295000);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    goto $bb1176;

  $bb1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} __const_udelay(4295000);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    goto $bb1177;

  $bb1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1178;

  $bb1178:
    assume {:verifier.code 0} true;
    goto $bb1179;

  $bb1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $i232 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i229, $i232);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb1180, $bb1181;

  $bb1181:
    assume {:verifier.code 0} true;
    assume !($i233 == 1);
    goto $bb1182;

  $bb1182:
    assume {:verifier.code 0} true;
    goto $bb1185;

  $bb1185:
    assume {:verifier.code 0} true;
    goto $bb1186;

  $bb1186:
    assume {:verifier.code 0} true;
    goto $bb1187;

  $bb1187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} __const_udelay(4295000);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    goto $bb1188;

  $bb1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} __const_udelay(4295000);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    goto $bb1189;

  $bb1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} __const_udelay(4295000);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    goto $bb1190;

  $bb1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} __const_udelay(4295000);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    goto $bb1191;

  $bb1191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} __const_udelay(4295000);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb1192;

  $bb1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} __const_udelay(4295000);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    goto $bb1193;

  $bb1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} __const_udelay(4295000);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto $bb1194;

  $bb1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} __const_udelay(4295000);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    goto $bb1195;

  $bb1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} __const_udelay(4295000);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    goto $bb1196;

  $bb1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1197;

  $bb1197:
    assume {:verifier.code 0} true;
    goto $bb1198;

  $bb1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $i235 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i232, $i235);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb1199, $bb1200;

  $bb1200:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb1201;

  $bb1201:
    assume {:verifier.code 0} true;
    goto $bb1204;

  $bb1204:
    assume {:verifier.code 0} true;
    goto $bb1205;

  $bb1205:
    assume {:verifier.code 0} true;
    goto $bb1206;

  $bb1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} __const_udelay(4295000);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    goto $bb1207;

  $bb1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} __const_udelay(4295000);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    goto $bb1208;

  $bb1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} __const_udelay(4295000);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb1209;

  $bb1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} __const_udelay(4295000);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    goto $bb1210;

  $bb1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} __const_udelay(4295000);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    goto $bb1211;

  $bb1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} __const_udelay(4295000);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    goto $bb1212;

  $bb1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} __const_udelay(4295000);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb1213;

  $bb1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} __const_udelay(4295000);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    goto $bb1214;

  $bb1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} __const_udelay(4295000);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    goto $bb1215;

  $bb1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1216;

  $bb1216:
    assume {:verifier.code 0} true;
    goto $bb1217;

  $bb1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $i238 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i235, $i238);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb1218, $bb1219;

  $bb1219:
    assume {:verifier.code 0} true;
    assume !($i239 == 1);
    goto $bb1220;

  $bb1220:
    assume {:verifier.code 0} true;
    goto $bb1223;

  $bb1223:
    assume {:verifier.code 0} true;
    goto $bb1224;

  $bb1224:
    assume {:verifier.code 0} true;
    goto $bb1225;

  $bb1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} __const_udelay(4295000);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto $bb1226;

  $bb1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} __const_udelay(4295000);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb1227;

  $bb1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} __const_udelay(4295000);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    goto $bb1228;

  $bb1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} __const_udelay(4295000);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    goto $bb1229;

  $bb1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} __const_udelay(4295000);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    goto $bb1230;

  $bb1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} __const_udelay(4295000);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    goto $bb1231;

  $bb1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} __const_udelay(4295000);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    goto $bb1232;

  $bb1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} __const_udelay(4295000);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    goto $bb1233;

  $bb1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} __const_udelay(4295000);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    goto $bb1234;

  $bb1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1235;

  $bb1235:
    assume {:verifier.code 0} true;
    goto $bb1236;

  $bb1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} $i241 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i238, $i241);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb1237, $bb1238;

  $bb1238:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb1239;

  $bb1239:
    assume {:verifier.code 0} true;
    goto $bb1242;

  $bb1242:
    assume {:verifier.code 0} true;
    goto $bb1243;

  $bb1243:
    assume {:verifier.code 0} true;
    goto $bb1244;

  $bb1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} __const_udelay(4295000);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    goto $bb1245;

  $bb1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} __const_udelay(4295000);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    goto $bb1246;

  $bb1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} __const_udelay(4295000);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    goto $bb1247;

  $bb1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} __const_udelay(4295000);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    goto $bb1248;

  $bb1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} __const_udelay(4295000);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    goto $bb1249;

  $bb1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} __const_udelay(4295000);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    goto $bb1250;

  $bb1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} __const_udelay(4295000);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    goto $bb1251;

  $bb1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} __const_udelay(4295000);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    goto $bb1252;

  $bb1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} __const_udelay(4295000);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    goto $bb1253;

  $bb1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1254;

  $bb1254:
    assume {:verifier.code 0} true;
    goto $bb1255;

  $bb1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $i244 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i241, $i244);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb1256, $bb1257;

  $bb1257:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb1258;

  $bb1258:
    assume {:verifier.code 0} true;
    goto $bb1261;

  $bb1261:
    assume {:verifier.code 0} true;
    goto $bb1262;

  $bb1262:
    assume {:verifier.code 0} true;
    goto $bb1263;

  $bb1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} __const_udelay(4295000);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    goto $bb1264;

  $bb1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} __const_udelay(4295000);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    goto $bb1265;

  $bb1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} __const_udelay(4295000);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    goto $bb1266;

  $bb1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} __const_udelay(4295000);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    goto $bb1267;

  $bb1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} __const_udelay(4295000);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    goto $bb1268;

  $bb1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} __const_udelay(4295000);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    goto $bb1269;

  $bb1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} __const_udelay(4295000);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    goto $bb1270;

  $bb1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} __const_udelay(4295000);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    goto $bb1271;

  $bb1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} __const_udelay(4295000);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    goto $bb1272;

  $bb1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1273;

  $bb1273:
    assume {:verifier.code 0} true;
    goto $bb1274;

  $bb1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $i247 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i244, $i247);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb1275, $bb1276;

  $bb1276:
    assume {:verifier.code 0} true;
    assume !($i248 == 1);
    goto $bb1277;

  $bb1277:
    assume {:verifier.code 0} true;
    goto $bb1280;

  $bb1280:
    assume {:verifier.code 0} true;
    goto $bb1281;

  $bb1281:
    assume {:verifier.code 0} true;
    goto $bb1282;

  $bb1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} __const_udelay(4295000);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    goto $bb1283;

  $bb1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} __const_udelay(4295000);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    goto $bb1284;

  $bb1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} __const_udelay(4295000);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    goto $bb1285;

  $bb1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} __const_udelay(4295000);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    goto $bb1286;

  $bb1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} __const_udelay(4295000);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    goto $bb1287;

  $bb1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} __const_udelay(4295000);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    goto $bb1288;

  $bb1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} __const_udelay(4295000);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb1289;

  $bb1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} __const_udelay(4295000);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    goto $bb1290;

  $bb1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} __const_udelay(4295000);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    goto $bb1291;

  $bb1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1292;

  $bb1292:
    assume {:verifier.code 0} true;
    goto $bb1293;

  $bb1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} $i250 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i247, $i250);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb1294, $bb1295;

  $bb1295:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb1296;

  $bb1296:
    assume {:verifier.code 0} true;
    goto $bb1299;

  $bb1299:
    assume {:verifier.code 0} true;
    goto $bb1300;

  $bb1300:
    assume {:verifier.code 0} true;
    goto $bb1301;

  $bb1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} __const_udelay(4295000);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    goto $bb1302;

  $bb1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} __const_udelay(4295000);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    goto $bb1303;

  $bb1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} __const_udelay(4295000);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    goto $bb1304;

  $bb1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} __const_udelay(4295000);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    goto $bb1305;

  $bb1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} __const_udelay(4295000);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    goto $bb1306;

  $bb1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} __const_udelay(4295000);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    goto $bb1307;

  $bb1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} __const_udelay(4295000);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    goto $bb1308;

  $bb1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} __const_udelay(4295000);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb1309;

  $bb1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} __const_udelay(4295000);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    goto $bb1310;

  $bb1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1311;

  $bb1311:
    assume {:verifier.code 0} true;
    goto $bb1312;

  $bb1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $i253 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i250, $i253);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb1313, $bb1314;

  $bb1314:
    assume {:verifier.code 0} true;
    assume !($i254 == 1);
    goto $bb1315;

  $bb1315:
    assume {:verifier.code 0} true;
    goto $bb1318;

  $bb1318:
    assume {:verifier.code 0} true;
    goto $bb1319;

  $bb1319:
    assume {:verifier.code 0} true;
    goto $bb1320;

  $bb1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} __const_udelay(4295000);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    goto $bb1321;

  $bb1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} __const_udelay(4295000);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    goto $bb1322;

  $bb1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} __const_udelay(4295000);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    goto $bb1323;

  $bb1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} __const_udelay(4295000);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    goto $bb1324;

  $bb1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} __const_udelay(4295000);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    goto $bb1325;

  $bb1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} __const_udelay(4295000);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    goto $bb1326;

  $bb1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} __const_udelay(4295000);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    goto $bb1327;

  $bb1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} __const_udelay(4295000);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    goto $bb1328;

  $bb1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} __const_udelay(4295000);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    goto $bb1329;

  $bb1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1330;

  $bb1330:
    assume {:verifier.code 0} true;
    goto $bb1331;

  $bb1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} $i256 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i253, $i256);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb1332, $bb1333;

  $bb1333:
    assume {:verifier.code 0} true;
    assume !($i257 == 1);
    goto $bb1334;

  $bb1334:
    assume {:verifier.code 0} true;
    goto $bb1337;

  $bb1337:
    assume {:verifier.code 0} true;
    goto $bb1338;

  $bb1338:
    assume {:verifier.code 0} true;
    goto $bb1339;

  $bb1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} __const_udelay(4295000);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    goto $bb1340;

  $bb1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} __const_udelay(4295000);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    goto $bb1341;

  $bb1341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} __const_udelay(4295000);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    goto $bb1342;

  $bb1342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} __const_udelay(4295000);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    goto $bb1343;

  $bb1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} __const_udelay(4295000);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    goto $bb1344;

  $bb1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} __const_udelay(4295000);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    goto $bb1345;

  $bb1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} __const_udelay(4295000);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    goto $bb1346;

  $bb1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} __const_udelay(4295000);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    goto $bb1347;

  $bb1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} __const_udelay(4295000);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    goto $bb1348;

  $bb1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1349;

  $bb1349:
    assume {:verifier.code 0} true;
    goto $bb1350;

  $bb1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} $i259 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i256, $i259);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb1351, $bb1352;

  $bb1352:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb1353;

  $bb1353:
    assume {:verifier.code 0} true;
    goto $bb1356;

  $bb1356:
    assume {:verifier.code 0} true;
    goto $bb1357;

  $bb1357:
    assume {:verifier.code 0} true;
    goto $bb1358;

  $bb1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} __const_udelay(4295000);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    goto $bb1359;

  $bb1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} __const_udelay(4295000);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    goto $bb1360;

  $bb1360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} __const_udelay(4295000);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    goto $bb1361;

  $bb1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} __const_udelay(4295000);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    goto $bb1362;

  $bb1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} __const_udelay(4295000);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    goto $bb1363;

  $bb1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} __const_udelay(4295000);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    goto $bb1364;

  $bb1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} __const_udelay(4295000);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    goto $bb1365;

  $bb1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} __const_udelay(4295000);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    goto $bb1366;

  $bb1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} __const_udelay(4295000);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    goto $bb1367;

  $bb1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1368;

  $bb1368:
    assume {:verifier.code 0} true;
    goto $bb1369;

  $bb1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $i262 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i259, $i262);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb1370, $bb1371;

  $bb1371:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb1372;

  $bb1372:
    assume {:verifier.code 0} true;
    goto $bb1375;

  $bb1375:
    assume {:verifier.code 0} true;
    goto $bb1376;

  $bb1376:
    assume {:verifier.code 0} true;
    goto $bb1377;

  $bb1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} __const_udelay(4295000);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    goto $bb1378;

  $bb1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} __const_udelay(4295000);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb1379;

  $bb1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} __const_udelay(4295000);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    goto $bb1380;

  $bb1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} __const_udelay(4295000);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    goto $bb1381;

  $bb1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} __const_udelay(4295000);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    goto $bb1382;

  $bb1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} __const_udelay(4295000);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    goto $bb1383;

  $bb1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} __const_udelay(4295000);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    goto $bb1384;

  $bb1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} __const_udelay(4295000);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    goto $bb1385;

  $bb1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} __const_udelay(4295000);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    goto $bb1386;

  $bb1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1387;

  $bb1387:
    assume {:verifier.code 0} true;
    goto $bb1388;

  $bb1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} $i265 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i262, $i265);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb1389, $bb1390;

  $bb1390:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb1391;

  $bb1391:
    assume {:verifier.code 0} true;
    goto $bb1394;

  $bb1394:
    assume {:verifier.code 0} true;
    goto $bb1395;

  $bb1395:
    assume {:verifier.code 0} true;
    goto $bb1396;

  $bb1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} __const_udelay(4295000);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    goto $bb1397;

  $bb1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} __const_udelay(4295000);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    goto $bb1398;

  $bb1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} __const_udelay(4295000);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    goto $bb1399;

  $bb1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} __const_udelay(4295000);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    goto $bb1400;

  $bb1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} __const_udelay(4295000);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    goto $bb1401;

  $bb1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} __const_udelay(4295000);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    goto $bb1402;

  $bb1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} __const_udelay(4295000);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    goto $bb1403;

  $bb1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} __const_udelay(4295000);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    goto $bb1404;

  $bb1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} __const_udelay(4295000);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    goto $bb1405;

  $bb1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1406;

  $bb1406:
    assume {:verifier.code 0} true;
    goto $bb1407;

  $bb1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} $i268 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i265, $i268);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb1408, $bb1409;

  $bb1409:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb1410;

  $bb1410:
    assume {:verifier.code 0} true;
    goto $bb1413;

  $bb1413:
    assume {:verifier.code 0} true;
    goto $bb1414;

  $bb1414:
    assume {:verifier.code 0} true;
    goto $bb1415;

  $bb1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} __const_udelay(4295000);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    goto $bb1416;

  $bb1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} __const_udelay(4295000);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    goto $bb1417;

  $bb1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} __const_udelay(4295000);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    goto $bb1418;

  $bb1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} __const_udelay(4295000);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    goto $bb1419;

  $bb1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} __const_udelay(4295000);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    goto $bb1420;

  $bb1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} __const_udelay(4295000);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    goto $bb1421;

  $bb1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} __const_udelay(4295000);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    goto $bb1422;

  $bb1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} __const_udelay(4295000);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    goto $bb1423;

  $bb1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} __const_udelay(4295000);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    goto $bb1424;

  $bb1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1425;

  $bb1425:
    assume {:verifier.code 0} true;
    goto $bb1426;

  $bb1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} $i271 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i268, $i271);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb1427, $bb1428;

  $bb1428:
    assume {:verifier.code 0} true;
    assume !($i272 == 1);
    goto $bb1429;

  $bb1429:
    assume {:verifier.code 0} true;
    goto $bb1432;

  $bb1432:
    assume {:verifier.code 0} true;
    goto $bb1433;

  $bb1433:
    assume {:verifier.code 0} true;
    goto $bb1434;

  $bb1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} __const_udelay(4295000);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    goto $bb1435;

  $bb1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} __const_udelay(4295000);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    goto $bb1436;

  $bb1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} __const_udelay(4295000);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    goto $bb1437;

  $bb1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} __const_udelay(4295000);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    goto $bb1438;

  $bb1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} __const_udelay(4295000);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    goto $bb1439;

  $bb1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} __const_udelay(4295000);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto $bb1440;

  $bb1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} __const_udelay(4295000);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb1441;

  $bb1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} __const_udelay(4295000);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    goto $bb1442;

  $bb1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} __const_udelay(4295000);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    goto $bb1443;

  $bb1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1444;

  $bb1444:
    assume {:verifier.code 0} true;
    goto $bb1445;

  $bb1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} $i274 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i271, $i274);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb1446, $bb1447;

  $bb1447:
    assume {:verifier.code 0} true;
    assume !($i275 == 1);
    goto $bb1448;

  $bb1448:
    assume {:verifier.code 0} true;
    goto $bb1451;

  $bb1451:
    assume {:verifier.code 0} true;
    goto $bb1452;

  $bb1452:
    assume {:verifier.code 0} true;
    goto $bb1453;

  $bb1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} __const_udelay(4295000);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    goto $bb1454;

  $bb1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} __const_udelay(4295000);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    goto $bb1455;

  $bb1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} __const_udelay(4295000);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    goto $bb1456;

  $bb1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} __const_udelay(4295000);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    goto $bb1457;

  $bb1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} __const_udelay(4295000);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    goto $bb1458;

  $bb1458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} __const_udelay(4295000);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    goto $bb1459;

  $bb1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} __const_udelay(4295000);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto $bb1460;

  $bb1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} __const_udelay(4295000);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    goto $bb1461;

  $bb1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} __const_udelay(4295000);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    goto $bb1462;

  $bb1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1463;

  $bb1463:
    assume {:verifier.code 0} true;
    goto $bb1464;

  $bb1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i277 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i274, $i277);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb1465, $bb1466;

  $bb1466:
    assume {:verifier.code 0} true;
    assume !($i278 == 1);
    goto $bb1467;

  $bb1467:
    assume {:verifier.code 0} true;
    goto $bb1470;

  $bb1470:
    assume {:verifier.code 0} true;
    goto $bb1471;

  $bb1471:
    assume {:verifier.code 0} true;
    goto $bb1472;

  $bb1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} __const_udelay(4295000);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    goto $bb1473;

  $bb1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} __const_udelay(4295000);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    goto $bb1474;

  $bb1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} __const_udelay(4295000);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    goto $bb1475;

  $bb1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} __const_udelay(4295000);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    goto $bb1476;

  $bb1476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} __const_udelay(4295000);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    goto $bb1477;

  $bb1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} __const_udelay(4295000);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    goto $bb1478;

  $bb1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} __const_udelay(4295000);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    goto $bb1479;

  $bb1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} __const_udelay(4295000);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    goto $bb1480;

  $bb1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} __const_udelay(4295000);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    goto $bb1481;

  $bb1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1482;

  $bb1482:
    assume {:verifier.code 0} true;
    goto $bb1483;

  $bb1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} $i280 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i277, $i280);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb1484, $bb1485;

  $bb1485:
    assume {:verifier.code 0} true;
    assume !($i281 == 1);
    goto $bb1486;

  $bb1486:
    assume {:verifier.code 0} true;
    goto $bb1489;

  $bb1489:
    assume {:verifier.code 0} true;
    goto $bb1490;

  $bb1490:
    assume {:verifier.code 0} true;
    goto $bb1491;

  $bb1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} __const_udelay(4295000);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    goto $bb1492;

  $bb1492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} __const_udelay(4295000);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    goto $bb1493;

  $bb1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} __const_udelay(4295000);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    goto $bb1494;

  $bb1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} __const_udelay(4295000);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    goto $bb1495;

  $bb1495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} __const_udelay(4295000);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    goto $bb1496;

  $bb1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} __const_udelay(4295000);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    goto $bb1497;

  $bb1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} __const_udelay(4295000);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    goto $bb1498;

  $bb1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} __const_udelay(4295000);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    goto $bb1499;

  $bb1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} __const_udelay(4295000);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    goto $bb1500;

  $bb1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1501;

  $bb1501:
    assume {:verifier.code 0} true;
    goto $bb1502;

  $bb1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $i283 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i280, $i283);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb1503, $bb1504;

  $bb1504:
    assume {:verifier.code 0} true;
    assume !($i284 == 1);
    goto $bb1505;

  $bb1505:
    assume {:verifier.code 0} true;
    goto $bb1508;

  $bb1508:
    assume {:verifier.code 0} true;
    goto $bb1509;

  $bb1509:
    assume {:verifier.code 0} true;
    goto $bb1510;

  $bb1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} __const_udelay(4295000);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    goto $bb1511;

  $bb1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} __const_udelay(4295000);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    goto $bb1512;

  $bb1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} __const_udelay(4295000);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    goto $bb1513;

  $bb1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} __const_udelay(4295000);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    goto $bb1514;

  $bb1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} __const_udelay(4295000);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    goto $bb1515;

  $bb1515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} __const_udelay(4295000);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    goto $bb1516;

  $bb1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} __const_udelay(4295000);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    goto $bb1517;

  $bb1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} __const_udelay(4295000);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    goto $bb1518;

  $bb1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} __const_udelay(4295000);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    goto $bb1519;

  $bb1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1520;

  $bb1520:
    assume {:verifier.code 0} true;
    goto $bb1521;

  $bb1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} $i286 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i283, $i286);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb1522, $bb1523;

  $bb1523:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb1524;

  $bb1524:
    assume {:verifier.code 0} true;
    goto $bb1527;

  $bb1527:
    assume {:verifier.code 0} true;
    goto $bb1528;

  $bb1528:
    assume {:verifier.code 0} true;
    goto $bb1529;

  $bb1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} __const_udelay(4295000);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    goto $bb1530;

  $bb1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} __const_udelay(4295000);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    goto $bb1531;

  $bb1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} __const_udelay(4295000);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    goto $bb1532;

  $bb1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} __const_udelay(4295000);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    goto $bb1533;

  $bb1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} __const_udelay(4295000);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    goto $bb1534;

  $bb1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} __const_udelay(4295000);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    goto $bb1535;

  $bb1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} __const_udelay(4295000);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    goto $bb1536;

  $bb1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} __const_udelay(4295000);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    goto $bb1537;

  $bb1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} __const_udelay(4295000);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    goto $bb1538;

  $bb1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1539;

  $bb1539:
    assume {:verifier.code 0} true;
    goto $bb1540;

  $bb1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} $i289 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i286, $i289);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb1541, $bb1542;

  $bb1542:
    assume {:verifier.code 0} true;
    assume !($i290 == 1);
    goto $bb1543;

  $bb1543:
    assume {:verifier.code 0} true;
    goto $bb1546;

  $bb1546:
    assume {:verifier.code 0} true;
    goto $bb1547;

  $bb1547:
    assume {:verifier.code 0} true;
    goto $bb1548;

  $bb1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} __const_udelay(4295000);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    goto $bb1549;

  $bb1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} __const_udelay(4295000);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    goto $bb1550;

  $bb1550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} __const_udelay(4295000);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    goto $bb1551;

  $bb1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} __const_udelay(4295000);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    goto $bb1552;

  $bb1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} __const_udelay(4295000);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    goto $bb1553;

  $bb1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} __const_udelay(4295000);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    goto $bb1554;

  $bb1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} __const_udelay(4295000);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    goto $bb1555;

  $bb1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} __const_udelay(4295000);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    goto $bb1556;

  $bb1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} __const_udelay(4295000);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    goto $bb1557;

  $bb1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1558;

  $bb1558:
    assume {:verifier.code 0} true;
    goto $bb1559;

  $bb1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $i292 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i289, $i292);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb1560, $bb1561;

  $bb1561:
    assume {:verifier.code 0} true;
    assume !($i293 == 1);
    goto $bb1562;

  $bb1562:
    assume {:verifier.code 0} true;
    goto $bb1565;

  $bb1565:
    assume {:verifier.code 0} true;
    goto $bb1566;

  $bb1566:
    assume {:verifier.code 0} true;
    goto $bb1567;

  $bb1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} __const_udelay(4295000);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb1568;

  $bb1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} __const_udelay(4295000);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    goto $bb1569;

  $bb1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} __const_udelay(4295000);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    goto $bb1570;

  $bb1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} __const_udelay(4295000);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    goto $bb1571;

  $bb1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} __const_udelay(4295000);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    goto $bb1572;

  $bb1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} __const_udelay(4295000);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    goto $bb1573;

  $bb1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} __const_udelay(4295000);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    goto $bb1574;

  $bb1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} __const_udelay(4295000);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    goto $bb1575;

  $bb1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} __const_udelay(4295000);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    goto $bb1576;

  $bb1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1577;

  $bb1577:
    assume {:verifier.code 0} true;
    goto $bb1578;

  $bb1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $i295 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i292, $i295);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb1579, $bb1580;

  $bb1580:
    assume {:verifier.code 0} true;
    assume !($i296 == 1);
    goto $bb1581;

  $bb1581:
    assume {:verifier.code 0} true;
    goto $bb1584;

  $bb1584:
    assume {:verifier.code 0} true;
    goto $bb1585;

  $bb1585:
    assume {:verifier.code 0} true;
    goto $bb1586;

  $bb1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} __const_udelay(4295000);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    goto $bb1587;

  $bb1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} __const_udelay(4295000);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    goto $bb1588;

  $bb1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} __const_udelay(4295000);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    goto $bb1589;

  $bb1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} __const_udelay(4295000);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    goto $bb1590;

  $bb1590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} __const_udelay(4295000);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    goto $bb1591;

  $bb1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} __const_udelay(4295000);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    goto $bb1592;

  $bb1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} __const_udelay(4295000);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    goto $bb1593;

  $bb1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} __const_udelay(4295000);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    goto $bb1594;

  $bb1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} __const_udelay(4295000);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    goto $bb1595;

  $bb1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1596;

  $bb1596:
    assume {:verifier.code 0} true;
    goto $bb1597;

  $bb1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} $i298 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i295, $i298);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb1598, $bb1599;

  $bb1599:
    assume {:verifier.code 0} true;
    assume !($i299 == 1);
    goto $bb1600;

  $bb1600:
    assume {:verifier.code 0} true;
    goto $bb1603;

  $bb1603:
    assume {:verifier.code 0} true;
    goto $bb1604;

  $bb1604:
    assume {:verifier.code 0} true;
    goto $bb1605;

  $bb1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} __const_udelay(4295000);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    goto $bb1606;

  $bb1606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} __const_udelay(4295000);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    goto $bb1607;

  $bb1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} __const_udelay(4295000);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    goto $bb1608;

  $bb1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} __const_udelay(4295000);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    goto $bb1609;

  $bb1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} __const_udelay(4295000);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    goto $bb1610;

  $bb1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} __const_udelay(4295000);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    goto $bb1611;

  $bb1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} __const_udelay(4295000);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb1612;

  $bb1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} __const_udelay(4295000);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    goto $bb1613;

  $bb1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} __const_udelay(4295000);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    goto $bb1614;

  $bb1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1615;

  $bb1615:
    assume {:verifier.code 0} true;
    goto $bb1616;

  $bb1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} $i301 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i298, $i301);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb1617, $bb1618;

  $bb1618:
    assume {:verifier.code 0} true;
    assume !($i302 == 1);
    goto $bb1619;

  $bb1619:
    assume {:verifier.code 0} true;
    goto $bb1622;

  $bb1622:
    assume {:verifier.code 0} true;
    goto $bb1623;

  $bb1623:
    assume {:verifier.code 0} true;
    goto $bb1624;

  $bb1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} __const_udelay(4295000);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    goto $bb1625;

  $bb1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} __const_udelay(4295000);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    goto $bb1626;

  $bb1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} __const_udelay(4295000);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    goto $bb1627;

  $bb1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} __const_udelay(4295000);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    goto $bb1628;

  $bb1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} __const_udelay(4295000);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    goto $bb1629;

  $bb1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} __const_udelay(4295000);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    goto $bb1630;

  $bb1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} __const_udelay(4295000);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    goto $bb1631;

  $bb1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} __const_udelay(4295000);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    goto $bb1632;

  $bb1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} __const_udelay(4295000);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    goto $bb1633;

  $bb1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1634;

  $bb1634:
    assume {:verifier.code 0} true;
    goto $bb1635;

  $bb1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $i304 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i301, $i304);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb1636, $bb1637;

  $bb1637:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb1638;

  $bb1638:
    assume {:verifier.code 0} true;
    goto $bb1641;

  $bb1641:
    assume {:verifier.code 0} true;
    goto $bb1642;

  $bb1642:
    assume {:verifier.code 0} true;
    goto $bb1643;

  $bb1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} __const_udelay(4295000);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    goto $bb1644;

  $bb1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} __const_udelay(4295000);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    goto $bb1645;

  $bb1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} __const_udelay(4295000);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    goto $bb1646;

  $bb1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} __const_udelay(4295000);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    goto $bb1647;

  $bb1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} __const_udelay(4295000);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    goto $bb1648;

  $bb1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} __const_udelay(4295000);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    goto $bb1649;

  $bb1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} __const_udelay(4295000);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    goto $bb1650;

  $bb1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} __const_udelay(4295000);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    goto $bb1651;

  $bb1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} __const_udelay(4295000);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    goto $bb1652;

  $bb1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1653;

  $bb1653:
    assume {:verifier.code 0} true;
    goto $bb1654;

  $bb1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $i307 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i304, $i307);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb1655, $bb1656;

  $bb1656:
    assume {:verifier.code 0} true;
    assume !($i308 == 1);
    goto $bb1657;

  $bb1657:
    assume {:verifier.code 0} true;
    goto $bb1660;

  $bb1660:
    assume {:verifier.code 0} true;
    goto $bb1661;

  $bb1661:
    assume {:verifier.code 0} true;
    goto $bb1662;

  $bb1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} __const_udelay(4295000);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    goto $bb1663;

  $bb1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} __const_udelay(4295000);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    goto $bb1664;

  $bb1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} __const_udelay(4295000);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    goto $bb1665;

  $bb1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} __const_udelay(4295000);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    goto $bb1666;

  $bb1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} __const_udelay(4295000);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    goto $bb1667;

  $bb1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} __const_udelay(4295000);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    goto $bb1668;

  $bb1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} __const_udelay(4295000);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    goto $bb1669;

  $bb1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} __const_udelay(4295000);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    goto $bb1670;

  $bb1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} __const_udelay(4295000);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    goto $bb1671;

  $bb1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1672;

  $bb1672:
    assume {:verifier.code 0} true;
    goto $bb1673;

  $bb1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} $i310 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i307, $i310);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb1674, $bb1675;

  $bb1675:
    assume {:verifier.code 0} true;
    assume !($i311 == 1);
    goto $bb1676;

  $bb1676:
    assume {:verifier.code 0} true;
    goto $bb1679;

  $bb1679:
    assume {:verifier.code 0} true;
    goto $bb1680;

  $bb1680:
    assume {:verifier.code 0} true;
    goto $bb1681;

  $bb1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} __const_udelay(4295000);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    goto $bb1682;

  $bb1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} __const_udelay(4295000);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    goto $bb1683;

  $bb1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} __const_udelay(4295000);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    goto $bb1684;

  $bb1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} __const_udelay(4295000);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    goto $bb1685;

  $bb1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} __const_udelay(4295000);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    goto $bb1686;

  $bb1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} __const_udelay(4295000);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    goto $bb1687;

  $bb1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} __const_udelay(4295000);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    goto $bb1688;

  $bb1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} __const_udelay(4295000);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    goto $bb1689;

  $bb1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} __const_udelay(4295000);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    goto $bb1690;

  $bb1690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1691;

  $bb1691:
    assume {:verifier.code 0} true;
    goto $bb1692;

  $bb1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $i313 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i310, $i313);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb1693, $bb1694;

  $bb1694:
    assume {:verifier.code 0} true;
    assume !($i314 == 1);
    goto $bb1695;

  $bb1695:
    assume {:verifier.code 0} true;
    goto $bb1698;

  $bb1698:
    assume {:verifier.code 0} true;
    goto $bb1699;

  $bb1699:
    assume {:verifier.code 0} true;
    goto $bb1700;

  $bb1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} __const_udelay(4295000);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    goto $bb1701;

  $bb1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} __const_udelay(4295000);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto $bb1702;

  $bb1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} __const_udelay(4295000);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    goto $bb1703;

  $bb1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} __const_udelay(4295000);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    goto $bb1704;

  $bb1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} __const_udelay(4295000);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    goto $bb1705;

  $bb1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} __const_udelay(4295000);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    goto $bb1706;

  $bb1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} __const_udelay(4295000);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    goto $bb1707;

  $bb1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} __const_udelay(4295000);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb1708;

  $bb1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} __const_udelay(4295000);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    goto $bb1709;

  $bb1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1710;

  $bb1710:
    assume {:verifier.code 0} true;
    goto $bb1711;

  $bb1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} $i316 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i313, $i316);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb1712, $bb1713;

  $bb1713:
    assume {:verifier.code 0} true;
    assume !($i317 == 1);
    goto $bb1714;

  $bb1714:
    assume {:verifier.code 0} true;
    goto $bb1717;

  $bb1717:
    assume {:verifier.code 0} true;
    goto $bb1718;

  $bb1718:
    assume {:verifier.code 0} true;
    goto $bb1719;

  $bb1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} __const_udelay(4295000);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    goto $bb1720;

  $bb1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} __const_udelay(4295000);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    goto $bb1721;

  $bb1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} __const_udelay(4295000);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    goto $bb1722;

  $bb1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} __const_udelay(4295000);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb1723;

  $bb1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} __const_udelay(4295000);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    goto $bb1724;

  $bb1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} __const_udelay(4295000);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    goto $bb1725;

  $bb1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} __const_udelay(4295000);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    goto $bb1726;

  $bb1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} __const_udelay(4295000);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    goto $bb1727;

  $bb1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} __const_udelay(4295000);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    goto $bb1728;

  $bb1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1729;

  $bb1729:
    assume {:verifier.code 0} true;
    goto $bb1730;

  $bb1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $i319 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i316, $i319);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb1731, $bb1732;

  $bb1732:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb1733;

  $bb1733:
    assume {:verifier.code 0} true;
    goto $bb1736;

  $bb1736:
    assume {:verifier.code 0} true;
    goto $bb1737;

  $bb1737:
    assume {:verifier.code 0} true;
    goto $bb1738;

  $bb1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} __const_udelay(4295000);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    goto $bb1739;

  $bb1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} __const_udelay(4295000);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    goto $bb1740;

  $bb1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} __const_udelay(4295000);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    goto $bb1741;

  $bb1741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} __const_udelay(4295000);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    goto $bb1742;

  $bb1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} __const_udelay(4295000);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    goto $bb1743;

  $bb1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} __const_udelay(4295000);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    goto $bb1744;

  $bb1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} __const_udelay(4295000);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    goto $bb1745;

  $bb1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} __const_udelay(4295000);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    goto $bb1746;

  $bb1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} __const_udelay(4295000);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    goto $bb1747;

  $bb1747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1748;

  $bb1748:
    assume {:verifier.code 0} true;
    goto $bb1749;

  $bb1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} $i322 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i319, $i322);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb1750, $bb1751;

  $bb1751:
    assume {:verifier.code 0} true;
    assume !($i323 == 1);
    goto $bb1752;

  $bb1752:
    assume {:verifier.code 0} true;
    goto $bb1755;

  $bb1755:
    assume {:verifier.code 0} true;
    goto $bb1756;

  $bb1756:
    assume {:verifier.code 0} true;
    goto $bb1757;

  $bb1757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} __const_udelay(4295000);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    goto $bb1758;

  $bb1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} __const_udelay(4295000);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    goto $bb1759;

  $bb1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} __const_udelay(4295000);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    goto $bb1760;

  $bb1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} __const_udelay(4295000);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    goto $bb1761;

  $bb1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} __const_udelay(4295000);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    goto $bb1762;

  $bb1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} __const_udelay(4295000);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    goto $bb1763;

  $bb1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} __const_udelay(4295000);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    goto $bb1764;

  $bb1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} __const_udelay(4295000);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    goto $bb1765;

  $bb1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} __const_udelay(4295000);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    goto $bb1766;

  $bb1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1767;

  $bb1767:
    assume {:verifier.code 0} true;
    goto $bb1768;

  $bb1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} $i325 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i322, $i325);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb1769, $bb1770;

  $bb1770:
    assume {:verifier.code 0} true;
    assume !($i326 == 1);
    goto $bb1771;

  $bb1771:
    assume {:verifier.code 0} true;
    goto $bb1774;

  $bb1774:
    assume {:verifier.code 0} true;
    goto $bb1775;

  $bb1775:
    assume {:verifier.code 0} true;
    goto $bb1776;

  $bb1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} __const_udelay(4295000);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    goto $bb1777;

  $bb1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} __const_udelay(4295000);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    goto $bb1778;

  $bb1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} __const_udelay(4295000);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    goto $bb1779;

  $bb1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} __const_udelay(4295000);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    goto $bb1780;

  $bb1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} __const_udelay(4295000);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    goto $bb1781;

  $bb1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} __const_udelay(4295000);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    goto $bb1782;

  $bb1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} __const_udelay(4295000);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    goto $bb1783;

  $bb1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} __const_udelay(4295000);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    goto $bb1784;

  $bb1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} __const_udelay(4295000);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    goto $bb1785;

  $bb1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1786;

  $bb1786:
    assume {:verifier.code 0} true;
    goto $bb1787;

  $bb1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} $i328 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i325, $i328);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb1788, $bb1789;

  $bb1789:
    assume {:verifier.code 0} true;
    assume !($i329 == 1);
    goto $bb1790;

  $bb1790:
    assume {:verifier.code 0} true;
    goto $bb1793;

  $bb1793:
    assume {:verifier.code 0} true;
    goto $bb1794;

  $bb1794:
    assume {:verifier.code 0} true;
    goto $bb1795;

  $bb1795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} __const_udelay(4295000);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    goto $bb1796;

  $bb1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} __const_udelay(4295000);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    goto $bb1797;

  $bb1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} __const_udelay(4295000);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    goto $bb1798;

  $bb1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} __const_udelay(4295000);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    goto $bb1799;

  $bb1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} __const_udelay(4295000);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    goto $bb1800;

  $bb1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} __const_udelay(4295000);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    goto $bb1801;

  $bb1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} __const_udelay(4295000);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    goto $bb1802;

  $bb1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} __const_udelay(4295000);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    goto $bb1803;

  $bb1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} __const_udelay(4295000);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb1804;

  $bb1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1805;

  $bb1805:
    assume {:verifier.code 0} true;
    goto $bb1806;

  $bb1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $i331 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i328, $i331);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb1807, $bb1808;

  $bb1808:
    assume {:verifier.code 0} true;
    assume !($i332 == 1);
    goto $bb1809;

  $bb1809:
    assume {:verifier.code 0} true;
    goto $bb1812;

  $bb1812:
    assume {:verifier.code 0} true;
    goto $bb1813;

  $bb1813:
    assume {:verifier.code 0} true;
    goto $bb1814;

  $bb1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} __const_udelay(4295000);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    goto $bb1815;

  $bb1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} __const_udelay(4295000);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    goto $bb1816;

  $bb1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} __const_udelay(4295000);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    goto $bb1817;

  $bb1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} __const_udelay(4295000);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    goto $bb1818;

  $bb1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} __const_udelay(4295000);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    goto $bb1819;

  $bb1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} __const_udelay(4295000);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    goto $bb1820;

  $bb1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} __const_udelay(4295000);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    goto $bb1821;

  $bb1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} __const_udelay(4295000);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    goto $bb1822;

  $bb1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} __const_udelay(4295000);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    goto $bb1823;

  $bb1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1824;

  $bb1824:
    assume {:verifier.code 0} true;
    goto $bb1825;

  $bb1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} $i334 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i331, $i334);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb1826, $bb1827;

  $bb1827:
    assume {:verifier.code 0} true;
    assume !($i335 == 1);
    goto $bb1828;

  $bb1828:
    assume {:verifier.code 0} true;
    goto $bb1831;

  $bb1831:
    assume {:verifier.code 0} true;
    goto $bb1832;

  $bb1832:
    assume {:verifier.code 0} true;
    goto $bb1833;

  $bb1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} __const_udelay(4295000);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    goto $bb1834;

  $bb1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} __const_udelay(4295000);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    goto $bb1835;

  $bb1835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} __const_udelay(4295000);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    goto $bb1836;

  $bb1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} __const_udelay(4295000);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    goto $bb1837;

  $bb1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} __const_udelay(4295000);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    goto $bb1838;

  $bb1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} __const_udelay(4295000);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb1839;

  $bb1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} __const_udelay(4295000);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    goto $bb1840;

  $bb1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} __const_udelay(4295000);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    goto $bb1841;

  $bb1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} __const_udelay(4295000);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    goto $bb1842;

  $bb1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1843;

  $bb1843:
    assume {:verifier.code 0} true;
    goto $bb1844;

  $bb1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} $i337 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i334, $i337);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb1845, $bb1846;

  $bb1846:
    assume {:verifier.code 0} true;
    assume !($i338 == 1);
    goto $bb1847;

  $bb1847:
    assume {:verifier.code 0} true;
    goto $bb1850;

  $bb1850:
    assume {:verifier.code 0} true;
    goto $bb1851;

  $bb1851:
    assume {:verifier.code 0} true;
    goto $bb1852;

  $bb1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} __const_udelay(4295000);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    goto $bb1853;

  $bb1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} __const_udelay(4295000);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    goto $bb1854;

  $bb1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} __const_udelay(4295000);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    goto $bb1855;

  $bb1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} __const_udelay(4295000);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    goto $bb1856;

  $bb1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} __const_udelay(4295000);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    goto $bb1857;

  $bb1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} __const_udelay(4295000);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    goto $bb1858;

  $bb1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} __const_udelay(4295000);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    goto $bb1859;

  $bb1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} __const_udelay(4295000);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    goto $bb1860;

  $bb1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} __const_udelay(4295000);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    goto $bb1861;

  $bb1861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1862;

  $bb1862:
    assume {:verifier.code 0} true;
    goto $bb1863;

  $bb1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $i340 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i337, $i340);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb1864, $bb1865;

  $bb1865:
    assume {:verifier.code 0} true;
    assume !($i341 == 1);
    goto $bb1866;

  $bb1866:
    assume {:verifier.code 0} true;
    goto $bb1869;

  $bb1869:
    assume {:verifier.code 0} true;
    goto $bb1870;

  $bb1870:
    assume {:verifier.code 0} true;
    goto $bb1871;

  $bb1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} __const_udelay(4295000);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    goto $bb1872;

  $bb1872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} __const_udelay(4295000);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    goto $bb1873;

  $bb1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} __const_udelay(4295000);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    goto $bb1874;

  $bb1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} __const_udelay(4295000);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    goto $bb1875;

  $bb1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} __const_udelay(4295000);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    goto $bb1876;

  $bb1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} __const_udelay(4295000);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    goto $bb1877;

  $bb1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} __const_udelay(4295000);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    goto $bb1878;

  $bb1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} __const_udelay(4295000);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    goto $bb1879;

  $bb1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} __const_udelay(4295000);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    goto $bb1880;

  $bb1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1881;

  $bb1881:
    assume {:verifier.code 0} true;
    goto $bb1882;

  $bb1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $i343 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i340, $i343);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb1883, $bb1884;

  $bb1884:
    assume {:verifier.code 0} true;
    assume !($i344 == 1);
    goto $bb1885;

  $bb1885:
    assume {:verifier.code 0} true;
    goto $bb1888;

  $bb1888:
    assume {:verifier.code 0} true;
    goto $bb1889;

  $bb1889:
    assume {:verifier.code 0} true;
    goto $bb1890;

  $bb1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} __const_udelay(4295000);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    goto $bb1891;

  $bb1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} __const_udelay(4295000);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    goto $bb1892;

  $bb1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} __const_udelay(4295000);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    goto $bb1893;

  $bb1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} __const_udelay(4295000);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    goto $bb1894;

  $bb1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} __const_udelay(4295000);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    goto $bb1895;

  $bb1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} __const_udelay(4295000);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    goto $bb1896;

  $bb1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} __const_udelay(4295000);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    goto $bb1897;

  $bb1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} __const_udelay(4295000);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    goto $bb1898;

  $bb1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} __const_udelay(4295000);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    goto $bb1899;

  $bb1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1900;

  $bb1900:
    assume {:verifier.code 0} true;
    goto $bb1901;

  $bb1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} $i346 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i343, $i346);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb1902, $bb1903;

  $bb1903:
    assume {:verifier.code 0} true;
    assume !($i347 == 1);
    goto $bb1904;

  $bb1904:
    assume {:verifier.code 0} true;
    goto $bb1907;

  $bb1907:
    assume {:verifier.code 0} true;
    goto $bb1908;

  $bb1908:
    assume {:verifier.code 0} true;
    goto $bb1909;

  $bb1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} __const_udelay(4295000);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    goto $bb1910;

  $bb1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} __const_udelay(4295000);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    goto $bb1911;

  $bb1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} __const_udelay(4295000);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    goto $bb1912;

  $bb1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} __const_udelay(4295000);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    goto $bb1913;

  $bb1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} __const_udelay(4295000);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    goto $bb1914;

  $bb1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} __const_udelay(4295000);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    goto $bb1915;

  $bb1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} __const_udelay(4295000);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    goto $bb1916;

  $bb1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} __const_udelay(4295000);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    goto $bb1917;

  $bb1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} __const_udelay(4295000);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    goto $bb1918;

  $bb1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1919;

  $bb1919:
    assume {:verifier.code 0} true;
    goto $bb1920;

  $bb1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $i349 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i346, $i349);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb1921, $bb1922;

  $bb1922:
    assume {:verifier.code 0} true;
    assume !($i350 == 1);
    goto $bb1923;

  $bb1923:
    assume {:verifier.code 0} true;
    goto $bb1926;

  $bb1926:
    assume {:verifier.code 0} true;
    goto $bb1927;

  $bb1927:
    assume {:verifier.code 0} true;
    goto $bb1928;

  $bb1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} __const_udelay(4295000);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    goto $bb1929;

  $bb1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} __const_udelay(4295000);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    goto $bb1930;

  $bb1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} __const_udelay(4295000);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    goto $bb1931;

  $bb1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} __const_udelay(4295000);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    goto $bb1932;

  $bb1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} __const_udelay(4295000);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    goto $bb1933;

  $bb1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} __const_udelay(4295000);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    goto $bb1934;

  $bb1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} __const_udelay(4295000);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    goto $bb1935;

  $bb1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} __const_udelay(4295000);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    goto $bb1936;

  $bb1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} __const_udelay(4295000);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto $bb1937;

  $bb1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1938;

  $bb1938:
    assume {:verifier.code 0} true;
    goto $bb1939;

  $bb1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} $i352 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i349, $i352);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb1940, $bb1941;

  $bb1941:
    assume {:verifier.code 0} true;
    assume !($i353 == 1);
    goto $bb1942;

  $bb1942:
    assume {:verifier.code 0} true;
    goto $bb1945;

  $bb1945:
    assume {:verifier.code 0} true;
    goto $bb1946;

  $bb1946:
    assume {:verifier.code 0} true;
    goto $bb1947;

  $bb1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} __const_udelay(4295000);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    goto $bb1948;

  $bb1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} __const_udelay(4295000);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    goto $bb1949;

  $bb1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} __const_udelay(4295000);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    goto $bb1950;

  $bb1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} __const_udelay(4295000);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    goto $bb1951;

  $bb1951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} __const_udelay(4295000);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    goto $bb1952;

  $bb1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} __const_udelay(4295000);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    goto $bb1953;

  $bb1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} __const_udelay(4295000);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    goto $bb1954;

  $bb1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} __const_udelay(4295000);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    goto $bb1955;

  $bb1955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} __const_udelay(4295000);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    goto $bb1956;

  $bb1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1957;

  $bb1957:
    assume {:verifier.code 0} true;
    goto $bb1958;

  $bb1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} $i355 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i352, $i355);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i356} true;
    goto $bb1959, $bb1960;

  $bb1960:
    assume {:verifier.code 0} true;
    assume !($i356 == 1);
    goto $bb1961;

  $bb1961:
    assume {:verifier.code 0} true;
    goto $bb1964;

  $bb1964:
    assume {:verifier.code 0} true;
    goto $bb1965;

  $bb1965:
    assume {:verifier.code 0} true;
    goto $bb1966;

  $bb1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} __const_udelay(4295000);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    goto $bb1967;

  $bb1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} __const_udelay(4295000);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    goto $bb1968;

  $bb1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} __const_udelay(4295000);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    goto $bb1969;

  $bb1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} __const_udelay(4295000);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    goto $bb1970;

  $bb1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} __const_udelay(4295000);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    goto $bb1971;

  $bb1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} __const_udelay(4295000);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    goto $bb1972;

  $bb1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} __const_udelay(4295000);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    goto $bb1973;

  $bb1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} __const_udelay(4295000);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    goto $bb1974;

  $bb1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} __const_udelay(4295000);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto $bb1975;

  $bb1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1976;

  $bb1976:
    assume {:verifier.code 0} true;
    goto $bb1977;

  $bb1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} $i358 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i355, $i358);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb1978, $bb1979;

  $bb1979:
    assume {:verifier.code 0} true;
    assume !($i359 == 1);
    goto $bb1980;

  $bb1980:
    assume {:verifier.code 0} true;
    goto $bb1983;

  $bb1983:
    assume {:verifier.code 0} true;
    goto $bb1984;

  $bb1984:
    assume {:verifier.code 0} true;
    goto $bb1985;

  $bb1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} __const_udelay(4295000);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    goto $bb1986;

  $bb1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} __const_udelay(4295000);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    goto $bb1987;

  $bb1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} __const_udelay(4295000);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    goto $bb1988;

  $bb1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} __const_udelay(4295000);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    goto $bb1989;

  $bb1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} __const_udelay(4295000);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    goto $bb1990;

  $bb1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} __const_udelay(4295000);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    goto $bb1991;

  $bb1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} __const_udelay(4295000);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    goto $bb1992;

  $bb1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} __const_udelay(4295000);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    goto $bb1993;

  $bb1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} __const_udelay(4295000);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    goto $bb1994;

  $bb1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1995;

  $bb1995:
    assume {:verifier.code 0} true;
    goto $bb1996;

  $bb1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} $i361 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i358, $i361);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i362} true;
    goto $bb1997, $bb1998;

  $bb1998:
    assume {:verifier.code 0} true;
    assume !($i362 == 1);
    goto $bb1999;

  $bb1999:
    assume {:verifier.code 0} true;
    goto $bb2002;

  $bb2002:
    assume {:verifier.code 0} true;
    goto $bb2003;

  $bb2003:
    assume {:verifier.code 0} true;
    goto $bb2004;

  $bb2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} __const_udelay(4295000);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    goto $bb2005;

  $bb2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} __const_udelay(4295000);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    goto $bb2006;

  $bb2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} __const_udelay(4295000);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    goto $bb2007;

  $bb2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} __const_udelay(4295000);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    goto $bb2008;

  $bb2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} __const_udelay(4295000);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    goto $bb2009;

  $bb2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} __const_udelay(4295000);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    goto $bb2010;

  $bb2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} __const_udelay(4295000);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    goto $bb2011;

  $bb2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} __const_udelay(4295000);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    goto $bb2012;

  $bb2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} __const_udelay(4295000);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    goto $bb2013;

  $bb2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2014;

  $bb2014:
    assume {:verifier.code 0} true;
    goto $bb2015;

  $bb2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} $i364 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i361, $i364);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb2016, $bb2017;

  $bb2017:
    assume {:verifier.code 0} true;
    assume !($i365 == 1);
    goto $bb2018;

  $bb2018:
    assume {:verifier.code 0} true;
    goto $bb2021;

  $bb2021:
    assume {:verifier.code 0} true;
    goto $bb2022;

  $bb2022:
    assume {:verifier.code 0} true;
    goto $bb2023;

  $bb2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} __const_udelay(4295000);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    goto $bb2024;

  $bb2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} __const_udelay(4295000);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    goto $bb2025;

  $bb2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} __const_udelay(4295000);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    goto $bb2026;

  $bb2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} __const_udelay(4295000);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    goto $bb2027;

  $bb2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} __const_udelay(4295000);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb2028;

  $bb2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} __const_udelay(4295000);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    goto $bb2029;

  $bb2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} __const_udelay(4295000);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    goto $bb2030;

  $bb2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} __const_udelay(4295000);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    goto $bb2031;

  $bb2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} __const_udelay(4295000);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    goto $bb2032;

  $bb2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2033;

  $bb2033:
    assume {:verifier.code 0} true;
    goto $bb2034;

  $bb2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $i367 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i364, $i367);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb2035, $bb2036;

  $bb2036:
    assume {:verifier.code 0} true;
    assume !($i368 == 1);
    goto $bb2037;

  $bb2037:
    assume {:verifier.code 0} true;
    goto $bb2040;

  $bb2040:
    assume {:verifier.code 0} true;
    goto $bb2041;

  $bb2041:
    assume {:verifier.code 0} true;
    goto $bb2042;

  $bb2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} __const_udelay(4295000);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    goto $bb2043;

  $bb2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} __const_udelay(4295000);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    goto $bb2044;

  $bb2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} __const_udelay(4295000);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    goto $bb2045;

  $bb2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} __const_udelay(4295000);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    goto $bb2046;

  $bb2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} __const_udelay(4295000);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb2047;

  $bb2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} __const_udelay(4295000);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    goto $bb2048;

  $bb2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} __const_udelay(4295000);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    goto $bb2049;

  $bb2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} __const_udelay(4295000);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    goto $bb2050;

  $bb2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} __const_udelay(4295000);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    goto $bb2051;

  $bb2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2052;

  $bb2052:
    assume {:verifier.code 0} true;
    goto $bb2053;

  $bb2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} $i370 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i367, $i370);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb2054, $bb2055;

  $bb2055:
    assume {:verifier.code 0} true;
    assume !($i371 == 1);
    goto $bb2056;

  $bb2056:
    assume {:verifier.code 0} true;
    goto $bb2059;

  $bb2059:
    assume {:verifier.code 0} true;
    goto $bb2060;

  $bb2060:
    assume {:verifier.code 0} true;
    goto $bb2061;

  $bb2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} __const_udelay(4295000);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    goto $bb2062;

  $bb2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} __const_udelay(4295000);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    goto $bb2063;

  $bb2063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} __const_udelay(4295000);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    goto $bb2064;

  $bb2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} __const_udelay(4295000);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    goto $bb2065;

  $bb2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} __const_udelay(4295000);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    goto $bb2066;

  $bb2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} __const_udelay(4295000);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    goto $bb2067;

  $bb2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} __const_udelay(4295000);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    goto $bb2068;

  $bb2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} __const_udelay(4295000);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    goto $bb2069;

  $bb2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} __const_udelay(4295000);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    goto $bb2070;

  $bb2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2071;

  $bb2071:
    assume {:verifier.code 0} true;
    goto $bb2072;

  $bb2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $i373 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i370, $i373);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb2073, $bb2074;

  $bb2074:
    assume {:verifier.code 0} true;
    assume !($i374 == 1);
    goto $bb2075;

  $bb2075:
    assume {:verifier.code 0} true;
    goto $bb2078;

  $bb2078:
    assume {:verifier.code 0} true;
    goto $bb2079;

  $bb2079:
    assume {:verifier.code 0} true;
    goto $bb2080;

  $bb2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} __const_udelay(4295000);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    goto $bb2081;

  $bb2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} __const_udelay(4295000);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    goto $bb2082;

  $bb2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} __const_udelay(4295000);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    goto $bb2083;

  $bb2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} __const_udelay(4295000);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    goto $bb2084;

  $bb2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} __const_udelay(4295000);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    goto $bb2085;

  $bb2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} __const_udelay(4295000);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    goto $bb2086;

  $bb2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} __const_udelay(4295000);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    goto $bb2087;

  $bb2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} __const_udelay(4295000);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    goto $bb2088;

  $bb2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} __const_udelay(4295000);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    goto $bb2089;

  $bb2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2090;

  $bb2090:
    assume {:verifier.code 0} true;
    goto $bb2091;

  $bb2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} $i376 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i373, $i376);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i377} true;
    goto $bb2092, $bb2093;

  $bb2093:
    assume {:verifier.code 0} true;
    assume !($i377 == 1);
    goto $bb2094;

  $bb2094:
    assume {:verifier.code 0} true;
    goto $bb2097;

  $bb2097:
    assume {:verifier.code 0} true;
    goto $bb2098;

  $bb2098:
    assume {:verifier.code 0} true;
    goto $bb2099;

  $bb2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} __const_udelay(4295000);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    goto $bb2100;

  $bb2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} __const_udelay(4295000);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    goto $bb2101;

  $bb2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} __const_udelay(4295000);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    goto $bb2102;

  $bb2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} __const_udelay(4295000);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    goto $bb2103;

  $bb2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} __const_udelay(4295000);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    goto $bb2104;

  $bb2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} __const_udelay(4295000);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    goto $bb2105;

  $bb2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} __const_udelay(4295000);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    goto $bb2106;

  $bb2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} __const_udelay(4295000);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    goto $bb2107;

  $bb2107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} __const_udelay(4295000);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    goto $bb2108;

  $bb2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2109;

  $bb2109:
    assume {:verifier.code 0} true;
    goto $bb2110;

  $bb2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} $i379 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i376, $i379);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb2111, $bb2112;

  $bb2112:
    assume {:verifier.code 0} true;
    assume !($i380 == 1);
    goto $bb2113;

  $bb2113:
    assume {:verifier.code 0} true;
    goto $bb2116;

  $bb2116:
    assume {:verifier.code 0} true;
    goto $bb2117;

  $bb2117:
    assume {:verifier.code 0} true;
    goto $bb2118;

  $bb2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} __const_udelay(4295000);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    goto $bb2119;

  $bb2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} __const_udelay(4295000);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    goto $bb2120;

  $bb2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} __const_udelay(4295000);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    goto $bb2121;

  $bb2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} __const_udelay(4295000);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    goto $bb2122;

  $bb2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} __const_udelay(4295000);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    goto $bb2123;

  $bb2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} __const_udelay(4295000);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    goto $bb2124;

  $bb2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} __const_udelay(4295000);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    goto $bb2125;

  $bb2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} __const_udelay(4295000);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    goto $bb2126;

  $bb2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} __const_udelay(4295000);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    goto $bb2127;

  $bb2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2128;

  $bb2128:
    assume {:verifier.code 0} true;
    goto $bb2129;

  $bb2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $i382 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i379, $i382);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i383} true;
    goto $bb2130, $bb2131;

  $bb2131:
    assume {:verifier.code 0} true;
    assume !($i383 == 1);
    goto $bb2132;

  $bb2132:
    assume {:verifier.code 0} true;
    goto $bb2135;

  $bb2135:
    assume {:verifier.code 0} true;
    goto $bb2136;

  $bb2136:
    assume {:verifier.code 0} true;
    goto $bb2137;

  $bb2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} __const_udelay(4295000);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    goto $bb2138;

  $bb2138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} __const_udelay(4295000);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    goto $bb2139;

  $bb2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} __const_udelay(4295000);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    goto $bb2140;

  $bb2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} __const_udelay(4295000);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    goto $bb2141;

  $bb2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} __const_udelay(4295000);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    goto $bb2142;

  $bb2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} __const_udelay(4295000);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    goto $bb2143;

  $bb2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} __const_udelay(4295000);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    goto $bb2144;

  $bb2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} __const_udelay(4295000);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    goto $bb2145;

  $bb2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} __const_udelay(4295000);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    goto $bb2146;

  $bb2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2147;

  $bb2147:
    assume {:verifier.code 0} true;
    goto $bb2148;

  $bb2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} $i385 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i382, $i385);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i386} true;
    goto $bb2149, $bb2150;

  $bb2150:
    assume {:verifier.code 0} true;
    assume !($i386 == 1);
    goto $bb2151;

  $bb2151:
    assume {:verifier.code 0} true;
    goto $bb2154;

  $bb2154:
    assume {:verifier.code 0} true;
    goto $bb2155;

  $bb2155:
    assume {:verifier.code 0} true;
    goto $bb2156;

  $bb2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} __const_udelay(4295000);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    goto $bb2157;

  $bb2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} __const_udelay(4295000);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    goto $bb2158;

  $bb2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} __const_udelay(4295000);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    goto $bb2159;

  $bb2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} __const_udelay(4295000);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    goto $bb2160;

  $bb2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} __const_udelay(4295000);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    goto $bb2161;

  $bb2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} __const_udelay(4295000);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    goto $bb2162;

  $bb2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} __const_udelay(4295000);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    goto $bb2163;

  $bb2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} __const_udelay(4295000);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    goto $bb2164;

  $bb2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} __const_udelay(4295000);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    goto $bb2165;

  $bb2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2166;

  $bb2166:
    assume {:verifier.code 0} true;
    goto $bb2167;

  $bb2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} $i388 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i385, $i388);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb2168, $bb2169;

  $bb2169:
    assume {:verifier.code 0} true;
    assume !($i389 == 1);
    goto $bb2170;

  $bb2170:
    assume {:verifier.code 0} true;
    goto $bb2173;

  $bb2173:
    assume {:verifier.code 0} true;
    goto $bb2174;

  $bb2174:
    assume {:verifier.code 0} true;
    goto $bb2175;

  $bb2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} __const_udelay(4295000);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    goto $bb2176;

  $bb2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} __const_udelay(4295000);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    goto $bb2177;

  $bb2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} __const_udelay(4295000);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    goto $bb2178;

  $bb2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} __const_udelay(4295000);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    goto $bb2179;

  $bb2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} __const_udelay(4295000);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    goto $bb2180;

  $bb2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} __const_udelay(4295000);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    goto $bb2181;

  $bb2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} __const_udelay(4295000);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    goto $bb2182;

  $bb2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} __const_udelay(4295000);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    goto $bb2183;

  $bb2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} __const_udelay(4295000);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    goto $bb2184;

  $bb2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2185;

  $bb2185:
    assume {:verifier.code 0} true;
    goto $bb2186;

  $bb2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} $i391 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i388, $i391);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb2187, $bb2188;

  $bb2188:
    assume {:verifier.code 0} true;
    assume !($i392 == 1);
    goto $bb2189;

  $bb2189:
    assume {:verifier.code 0} true;
    goto $bb2192;

  $bb2192:
    assume {:verifier.code 0} true;
    goto $bb2193;

  $bb2193:
    assume {:verifier.code 0} true;
    goto $bb2194;

  $bb2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} __const_udelay(4295000);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    goto $bb2195;

  $bb2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} __const_udelay(4295000);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    goto $bb2196;

  $bb2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} __const_udelay(4295000);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    goto $bb2197;

  $bb2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} __const_udelay(4295000);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    goto $bb2198;

  $bb2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} __const_udelay(4295000);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    goto $bb2199;

  $bb2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} __const_udelay(4295000);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    goto $bb2200;

  $bb2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} __const_udelay(4295000);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    goto $bb2201;

  $bb2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} __const_udelay(4295000);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    goto $bb2202;

  $bb2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} __const_udelay(4295000);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb2203;

  $bb2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2204;

  $bb2204:
    assume {:verifier.code 0} true;
    goto $bb2205;

  $bb2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} $i394 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i391, $i394);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb2206, $bb2207;

  $bb2207:
    assume {:verifier.code 0} true;
    assume !($i395 == 1);
    goto $bb2208;

  $bb2208:
    assume {:verifier.code 0} true;
    goto $bb2211;

  $bb2211:
    assume {:verifier.code 0} true;
    goto $bb2212;

  $bb2212:
    assume {:verifier.code 0} true;
    goto $bb2213;

  $bb2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} __const_udelay(4295000);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    goto $bb2214;

  $bb2214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} __const_udelay(4295000);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    goto $bb2215;

  $bb2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} __const_udelay(4295000);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    goto $bb2216;

  $bb2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} __const_udelay(4295000);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    goto $bb2217;

  $bb2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} __const_udelay(4295000);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    goto $bb2218;

  $bb2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} __const_udelay(4295000);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    goto $bb2219;

  $bb2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} __const_udelay(4295000);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    goto $bb2220;

  $bb2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} __const_udelay(4295000);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    goto $bb2221;

  $bb2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} __const_udelay(4295000);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    goto $bb2222;

  $bb2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2223;

  $bb2223:
    assume {:verifier.code 0} true;
    goto $bb2224;

  $bb2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} $i397 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i394, $i397);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb2225, $bb2226;

  $bb2226:
    assume {:verifier.code 0} true;
    assume !($i398 == 1);
    goto $bb2227;

  $bb2227:
    assume {:verifier.code 0} true;
    goto $bb2230;

  $bb2230:
    assume {:verifier.code 0} true;
    goto $bb2231;

  $bb2231:
    assume {:verifier.code 0} true;
    goto $bb2232;

  $bb2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} __const_udelay(4295000);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    goto $bb2233;

  $bb2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} __const_udelay(4295000);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    goto $bb2234;

  $bb2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} __const_udelay(4295000);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    goto $bb2235;

  $bb2235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} __const_udelay(4295000);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    goto $bb2236;

  $bb2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} __const_udelay(4295000);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    goto $bb2237;

  $bb2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} __const_udelay(4295000);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    goto $bb2238;

  $bb2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} __const_udelay(4295000);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    goto $bb2239;

  $bb2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} __const_udelay(4295000);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    goto $bb2240;

  $bb2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} __const_udelay(4295000);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    goto $bb2241;

  $bb2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2242;

  $bb2242:
    assume {:verifier.code 0} true;
    goto $bb2243;

  $bb2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} $i400 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i397, $i400);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb2244, $bb2245;

  $bb2245:
    assume {:verifier.code 0} true;
    assume !($i401 == 1);
    goto $bb2246;

  $bb2246:
    assume {:verifier.code 0} true;
    goto $bb2249;

  $bb2249:
    assume {:verifier.code 0} true;
    goto $bb2250;

  $bb2250:
    assume {:verifier.code 0} true;
    goto $bb2251;

  $bb2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} __const_udelay(4295000);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    goto $bb2252;

  $bb2252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} __const_udelay(4295000);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    goto $bb2253;

  $bb2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} __const_udelay(4295000);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    goto $bb2254;

  $bb2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} __const_udelay(4295000);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    goto $bb2255;

  $bb2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} __const_udelay(4295000);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    goto $bb2256;

  $bb2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} __const_udelay(4295000);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    goto $bb2257;

  $bb2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} __const_udelay(4295000);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    goto $bb2258;

  $bb2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} __const_udelay(4295000);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    goto $bb2259;

  $bb2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} __const_udelay(4295000);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    goto $bb2260;

  $bb2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2261;

  $bb2261:
    assume {:verifier.code 0} true;
    goto $bb2262;

  $bb2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} $i403 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i400, $i403);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb2263, $bb2264;

  $bb2264:
    assume {:verifier.code 0} true;
    assume !($i404 == 1);
    goto $bb2265;

  $bb2265:
    assume {:verifier.code 0} true;
    goto $bb2268;

  $bb2268:
    assume {:verifier.code 0} true;
    goto $bb2269;

  $bb2269:
    assume {:verifier.code 0} true;
    goto $bb2270;

  $bb2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} __const_udelay(4295000);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    goto $bb2271;

  $bb2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} __const_udelay(4295000);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    goto $bb2272;

  $bb2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} __const_udelay(4295000);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    goto $bb2273;

  $bb2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} __const_udelay(4295000);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    goto $bb2274;

  $bb2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} __const_udelay(4295000);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    goto $bb2275;

  $bb2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} __const_udelay(4295000);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    goto $bb2276;

  $bb2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} __const_udelay(4295000);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    goto $bb2277;

  $bb2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} __const_udelay(4295000);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    goto $bb2278;

  $bb2278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} __const_udelay(4295000);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    goto $bb2279;

  $bb2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2280;

  $bb2280:
    assume {:verifier.code 0} true;
    goto $bb2281;

  $bb2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} $i406 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i403, $i406);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb2282, $bb2283;

  $bb2283:
    assume {:verifier.code 0} true;
    assume !($i407 == 1);
    goto $bb2284;

  $bb2284:
    assume {:verifier.code 0} true;
    goto $bb2287;

  $bb2287:
    assume {:verifier.code 0} true;
    goto $bb2288;

  $bb2288:
    assume {:verifier.code 0} true;
    goto $bb2289;

  $bb2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} __const_udelay(4295000);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    goto $bb2290;

  $bb2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} __const_udelay(4295000);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    goto $bb2291;

  $bb2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} __const_udelay(4295000);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    goto $bb2292;

  $bb2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} __const_udelay(4295000);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    goto $bb2293;

  $bb2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} __const_udelay(4295000);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    goto $bb2294;

  $bb2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} __const_udelay(4295000);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    goto $bb2295;

  $bb2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} __const_udelay(4295000);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    goto $bb2296;

  $bb2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} __const_udelay(4295000);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    goto $bb2297;

  $bb2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} __const_udelay(4295000);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    goto $bb2298;

  $bb2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2299;

  $bb2299:
    assume {:verifier.code 0} true;
    goto $bb2300;

  $bb2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} $i409 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i406, $i409);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i410} true;
    goto $bb2301, $bb2302;

  $bb2302:
    assume {:verifier.code 0} true;
    assume !($i410 == 1);
    goto $bb2303;

  $bb2303:
    assume {:verifier.code 0} true;
    goto $bb2306;

  $bb2306:
    assume {:verifier.code 0} true;
    goto $bb2307;

  $bb2307:
    assume {:verifier.code 0} true;
    goto $bb2308;

  $bb2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} __const_udelay(4295000);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    goto $bb2309;

  $bb2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} __const_udelay(4295000);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    goto $bb2310;

  $bb2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} __const_udelay(4295000);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    goto $bb2311;

  $bb2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} __const_udelay(4295000);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    goto $bb2312;

  $bb2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} __const_udelay(4295000);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    goto $bb2313;

  $bb2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} __const_udelay(4295000);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    goto $bb2314;

  $bb2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} __const_udelay(4295000);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    goto $bb2315;

  $bb2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} __const_udelay(4295000);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    goto $bb2316;

  $bb2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} __const_udelay(4295000);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    goto $bb2317;

  $bb2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2318;

  $bb2318:
    assume {:verifier.code 0} true;
    goto $bb2319;

  $bb2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} $i412 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i409, $i412);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb2320, $bb2321;

  $bb2321:
    assume {:verifier.code 0} true;
    assume !($i413 == 1);
    goto $bb2322;

  $bb2322:
    assume {:verifier.code 0} true;
    goto $bb2325;

  $bb2325:
    assume {:verifier.code 0} true;
    goto $bb2326;

  $bb2326:
    assume {:verifier.code 0} true;
    goto $bb2327;

  $bb2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} __const_udelay(4295000);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    goto $bb2328;

  $bb2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} __const_udelay(4295000);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    goto $bb2329;

  $bb2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} __const_udelay(4295000);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    goto $bb2330;

  $bb2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} __const_udelay(4295000);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    goto $bb2331;

  $bb2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} __const_udelay(4295000);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    goto $bb2332;

  $bb2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} __const_udelay(4295000);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    goto $bb2333;

  $bb2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} __const_udelay(4295000);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    goto $bb2334;

  $bb2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} __const_udelay(4295000);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    goto $bb2335;

  $bb2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} __const_udelay(4295000);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    goto $bb2336;

  $bb2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2337;

  $bb2337:
    assume {:verifier.code 0} true;
    goto $bb2338;

  $bb2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} $i415 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i416 := $eq.i32($i412, $i415);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i416} true;
    goto $bb2339, $bb2340;

  $bb2340:
    assume {:verifier.code 0} true;
    assume !($i416 == 1);
    goto $bb2341;

  $bb2341:
    assume {:verifier.code 0} true;
    goto $bb2344;

  $bb2344:
    assume {:verifier.code 0} true;
    goto $bb2345;

  $bb2345:
    assume {:verifier.code 0} true;
    goto $bb2346;

  $bb2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} __const_udelay(4295000);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    goto $bb2347;

  $bb2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} __const_udelay(4295000);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    goto $bb2348;

  $bb2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} __const_udelay(4295000);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    goto $bb2349;

  $bb2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} __const_udelay(4295000);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    goto $bb2350;

  $bb2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} __const_udelay(4295000);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    goto $bb2351;

  $bb2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} __const_udelay(4295000);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    goto $bb2352;

  $bb2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} __const_udelay(4295000);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    goto $bb2353;

  $bb2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} __const_udelay(4295000);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    goto $bb2354;

  $bb2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} __const_udelay(4295000);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    goto $bb2355;

  $bb2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2356;

  $bb2356:
    assume {:verifier.code 0} true;
    goto $bb2357;

  $bb2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} $i418 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i419 := $eq.i32($i415, $i418);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb2358, $bb2359;

  $bb2359:
    assume {:verifier.code 0} true;
    assume !($i419 == 1);
    goto $bb2360;

  $bb2360:
    assume {:verifier.code 0} true;
    goto $bb2363;

  $bb2363:
    assume {:verifier.code 0} true;
    goto $bb2364;

  $bb2364:
    assume {:verifier.code 0} true;
    goto $bb2365;

  $bb2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} __const_udelay(4295000);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    goto $bb2366;

  $bb2366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} __const_udelay(4295000);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    goto $bb2367;

  $bb2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} __const_udelay(4295000);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    goto $bb2368;

  $bb2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} __const_udelay(4295000);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    goto $bb2369;

  $bb2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} __const_udelay(4295000);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    goto $bb2370;

  $bb2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} __const_udelay(4295000);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    goto $bb2371;

  $bb2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} __const_udelay(4295000);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    goto $bb2372;

  $bb2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} __const_udelay(4295000);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    goto $bb2373;

  $bb2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} __const_udelay(4295000);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    goto $bb2374;

  $bb2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2375;

  $bb2375:
    assume {:verifier.code 0} true;
    goto $bb2376;

  $bb2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} $i421 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i418, $i421);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i422} true;
    goto $bb2377, $bb2378;

  $bb2378:
    assume {:verifier.code 0} true;
    assume !($i422 == 1);
    goto $bb2379;

  $bb2379:
    assume {:verifier.code 0} true;
    goto $bb2382;

  $bb2382:
    assume {:verifier.code 0} true;
    goto $bb2383;

  $bb2383:
    assume {:verifier.code 0} true;
    goto $bb2384;

  $bb2384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} __const_udelay(4295000);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    goto $bb2385;

  $bb2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} __const_udelay(4295000);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    goto $bb2386;

  $bb2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} __const_udelay(4295000);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    goto $bb2387;

  $bb2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} __const_udelay(4295000);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    goto $bb2388;

  $bb2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} __const_udelay(4295000);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    goto $bb2389;

  $bb2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} __const_udelay(4295000);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    goto $bb2390;

  $bb2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} __const_udelay(4295000);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    goto $bb2391;

  $bb2391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} __const_udelay(4295000);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    goto $bb2392;

  $bb2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} __const_udelay(4295000);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    goto $bb2393;

  $bb2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2394;

  $bb2394:
    assume {:verifier.code 0} true;
    goto $bb2395;

  $bb2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} $i424 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i425 := $eq.i32($i421, $i424);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb2396, $bb2397;

  $bb2397:
    assume {:verifier.code 0} true;
    assume !($i425 == 1);
    goto $bb2398;

  $bb2398:
    assume {:verifier.code 0} true;
    goto $bb2401;

  $bb2401:
    assume {:verifier.code 0} true;
    goto $bb2402;

  $bb2402:
    assume {:verifier.code 0} true;
    goto $bb2403;

  $bb2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} __const_udelay(4295000);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    goto $bb2404;

  $bb2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} __const_udelay(4295000);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    goto $bb2405;

  $bb2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} __const_udelay(4295000);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    goto $bb2406;

  $bb2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} __const_udelay(4295000);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    goto $bb2407;

  $bb2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} __const_udelay(4295000);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    goto $bb2408;

  $bb2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} __const_udelay(4295000);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    goto $bb2409;

  $bb2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} __const_udelay(4295000);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    goto $bb2410;

  $bb2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} __const_udelay(4295000);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    goto $bb2411;

  $bb2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} __const_udelay(4295000);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    goto $bb2412;

  $bb2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2413;

  $bb2413:
    assume {:verifier.code 0} true;
    goto $bb2414;

  $bb2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $i427 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i424, $i427);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i428} true;
    goto $bb2415, $bb2416;

  $bb2416:
    assume {:verifier.code 0} true;
    assume !($i428 == 1);
    goto $bb2417;

  $bb2417:
    assume {:verifier.code 0} true;
    goto $bb2420;

  $bb2420:
    assume {:verifier.code 0} true;
    goto $bb2421;

  $bb2421:
    assume {:verifier.code 0} true;
    goto $bb2422;

  $bb2422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} __const_udelay(4295000);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    goto $bb2423;

  $bb2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} __const_udelay(4295000);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    goto $bb2424;

  $bb2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} __const_udelay(4295000);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    goto $bb2425;

  $bb2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} __const_udelay(4295000);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    goto $bb2426;

  $bb2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} __const_udelay(4295000);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    goto $bb2427;

  $bb2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} __const_udelay(4295000);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    goto $bb2428;

  $bb2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} __const_udelay(4295000);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    goto $bb2429;

  $bb2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} __const_udelay(4295000);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    goto $bb2430;

  $bb2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} __const_udelay(4295000);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    goto $bb2431;

  $bb2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2432;

  $bb2432:
    assume {:verifier.code 0} true;
    goto $bb2433;

  $bb2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} $i430 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i431 := $eq.i32($i427, $i430);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i431} true;
    goto $bb2434, $bb2435;

  $bb2435:
    assume {:verifier.code 0} true;
    assume !($i431 == 1);
    goto $bb2436;

  $bb2436:
    assume {:verifier.code 0} true;
    goto $bb2439;

  $bb2439:
    assume {:verifier.code 0} true;
    goto $bb2440;

  $bb2440:
    assume {:verifier.code 0} true;
    goto $bb2441;

  $bb2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} __const_udelay(4295000);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    goto $bb2442;

  $bb2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} __const_udelay(4295000);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    goto $bb2443;

  $bb2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} __const_udelay(4295000);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    goto $bb2444;

  $bb2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} __const_udelay(4295000);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    goto $bb2445;

  $bb2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} __const_udelay(4295000);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    goto $bb2446;

  $bb2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} __const_udelay(4295000);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    goto $bb2447;

  $bb2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} __const_udelay(4295000);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    goto $bb2448;

  $bb2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} __const_udelay(4295000);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    goto $bb2449;

  $bb2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} __const_udelay(4295000);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    goto $bb2450;

  $bb2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2451;

  $bb2451:
    assume {:verifier.code 0} true;
    goto $bb2452;

  $bb2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $i433 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i434 := $eq.i32($i430, $i433);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i434} true;
    goto $bb2453, $bb2454;

  $bb2454:
    assume {:verifier.code 0} true;
    assume !($i434 == 1);
    goto $bb2455;

  $bb2455:
    assume {:verifier.code 0} true;
    goto $bb2458;

  $bb2458:
    assume {:verifier.code 0} true;
    goto $bb2459;

  $bb2459:
    assume {:verifier.code 0} true;
    goto $bb2460;

  $bb2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} __const_udelay(4295000);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    goto $bb2461;

  $bb2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} __const_udelay(4295000);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    goto $bb2462;

  $bb2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} __const_udelay(4295000);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    goto $bb2463;

  $bb2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} __const_udelay(4295000);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    goto $bb2464;

  $bb2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} __const_udelay(4295000);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    goto $bb2465;

  $bb2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} __const_udelay(4295000);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    goto $bb2466;

  $bb2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} __const_udelay(4295000);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    goto $bb2467;

  $bb2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} __const_udelay(4295000);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    goto $bb2468;

  $bb2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} __const_udelay(4295000);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    goto $bb2469;

  $bb2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2470;

  $bb2470:
    assume {:verifier.code 0} true;
    goto $bb2471;

  $bb2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} $i436 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i433, $i436);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i437} true;
    goto $bb2472, $bb2473;

  $bb2473:
    assume {:verifier.code 0} true;
    assume !($i437 == 1);
    goto $bb2474;

  $bb2474:
    assume {:verifier.code 0} true;
    goto $bb2477;

  $bb2477:
    assume {:verifier.code 0} true;
    goto $bb2478;

  $bb2478:
    assume {:verifier.code 0} true;
    goto $bb2479;

  $bb2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} __const_udelay(4295000);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    goto $bb2480;

  $bb2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} __const_udelay(4295000);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    goto $bb2481;

  $bb2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} __const_udelay(4295000);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    goto $bb2482;

  $bb2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} __const_udelay(4295000);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    goto $bb2483;

  $bb2483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} __const_udelay(4295000);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    goto $bb2484;

  $bb2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} __const_udelay(4295000);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    goto $bb2485;

  $bb2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} __const_udelay(4295000);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb2486;

  $bb2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} __const_udelay(4295000);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    goto $bb2487;

  $bb2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} __const_udelay(4295000);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    goto $bb2488;

  $bb2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2489;

  $bb2489:
    assume {:verifier.code 0} true;
    goto $bb2490;

  $bb2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} $i439 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $i440 := $eq.i32($i436, $i439);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb2491, $bb2492;

  $bb2492:
    assume {:verifier.code 0} true;
    assume !($i440 == 1);
    goto $bb2493;

  $bb2493:
    assume {:verifier.code 0} true;
    goto $bb2496;

  $bb2496:
    assume {:verifier.code 0} true;
    goto $bb2497;

  $bb2497:
    assume {:verifier.code 0} true;
    goto $bb2498;

  $bb2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} __const_udelay(4295000);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    goto $bb2499;

  $bb2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} __const_udelay(4295000);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    goto $bb2500;

  $bb2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} __const_udelay(4295000);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    goto $bb2501;

  $bb2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} __const_udelay(4295000);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    goto $bb2502;

  $bb2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} __const_udelay(4295000);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    goto $bb2503;

  $bb2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} __const_udelay(4295000);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    goto $bb2504;

  $bb2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} __const_udelay(4295000);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    goto $bb2505;

  $bb2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} __const_udelay(4295000);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    goto $bb2506;

  $bb2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} __const_udelay(4295000);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    goto $bb2507;

  $bb2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2508;

  $bb2508:
    assume {:verifier.code 0} true;
    goto $bb2509;

  $bb2509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} $i442 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i439, $i442);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb2510, $bb2511;

  $bb2511:
    assume {:verifier.code 0} true;
    assume !($i443 == 1);
    goto $bb2512;

  $bb2512:
    assume {:verifier.code 0} true;
    goto $bb2515;

  $bb2515:
    assume {:verifier.code 0} true;
    goto $bb2516;

  $bb2516:
    assume {:verifier.code 0} true;
    goto $bb2517;

  $bb2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} __const_udelay(4295000);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    goto $bb2518;

  $bb2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} __const_udelay(4295000);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    goto $bb2519;

  $bb2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} __const_udelay(4295000);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    goto $bb2520;

  $bb2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} __const_udelay(4295000);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    goto $bb2521;

  $bb2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} __const_udelay(4295000);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    goto $bb2522;

  $bb2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} __const_udelay(4295000);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    goto $bb2523;

  $bb2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} __const_udelay(4295000);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    goto $bb2524;

  $bb2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} __const_udelay(4295000);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    goto $bb2525;

  $bb2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} __const_udelay(4295000);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    goto $bb2526;

  $bb2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2527;

  $bb2527:
    assume {:verifier.code 0} true;
    goto $bb2528;

  $bb2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} $i445 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i446 := $eq.i32($i442, $i445);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i446} true;
    goto $bb2529, $bb2530;

  $bb2530:
    assume {:verifier.code 0} true;
    assume !($i446 == 1);
    goto $bb2531;

  $bb2531:
    assume {:verifier.code 0} true;
    goto $bb2534;

  $bb2534:
    assume {:verifier.code 0} true;
    goto $bb2535;

  $bb2535:
    assume {:verifier.code 0} true;
    goto $bb2536;

  $bb2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} __const_udelay(4295000);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    goto $bb2537;

  $bb2537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} __const_udelay(4295000);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    goto $bb2538;

  $bb2538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} __const_udelay(4295000);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    goto $bb2539;

  $bb2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} __const_udelay(4295000);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    goto $bb2540;

  $bb2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} __const_udelay(4295000);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    goto $bb2541;

  $bb2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} __const_udelay(4295000);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    goto $bb2542;

  $bb2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} __const_udelay(4295000);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    goto $bb2543;

  $bb2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} __const_udelay(4295000);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    goto $bb2544;

  $bb2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} __const_udelay(4295000);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    goto $bb2545;

  $bb2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2546;

  $bb2546:
    assume {:verifier.code 0} true;
    goto $bb2547;

  $bb2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} $i448 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i445, $i448);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb2548, $bb2549;

  $bb2549:
    assume {:verifier.code 0} true;
    assume !($i449 == 1);
    goto $bb2550;

  $bb2550:
    assume {:verifier.code 0} true;
    goto $bb2553;

  $bb2553:
    assume {:verifier.code 0} true;
    goto $bb2554;

  $bb2554:
    assume {:verifier.code 0} true;
    goto $bb2555;

  $bb2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} __const_udelay(4295000);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    goto $bb2556;

  $bb2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} __const_udelay(4295000);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    goto $bb2557;

  $bb2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} __const_udelay(4295000);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    goto $bb2558;

  $bb2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} __const_udelay(4295000);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    goto $bb2559;

  $bb2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} __const_udelay(4295000);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    goto $bb2560;

  $bb2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} __const_udelay(4295000);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    goto $bb2561;

  $bb2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} __const_udelay(4295000);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    goto $bb2562;

  $bb2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} __const_udelay(4295000);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    goto $bb2563;

  $bb2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} __const_udelay(4295000);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    goto $bb2564;

  $bb2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2565;

  $bb2565:
    assume {:verifier.code 0} true;
    goto $bb2566;

  $bb2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} $i451 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i448, $i451);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb2567, $bb2568;

  $bb2568:
    assume {:verifier.code 0} true;
    assume !($i452 == 1);
    goto $bb2569;

  $bb2569:
    assume {:verifier.code 0} true;
    goto $bb2572;

  $bb2572:
    assume {:verifier.code 0} true;
    goto $bb2573;

  $bb2573:
    assume {:verifier.code 0} true;
    goto $bb2574;

  $bb2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} __const_udelay(4295000);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    goto $bb2575;

  $bb2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} __const_udelay(4295000);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    goto $bb2576;

  $bb2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} __const_udelay(4295000);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    goto $bb2577;

  $bb2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} __const_udelay(4295000);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    goto $bb2578;

  $bb2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} __const_udelay(4295000);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    goto $bb2579;

  $bb2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} __const_udelay(4295000);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    goto $bb2580;

  $bb2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} __const_udelay(4295000);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    goto $bb2581;

  $bb2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} __const_udelay(4295000);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    goto $bb2582;

  $bb2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} __const_udelay(4295000);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    goto $bb2583;

  $bb2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2584;

  $bb2584:
    assume {:verifier.code 0} true;
    goto $bb2585;

  $bb2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} $i454 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i455 := $eq.i32($i451, $i454);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i455} true;
    goto $bb2586, $bb2587;

  $bb2587:
    assume {:verifier.code 0} true;
    assume !($i455 == 1);
    goto $bb2588;

  $bb2588:
    assume {:verifier.code 0} true;
    goto $bb2591;

  $bb2591:
    assume {:verifier.code 0} true;
    goto $bb2592;

  $bb2592:
    assume {:verifier.code 0} true;
    goto $bb2593;

  $bb2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} __const_udelay(4295000);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    goto $bb2594;

  $bb2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} __const_udelay(4295000);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    goto $bb2595;

  $bb2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} __const_udelay(4295000);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    goto $bb2596;

  $bb2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} __const_udelay(4295000);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    goto $bb2597;

  $bb2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} __const_udelay(4295000);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    goto $bb2598;

  $bb2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} __const_udelay(4295000);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    goto $bb2599;

  $bb2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} __const_udelay(4295000);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    goto $bb2600;

  $bb2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} __const_udelay(4295000);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    goto $bb2601;

  $bb2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} __const_udelay(4295000);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    goto $bb2602;

  $bb2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2603;

  $bb2603:
    assume {:verifier.code 0} true;
    goto $bb2604;

  $bb2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} $i457 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i454, $i457);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb2605, $bb2606;

  $bb2606:
    assume {:verifier.code 0} true;
    assume !($i458 == 1);
    goto $bb2607;

  $bb2607:
    assume {:verifier.code 0} true;
    goto $bb2610;

  $bb2610:
    assume {:verifier.code 0} true;
    goto $bb2611;

  $bb2611:
    assume {:verifier.code 0} true;
    goto $bb2612;

  $bb2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} __const_udelay(4295000);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    goto $bb2613;

  $bb2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} __const_udelay(4295000);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    goto $bb2614;

  $bb2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} __const_udelay(4295000);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    goto $bb2615;

  $bb2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} __const_udelay(4295000);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    goto $bb2616;

  $bb2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} __const_udelay(4295000);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    goto $bb2617;

  $bb2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} __const_udelay(4295000);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    goto $bb2618;

  $bb2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} __const_udelay(4295000);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    goto $bb2619;

  $bb2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} __const_udelay(4295000);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    goto $bb2620;

  $bb2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} __const_udelay(4295000);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    goto $bb2621;

  $bb2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2622;

  $bb2622:
    assume {:verifier.code 0} true;
    goto $bb2623;

  $bb2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} $i460 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i457, $i460);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb2624, $bb2625;

  $bb2625:
    assume {:verifier.code 0} true;
    assume !($i461 == 1);
    goto $bb2626;

  $bb2626:
    assume {:verifier.code 0} true;
    goto $bb2629;

  $bb2629:
    assume {:verifier.code 0} true;
    goto $bb2630;

  $bb2630:
    assume {:verifier.code 0} true;
    goto $bb2631;

  $bb2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} __const_udelay(4295000);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    goto $bb2632;

  $bb2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} __const_udelay(4295000);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    goto $bb2633;

  $bb2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} __const_udelay(4295000);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    goto $bb2634;

  $bb2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} __const_udelay(4295000);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    goto $bb2635;

  $bb2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} __const_udelay(4295000);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    goto $bb2636;

  $bb2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} __const_udelay(4295000);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    goto $bb2637;

  $bb2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} __const_udelay(4295000);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb2638;

  $bb2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} __const_udelay(4295000);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    goto $bb2639;

  $bb2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} __const_udelay(4295000);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    goto $bb2640;

  $bb2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2641;

  $bb2641:
    assume {:verifier.code 0} true;
    goto $bb2642;

  $bb2642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} $i463 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i464 := $eq.i32($i460, $i463);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i464} true;
    goto $bb2643, $bb2644;

  $bb2644:
    assume {:verifier.code 0} true;
    assume !($i464 == 1);
    goto $bb2645;

  $bb2645:
    assume {:verifier.code 0} true;
    goto $bb2648;

  $bb2648:
    assume {:verifier.code 0} true;
    goto $bb2649;

  $bb2649:
    assume {:verifier.code 0} true;
    goto $bb2650;

  $bb2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} __const_udelay(4295000);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    goto $bb2651;

  $bb2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} __const_udelay(4295000);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    goto $bb2652;

  $bb2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} __const_udelay(4295000);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    goto $bb2653;

  $bb2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} __const_udelay(4295000);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    goto $bb2654;

  $bb2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} __const_udelay(4295000);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    goto $bb2655;

  $bb2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} __const_udelay(4295000);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    goto $bb2656;

  $bb2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} __const_udelay(4295000);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    goto $bb2657;

  $bb2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} __const_udelay(4295000);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    goto $bb2658;

  $bb2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} __const_udelay(4295000);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    goto $bb2659;

  $bb2659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2660;

  $bb2660:
    assume {:verifier.code 0} true;
    goto $bb2661;

  $bb2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} $i466 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i463, $i466);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i467} true;
    goto $bb2662, $bb2663;

  $bb2663:
    assume {:verifier.code 0} true;
    assume !($i467 == 1);
    goto $bb2664;

  $bb2664:
    assume {:verifier.code 0} true;
    goto $bb2667;

  $bb2667:
    assume {:verifier.code 0} true;
    goto $bb2668;

  $bb2668:
    assume {:verifier.code 0} true;
    goto $bb2669;

  $bb2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} __const_udelay(4295000);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    goto $bb2670;

  $bb2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} __const_udelay(4295000);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    goto $bb2671;

  $bb2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} __const_udelay(4295000);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    goto $bb2672;

  $bb2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} __const_udelay(4295000);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    goto $bb2673;

  $bb2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} __const_udelay(4295000);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    goto $bb2674;

  $bb2674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} __const_udelay(4295000);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    goto $bb2675;

  $bb2675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} __const_udelay(4295000);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    goto $bb2676;

  $bb2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} __const_udelay(4295000);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    goto $bb2677;

  $bb2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} __const_udelay(4295000);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    goto $bb2678;

  $bb2678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2679;

  $bb2679:
    assume {:verifier.code 0} true;
    goto $bb2680;

  $bb2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} $i469 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i466, $i469);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i470} true;
    goto $bb2681, $bb2682;

  $bb2682:
    assume {:verifier.code 0} true;
    assume !($i470 == 1);
    goto $bb2683;

  $bb2683:
    assume {:verifier.code 0} true;
    goto $bb2686;

  $bb2686:
    assume {:verifier.code 0} true;
    goto $bb2687;

  $bb2687:
    assume {:verifier.code 0} true;
    goto $bb2688;

  $bb2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} __const_udelay(4295000);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    goto $bb2689;

  $bb2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} __const_udelay(4295000);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    goto $bb2690;

  $bb2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} __const_udelay(4295000);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    goto $bb2691;

  $bb2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} __const_udelay(4295000);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    goto $bb2692;

  $bb2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} __const_udelay(4295000);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    goto $bb2693;

  $bb2693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} __const_udelay(4295000);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    goto $bb2694;

  $bb2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} __const_udelay(4295000);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    goto $bb2695;

  $bb2695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} __const_udelay(4295000);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    goto $bb2696;

  $bb2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} __const_udelay(4295000);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    goto $bb2697;

  $bb2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2698;

  $bb2698:
    assume {:verifier.code 0} true;
    goto $bb2699;

  $bb2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} $i472 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i473 := $eq.i32($i469, $i472);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i473} true;
    goto $bb2700, $bb2701;

  $bb2701:
    assume {:verifier.code 0} true;
    assume !($i473 == 1);
    goto $bb2702;

  $bb2702:
    assume {:verifier.code 0} true;
    goto $bb2705;

  $bb2705:
    assume {:verifier.code 0} true;
    goto $bb2706;

  $bb2706:
    assume {:verifier.code 0} true;
    goto $bb2707;

  $bb2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} __const_udelay(4295000);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    goto $bb2708;

  $bb2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} __const_udelay(4295000);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    goto $bb2709;

  $bb2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} __const_udelay(4295000);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    goto $bb2710;

  $bb2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} __const_udelay(4295000);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    goto $bb2711;

  $bb2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} __const_udelay(4295000);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    goto $bb2712;

  $bb2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} __const_udelay(4295000);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    goto $bb2713;

  $bb2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} __const_udelay(4295000);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    goto $bb2714;

  $bb2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} __const_udelay(4295000);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    goto $bb2715;

  $bb2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} __const_udelay(4295000);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    goto $bb2716;

  $bb2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2717;

  $bb2717:
    assume {:verifier.code 0} true;
    goto $bb2718;

  $bb2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} $i475 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i472, $i475);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb2719, $bb2720;

  $bb2720:
    assume {:verifier.code 0} true;
    assume !($i476 == 1);
    goto $bb2721;

  $bb2721:
    assume {:verifier.code 0} true;
    goto $bb2724;

  $bb2724:
    assume {:verifier.code 0} true;
    goto $bb2725;

  $bb2725:
    assume {:verifier.code 0} true;
    goto $bb2726;

  $bb2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} __const_udelay(4295000);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    goto $bb2727;

  $bb2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} __const_udelay(4295000);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    goto $bb2728;

  $bb2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} __const_udelay(4295000);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    goto $bb2729;

  $bb2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} __const_udelay(4295000);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    goto $bb2730;

  $bb2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} __const_udelay(4295000);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    goto $bb2731;

  $bb2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} __const_udelay(4295000);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    goto $bb2732;

  $bb2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} __const_udelay(4295000);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    goto $bb2733;

  $bb2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} __const_udelay(4295000);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    goto $bb2734;

  $bb2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} __const_udelay(4295000);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    goto $bb2735;

  $bb2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2736;

  $bb2736:
    assume {:verifier.code 0} true;
    goto $bb2737;

  $bb2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} $i478 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i475, $i478);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb2738, $bb2739;

  $bb2739:
    assume {:verifier.code 0} true;
    assume !($i479 == 1);
    goto $bb2740;

  $bb2740:
    assume {:verifier.code 0} true;
    goto $bb2743;

  $bb2743:
    assume {:verifier.code 0} true;
    goto $bb2744;

  $bb2744:
    assume {:verifier.code 0} true;
    goto $bb2745;

  $bb2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} __const_udelay(4295000);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    goto $bb2746;

  $bb2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} __const_udelay(4295000);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    goto $bb2747;

  $bb2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} __const_udelay(4295000);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    goto $bb2748;

  $bb2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} __const_udelay(4295000);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    goto $bb2749;

  $bb2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} __const_udelay(4295000);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    goto $bb2750;

  $bb2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} __const_udelay(4295000);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    goto $bb2751;

  $bb2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} __const_udelay(4295000);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    goto $bb2752;

  $bb2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} __const_udelay(4295000);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    goto $bb2753;

  $bb2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} __const_udelay(4295000);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    goto $bb2754;

  $bb2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2755;

  $bb2755:
    assume {:verifier.code 0} true;
    goto $bb2756;

  $bb2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} $i481 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i478, $i481);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i482} true;
    goto $bb2757, $bb2758;

  $bb2758:
    assume {:verifier.code 0} true;
    assume !($i482 == 1);
    goto $bb2759;

  $bb2759:
    assume {:verifier.code 0} true;
    goto $bb2762;

  $bb2762:
    assume {:verifier.code 0} true;
    goto $bb2763;

  $bb2763:
    assume {:verifier.code 0} true;
    goto $bb2764;

  $bb2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} __const_udelay(4295000);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    goto $bb2765;

  $bb2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} __const_udelay(4295000);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    goto $bb2766;

  $bb2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} __const_udelay(4295000);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    goto $bb2767;

  $bb2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} __const_udelay(4295000);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    goto $bb2768;

  $bb2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} __const_udelay(4295000);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    goto $bb2769;

  $bb2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} __const_udelay(4295000);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    goto $bb2770;

  $bb2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} __const_udelay(4295000);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    goto $bb2771;

  $bb2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} __const_udelay(4295000);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    goto $bb2772;

  $bb2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} __const_udelay(4295000);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    goto $bb2773;

  $bb2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2774;

  $bb2774:
    assume {:verifier.code 0} true;
    goto $bb2775;

  $bb2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} $i484 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i481, $i484);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb2776, $bb2777;

  $bb2777:
    assume {:verifier.code 0} true;
    assume !($i485 == 1);
    goto $bb2778;

  $bb2778:
    assume {:verifier.code 0} true;
    goto $bb2781;

  $bb2781:
    assume {:verifier.code 0} true;
    goto $bb2782;

  $bb2782:
    assume {:verifier.code 0} true;
    goto $bb2783;

  $bb2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} __const_udelay(4295000);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    goto $bb2784;

  $bb2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} __const_udelay(4295000);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    goto $bb2785;

  $bb2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} __const_udelay(4295000);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    goto $bb2786;

  $bb2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} __const_udelay(4295000);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    goto $bb2787;

  $bb2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} __const_udelay(4295000);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    goto $bb2788;

  $bb2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} __const_udelay(4295000);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    goto $bb2789;

  $bb2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} __const_udelay(4295000);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    goto $bb2790;

  $bb2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} __const_udelay(4295000);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    goto $bb2791;

  $bb2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} __const_udelay(4295000);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    goto $bb2792;

  $bb2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2793;

  $bb2793:
    assume {:verifier.code 0} true;
    goto $bb2794;

  $bb2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} $i487 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i488 := $eq.i32($i484, $i487);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i488} true;
    goto $bb2795, $bb2796;

  $bb2796:
    assume {:verifier.code 0} true;
    assume !($i488 == 1);
    goto $bb2797;

  $bb2797:
    assume {:verifier.code 0} true;
    goto $bb2800;

  $bb2800:
    assume {:verifier.code 0} true;
    goto $bb2801;

  $bb2801:
    assume {:verifier.code 0} true;
    goto $bb2802;

  $bb2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} __const_udelay(4295000);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    goto $bb2803;

  $bb2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} __const_udelay(4295000);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    goto $bb2804;

  $bb2804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} __const_udelay(4295000);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    goto $bb2805;

  $bb2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} __const_udelay(4295000);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    goto $bb2806;

  $bb2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} __const_udelay(4295000);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    goto $bb2807;

  $bb2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} __const_udelay(4295000);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    goto $bb2808;

  $bb2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} __const_udelay(4295000);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    goto $bb2809;

  $bb2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} __const_udelay(4295000);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    goto $bb2810;

  $bb2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} __const_udelay(4295000);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    goto $bb2811;

  $bb2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2812;

  $bb2812:
    assume {:verifier.code 0} true;
    goto $bb2813;

  $bb2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $i490 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i491 := $eq.i32($i487, $i490);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i491} true;
    goto $bb2814, $bb2815;

  $bb2815:
    assume {:verifier.code 0} true;
    assume !($i491 == 1);
    goto $bb2816;

  $bb2816:
    assume {:verifier.code 0} true;
    goto $bb2819;

  $bb2819:
    assume {:verifier.code 0} true;
    goto $bb2820;

  $bb2820:
    assume {:verifier.code 0} true;
    goto $bb2821;

  $bb2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} __const_udelay(4295000);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    goto $bb2822;

  $bb2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} __const_udelay(4295000);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    goto $bb2823;

  $bb2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} __const_udelay(4295000);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    goto $bb2824;

  $bb2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} __const_udelay(4295000);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    goto $bb2825;

  $bb2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} __const_udelay(4295000);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    goto $bb2826;

  $bb2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} __const_udelay(4295000);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    goto $bb2827;

  $bb2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} __const_udelay(4295000);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    goto $bb2828;

  $bb2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} __const_udelay(4295000);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    goto $bb2829;

  $bb2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} __const_udelay(4295000);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    goto $bb2830;

  $bb2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2831;

  $bb2831:
    assume {:verifier.code 0} true;
    goto $bb2832;

  $bb2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} $i493 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i490, $i493);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i494} true;
    goto $bb2833, $bb2834;

  $bb2834:
    assume {:verifier.code 0} true;
    assume !($i494 == 1);
    goto $bb2835;

  $bb2835:
    assume {:verifier.code 0} true;
    goto $bb2838;

  $bb2838:
    assume {:verifier.code 0} true;
    goto $bb2839;

  $bb2839:
    assume {:verifier.code 0} true;
    goto $bb2840;

  $bb2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} __const_udelay(4295000);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    goto $bb2841;

  $bb2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} __const_udelay(4295000);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    goto $bb2842;

  $bb2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} __const_udelay(4295000);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    goto $bb2843;

  $bb2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} __const_udelay(4295000);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    goto $bb2844;

  $bb2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} __const_udelay(4295000);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    goto $bb2845;

  $bb2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} __const_udelay(4295000);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    goto $bb2846;

  $bb2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} __const_udelay(4295000);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    goto $bb2847;

  $bb2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} __const_udelay(4295000);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    goto $bb2848;

  $bb2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} __const_udelay(4295000);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    goto $bb2849;

  $bb2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2850;

  $bb2850:
    assume {:verifier.code 0} true;
    goto $bb2851;

  $bb2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} $i496 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i493, $i496);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i497} true;
    goto $bb2852, $bb2853;

  $bb2853:
    assume {:verifier.code 0} true;
    assume !($i497 == 1);
    goto $bb2854;

  $bb2854:
    assume {:verifier.code 0} true;
    goto $bb2857;

  $bb2857:
    assume {:verifier.code 0} true;
    goto $bb2858;

  $bb2858:
    assume {:verifier.code 0} true;
    goto $bb2859;

  $bb2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} __const_udelay(4295000);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    goto $bb2860;

  $bb2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} __const_udelay(4295000);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    goto $bb2861;

  $bb2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} __const_udelay(4295000);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    goto $bb2862;

  $bb2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} __const_udelay(4295000);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    goto $bb2863;

  $bb2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} __const_udelay(4295000);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    goto $bb2864;

  $bb2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} __const_udelay(4295000);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    goto $bb2865;

  $bb2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} __const_udelay(4295000);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    goto $bb2866;

  $bb2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} __const_udelay(4295000);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    goto $bb2867;

  $bb2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} __const_udelay(4295000);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    goto $bb2868;

  $bb2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2869;

  $bb2869:
    assume {:verifier.code 0} true;
    goto $bb2870;

  $bb2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} $i499 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i500 := $eq.i32($i496, $i499);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i500} true;
    goto $bb2871, $bb2872;

  $bb2872:
    assume {:verifier.code 0} true;
    assume !($i500 == 1);
    goto $bb2873;

  $bb2873:
    assume {:verifier.code 0} true;
    goto $bb2876;

  $bb2876:
    assume {:verifier.code 0} true;
    goto $bb2877;

  $bb2877:
    assume {:verifier.code 0} true;
    goto $bb2878;

  $bb2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} __const_udelay(4295000);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    goto $bb2879;

  $bb2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} __const_udelay(4295000);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    goto $bb2880;

  $bb2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} __const_udelay(4295000);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    goto $bb2881;

  $bb2881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} __const_udelay(4295000);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    goto $bb2882;

  $bb2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} __const_udelay(4295000);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    goto $bb2883;

  $bb2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} __const_udelay(4295000);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    goto $bb2884;

  $bb2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} __const_udelay(4295000);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    goto $bb2885;

  $bb2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} __const_udelay(4295000);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    goto $bb2886;

  $bb2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} __const_udelay(4295000);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    goto $bb2887;

  $bb2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2888;

  $bb2888:
    assume {:verifier.code 0} true;
    goto $bb2889;

  $bb2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} $i502 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $i503 := $eq.i32($i499, $i502);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i503} true;
    goto $bb2890, $bb2891;

  $bb2891:
    assume {:verifier.code 0} true;
    assume !($i503 == 1);
    goto $bb2892;

  $bb2892:
    assume {:verifier.code 0} true;
    goto $bb2895;

  $bb2895:
    assume {:verifier.code 0} true;
    goto $bb2896;

  $bb2896:
    assume {:verifier.code 0} true;
    goto $bb2897;

  $bb2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} __const_udelay(4295000);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    goto $bb2898;

  $bb2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} __const_udelay(4295000);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    goto $bb2899;

  $bb2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} __const_udelay(4295000);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    goto $bb2900;

  $bb2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} __const_udelay(4295000);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    goto $bb2901;

  $bb2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} __const_udelay(4295000);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    goto $bb2902;

  $bb2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} __const_udelay(4295000);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    goto $bb2903;

  $bb2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} __const_udelay(4295000);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    goto $bb2904;

  $bb2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} __const_udelay(4295000);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    goto $bb2905;

  $bb2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} __const_udelay(4295000);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    goto $bb2906;

  $bb2906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2907;

  $bb2907:
    assume {:verifier.code 0} true;
    goto $bb2908;

  $bb2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} $i505 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i506 := $eq.i32($i502, $i505);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i506} true;
    goto $bb2909, $bb2910;

  $bb2910:
    assume {:verifier.code 0} true;
    assume !($i506 == 1);
    goto $bb2911;

  $bb2911:
    assume {:verifier.code 0} true;
    goto $bb2914;

  $bb2914:
    assume {:verifier.code 0} true;
    goto $bb2915;

  $bb2915:
    assume {:verifier.code 0} true;
    goto $bb2916;

  $bb2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} __const_udelay(4295000);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    goto $bb2917;

  $bb2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} __const_udelay(4295000);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    goto $bb2918;

  $bb2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} __const_udelay(4295000);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    goto $bb2919;

  $bb2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} __const_udelay(4295000);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    goto $bb2920;

  $bb2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} __const_udelay(4295000);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    goto $bb2921;

  $bb2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} __const_udelay(4295000);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    goto $bb2922;

  $bb2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} __const_udelay(4295000);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    goto $bb2923;

  $bb2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} __const_udelay(4295000);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    goto $bb2924;

  $bb2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} __const_udelay(4295000);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    goto $bb2925;

  $bb2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2926;

  $bb2926:
    assume {:verifier.code 0} true;
    goto $bb2927;

  $bb2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} $i508 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i509 := $eq.i32($i505, $i508);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i509} true;
    goto $bb2928, $bb2929;

  $bb2929:
    assume {:verifier.code 0} true;
    assume !($i509 == 1);
    goto $bb2930;

  $bb2930:
    assume {:verifier.code 0} true;
    goto $bb2933;

  $bb2933:
    assume {:verifier.code 0} true;
    goto $bb2934;

  $bb2934:
    assume {:verifier.code 0} true;
    goto $bb2935;

  $bb2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} __const_udelay(4295000);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    goto $bb2936;

  $bb2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} __const_udelay(4295000);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    goto $bb2937;

  $bb2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} __const_udelay(4295000);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    goto $bb2938;

  $bb2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} __const_udelay(4295000);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    goto $bb2939;

  $bb2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} __const_udelay(4295000);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    goto $bb2940;

  $bb2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} __const_udelay(4295000);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    goto $bb2941;

  $bb2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} __const_udelay(4295000);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    goto $bb2942;

  $bb2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} __const_udelay(4295000);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    goto $bb2943;

  $bb2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} __const_udelay(4295000);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    goto $bb2944;

  $bb2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2945;

  $bb2945:
    assume {:verifier.code 0} true;
    goto $bb2946;

  $bb2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} $i511 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i508, $i511);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i512} true;
    goto $bb2947, $bb2948;

  $bb2948:
    assume {:verifier.code 0} true;
    assume !($i512 == 1);
    goto $bb2949;

  $bb2949:
    assume {:verifier.code 0} true;
    goto $bb2952;

  $bb2952:
    assume {:verifier.code 0} true;
    goto $bb2953;

  $bb2953:
    assume {:verifier.code 0} true;
    goto $bb2954;

  $bb2954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} __const_udelay(4295000);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    goto $bb2955;

  $bb2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} __const_udelay(4295000);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    goto $bb2956;

  $bb2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} __const_udelay(4295000);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    goto $bb2957;

  $bb2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} __const_udelay(4295000);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    goto $bb2958;

  $bb2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} __const_udelay(4295000);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    goto $bb2959;

  $bb2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} __const_udelay(4295000);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    goto $bb2960;

  $bb2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} __const_udelay(4295000);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    goto $bb2961;

  $bb2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} __const_udelay(4295000);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    goto $bb2962;

  $bb2962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} __const_udelay(4295000);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    goto $bb2963;

  $bb2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2964;

  $bb2964:
    assume {:verifier.code 0} true;
    goto $bb2965;

  $bb2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} $i514 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i515 := $eq.i32($i511, $i514);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i515} true;
    goto $bb2966, $bb2967;

  $bb2967:
    assume {:verifier.code 0} true;
    assume !($i515 == 1);
    goto $bb2968;

  $bb2968:
    assume {:verifier.code 0} true;
    goto $bb2971;

  $bb2971:
    assume {:verifier.code 0} true;
    goto $bb2972;

  $bb2972:
    assume {:verifier.code 0} true;
    goto $bb2973;

  $bb2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} __const_udelay(4295000);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    goto $bb2974;

  $bb2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} __const_udelay(4295000);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    goto $bb2975;

  $bb2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} __const_udelay(4295000);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    goto $bb2976;

  $bb2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} __const_udelay(4295000);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    goto $bb2977;

  $bb2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} __const_udelay(4295000);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    goto $bb2978;

  $bb2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} __const_udelay(4295000);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    goto $bb2979;

  $bb2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} __const_udelay(4295000);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    goto $bb2980;

  $bb2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} __const_udelay(4295000);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    goto $bb2981;

  $bb2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} __const_udelay(4295000);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    goto $bb2982;

  $bb2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2983;

  $bb2983:
    assume {:verifier.code 0} true;
    goto $bb2984;

  $bb2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} $i517 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $i518 := $eq.i32($i514, $i517);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i518} true;
    goto $bb2985, $bb2986;

  $bb2986:
    assume {:verifier.code 0} true;
    assume !($i518 == 1);
    goto $bb2987;

  $bb2987:
    assume {:verifier.code 0} true;
    goto $bb2990;

  $bb2990:
    assume {:verifier.code 0} true;
    goto $bb2991;

  $bb2991:
    assume {:verifier.code 0} true;
    goto $bb2992;

  $bb2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} __const_udelay(4295000);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    goto $bb2993;

  $bb2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} __const_udelay(4295000);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    goto $bb2994;

  $bb2994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} __const_udelay(4295000);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    goto $bb2995;

  $bb2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} __const_udelay(4295000);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    goto $bb2996;

  $bb2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} __const_udelay(4295000);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    goto $bb2997;

  $bb2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} __const_udelay(4295000);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    goto $bb2998;

  $bb2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} __const_udelay(4295000);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    goto $bb2999;

  $bb2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} __const_udelay(4295000);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    goto $bb3000;

  $bb3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} __const_udelay(4295000);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    goto $bb3001;

  $bb3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3002;

  $bb3002:
    assume {:verifier.code 0} true;
    goto $bb3003;

  $bb3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} $i520 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i521 := $eq.i32($i517, $i520);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb3004, $bb3005;

  $bb3005:
    assume {:verifier.code 0} true;
    assume !($i521 == 1);
    goto $bb3006;

  $bb3006:
    assume {:verifier.code 0} true;
    goto $bb3009;

  $bb3009:
    assume {:verifier.code 0} true;
    goto $bb3010;

  $bb3010:
    assume {:verifier.code 0} true;
    goto $bb3011;

  $bb3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} __const_udelay(4295000);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    goto $bb3012;

  $bb3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} __const_udelay(4295000);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    goto $bb3013;

  $bb3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} __const_udelay(4295000);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    goto $bb3014;

  $bb3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} __const_udelay(4295000);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    goto $bb3015;

  $bb3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} __const_udelay(4295000);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    goto $bb3016;

  $bb3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} __const_udelay(4295000);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    goto $bb3017;

  $bb3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} __const_udelay(4295000);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    goto $bb3018;

  $bb3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} __const_udelay(4295000);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    goto $bb3019;

  $bb3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} __const_udelay(4295000);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    goto $bb3020;

  $bb3020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3021;

  $bb3021:
    assume {:verifier.code 0} true;
    goto $bb3022;

  $bb3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} $i523 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $i524 := $eq.i32($i520, $i523);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i524} true;
    goto $bb3023, $bb3024;

  $bb3024:
    assume {:verifier.code 0} true;
    assume !($i524 == 1);
    goto $bb3025;

  $bb3025:
    assume {:verifier.code 0} true;
    goto $bb3028;

  $bb3028:
    assume {:verifier.code 0} true;
    goto $bb3029;

  $bb3029:
    assume {:verifier.code 0} true;
    goto $bb3030;

  $bb3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} __const_udelay(4295000);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    goto $bb3031;

  $bb3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} __const_udelay(4295000);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    goto $bb3032;

  $bb3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} __const_udelay(4295000);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    goto $bb3033;

  $bb3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} __const_udelay(4295000);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    goto $bb3034;

  $bb3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} __const_udelay(4295000);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    goto $bb3035;

  $bb3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} __const_udelay(4295000);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    goto $bb3036;

  $bb3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} __const_udelay(4295000);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    goto $bb3037;

  $bb3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} __const_udelay(4295000);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    goto $bb3038;

  $bb3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} __const_udelay(4295000);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    goto $bb3039;

  $bb3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3040;

  $bb3040:
    assume {:verifier.code 0} true;
    goto $bb3041;

  $bb3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} $i526 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $i527 := $eq.i32($i523, $i526);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i527} true;
    goto $bb3042, $bb3043;

  $bb3043:
    assume {:verifier.code 0} true;
    assume !($i527 == 1);
    goto $bb3044;

  $bb3044:
    assume {:verifier.code 0} true;
    goto $bb3047;

  $bb3047:
    assume {:verifier.code 0} true;
    goto $bb3048;

  $bb3048:
    assume {:verifier.code 0} true;
    goto $bb3049;

  $bb3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} __const_udelay(4295000);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    goto $bb3050;

  $bb3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} __const_udelay(4295000);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    goto $bb3051;

  $bb3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} __const_udelay(4295000);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    goto $bb3052;

  $bb3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} __const_udelay(4295000);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    goto $bb3053;

  $bb3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} __const_udelay(4295000);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    goto $bb3054;

  $bb3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} __const_udelay(4295000);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    goto $bb3055;

  $bb3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} __const_udelay(4295000);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    goto $bb3056;

  $bb3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} __const_udelay(4295000);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    goto $bb3057;

  $bb3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} __const_udelay(4295000);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    goto $bb3058;

  $bb3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3059;

  $bb3059:
    assume {:verifier.code 0} true;
    goto $bb3060;

  $bb3060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} $i529 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i530 := $eq.i32($i526, $i529);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i530} true;
    goto $bb3061, $bb3062;

  $bb3062:
    assume {:verifier.code 0} true;
    assume !($i530 == 1);
    goto $bb3063;

  $bb3063:
    assume {:verifier.code 0} true;
    goto $bb3066;

  $bb3066:
    assume {:verifier.code 0} true;
    goto $bb3067;

  $bb3067:
    assume {:verifier.code 0} true;
    goto $bb3068;

  $bb3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} __const_udelay(4295000);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    goto $bb3069;

  $bb3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} __const_udelay(4295000);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    goto $bb3070;

  $bb3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} __const_udelay(4295000);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    goto $bb3071;

  $bb3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} __const_udelay(4295000);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    goto $bb3072;

  $bb3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} __const_udelay(4295000);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    goto $bb3073;

  $bb3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} __const_udelay(4295000);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    goto $bb3074;

  $bb3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} __const_udelay(4295000);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    goto $bb3075;

  $bb3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} __const_udelay(4295000);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    goto $bb3076;

  $bb3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} __const_udelay(4295000);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    goto $bb3077;

  $bb3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3078;

  $bb3078:
    assume {:verifier.code 0} true;
    goto $bb3079;

  $bb3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} $i532 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $i533 := $eq.i32($i529, $i532);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i533} true;
    goto $bb3080, $bb3081;

  $bb3081:
    assume {:verifier.code 0} true;
    assume !($i533 == 1);
    goto $bb3082;

  $bb3082:
    assume {:verifier.code 0} true;
    goto $bb3085;

  $bb3085:
    assume {:verifier.code 0} true;
    goto $bb3086;

  $bb3086:
    assume {:verifier.code 0} true;
    goto $bb3087;

  $bb3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} __const_udelay(4295000);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    goto $bb3088;

  $bb3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} __const_udelay(4295000);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    goto $bb3089;

  $bb3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} __const_udelay(4295000);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    goto $bb3090;

  $bb3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} __const_udelay(4295000);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    goto $bb3091;

  $bb3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} __const_udelay(4295000);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    goto $bb3092;

  $bb3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} __const_udelay(4295000);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    goto $bb3093;

  $bb3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} __const_udelay(4295000);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    goto $bb3094;

  $bb3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} __const_udelay(4295000);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    goto $bb3095;

  $bb3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} __const_udelay(4295000);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    goto $bb3096;

  $bb3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3097;

  $bb3097:
    assume {:verifier.code 0} true;
    goto $bb3098;

  $bb3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} $i535 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $i536 := $eq.i32($i532, $i535);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i536} true;
    goto $bb3099, $bb3100;

  $bb3100:
    assume {:verifier.code 0} true;
    assume !($i536 == 1);
    goto $bb3101;

  $bb3101:
    assume {:verifier.code 0} true;
    goto $bb3104;

  $bb3104:
    assume {:verifier.code 0} true;
    goto $bb3105;

  $bb3105:
    assume {:verifier.code 0} true;
    goto $bb3106;

  $bb3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} __const_udelay(4295000);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    goto $bb3107;

  $bb3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} __const_udelay(4295000);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    goto $bb3108;

  $bb3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} __const_udelay(4295000);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    goto $bb3109;

  $bb3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} __const_udelay(4295000);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    goto $bb3110;

  $bb3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} __const_udelay(4295000);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    goto $bb3111;

  $bb3111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} __const_udelay(4295000);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    goto $bb3112;

  $bb3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} __const_udelay(4295000);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    goto $bb3113;

  $bb3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} __const_udelay(4295000);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    goto $bb3114;

  $bb3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} __const_udelay(4295000);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    goto $bb3115;

  $bb3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3116;

  $bb3116:
    assume {:verifier.code 0} true;
    goto $bb3117;

  $bb3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} $i538 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i539 := $eq.i32($i535, $i538);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i539} true;
    goto $bb3118, $bb3119;

  $bb3119:
    assume {:verifier.code 0} true;
    assume !($i539 == 1);
    goto $bb3120;

  $bb3120:
    assume {:verifier.code 0} true;
    goto $bb3123;

  $bb3123:
    assume {:verifier.code 0} true;
    goto $bb3124;

  $bb3124:
    assume {:verifier.code 0} true;
    goto $bb3125;

  $bb3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} __const_udelay(4295000);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    goto $bb3126;

  $bb3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} __const_udelay(4295000);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    goto $bb3127;

  $bb3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} __const_udelay(4295000);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    goto $bb3128;

  $bb3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} __const_udelay(4295000);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    goto $bb3129;

  $bb3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} __const_udelay(4295000);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    goto $bb3130;

  $bb3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} __const_udelay(4295000);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    goto $bb3131;

  $bb3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} __const_udelay(4295000);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    goto $bb3132;

  $bb3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} __const_udelay(4295000);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    goto $bb3133;

  $bb3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} __const_udelay(4295000);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    goto $bb3134;

  $bb3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3135;

  $bb3135:
    assume {:verifier.code 0} true;
    goto $bb3136;

  $bb3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} $i541 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $i542 := $eq.i32($i538, $i541);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i542} true;
    goto $bb3137, $bb3138;

  $bb3138:
    assume {:verifier.code 0} true;
    assume !($i542 == 1);
    goto $bb3139;

  $bb3139:
    assume {:verifier.code 0} true;
    goto $bb3142;

  $bb3142:
    assume {:verifier.code 0} true;
    goto $bb3143;

  $bb3143:
    assume {:verifier.code 0} true;
    goto $bb3144;

  $bb3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} __const_udelay(4295000);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    goto $bb3145;

  $bb3145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} __const_udelay(4295000);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    goto $bb3146;

  $bb3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} __const_udelay(4295000);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    goto $bb3147;

  $bb3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} __const_udelay(4295000);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    goto $bb3148;

  $bb3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} __const_udelay(4295000);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    goto $bb3149;

  $bb3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} __const_udelay(4295000);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    goto $bb3150;

  $bb3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} __const_udelay(4295000);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    goto $bb3151;

  $bb3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} __const_udelay(4295000);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    goto $bb3152;

  $bb3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} __const_udelay(4295000);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    goto $bb3153;

  $bb3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3154;

  $bb3154:
    assume {:verifier.code 0} true;
    goto $bb3155;

  $bb3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} $i544 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $i545 := $eq.i32($i541, $i544);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i545} true;
    goto $bb3156, $bb3157;

  $bb3157:
    assume {:verifier.code 0} true;
    assume !($i545 == 1);
    goto $bb3158;

  $bb3158:
    assume {:verifier.code 0} true;
    goto $bb3161;

  $bb3161:
    assume {:verifier.code 0} true;
    goto $bb3162;

  $bb3162:
    assume {:verifier.code 0} true;
    goto $bb3163;

  $bb3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} __const_udelay(4295000);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    goto $bb3164;

  $bb3164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} __const_udelay(4295000);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    goto $bb3165;

  $bb3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} __const_udelay(4295000);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    goto $bb3166;

  $bb3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} __const_udelay(4295000);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    goto $bb3167;

  $bb3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} __const_udelay(4295000);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    goto $bb3168;

  $bb3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} __const_udelay(4295000);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    goto $bb3169;

  $bb3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} __const_udelay(4295000);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    goto $bb3170;

  $bb3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} __const_udelay(4295000);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    goto $bb3171;

  $bb3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} __const_udelay(4295000);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    goto $bb3172;

  $bb3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3173;

  $bb3173:
    assume {:verifier.code 0} true;
    goto $bb3174;

  $bb3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} $i547 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i548 := $eq.i32($i544, $i547);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i548} true;
    goto $bb3175, $bb3176;

  $bb3176:
    assume {:verifier.code 0} true;
    assume !($i548 == 1);
    goto $bb3177;

  $bb3177:
    assume {:verifier.code 0} true;
    goto $bb3180;

  $bb3180:
    assume {:verifier.code 0} true;
    goto $bb3181;

  $bb3181:
    assume {:verifier.code 0} true;
    goto $bb3182;

  $bb3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} __const_udelay(4295000);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    goto $bb3183;

  $bb3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} __const_udelay(4295000);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    goto $bb3184;

  $bb3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} __const_udelay(4295000);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    goto $bb3185;

  $bb3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} __const_udelay(4295000);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    goto $bb3186;

  $bb3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} __const_udelay(4295000);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    goto $bb3187;

  $bb3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} __const_udelay(4295000);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    goto $bb3188;

  $bb3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} __const_udelay(4295000);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    goto $bb3189;

  $bb3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} __const_udelay(4295000);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    goto $bb3190;

  $bb3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} __const_udelay(4295000);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    goto $bb3191;

  $bb3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3192;

  $bb3192:
    assume {:verifier.code 0} true;
    goto $bb3193;

  $bb3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} $i550 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i551 := $eq.i32($i547, $i550);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i551} true;
    goto $bb3194, $bb3195;

  $bb3195:
    assume {:verifier.code 0} true;
    assume !($i551 == 1);
    goto $bb3196;

  $bb3196:
    assume {:verifier.code 0} true;
    goto $bb3199;

  $bb3199:
    assume {:verifier.code 0} true;
    goto $bb3200;

  $bb3200:
    assume {:verifier.code 0} true;
    goto $bb3201;

  $bb3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} __const_udelay(4295000);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    goto $bb3202;

  $bb3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} __const_udelay(4295000);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    goto $bb3203;

  $bb3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2867} __const_udelay(4295000);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    goto $bb3204;

  $bb3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} __const_udelay(4295000);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    goto $bb3205;

  $bb3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} __const_udelay(4295000);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    goto $bb3206;

  $bb3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} __const_udelay(4295000);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    goto $bb3207;

  $bb3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} __const_udelay(4295000);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    goto $bb3208;

  $bb3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} __const_udelay(4295000);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    goto $bb3209;

  $bb3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} __const_udelay(4295000);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    goto $bb3210;

  $bb3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3211;

  $bb3211:
    assume {:verifier.code 0} true;
    goto $bb3212;

  $bb3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} $i553 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i554 := $eq.i32($i550, $i553);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i554} true;
    goto $bb3213, $bb3214;

  $bb3214:
    assume {:verifier.code 0} true;
    assume !($i554 == 1);
    goto $bb3215;

  $bb3215:
    assume {:verifier.code 0} true;
    goto $bb3218;

  $bb3218:
    assume {:verifier.code 0} true;
    goto $bb3219;

  $bb3219:
    assume {:verifier.code 0} true;
    goto $bb3220;

  $bb3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} __const_udelay(4295000);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    goto $bb3221;

  $bb3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} __const_udelay(4295000);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    goto $bb3222;

  $bb3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} __const_udelay(4295000);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    goto $bb3223;

  $bb3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} __const_udelay(4295000);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    goto $bb3224;

  $bb3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} __const_udelay(4295000);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    goto $bb3225;

  $bb3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} __const_udelay(4295000);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    goto $bb3226;

  $bb3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} __const_udelay(4295000);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    goto $bb3227;

  $bb3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} __const_udelay(4295000);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    goto $bb3228;

  $bb3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} __const_udelay(4295000);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    goto $bb3229;

  $bb3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3230;

  $bb3230:
    assume {:verifier.code 0} true;
    goto $bb3231;

  $bb3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} $i556 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i557 := $eq.i32($i553, $i556);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i557} true;
    goto $bb3232, $bb3233;

  $bb3233:
    assume {:verifier.code 0} true;
    assume !($i557 == 1);
    goto $bb3234;

  $bb3234:
    assume {:verifier.code 0} true;
    goto $bb3237;

  $bb3237:
    assume {:verifier.code 0} true;
    goto $bb3238;

  $bb3238:
    assume {:verifier.code 0} true;
    goto $bb3239;

  $bb3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} __const_udelay(4295000);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    goto $bb3240;

  $bb3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} __const_udelay(4295000);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    goto $bb3241;

  $bb3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} __const_udelay(4295000);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    goto $bb3242;

  $bb3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} __const_udelay(4295000);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    goto $bb3243;

  $bb3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} __const_udelay(4295000);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    goto $bb3244;

  $bb3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} __const_udelay(4295000);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    goto $bb3245;

  $bb3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} __const_udelay(4295000);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    goto $bb3246;

  $bb3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} __const_udelay(4295000);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    goto $bb3247;

  $bb3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} __const_udelay(4295000);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    goto $bb3248;

  $bb3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3249;

  $bb3249:
    assume {:verifier.code 0} true;
    goto $bb3250;

  $bb3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} $i559 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i560 := $eq.i32($i556, $i559);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb3251, $bb3252;

  $bb3252:
    assume {:verifier.code 0} true;
    assume !($i560 == 1);
    goto $bb3253;

  $bb3253:
    assume {:verifier.code 0} true;
    goto $bb3256;

  $bb3256:
    assume {:verifier.code 0} true;
    goto $bb3257;

  $bb3257:
    assume {:verifier.code 0} true;
    goto $bb3258;

  $bb3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} __const_udelay(4295000);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    goto $bb3259;

  $bb3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} __const_udelay(4295000);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    goto $bb3260;

  $bb3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} __const_udelay(4295000);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    goto $bb3261;

  $bb3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} __const_udelay(4295000);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    goto $bb3262;

  $bb3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} __const_udelay(4295000);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    goto $bb3263;

  $bb3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} __const_udelay(4295000);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    goto $bb3264;

  $bb3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} __const_udelay(4295000);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    goto $bb3265;

  $bb3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} __const_udelay(4295000);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    goto $bb3266;

  $bb3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} __const_udelay(4295000);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    goto $bb3267;

  $bb3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3268;

  $bb3268:
    assume {:verifier.code 0} true;
    goto $bb3269;

  $bb3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} $i562 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i563 := $eq.i32($i559, $i562);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i563} true;
    goto $bb3270, $bb3271;

  $bb3271:
    assume {:verifier.code 0} true;
    assume !($i563 == 1);
    goto $bb3272;

  $bb3272:
    assume {:verifier.code 0} true;
    goto $bb3275;

  $bb3275:
    assume {:verifier.code 0} true;
    goto $bb3276;

  $bb3276:
    assume {:verifier.code 0} true;
    goto $bb3277;

  $bb3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} __const_udelay(4295000);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    goto $bb3278;

  $bb3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} __const_udelay(4295000);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    goto $bb3279;

  $bb3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} __const_udelay(4295000);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    goto $bb3280;

  $bb3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} __const_udelay(4295000);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    goto $bb3281;

  $bb3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} __const_udelay(4295000);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    goto $bb3282;

  $bb3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} __const_udelay(4295000);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    goto $bb3283;

  $bb3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} __const_udelay(4295000);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    goto $bb3284;

  $bb3284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} __const_udelay(4295000);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    goto $bb3285;

  $bb3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} __const_udelay(4295000);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    goto $bb3286;

  $bb3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3287;

  $bb3287:
    assume {:verifier.code 0} true;
    goto $bb3288;

  $bb3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} $i565 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i566 := $eq.i32($i562, $i565);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i566} true;
    goto $bb3289, $bb3290;

  $bb3290:
    assume {:verifier.code 0} true;
    assume !($i566 == 1);
    goto $bb3291;

  $bb3291:
    assume {:verifier.code 0} true;
    goto $bb3294;

  $bb3294:
    assume {:verifier.code 0} true;
    goto $bb3295;

  $bb3295:
    assume {:verifier.code 0} true;
    goto $bb3296;

  $bb3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} __const_udelay(4295000);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    goto $bb3297;

  $bb3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} __const_udelay(4295000);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    goto $bb3298;

  $bb3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} __const_udelay(4295000);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    goto $bb3299;

  $bb3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} __const_udelay(4295000);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    goto $bb3300;

  $bb3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} __const_udelay(4295000);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    goto $bb3301;

  $bb3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} __const_udelay(4295000);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    goto $bb3302;

  $bb3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} __const_udelay(4295000);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    goto $bb3303;

  $bb3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} __const_udelay(4295000);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    goto $bb3304;

  $bb3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} __const_udelay(4295000);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    goto $bb3305;

  $bb3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3306;

  $bb3306:
    assume {:verifier.code 0} true;
    goto $bb3307;

  $bb3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} $i568 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $i569 := $eq.i32($i565, $i568);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i569} true;
    goto $bb3308, $bb3309;

  $bb3309:
    assume {:verifier.code 0} true;
    assume !($i569 == 1);
    goto $bb3310;

  $bb3310:
    assume {:verifier.code 0} true;
    goto $bb3313;

  $bb3313:
    assume {:verifier.code 0} true;
    goto $bb3314;

  $bb3314:
    assume {:verifier.code 0} true;
    goto $bb3315;

  $bb3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} __const_udelay(4295000);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    goto $bb3316;

  $bb3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} __const_udelay(4295000);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    goto $bb3317;

  $bb3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} __const_udelay(4295000);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    goto $bb3318;

  $bb3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} __const_udelay(4295000);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    goto $bb3319;

  $bb3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} __const_udelay(4295000);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    goto $bb3320;

  $bb3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} __const_udelay(4295000);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    goto $bb3321;

  $bb3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} __const_udelay(4295000);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    goto $bb3322;

  $bb3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} __const_udelay(4295000);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    goto $bb3323;

  $bb3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} __const_udelay(4295000);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    goto $bb3324;

  $bb3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3325;

  $bb3325:
    assume {:verifier.code 0} true;
    goto $bb3326;

  $bb3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} $i571 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i572 := $eq.i32($i568, $i571);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb3327, $bb3328;

  $bb3328:
    assume {:verifier.code 0} true;
    assume !($i572 == 1);
    goto $bb3329;

  $bb3329:
    assume {:verifier.code 0} true;
    goto $bb3332;

  $bb3332:
    assume {:verifier.code 0} true;
    goto $bb3333;

  $bb3333:
    assume {:verifier.code 0} true;
    goto $bb3334;

  $bb3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} __const_udelay(4295000);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    goto $bb3335;

  $bb3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} __const_udelay(4295000);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    goto $bb3336;

  $bb3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} __const_udelay(4295000);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    goto $bb3337;

  $bb3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} __const_udelay(4295000);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    goto $bb3338;

  $bb3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} __const_udelay(4295000);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    goto $bb3339;

  $bb3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2947} __const_udelay(4295000);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    goto $bb3340;

  $bb3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} __const_udelay(4295000);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    goto $bb3341;

  $bb3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2949} __const_udelay(4295000);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    goto $bb3342;

  $bb3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} __const_udelay(4295000);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    goto $bb3343;

  $bb3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3344;

  $bb3344:
    assume {:verifier.code 0} true;
    goto $bb3345;

  $bb3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2952} $i574 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $i575 := $eq.i32($i571, $i574);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i575} true;
    goto $bb3346, $bb3347;

  $bb3347:
    assume {:verifier.code 0} true;
    assume !($i575 == 1);
    goto $bb3348;

  $bb3348:
    assume {:verifier.code 0} true;
    goto $bb3351;

  $bb3351:
    assume {:verifier.code 0} true;
    goto $bb3352;

  $bb3352:
    assume {:verifier.code 0} true;
    goto $bb3353;

  $bb3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2953} __const_udelay(4295000);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    goto $bb3354;

  $bb3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} __const_udelay(4295000);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    goto $bb3355;

  $bb3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2955} __const_udelay(4295000);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    goto $bb3356;

  $bb3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} __const_udelay(4295000);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    goto $bb3357;

  $bb3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} __const_udelay(4295000);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    goto $bb3358;

  $bb3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} __const_udelay(4295000);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    goto $bb3359;

  $bb3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2959} __const_udelay(4295000);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    goto $bb3360;

  $bb3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} __const_udelay(4295000);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    goto $bb3361;

  $bb3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2961} __const_udelay(4295000);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    goto $bb3362;

  $bb3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3363;

  $bb3363:
    assume {:verifier.code 0} true;
    goto $bb3364;

  $bb3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} $i577 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $i578 := $eq.i32($i574, $i577);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i578} true;
    goto $bb3365, $bb3366;

  $bb3366:
    assume {:verifier.code 0} true;
    assume !($i578 == 1);
    goto $bb3367;

  $bb3367:
    assume {:verifier.code 0} true;
    goto $bb3370;

  $bb3370:
    assume {:verifier.code 0} true;
    goto $bb3371;

  $bb3371:
    assume {:verifier.code 0} true;
    goto $bb3372;

  $bb3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2964} __const_udelay(4295000);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    goto $bb3373;

  $bb3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} __const_udelay(4295000);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    goto $bb3374;

  $bb3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} __const_udelay(4295000);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    goto $bb3375;

  $bb3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} __const_udelay(4295000);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    goto $bb3376;

  $bb3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2968} __const_udelay(4295000);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    goto $bb3377;

  $bb3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} __const_udelay(4295000);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    goto $bb3378;

  $bb3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} __const_udelay(4295000);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    goto $bb3379;

  $bb3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} __const_udelay(4295000);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    goto $bb3380;

  $bb3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2972} __const_udelay(4295000);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    goto $bb3381;

  $bb3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2973} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3382;

  $bb3382:
    assume {:verifier.code 0} true;
    goto $bb3383;

  $bb3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} $i580 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $i581 := $eq.i32($i577, $i580);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i581} true;
    goto $bb3384, $bb3385;

  $bb3385:
    assume {:verifier.code 0} true;
    assume !($i581 == 1);
    goto $bb3386;

  $bb3386:
    assume {:verifier.code 0} true;
    goto $bb3389;

  $bb3389:
    assume {:verifier.code 0} true;
    goto $bb3390;

  $bb3390:
    assume {:verifier.code 0} true;
    goto $bb3391;

  $bb3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} __const_udelay(4295000);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    goto $bb3392;

  $bb3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} __const_udelay(4295000);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    goto $bb3393;

  $bb3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} __const_udelay(4295000);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    goto $bb3394;

  $bb3394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} __const_udelay(4295000);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    goto $bb3395;

  $bb3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} __const_udelay(4295000);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    goto $bb3396;

  $bb3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} __const_udelay(4295000);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    goto $bb3397;

  $bb3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} __const_udelay(4295000);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    goto $bb3398;

  $bb3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} __const_udelay(4295000);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    goto $bb3399;

  $bb3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} __const_udelay(4295000);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    goto $bb3400;

  $bb3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3401;

  $bb3401:
    assume {:verifier.code 0} true;
    goto $bb3402;

  $bb3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} $i583 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $i584 := $eq.i32($i580, $i583);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb3403, $bb3404;

  $bb3404:
    assume {:verifier.code 0} true;
    assume !($i584 == 1);
    goto $bb3405;

  $bb3405:
    assume {:verifier.code 0} true;
    goto $bb3408;

  $bb3408:
    assume {:verifier.code 0} true;
    goto $bb3409;

  $bb3409:
    assume {:verifier.code 0} true;
    goto $bb3410;

  $bb3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2986} __const_udelay(4295000);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    goto $bb3411;

  $bb3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} __const_udelay(4295000);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    goto $bb3412;

  $bb3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} __const_udelay(4295000);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    goto $bb3413;

  $bb3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} __const_udelay(4295000);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    goto $bb3414;

  $bb3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} __const_udelay(4295000);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    goto $bb3415;

  $bb3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2991} __const_udelay(4295000);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    goto $bb3416;

  $bb3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} __const_udelay(4295000);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    goto $bb3417;

  $bb3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} __const_udelay(4295000);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    goto $bb3418;

  $bb3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} __const_udelay(4295000);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    goto $bb3419;

  $bb3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3420;

  $bb3420:
    assume {:verifier.code 0} true;
    goto $bb3421;

  $bb3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} $i586 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i583, $i586);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i587} true;
    goto $bb3422, $bb3423;

  $bb3423:
    assume {:verifier.code 0} true;
    assume !($i587 == 1);
    goto $bb3424;

  $bb3424:
    assume {:verifier.code 0} true;
    goto $bb3427;

  $bb3427:
    assume {:verifier.code 0} true;
    goto $bb3428;

  $bb3428:
    assume {:verifier.code 0} true;
    goto $bb3429;

  $bb3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2997} __const_udelay(4295000);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    goto $bb3430;

  $bb3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} __const_udelay(4295000);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    goto $bb3431;

  $bb3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} __const_udelay(4295000);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    goto $bb3432;

  $bb3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} __const_udelay(4295000);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    goto $bb3433;

  $bb3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} __const_udelay(4295000);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    goto $bb3434;

  $bb3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3002} __const_udelay(4295000);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    goto $bb3435;

  $bb3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} __const_udelay(4295000);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    goto $bb3436;

  $bb3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} __const_udelay(4295000);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    goto $bb3437;

  $bb3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3005} __const_udelay(4295000);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    goto $bb3438;

  $bb3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3439;

  $bb3439:
    assume {:verifier.code 0} true;
    goto $bb3440;

  $bb3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} $i589 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $i590 := $eq.i32($i586, $i589);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i590} true;
    goto $bb3441, $bb3442;

  $bb3442:
    assume {:verifier.code 0} true;
    assume !($i590 == 1);
    goto $bb3443;

  $bb3443:
    assume {:verifier.code 0} true;
    goto $bb3446;

  $bb3446:
    assume {:verifier.code 0} true;
    goto $bb3447;

  $bb3447:
    assume {:verifier.code 0} true;
    goto $bb3448;

  $bb3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3008} __const_udelay(4295000);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    goto $bb3449;

  $bb3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} __const_udelay(4295000);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    goto $bb3450;

  $bb3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} __const_udelay(4295000);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    goto $bb3451;

  $bb3451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3011} __const_udelay(4295000);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    goto $bb3452;

  $bb3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} __const_udelay(4295000);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    goto $bb3453;

  $bb3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} __const_udelay(4295000);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    goto $bb3454;

  $bb3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} __const_udelay(4295000);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    goto $bb3455;

  $bb3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3015} __const_udelay(4295000);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    goto $bb3456;

  $bb3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} __const_udelay(4295000);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    goto $bb3457;

  $bb3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3017} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3458;

  $bb3458:
    assume {:verifier.code 0} true;
    goto $bb3459;

  $bb3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} $i592 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $i593 := $eq.i32($i589, $i592);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i593} true;
    goto $bb3460, $bb3461;

  $bb3461:
    assume {:verifier.code 0} true;
    assume !($i593 == 1);
    goto $bb3462;

  $bb3462:
    assume {:verifier.code 0} true;
    goto $bb3465;

  $bb3465:
    assume {:verifier.code 0} true;
    goto $bb3466;

  $bb3466:
    assume {:verifier.code 0} true;
    goto $bb3467;

  $bb3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} __const_udelay(4295000);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    goto $bb3468;

  $bb3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3020} __const_udelay(4295000);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    goto $bb3469;

  $bb3469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3021} __const_udelay(4295000);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    goto $bb3470;

  $bb3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} __const_udelay(4295000);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    goto $bb3471;

  $bb3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3023} __const_udelay(4295000);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    goto $bb3472;

  $bb3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3024} __const_udelay(4295000);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    goto $bb3473;

  $bb3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} __const_udelay(4295000);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    goto $bb3474;

  $bb3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3026} __const_udelay(4295000);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    goto $bb3475;

  $bb3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3027} __const_udelay(4295000);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    goto $bb3476;

  $bb3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3028} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3477;

  $bb3477:
    assume {:verifier.code 0} true;
    goto $bb3478;

  $bb3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} $i595 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i596 := $eq.i32($i592, $i595);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i596} true;
    goto $bb3479, $bb3480;

  $bb3480:
    assume {:verifier.code 0} true;
    assume !($i596 == 1);
    goto $bb3481;

  $bb3481:
    assume {:verifier.code 0} true;
    goto $bb3484;

  $bb3484:
    assume {:verifier.code 0} true;
    goto $bb3485;

  $bb3485:
    assume {:verifier.code 0} true;
    goto $bb3486;

  $bb3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3030} __const_udelay(4295000);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    goto $bb3487;

  $bb3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} __const_udelay(4295000);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    goto $bb3488;

  $bb3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} __const_udelay(4295000);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    goto $bb3489;

  $bb3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3033} __const_udelay(4295000);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    goto $bb3490;

  $bb3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} __const_udelay(4295000);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    goto $bb3491;

  $bb3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} __const_udelay(4295000);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    goto $bb3492;

  $bb3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} __const_udelay(4295000);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    goto $bb3493;

  $bb3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3037} __const_udelay(4295000);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    goto $bb3494;

  $bb3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} __const_udelay(4295000);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    goto $bb3495;

  $bb3495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3039} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3496;

  $bb3496:
    assume {:verifier.code 0} true;
    goto $bb3497;

  $bb3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3040} $i598 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $i599 := $eq.i32($i595, $i598);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i599} true;
    goto $bb3498, $bb3499;

  $bb3499:
    assume {:verifier.code 0} true;
    assume !($i599 == 1);
    goto $bb3500;

  $bb3500:
    assume {:verifier.code 0} true;
    goto $bb3503;

  $bb3503:
    assume {:verifier.code 0} true;
    goto $bb3504;

  $bb3504:
    assume {:verifier.code 0} true;
    goto $bb3505;

  $bb3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3041} __const_udelay(4295000);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    goto $bb3506;

  $bb3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} __const_udelay(4295000);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    goto $bb3507;

  $bb3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3043} __const_udelay(4295000);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    goto $bb3508;

  $bb3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} __const_udelay(4295000);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    goto $bb3509;

  $bb3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3045} __const_udelay(4295000);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    goto $bb3510;

  $bb3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3046} __const_udelay(4295000);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    goto $bb3511;

  $bb3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3047} __const_udelay(4295000);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    goto $bb3512;

  $bb3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3048} __const_udelay(4295000);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    goto $bb3513;

  $bb3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3049} __const_udelay(4295000);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    goto $bb3514;

  $bb3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3515;

  $bb3515:
    assume {:verifier.code 0} true;
    goto $bb3516;

  $bb3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3051} $i601 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $i602 := $eq.i32($i598, $i601);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb3517, $bb3518;

  $bb3518:
    assume {:verifier.code 0} true;
    assume !($i602 == 1);
    goto $bb3519;

  $bb3519:
    assume {:verifier.code 0} true;
    goto $bb3522;

  $bb3522:
    assume {:verifier.code 0} true;
    goto $bb3523;

  $bb3523:
    assume {:verifier.code 0} true;
    goto $bb3524;

  $bb3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3052} __const_udelay(4295000);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    goto $bb3525;

  $bb3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3053} __const_udelay(4295000);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    goto $bb3526;

  $bb3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} __const_udelay(4295000);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    goto $bb3527;

  $bb3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3055} __const_udelay(4295000);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    goto $bb3528;

  $bb3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} __const_udelay(4295000);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    goto $bb3529;

  $bb3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} __const_udelay(4295000);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    goto $bb3530;

  $bb3530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} __const_udelay(4295000);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    goto $bb3531;

  $bb3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} __const_udelay(4295000);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    goto $bb3532;

  $bb3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3060} __const_udelay(4295000);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    goto $bb3533;

  $bb3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3534;

  $bb3534:
    assume {:verifier.code 0} true;
    goto $bb3535;

  $bb3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} $i604 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $i605 := $eq.i32($i601, $i604);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i605} true;
    goto $bb3536, $bb3537;

  $bb3537:
    assume {:verifier.code 0} true;
    assume !($i605 == 1);
    goto $bb3538;

  $bb3538:
    assume {:verifier.code 0} true;
    goto $bb3541;

  $bb3541:
    assume {:verifier.code 0} true;
    goto $bb3542;

  $bb3542:
    assume {:verifier.code 0} true;
    goto $bb3543;

  $bb3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3063} __const_udelay(4295000);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    goto $bb3544;

  $bb3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3064} __const_udelay(4295000);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    goto $bb3545;

  $bb3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} __const_udelay(4295000);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    goto $bb3546;

  $bb3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} __const_udelay(4295000);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    goto $bb3547;

  $bb3547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3067} __const_udelay(4295000);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    goto $bb3548;

  $bb3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} __const_udelay(4295000);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    goto $bb3549;

  $bb3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3069} __const_udelay(4295000);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    goto $bb3550;

  $bb3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} __const_udelay(4295000);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    goto $bb3551;

  $bb3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3071} __const_udelay(4295000);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    goto $bb3552;

  $bb3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3072} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3553;

  $bb3553:
    assume {:verifier.code 0} true;
    goto $bb3554;

  $bb3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3073} $i607 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i608 := $eq.i32($i604, $i607);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i608} true;
    goto $bb3555, $bb3556;

  $bb3556:
    assume {:verifier.code 0} true;
    assume !($i608 == 1);
    goto $bb3557;

  $bb3557:
    assume {:verifier.code 0} true;
    goto $bb3560;

  $bb3560:
    assume {:verifier.code 0} true;
    goto $bb3561;

  $bb3561:
    assume {:verifier.code 0} true;
    goto $bb3562;

  $bb3562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3074} __const_udelay(4295000);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    goto $bb3563;

  $bb3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} __const_udelay(4295000);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    goto $bb3564;

  $bb3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3076} __const_udelay(4295000);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    goto $bb3565;

  $bb3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3077} __const_udelay(4295000);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    goto $bb3566;

  $bb3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3078} __const_udelay(4295000);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    goto $bb3567;

  $bb3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} __const_udelay(4295000);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    goto $bb3568;

  $bb3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3080} __const_udelay(4295000);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    goto $bb3569;

  $bb3569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} __const_udelay(4295000);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    goto $bb3570;

  $bb3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3082} __const_udelay(4295000);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    goto $bb3571;

  $bb3571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3083} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3572;

  $bb3572:
    assume {:verifier.code 0} true;
    goto $bb3573;

  $bb3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3084} $i610 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i611 := $eq.i32($i607, $i610);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i611} true;
    goto $bb3574, $bb3575;

  $bb3575:
    assume {:verifier.code 0} true;
    assume !($i611 == 1);
    goto $bb3576;

  $bb3576:
    assume {:verifier.code 0} true;
    goto $bb3579;

  $bb3579:
    assume {:verifier.code 0} true;
    goto $bb3580;

  $bb3580:
    assume {:verifier.code 0} true;
    goto $bb3581;

  $bb3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3085} __const_udelay(4295000);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    goto $bb3582;

  $bb3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3086} __const_udelay(4295000);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    goto $bb3583;

  $bb3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3087} __const_udelay(4295000);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    goto $bb3584;

  $bb3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} __const_udelay(4295000);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    goto $bb3585;

  $bb3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3089} __const_udelay(4295000);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    goto $bb3586;

  $bb3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3090} __const_udelay(4295000);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    goto $bb3587;

  $bb3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3091} __const_udelay(4295000);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    goto $bb3588;

  $bb3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} __const_udelay(4295000);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    goto $bb3589;

  $bb3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3093} __const_udelay(4295000);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    goto $bb3590;

  $bb3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3591;

  $bb3591:
    assume {:verifier.code 0} true;
    goto $bb3592;

  $bb3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3095} $i613 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i614 := $eq.i32($i610, $i613);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i614} true;
    goto $bb3593, $bb3594;

  $bb3594:
    assume {:verifier.code 0} true;
    assume !($i614 == 1);
    goto $bb3595;

  $bb3595:
    assume {:verifier.code 0} true;
    goto $bb3598;

  $bb3598:
    assume {:verifier.code 0} true;
    goto $bb3599;

  $bb3599:
    assume {:verifier.code 0} true;
    goto $bb3600;

  $bb3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3096} __const_udelay(4295000);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    goto $bb3601;

  $bb3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} __const_udelay(4295000);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    goto $bb3602;

  $bb3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3098} __const_udelay(4295000);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    goto $bb3603;

  $bb3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3099} __const_udelay(4295000);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    goto $bb3604;

  $bb3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3100} __const_udelay(4295000);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    goto $bb3605;

  $bb3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} __const_udelay(4295000);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    goto $bb3606;

  $bb3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3102} __const_udelay(4295000);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    goto $bb3607;

  $bb3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3103} __const_udelay(4295000);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    goto $bb3608;

  $bb3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} __const_udelay(4295000);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    goto $bb3609;

  $bb3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3105} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3610;

  $bb3610:
    assume {:verifier.code 0} true;
    goto $bb3611;

  $bb3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} $i616 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i617 := $eq.i32($i613, $i616);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i617} true;
    goto $bb3612, $bb3613;

  $bb3613:
    assume {:verifier.code 0} true;
    assume !($i617 == 1);
    goto $bb3614;

  $bb3614:
    assume {:verifier.code 0} true;
    goto $bb3617;

  $bb3617:
    assume {:verifier.code 0} true;
    goto $bb3618;

  $bb3618:
    assume {:verifier.code 0} true;
    goto $bb3619;

  $bb3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3107} __const_udelay(4295000);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    goto $bb3620;

  $bb3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} __const_udelay(4295000);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    goto $bb3621;

  $bb3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3109} __const_udelay(4295000);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    goto $bb3622;

  $bb3622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3110} __const_udelay(4295000);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    goto $bb3623;

  $bb3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3111} __const_udelay(4295000);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    goto $bb3624;

  $bb3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3112} __const_udelay(4295000);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    goto $bb3625;

  $bb3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3113} __const_udelay(4295000);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    goto $bb3626;

  $bb3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3114} __const_udelay(4295000);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    goto $bb3627;

  $bb3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3115} __const_udelay(4295000);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    goto $bb3628;

  $bb3628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3116} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3629;

  $bb3629:
    assume {:verifier.code 0} true;
    goto $bb3630;

  $bb3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3117} $i619 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $i620 := $eq.i32($i616, $i619);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i620} true;
    goto $bb3631, $bb3632;

  $bb3632:
    assume {:verifier.code 0} true;
    assume !($i620 == 1);
    goto $bb3633;

  $bb3633:
    assume {:verifier.code 0} true;
    goto $bb3636;

  $bb3636:
    assume {:verifier.code 0} true;
    goto $bb3637;

  $bb3637:
    assume {:verifier.code 0} true;
    goto $bb3638;

  $bb3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3118} __const_udelay(4295000);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    goto $bb3639;

  $bb3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3119} __const_udelay(4295000);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    goto $bb3640;

  $bb3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3120} __const_udelay(4295000);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    goto $bb3641;

  $bb3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3121} __const_udelay(4295000);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    goto $bb3642;

  $bb3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3122} __const_udelay(4295000);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    goto $bb3643;

  $bb3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3123} __const_udelay(4295000);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    goto $bb3644;

  $bb3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3124} __const_udelay(4295000);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    goto $bb3645;

  $bb3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} __const_udelay(4295000);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    goto $bb3646;

  $bb3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3126} __const_udelay(4295000);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    goto $bb3647;

  $bb3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3127} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3648;

  $bb3648:
    assume {:verifier.code 0} true;
    goto $bb3649;

  $bb3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} $i622 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $i623 := $eq.i32($i619, $i622);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i623} true;
    goto $bb3650, $bb3651;

  $bb3651:
    assume {:verifier.code 0} true;
    assume !($i623 == 1);
    goto $bb3652;

  $bb3652:
    assume {:verifier.code 0} true;
    goto $bb3655;

  $bb3655:
    assume {:verifier.code 0} true;
    goto $bb3656;

  $bb3656:
    assume {:verifier.code 0} true;
    goto $bb3657;

  $bb3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3129} __const_udelay(4295000);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    goto $bb3658;

  $bb3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} __const_udelay(4295000);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    goto $bb3659;

  $bb3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} __const_udelay(4295000);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    goto $bb3660;

  $bb3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} __const_udelay(4295000);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    goto $bb3661;

  $bb3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3133} __const_udelay(4295000);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    goto $bb3662;

  $bb3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3134} __const_udelay(4295000);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    goto $bb3663;

  $bb3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3135} __const_udelay(4295000);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    goto $bb3664;

  $bb3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3136} __const_udelay(4295000);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    goto $bb3665;

  $bb3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3137} __const_udelay(4295000);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    goto $bb3666;

  $bb3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3138} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3667;

  $bb3667:
    assume {:verifier.code 0} true;
    goto $bb3668;

  $bb3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} $i625 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i626 := $eq.i32($i622, $i625);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i626} true;
    goto $bb3669, $bb3670;

  $bb3670:
    assume {:verifier.code 0} true;
    assume !($i626 == 1);
    goto $bb3671;

  $bb3671:
    assume {:verifier.code 0} true;
    goto $bb3674;

  $bb3674:
    assume {:verifier.code 0} true;
    goto $bb3675;

  $bb3675:
    assume {:verifier.code 0} true;
    goto $bb3676;

  $bb3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} __const_udelay(4295000);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    goto $bb3677;

  $bb3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3141} __const_udelay(4295000);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    goto $bb3678;

  $bb3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3142} __const_udelay(4295000);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    goto $bb3679;

  $bb3679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3143} __const_udelay(4295000);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    goto $bb3680;

  $bb3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3144} __const_udelay(4295000);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    goto $bb3681;

  $bb3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3145} __const_udelay(4295000);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    goto $bb3682;

  $bb3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3146} __const_udelay(4295000);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    goto $bb3683;

  $bb3683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3147} __const_udelay(4295000);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    goto $bb3684;

  $bb3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} __const_udelay(4295000);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    goto $bb3685;

  $bb3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3149} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3686;

  $bb3686:
    assume {:verifier.code 0} true;
    goto $bb3687;

  $bb3687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3150} $i628 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $i629 := $eq.i32($i625, $i628);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i629} true;
    goto $bb3688, $bb3689;

  $bb3689:
    assume {:verifier.code 0} true;
    assume !($i629 == 1);
    goto $bb3690;

  $bb3690:
    assume {:verifier.code 0} true;
    goto $bb3693;

  $bb3693:
    assume {:verifier.code 0} true;
    goto $bb3694;

  $bb3694:
    assume {:verifier.code 0} true;
    goto $bb3695;

  $bb3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3151} __const_udelay(4295000);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    goto $bb3696;

  $bb3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3152} __const_udelay(4295000);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    goto $bb3697;

  $bb3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3153} __const_udelay(4295000);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    goto $bb3698;

  $bb3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3154} __const_udelay(4295000);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    goto $bb3699;

  $bb3699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3155} __const_udelay(4295000);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    goto $bb3700;

  $bb3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3156} __const_udelay(4295000);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    goto $bb3701;

  $bb3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3157} __const_udelay(4295000);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    goto $bb3702;

  $bb3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3158} __const_udelay(4295000);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    goto $bb3703;

  $bb3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3159} __const_udelay(4295000);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    goto $bb3704;

  $bb3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3160} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3705;

  $bb3705:
    assume {:verifier.code 0} true;
    goto $bb3706;

  $bb3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3161} $i631 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i632 := $eq.i32($i628, $i631);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i632} true;
    goto $bb3707, $bb3708;

  $bb3708:
    assume {:verifier.code 0} true;
    assume !($i632 == 1);
    goto $bb3709;

  $bb3709:
    assume {:verifier.code 0} true;
    goto $bb3712;

  $bb3712:
    assume {:verifier.code 0} true;
    goto $bb3713;

  $bb3713:
    assume {:verifier.code 0} true;
    goto $bb3714;

  $bb3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3162} __const_udelay(4295000);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    goto $bb3715;

  $bb3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3163} __const_udelay(4295000);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    goto $bb3716;

  $bb3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3164} __const_udelay(4295000);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    goto $bb3717;

  $bb3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} __const_udelay(4295000);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    goto $bb3718;

  $bb3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3166} __const_udelay(4295000);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    goto $bb3719;

  $bb3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3167} __const_udelay(4295000);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    goto $bb3720;

  $bb3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} __const_udelay(4295000);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    goto $bb3721;

  $bb3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} __const_udelay(4295000);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    goto $bb3722;

  $bb3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3170} __const_udelay(4295000);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    goto $bb3723;

  $bb3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3171} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3724;

  $bb3724:
    assume {:verifier.code 0} true;
    goto $bb3725;

  $bb3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3172} $i634 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $i635 := $eq.i32($i631, $i634);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i635} true;
    goto $bb3726, $bb3727;

  $bb3727:
    assume {:verifier.code 0} true;
    assume !($i635 == 1);
    goto $bb3728;

  $bb3728:
    assume {:verifier.code 0} true;
    goto $bb3731;

  $bb3731:
    assume {:verifier.code 0} true;
    goto $bb3732;

  $bb3732:
    assume {:verifier.code 0} true;
    goto $bb3733;

  $bb3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} __const_udelay(4295000);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    goto $bb3734;

  $bb3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3174} __const_udelay(4295000);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    goto $bb3735;

  $bb3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} __const_udelay(4295000);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    goto $bb3736;

  $bb3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3176} __const_udelay(4295000);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    goto $bb3737;

  $bb3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3177} __const_udelay(4295000);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    goto $bb3738;

  $bb3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3178} __const_udelay(4295000);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    goto $bb3739;

  $bb3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3179} __const_udelay(4295000);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    goto $bb3740;

  $bb3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3180} __const_udelay(4295000);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    goto $bb3741;

  $bb3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3181} __const_udelay(4295000);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    goto $bb3742;

  $bb3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3182} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3743;

  $bb3743:
    assume {:verifier.code 0} true;
    goto $bb3744;

  $bb3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3183} $i637 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $i638 := $eq.i32($i634, $i637);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i638} true;
    goto $bb3745, $bb3746;

  $bb3746:
    assume {:verifier.code 0} true;
    assume !($i638 == 1);
    goto $bb3747;

  $bb3747:
    assume {:verifier.code 0} true;
    goto $bb3750;

  $bb3750:
    assume {:verifier.code 0} true;
    goto $bb3751;

  $bb3751:
    assume {:verifier.code 0} true;
    goto $bb3752;

  $bb3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3184} __const_udelay(4295000);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    goto $bb3753;

  $bb3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3185} __const_udelay(4295000);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    goto $bb3754;

  $bb3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} __const_udelay(4295000);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    goto $bb3755;

  $bb3755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3187} __const_udelay(4295000);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    goto $bb3756;

  $bb3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} __const_udelay(4295000);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    goto $bb3757;

  $bb3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3189} __const_udelay(4295000);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    goto $bb3758;

  $bb3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3190} __const_udelay(4295000);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    goto $bb3759;

  $bb3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} __const_udelay(4295000);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    goto $bb3760;

  $bb3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} __const_udelay(4295000);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    goto $bb3761;

  $bb3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3193} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3762;

  $bb3762:
    assume {:verifier.code 0} true;
    goto $bb3763;

  $bb3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} $i640 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $i641 := $eq.i32($i637, $i640);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i641} true;
    goto $bb3764, $bb3765;

  $bb3765:
    assume {:verifier.code 0} true;
    assume !($i641 == 1);
    goto $bb3766;

  $bb3766:
    assume {:verifier.code 0} true;
    goto $bb3769;

  $bb3769:
    assume {:verifier.code 0} true;
    goto $bb3770;

  $bb3770:
    assume {:verifier.code 0} true;
    goto $bb3771;

  $bb3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} __const_udelay(4295000);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    goto $bb3772;

  $bb3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3196} __const_udelay(4295000);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    goto $bb3773;

  $bb3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3197} __const_udelay(4295000);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    goto $bb3774;

  $bb3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} __const_udelay(4295000);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    goto $bb3775;

  $bb3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3199} __const_udelay(4295000);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    goto $bb3776;

  $bb3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} __const_udelay(4295000);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    goto $bb3777;

  $bb3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3201} __const_udelay(4295000);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    goto $bb3778;

  $bb3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3202} __const_udelay(4295000);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    goto $bb3779;

  $bb3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} __const_udelay(4295000);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    goto $bb3780;

  $bb3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3781;

  $bb3781:
    assume {:verifier.code 0} true;
    goto $bb3782;

  $bb3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} $i643 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $i644 := $eq.i32($i640, $i643);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i644} true;
    goto $bb3783, $bb3784;

  $bb3784:
    assume {:verifier.code 0} true;
    assume !($i644 == 1);
    goto $bb3785;

  $bb3785:
    assume {:verifier.code 0} true;
    goto $bb3788;

  $bb3788:
    assume {:verifier.code 0} true;
    goto $bb3789;

  $bb3789:
    assume {:verifier.code 0} true;
    goto $bb3790;

  $bb3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3206} __const_udelay(4295000);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    goto $bb3791;

  $bb3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} __const_udelay(4295000);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    goto $bb3792;

  $bb3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3208} __const_udelay(4295000);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    goto $bb3793;

  $bb3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3209} __const_udelay(4295000);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    goto $bb3794;

  $bb3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3210} __const_udelay(4295000);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    goto $bb3795;

  $bb3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3211} __const_udelay(4295000);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    goto $bb3796;

  $bb3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3212} __const_udelay(4295000);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb3797;

  $bb3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3213} __const_udelay(4295000);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    goto $bb3798;

  $bb3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3214} __const_udelay(4295000);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    goto $bb3799;

  $bb3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3215} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3800;

  $bb3800:
    assume {:verifier.code 0} true;
    goto $bb3801;

  $bb3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3216} $i646 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i647 := $eq.i32($i643, $i646);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i647} true;
    goto $bb3802, $bb3803;

  $bb3803:
    assume {:verifier.code 0} true;
    assume !($i647 == 1);
    goto $bb3804;

  $bb3804:
    assume {:verifier.code 0} true;
    goto $bb3807;

  $bb3807:
    assume {:verifier.code 0} true;
    goto $bb3808;

  $bb3808:
    assume {:verifier.code 0} true;
    goto $bb3809;

  $bb3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3217} __const_udelay(4295000);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    goto $bb3810;

  $bb3810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3218} __const_udelay(4295000);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    goto $bb3811;

  $bb3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3219} __const_udelay(4295000);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    goto $bb3812;

  $bb3812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3220} __const_udelay(4295000);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    goto $bb3813;

  $bb3813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3221} __const_udelay(4295000);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    goto $bb3814;

  $bb3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3222} __const_udelay(4295000);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    goto $bb3815;

  $bb3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3223} __const_udelay(4295000);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    goto $bb3816;

  $bb3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3224} __const_udelay(4295000);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    goto $bb3817;

  $bb3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3225} __const_udelay(4295000);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    goto $bb3818;

  $bb3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3226} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3819;

  $bb3819:
    assume {:verifier.code 0} true;
    goto $bb3820;

  $bb3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3227} $i649 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $i650 := $eq.i32($i646, $i649);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i650} true;
    goto $bb3821, $bb3822;

  $bb3822:
    assume {:verifier.code 0} true;
    assume !($i650 == 1);
    goto $bb3823;

  $bb3823:
    assume {:verifier.code 0} true;
    goto $bb3826;

  $bb3826:
    assume {:verifier.code 0} true;
    goto $bb3827;

  $bb3827:
    assume {:verifier.code 0} true;
    goto $bb3828;

  $bb3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3228} __const_udelay(4295000);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    goto $bb3829;

  $bb3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3229} __const_udelay(4295000);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    goto $bb3830;

  $bb3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} __const_udelay(4295000);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    goto $bb3831;

  $bb3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3231} __const_udelay(4295000);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    goto $bb3832;

  $bb3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} __const_udelay(4295000);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    goto $bb3833;

  $bb3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3233} __const_udelay(4295000);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    goto $bb3834;

  $bb3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} __const_udelay(4295000);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    goto $bb3835;

  $bb3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} __const_udelay(4295000);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    goto $bb3836;

  $bb3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} __const_udelay(4295000);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    goto $bb3837;

  $bb3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3237} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3838;

  $bb3838:
    assume {:verifier.code 0} true;
    goto $bb3839;

  $bb3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} $i652 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $i653 := $eq.i32($i649, $i652);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb3840, $bb3841;

  $bb3841:
    assume {:verifier.code 0} true;
    assume !($i653 == 1);
    goto $bb3842;

  $bb3842:
    assume {:verifier.code 0} true;
    goto $bb3845;

  $bb3845:
    assume {:verifier.code 0} true;
    goto $bb3846;

  $bb3846:
    assume {:verifier.code 0} true;
    goto $bb3847;

  $bb3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3239} __const_udelay(4295000);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    goto $bb3848;

  $bb3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} __const_udelay(4295000);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    goto $bb3849;

  $bb3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3241} __const_udelay(4295000);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    goto $bb3850;

  $bb3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} __const_udelay(4295000);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    goto $bb3851;

  $bb3851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3243} __const_udelay(4295000);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    goto $bb3852;

  $bb3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} __const_udelay(4295000);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    goto $bb3853;

  $bb3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} __const_udelay(4295000);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    goto $bb3854;

  $bb3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3246} __const_udelay(4295000);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    goto $bb3855;

  $bb3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} __const_udelay(4295000);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    goto $bb3856;

  $bb3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3857;

  $bb3857:
    assume {:verifier.code 0} true;
    goto $bb3858;

  $bb3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3249} $i655 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i656 := $eq.i32($i652, $i655);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb3859, $bb3860;

  $bb3860:
    assume {:verifier.code 0} true;
    assume !($i656 == 1);
    goto $bb3861;

  $bb3861:
    assume {:verifier.code 0} true;
    goto $bb3864;

  $bb3864:
    assume {:verifier.code 0} true;
    goto $bb3865;

  $bb3865:
    assume {:verifier.code 0} true;
    goto $bb3866;

  $bb3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} __const_udelay(4295000);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    goto $bb3867;

  $bb3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3251} __const_udelay(4295000);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    goto $bb3868;

  $bb3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3252} __const_udelay(4295000);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    goto $bb3869;

  $bb3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} __const_udelay(4295000);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    goto $bb3870;

  $bb3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} __const_udelay(4295000);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    goto $bb3871;

  $bb3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3255} __const_udelay(4295000);
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    goto $bb3872;

  $bb3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3256} __const_udelay(4295000);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    goto $bb3873;

  $bb3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} __const_udelay(4295000);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    goto $bb3874;

  $bb3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} __const_udelay(4295000);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    goto $bb3875;

  $bb3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3876;

  $bb3876:
    assume {:verifier.code 0} true;
    goto $bb3877;

  $bb3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} $i658 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $i659 := $eq.i32($i655, $i658);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i659} true;
    goto $bb3878, $bb3879;

  $bb3879:
    assume {:verifier.code 0} true;
    assume !($i659 == 1);
    goto $bb3880;

  $bb3880:
    assume {:verifier.code 0} true;
    goto $bb3883;

  $bb3883:
    assume {:verifier.code 0} true;
    goto $bb3884;

  $bb3884:
    assume {:verifier.code 0} true;
    goto $bb3885;

  $bb3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} __const_udelay(4295000);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto $bb3886;

  $bb3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3262} __const_udelay(4295000);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    goto $bb3887;

  $bb3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} __const_udelay(4295000);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    goto $bb3888;

  $bb3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} __const_udelay(4295000);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    goto $bb3889;

  $bb3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3265} __const_udelay(4295000);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    goto $bb3890;

  $bb3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} __const_udelay(4295000);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    goto $bb3891;

  $bb3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3267} __const_udelay(4295000);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    goto $bb3892;

  $bb3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} __const_udelay(4295000);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    goto $bb3893;

  $bb3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} __const_udelay(4295000);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    goto $bb3894;

  $bb3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3270} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3895;

  $bb3895:
    assume {:verifier.code 0} true;
    goto $bb3896;

  $bb3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3271} $i661 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $i662 := $eq.i32($i658, $i661);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i662} true;
    goto $bb3897, $bb3898;

  $bb3898:
    assume {:verifier.code 0} true;
    assume !($i662 == 1);
    goto $bb3899;

  $bb3899:
    assume {:verifier.code 0} true;
    goto $bb3902;

  $bb3902:
    assume {:verifier.code 0} true;
    goto $bb3903;

  $bb3903:
    assume {:verifier.code 0} true;
    goto $bb3904;

  $bb3904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} __const_udelay(4295000);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    goto $bb3905;

  $bb3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} __const_udelay(4295000);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    goto $bb3906;

  $bb3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3274} __const_udelay(4295000);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    goto $bb3907;

  $bb3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} __const_udelay(4295000);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    goto $bb3908;

  $bb3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} __const_udelay(4295000);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    goto $bb3909;

  $bb3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3277} __const_udelay(4295000);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    goto $bb3910;

  $bb3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} __const_udelay(4295000);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    goto $bb3911;

  $bb3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} __const_udelay(4295000);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    goto $bb3912;

  $bb3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} __const_udelay(4295000);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    goto $bb3913;

  $bb3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3914;

  $bb3914:
    assume {:verifier.code 0} true;
    goto $bb3915;

  $bb3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} $i664 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i665 := $eq.i32($i661, $i664);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i665} true;
    goto $bb3916, $bb3917;

  $bb3917:
    assume {:verifier.code 0} true;
    assume !($i665 == 1);
    goto $bb3918;

  $bb3918:
    assume {:verifier.code 0} true;
    goto $bb3921;

  $bb3921:
    assume {:verifier.code 0} true;
    goto $bb3922;

  $bb3922:
    assume {:verifier.code 0} true;
    goto $bb3923;

  $bb3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} __const_udelay(4295000);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    goto $bb3924;

  $bb3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} __const_udelay(4295000);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    goto $bb3925;

  $bb3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3285} __const_udelay(4295000);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    goto $bb3926;

  $bb3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} __const_udelay(4295000);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    goto $bb3927;

  $bb3927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} __const_udelay(4295000);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    goto $bb3928;

  $bb3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3288} __const_udelay(4295000);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    goto $bb3929;

  $bb3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3289} __const_udelay(4295000);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    goto $bb3930;

  $bb3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3290} __const_udelay(4295000);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    goto $bb3931;

  $bb3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} __const_udelay(4295000);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    goto $bb3932;

  $bb3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3292} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3933;

  $bb3933:
    assume {:verifier.code 0} true;
    goto $bb3934;

  $bb3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3293} $i667 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $i668 := $eq.i32($i664, $i667);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i668} true;
    goto $bb3935, $bb3936;

  $bb3936:
    assume {:verifier.code 0} true;
    assume !($i668 == 1);
    goto $bb3937;

  $bb3937:
    assume {:verifier.code 0} true;
    goto $bb3940;

  $bb3940:
    assume {:verifier.code 0} true;
    goto $bb3941;

  $bb3941:
    assume {:verifier.code 0} true;
    goto $bb3942;

  $bb3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} __const_udelay(4295000);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    goto $bb3943;

  $bb3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3295} __const_udelay(4295000);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    goto $bb3944;

  $bb3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3296} __const_udelay(4295000);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    goto $bb3945;

  $bb3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} __const_udelay(4295000);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    goto $bb3946;

  $bb3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3298} __const_udelay(4295000);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    goto $bb3947;

  $bb3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} __const_udelay(4295000);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    goto $bb3948;

  $bb3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3300} __const_udelay(4295000);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    goto $bb3949;

  $bb3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3301} __const_udelay(4295000);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    goto $bb3950;

  $bb3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3302} __const_udelay(4295000);
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    goto $bb3951;

  $bb3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3952;

  $bb3952:
    assume {:verifier.code 0} true;
    goto $bb3953;

  $bb3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3304} $i670 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $i671 := $eq.i32($i667, $i670);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i671} true;
    goto $bb3954, $bb3955;

  $bb3955:
    assume {:verifier.code 0} true;
    assume !($i671 == 1);
    goto $bb3956;

  $bb3956:
    assume {:verifier.code 0} true;
    goto $bb3959;

  $bb3959:
    assume {:verifier.code 0} true;
    goto $bb3960;

  $bb3960:
    assume {:verifier.code 0} true;
    goto $bb3961;

  $bb3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3305} __const_udelay(4295000);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    goto $bb3962;

  $bb3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} __const_udelay(4295000);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    goto $bb3963;

  $bb3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} __const_udelay(4295000);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    goto $bb3964;

  $bb3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3308} __const_udelay(4295000);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    goto $bb3965;

  $bb3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3309} __const_udelay(4295000);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    goto $bb3966;

  $bb3966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} __const_udelay(4295000);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    goto $bb3967;

  $bb3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} __const_udelay(4295000);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    goto $bb3968;

  $bb3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3312} __const_udelay(4295000);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    goto $bb3969;

  $bb3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} __const_udelay(4295000);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    goto $bb3970;

  $bb3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3971;

  $bb3971:
    assume {:verifier.code 0} true;
    goto $bb3972;

  $bb3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3315} $i673 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $i674 := $eq.i32($i670, $i673);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i674} true;
    goto $bb3973, $bb3974;

  $bb3974:
    assume {:verifier.code 0} true;
    assume !($i674 == 1);
    goto $bb3975;

  $bb3975:
    assume {:verifier.code 0} true;
    goto $bb3978;

  $bb3978:
    assume {:verifier.code 0} true;
    goto $bb3979;

  $bb3979:
    assume {:verifier.code 0} true;
    goto $bb3980;

  $bb3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3316} __const_udelay(4295000);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    goto $bb3981;

  $bb3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3317} __const_udelay(4295000);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    goto $bb3982;

  $bb3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} __const_udelay(4295000);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    goto $bb3983;

  $bb3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3319} __const_udelay(4295000);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    goto $bb3984;

  $bb3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} __const_udelay(4295000);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    goto $bb3985;

  $bb3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3321} __const_udelay(4295000);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    goto $bb3986;

  $bb3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} __const_udelay(4295000);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    goto $bb3987;

  $bb3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3323} __const_udelay(4295000);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    goto $bb3988;

  $bb3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} __const_udelay(4295000);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    goto $bb3989;

  $bb3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3325} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3990;

  $bb3990:
    assume {:verifier.code 0} true;
    goto $bb3991;

  $bb3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} $i676 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i677 := $eq.i32($i673, $i676);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i677} true;
    goto $bb3992, $bb3993;

  $bb3993:
    assume {:verifier.code 0} true;
    assume !($i677 == 1);
    goto $bb3994;

  $bb3994:
    assume {:verifier.code 0} true;
    goto $bb3997;

  $bb3997:
    assume {:verifier.code 0} true;
    goto $bb3998;

  $bb3998:
    assume {:verifier.code 0} true;
    goto $bb3999;

  $bb3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3327} __const_udelay(4295000);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    goto $bb4000;

  $bb4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} __const_udelay(4295000);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    goto $bb4001;

  $bb4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3329} __const_udelay(4295000);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    goto $bb4002;

  $bb4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3330} __const_udelay(4295000);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    goto $bb4003;

  $bb4003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3331} __const_udelay(4295000);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    goto $bb4004;

  $bb4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} __const_udelay(4295000);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    goto $bb4005;

  $bb4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3333} __const_udelay(4295000);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    goto $bb4006;

  $bb4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3334} __const_udelay(4295000);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    goto $bb4007;

  $bb4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3335} __const_udelay(4295000);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    goto $bb4008;

  $bb4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4009;

  $bb4009:
    assume {:verifier.code 0} true;
    goto $bb4010;

  $bb4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3337} $i679 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i680 := $eq.i32($i676, $i679);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i680} true;
    goto $bb4011, $bb4012;

  $bb4012:
    assume {:verifier.code 0} true;
    assume !($i680 == 1);
    goto $bb4013;

  $bb4013:
    assume {:verifier.code 0} true;
    goto $bb4016;

  $bb4016:
    assume {:verifier.code 0} true;
    goto $bb4017;

  $bb4017:
    assume {:verifier.code 0} true;
    goto $bb4018;

  $bb4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} __const_udelay(4295000);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    goto $bb4019;

  $bb4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3339} __const_udelay(4295000);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    goto $bb4020;

  $bb4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} __const_udelay(4295000);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    goto $bb4021;

  $bb4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3341} __const_udelay(4295000);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    goto $bb4022;

  $bb4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} __const_udelay(4295000);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    goto $bb4023;

  $bb4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3343} __const_udelay(4295000);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    goto $bb4024;

  $bb4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} __const_udelay(4295000);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    goto $bb4025;

  $bb4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3345} __const_udelay(4295000);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    goto $bb4026;

  $bb4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} __const_udelay(4295000);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    goto $bb4027;

  $bb4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3347} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4028;

  $bb4028:
    assume {:verifier.code 0} true;
    goto $bb4029;

  $bb4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} $i682 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $i683 := $eq.i32($i679, $i682);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i683} true;
    goto $bb4030, $bb4031;

  $bb4031:
    assume {:verifier.code 0} true;
    assume !($i683 == 1);
    goto $bb4032;

  $bb4032:
    assume {:verifier.code 0} true;
    goto $bb4035;

  $bb4035:
    assume {:verifier.code 0} true;
    goto $bb4036;

  $bb4036:
    assume {:verifier.code 0} true;
    goto $bb4037;

  $bb4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3349} __const_udelay(4295000);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    goto $bb4038;

  $bb4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} __const_udelay(4295000);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    goto $bb4039;

  $bb4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3351} __const_udelay(4295000);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    goto $bb4040;

  $bb4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} __const_udelay(4295000);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    goto $bb4041;

  $bb4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3353} __const_udelay(4295000);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    goto $bb4042;

  $bb4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} __const_udelay(4295000);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    goto $bb4043;

  $bb4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3355} __const_udelay(4295000);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    goto $bb4044;

  $bb4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} __const_udelay(4295000);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    goto $bb4045;

  $bb4045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3357} __const_udelay(4295000);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    goto $bb4046;

  $bb4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4047;

  $bb4047:
    assume {:verifier.code 0} true;
    goto $bb4048;

  $bb4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3359} $i685 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $i686 := $eq.i32($i682, $i685);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i686} true;
    goto $bb4049, $bb4050;

  $bb4050:
    assume {:verifier.code 0} true;
    assume !($i686 == 1);
    goto $bb4051;

  $bb4051:
    assume {:verifier.code 0} true;
    goto $bb4054;

  $bb4054:
    assume {:verifier.code 0} true;
    goto $bb4055;

  $bb4055:
    assume {:verifier.code 0} true;
    goto $bb4056;

  $bb4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} __const_udelay(4295000);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    goto $bb4057;

  $bb4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3361} __const_udelay(4295000);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    goto $bb4058;

  $bb4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} __const_udelay(4295000);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    goto $bb4059;

  $bb4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3363} __const_udelay(4295000);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    goto $bb4060;

  $bb4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} __const_udelay(4295000);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    goto $bb4061;

  $bb4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} __const_udelay(4295000);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    goto $bb4062;

  $bb4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3366} __const_udelay(4295000);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    goto $bb4063;

  $bb4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3367} __const_udelay(4295000);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    goto $bb4064;

  $bb4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3368} __const_udelay(4295000);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    goto $bb4065;

  $bb4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3369} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4066;

  $bb4066:
    assume {:verifier.code 0} true;
    goto $bb4067;

  $bb4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3370} $i688 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $i689 := $eq.i32($i685, $i688);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i689} true;
    goto $bb4068, $bb4069;

  $bb4069:
    assume {:verifier.code 0} true;
    assume !($i689 == 1);
    goto $bb4070;

  $bb4070:
    assume {:verifier.code 0} true;
    goto $bb4073;

  $bb4073:
    assume {:verifier.code 0} true;
    goto $bb4074;

  $bb4074:
    assume {:verifier.code 0} true;
    goto $bb4075;

  $bb4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3371} __const_udelay(4295000);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    goto $bb4076;

  $bb4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3372} __const_udelay(4295000);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    goto $bb4077;

  $bb4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3373} __const_udelay(4295000);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    goto $bb4078;

  $bb4078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3374} __const_udelay(4295000);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    goto $bb4079;

  $bb4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3375} __const_udelay(4295000);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    goto $bb4080;

  $bb4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3376} __const_udelay(4295000);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    goto $bb4081;

  $bb4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} __const_udelay(4295000);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    goto $bb4082;

  $bb4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3378} __const_udelay(4295000);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    goto $bb4083;

  $bb4083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} __const_udelay(4295000);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    goto $bb4084;

  $bb4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3380} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4085;

  $bb4085:
    assume {:verifier.code 0} true;
    goto $bb4086;

  $bb4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3381} $i691 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $i692 := $eq.i32($i688, $i691);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i692} true;
    goto $bb4087, $bb4088;

  $bb4088:
    assume {:verifier.code 0} true;
    assume !($i692 == 1);
    goto $bb4089;

  $bb4089:
    assume {:verifier.code 0} true;
    goto $bb4092;

  $bb4092:
    assume {:verifier.code 0} true;
    goto $bb4093;

  $bb4093:
    assume {:verifier.code 0} true;
    goto $bb4094;

  $bb4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3382} __const_udelay(4295000);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    goto $bb4095;

  $bb4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3383} __const_udelay(4295000);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    goto $bb4096;

  $bb4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3384} __const_udelay(4295000);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    goto $bb4097;

  $bb4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3385} __const_udelay(4295000);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    goto $bb4098;

  $bb4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3386} __const_udelay(4295000);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    goto $bb4099;

  $bb4099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3387} __const_udelay(4295000);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    goto $bb4100;

  $bb4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3388} __const_udelay(4295000);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    goto $bb4101;

  $bb4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3389} __const_udelay(4295000);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    goto $bb4102;

  $bb4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3390} __const_udelay(4295000);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    goto $bb4103;

  $bb4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3391} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4104;

  $bb4104:
    assume {:verifier.code 0} true;
    goto $bb4105;

  $bb4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3392} $i694 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $i695 := $eq.i32($i691, $i694);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i695} true;
    goto $bb4106, $bb4107;

  $bb4107:
    assume {:verifier.code 0} true;
    assume !($i695 == 1);
    goto $bb4108;

  $bb4108:
    assume {:verifier.code 0} true;
    goto $bb4111;

  $bb4111:
    assume {:verifier.code 0} true;
    goto $bb4112;

  $bb4112:
    assume {:verifier.code 0} true;
    goto $bb4113;

  $bb4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3393} __const_udelay(4295000);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    goto $bb4114;

  $bb4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3394} __const_udelay(4295000);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    goto $bb4115;

  $bb4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3395} __const_udelay(4295000);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    goto $bb4116;

  $bb4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3396} __const_udelay(4295000);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    goto $bb4117;

  $bb4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3397} __const_udelay(4295000);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    goto $bb4118;

  $bb4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3398} __const_udelay(4295000);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    goto $bb4119;

  $bb4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3399} __const_udelay(4295000);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    goto $bb4120;

  $bb4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3400} __const_udelay(4295000);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    goto $bb4121;

  $bb4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3401} __const_udelay(4295000);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    goto $bb4122;

  $bb4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3402} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4123;

  $bb4123:
    assume {:verifier.code 0} true;
    goto $bb4124;

  $bb4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3403} $i697 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $i698 := $eq.i32($i694, $i697);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i698} true;
    goto $bb4125, $bb4126;

  $bb4126:
    assume {:verifier.code 0} true;
    assume !($i698 == 1);
    goto $bb4127;

  $bb4127:
    assume {:verifier.code 0} true;
    goto $bb4130;

  $bb4130:
    assume {:verifier.code 0} true;
    goto $bb4131;

  $bb4131:
    assume {:verifier.code 0} true;
    goto $bb4132;

  $bb4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3404} __const_udelay(4295000);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    goto $bb4133;

  $bb4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3405} __const_udelay(4295000);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    goto $bb4134;

  $bb4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3406} __const_udelay(4295000);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    goto $bb4135;

  $bb4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3407} __const_udelay(4295000);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    goto $bb4136;

  $bb4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3408} __const_udelay(4295000);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    goto $bb4137;

  $bb4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3409} __const_udelay(4295000);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    goto $bb4138;

  $bb4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3410} __const_udelay(4295000);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    goto $bb4139;

  $bb4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3411} __const_udelay(4295000);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    goto $bb4140;

  $bb4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3412} __const_udelay(4295000);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    goto $bb4141;

  $bb4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3413} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4142;

  $bb4142:
    assume {:verifier.code 0} true;
    goto $bb4143;

  $bb4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3414} $i700 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $i701 := $eq.i32($i697, $i700);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i701} true;
    goto $bb4144, $bb4145;

  $bb4145:
    assume {:verifier.code 0} true;
    assume !($i701 == 1);
    goto $bb4146;

  $bb4146:
    assume {:verifier.code 0} true;
    goto $bb4149;

  $bb4149:
    assume {:verifier.code 0} true;
    goto $bb4150;

  $bb4150:
    assume {:verifier.code 0} true;
    goto $bb4151;

  $bb4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3415} __const_udelay(4295000);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    goto $bb4152;

  $bb4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3416} __const_udelay(4295000);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    goto $bb4153;

  $bb4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3417} __const_udelay(4295000);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    goto $bb4154;

  $bb4154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3418} __const_udelay(4295000);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    goto $bb4155;

  $bb4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3419} __const_udelay(4295000);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    goto $bb4156;

  $bb4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3420} __const_udelay(4295000);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    goto $bb4157;

  $bb4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3421} __const_udelay(4295000);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    goto $bb4158;

  $bb4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3422} __const_udelay(4295000);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    goto $bb4159;

  $bb4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3423} __const_udelay(4295000);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    goto $bb4160;

  $bb4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3424} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4161;

  $bb4161:
    assume {:verifier.code 0} true;
    goto $bb4162;

  $bb4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3425} $i703 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $i704 := $eq.i32($i700, $i703);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i704} true;
    goto $bb4163, $bb4164;

  $bb4164:
    assume {:verifier.code 0} true;
    assume !($i704 == 1);
    goto $bb4165;

  $bb4165:
    assume {:verifier.code 0} true;
    goto $bb4168;

  $bb4168:
    assume {:verifier.code 0} true;
    goto $bb4169;

  $bb4169:
    assume {:verifier.code 0} true;
    goto $bb4170;

  $bb4170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3426} __const_udelay(4295000);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    goto $bb4171;

  $bb4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3427} __const_udelay(4295000);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    goto $bb4172;

  $bb4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3428} __const_udelay(4295000);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    goto $bb4173;

  $bb4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3429} __const_udelay(4295000);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    goto $bb4174;

  $bb4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3430} __const_udelay(4295000);
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    goto $bb4175;

  $bb4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3431} __const_udelay(4295000);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    goto $bb4176;

  $bb4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3432} __const_udelay(4295000);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    goto $bb4177;

  $bb4177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3433} __const_udelay(4295000);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    goto $bb4178;

  $bb4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3434} __const_udelay(4295000);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    goto $bb4179;

  $bb4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3435} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4180;

  $bb4180:
    assume {:verifier.code 0} true;
    goto $bb4181;

  $bb4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3436} $i706 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $i707 := $eq.i32($i703, $i706);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i707} true;
    goto $bb4182, $bb4183;

  $bb4183:
    assume {:verifier.code 0} true;
    assume !($i707 == 1);
    goto $bb4184;

  $bb4184:
    assume {:verifier.code 0} true;
    goto $bb4187;

  $bb4187:
    assume {:verifier.code 0} true;
    goto $bb4188;

  $bb4188:
    assume {:verifier.code 0} true;
    goto $bb4189;

  $bb4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3437} __const_udelay(4295000);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    goto $bb4190;

  $bb4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3438} __const_udelay(4295000);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    goto $bb4191;

  $bb4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3439} __const_udelay(4295000);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    goto $bb4192;

  $bb4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3440} __const_udelay(4295000);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    goto $bb4193;

  $bb4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3441} __const_udelay(4295000);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    goto $bb4194;

  $bb4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3442} __const_udelay(4295000);
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    goto $bb4195;

  $bb4195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3443} __const_udelay(4295000);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    goto $bb4196;

  $bb4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3444} __const_udelay(4295000);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    goto $bb4197;

  $bb4197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3445} __const_udelay(4295000);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    goto $bb4198;

  $bb4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3446} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4199;

  $bb4199:
    assume {:verifier.code 0} true;
    goto $bb4200;

  $bb4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3447} $i709 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $i710 := $eq.i32($i706, $i709);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i710} true;
    goto $bb4201, $bb4202;

  $bb4202:
    assume {:verifier.code 0} true;
    assume !($i710 == 1);
    goto $bb4203;

  $bb4203:
    assume {:verifier.code 0} true;
    goto $bb4206;

  $bb4206:
    assume {:verifier.code 0} true;
    goto $bb4207;

  $bb4207:
    assume {:verifier.code 0} true;
    goto $bb4208;

  $bb4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3448} __const_udelay(4295000);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    goto $bb4209;

  $bb4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} __const_udelay(4295000);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    goto $bb4210;

  $bb4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3450} __const_udelay(4295000);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    goto $bb4211;

  $bb4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3451} __const_udelay(4295000);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    goto $bb4212;

  $bb4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3452} __const_udelay(4295000);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    goto $bb4213;

  $bb4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3453} __const_udelay(4295000);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    goto $bb4214;

  $bb4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3454} __const_udelay(4295000);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    goto $bb4215;

  $bb4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3455} __const_udelay(4295000);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    goto $bb4216;

  $bb4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} __const_udelay(4295000);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    goto $bb4217;

  $bb4217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3457} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4218;

  $bb4218:
    assume {:verifier.code 0} true;
    goto $bb4219;

  $bb4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3458} $i712 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $i713 := $eq.i32($i709, $i712);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i713} true;
    goto $bb4220, $bb4221;

  $bb4221:
    assume {:verifier.code 0} true;
    assume !($i713 == 1);
    goto $bb4222;

  $bb4222:
    assume {:verifier.code 0} true;
    goto $bb4225;

  $bb4225:
    assume {:verifier.code 0} true;
    goto $bb4226;

  $bb4226:
    assume {:verifier.code 0} true;
    goto $bb4227;

  $bb4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3459} __const_udelay(4295000);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    goto $bb4228;

  $bb4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} __const_udelay(4295000);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    goto $bb4229;

  $bb4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3461} __const_udelay(4295000);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    goto $bb4230;

  $bb4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3462} __const_udelay(4295000);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    goto $bb4231;

  $bb4231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3463} __const_udelay(4295000);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    goto $bb4232;

  $bb4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3464} __const_udelay(4295000);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    goto $bb4233;

  $bb4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3465} __const_udelay(4295000);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    goto $bb4234;

  $bb4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3466} __const_udelay(4295000);
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    goto $bb4235;

  $bb4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3467} __const_udelay(4295000);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    goto $bb4236;

  $bb4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3468} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4237;

  $bb4237:
    assume {:verifier.code 0} true;
    goto $bb4238;

  $bb4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3469} $i715 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $i716 := $eq.i32($i712, $i715);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i716} true;
    goto $bb4239, $bb4240;

  $bb4240:
    assume {:verifier.code 0} true;
    assume !($i716 == 1);
    goto $bb4241;

  $bb4241:
    assume {:verifier.code 0} true;
    goto $bb4244;

  $bb4244:
    assume {:verifier.code 0} true;
    goto $bb4245;

  $bb4245:
    assume {:verifier.code 0} true;
    goto $bb4246;

  $bb4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3470} __const_udelay(4295000);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    goto $bb4247;

  $bb4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3471} __const_udelay(4295000);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    goto $bb4248;

  $bb4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3472} __const_udelay(4295000);
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    goto $bb4249;

  $bb4249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3473} __const_udelay(4295000);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    goto $bb4250;

  $bb4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3474} __const_udelay(4295000);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    goto $bb4251;

  $bb4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3475} __const_udelay(4295000);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    goto $bb4252;

  $bb4252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3476} __const_udelay(4295000);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    goto $bb4253;

  $bb4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3477} __const_udelay(4295000);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    goto $bb4254;

  $bb4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3478} __const_udelay(4295000);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    goto $bb4255;

  $bb4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3479} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4256;

  $bb4256:
    assume {:verifier.code 0} true;
    goto $bb4257;

  $bb4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3480} $i718 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $i719 := $eq.i32($i715, $i718);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i719} true;
    goto $bb4258, $bb4259;

  $bb4259:
    assume {:verifier.code 0} true;
    assume !($i719 == 1);
    goto $bb4260;

  $bb4260:
    assume {:verifier.code 0} true;
    goto $bb4263;

  $bb4263:
    assume {:verifier.code 0} true;
    goto $bb4264;

  $bb4264:
    assume {:verifier.code 0} true;
    goto $bb4265;

  $bb4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3481} __const_udelay(4295000);
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    goto $bb4266;

  $bb4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3482} __const_udelay(4295000);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    goto $bb4267;

  $bb4267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3483} __const_udelay(4295000);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    goto $bb4268;

  $bb4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3484} __const_udelay(4295000);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    goto $bb4269;

  $bb4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3485} __const_udelay(4295000);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    goto $bb4270;

  $bb4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3486} __const_udelay(4295000);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    goto $bb4271;

  $bb4271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3487} __const_udelay(4295000);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    goto $bb4272;

  $bb4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3488} __const_udelay(4295000);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    goto $bb4273;

  $bb4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3489} __const_udelay(4295000);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    goto $bb4274;

  $bb4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3490} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4275;

  $bb4275:
    assume {:verifier.code 0} true;
    goto $bb4276;

  $bb4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3491} $i721 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $i722 := $eq.i32($i718, $i721);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i722} true;
    goto $bb4277, $bb4278;

  $bb4278:
    assume {:verifier.code 0} true;
    assume !($i722 == 1);
    goto $bb4279;

  $bb4279:
    assume {:verifier.code 0} true;
    goto $bb4282;

  $bb4282:
    assume {:verifier.code 0} true;
    goto $bb4283;

  $bb4283:
    assume {:verifier.code 0} true;
    goto $bb4284;

  $bb4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3492} __const_udelay(4295000);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    goto $bb4285;

  $bb4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3493} __const_udelay(4295000);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    goto $bb4286;

  $bb4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3494} __const_udelay(4295000);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    goto $bb4287;

  $bb4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3495} __const_udelay(4295000);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    goto $bb4288;

  $bb4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3496} __const_udelay(4295000);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    goto $bb4289;

  $bb4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3497} __const_udelay(4295000);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    goto $bb4290;

  $bb4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3498} __const_udelay(4295000);
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    goto $bb4291;

  $bb4291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3499} __const_udelay(4295000);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    goto $bb4292;

  $bb4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3500} __const_udelay(4295000);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    goto $bb4293;

  $bb4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3501} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4294;

  $bb4294:
    assume {:verifier.code 0} true;
    goto $bb4295;

  $bb4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3502} $i724 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $i725 := $eq.i32($i721, $i724);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i725} true;
    goto $bb4296, $bb4297;

  $bb4297:
    assume {:verifier.code 0} true;
    assume !($i725 == 1);
    goto $bb4298;

  $bb4298:
    assume {:verifier.code 0} true;
    goto $bb4301;

  $bb4301:
    assume {:verifier.code 0} true;
    goto $bb4302;

  $bb4302:
    assume {:verifier.code 0} true;
    goto $bb4303;

  $bb4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3503} __const_udelay(4295000);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    goto $bb4304;

  $bb4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3504} __const_udelay(4295000);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    goto $bb4305;

  $bb4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3505} __const_udelay(4295000);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    goto $bb4306;

  $bb4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3506} __const_udelay(4295000);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    goto $bb4307;

  $bb4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3507} __const_udelay(4295000);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    goto $bb4308;

  $bb4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3508} __const_udelay(4295000);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    goto $bb4309;

  $bb4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3509} __const_udelay(4295000);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    goto $bb4310;

  $bb4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3510} __const_udelay(4295000);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    goto $bb4311;

  $bb4311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3511} __const_udelay(4295000);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    goto $bb4312;

  $bb4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3512} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4313;

  $bb4313:
    assume {:verifier.code 0} true;
    goto $bb4314;

  $bb4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3513} $i727 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $i728 := $eq.i32($i724, $i727);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i728} true;
    goto $bb4315, $bb4316;

  $bb4316:
    assume {:verifier.code 0} true;
    assume !($i728 == 1);
    goto $bb4317;

  $bb4317:
    assume {:verifier.code 0} true;
    goto $bb4320;

  $bb4320:
    assume {:verifier.code 0} true;
    goto $bb4321;

  $bb4321:
    assume {:verifier.code 0} true;
    goto $bb4322;

  $bb4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3514} __const_udelay(4295000);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    goto $bb4323;

  $bb4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3515} __const_udelay(4295000);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    goto $bb4324;

  $bb4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3516} __const_udelay(4295000);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    goto $bb4325;

  $bb4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} __const_udelay(4295000);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    goto $bb4326;

  $bb4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3518} __const_udelay(4295000);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    goto $bb4327;

  $bb4327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3519} __const_udelay(4295000);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    goto $bb4328;

  $bb4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3520} __const_udelay(4295000);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    goto $bb4329;

  $bb4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3521} __const_udelay(4295000);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    goto $bb4330;

  $bb4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3522} __const_udelay(4295000);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    goto $bb4331;

  $bb4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3523} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4332;

  $bb4332:
    assume {:verifier.code 0} true;
    goto $bb4333;

  $bb4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3524} $i730 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $i731 := $eq.i32($i727, $i730);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i731} true;
    goto $bb4334, $bb4335;

  $bb4335:
    assume {:verifier.code 0} true;
    assume !($i731 == 1);
    goto $bb4336;

  $bb4336:
    assume {:verifier.code 0} true;
    goto $bb4339;

  $bb4339:
    assume {:verifier.code 0} true;
    goto $bb4340;

  $bb4340:
    assume {:verifier.code 0} true;
    goto $bb4341;

  $bb4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3525} __const_udelay(4295000);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    goto $bb4342;

  $bb4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3526} __const_udelay(4295000);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    goto $bb4343;

  $bb4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3527} __const_udelay(4295000);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    goto $bb4344;

  $bb4344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3528} __const_udelay(4295000);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    goto $bb4345;

  $bb4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3529} __const_udelay(4295000);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    goto $bb4346;

  $bb4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3530} __const_udelay(4295000);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    goto $bb4347;

  $bb4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3531} __const_udelay(4295000);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    goto $bb4348;

  $bb4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3532} __const_udelay(4295000);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    goto $bb4349;

  $bb4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3533} __const_udelay(4295000);
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    goto $bb4350;

  $bb4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3534} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4351;

  $bb4351:
    assume {:verifier.code 0} true;
    goto $bb4352;

  $bb4352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3535} $i733 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $i734 := $eq.i32($i730, $i733);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i734} true;
    goto $bb4353, $bb4354;

  $bb4354:
    assume {:verifier.code 0} true;
    assume !($i734 == 1);
    goto $bb4355;

  $bb4355:
    assume {:verifier.code 0} true;
    goto $bb4358;

  $bb4358:
    assume {:verifier.code 0} true;
    goto $bb4359;

  $bb4359:
    assume {:verifier.code 0} true;
    goto $bb4360;

  $bb4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3536} __const_udelay(4295000);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    goto $bb4361;

  $bb4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3537} __const_udelay(4295000);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    goto $bb4362;

  $bb4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3538} __const_udelay(4295000);
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    goto $bb4363;

  $bb4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3539} __const_udelay(4295000);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    goto $bb4364;

  $bb4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3540} __const_udelay(4295000);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    goto $bb4365;

  $bb4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3541} __const_udelay(4295000);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    goto $bb4366;

  $bb4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3542} __const_udelay(4295000);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    goto $bb4367;

  $bb4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3543} __const_udelay(4295000);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    goto $bb4368;

  $bb4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3544} __const_udelay(4295000);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    goto $bb4369;

  $bb4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3545} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4370;

  $bb4370:
    assume {:verifier.code 0} true;
    goto $bb4371;

  $bb4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3546} $i736 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $i737 := $eq.i32($i733, $i736);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i737} true;
    goto $bb4372, $bb4373;

  $bb4373:
    assume {:verifier.code 0} true;
    assume !($i737 == 1);
    goto $bb4374;

  $bb4374:
    assume {:verifier.code 0} true;
    goto $bb4377;

  $bb4377:
    assume {:verifier.code 0} true;
    goto $bb4378;

  $bb4378:
    assume {:verifier.code 0} true;
    goto $bb4379;

  $bb4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3547} __const_udelay(4295000);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    goto $bb4380;

  $bb4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3548} __const_udelay(4295000);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    goto $bb4381;

  $bb4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3549} __const_udelay(4295000);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    goto $bb4382;

  $bb4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3550} __const_udelay(4295000);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    goto $bb4383;

  $bb4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3551} __const_udelay(4295000);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    goto $bb4384;

  $bb4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3552} __const_udelay(4295000);
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    goto $bb4385;

  $bb4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3553} __const_udelay(4295000);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    goto $bb4386;

  $bb4386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3554} __const_udelay(4295000);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    goto $bb4387;

  $bb4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3555} __const_udelay(4295000);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    goto $bb4388;

  $bb4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3556} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4389;

  $bb4389:
    assume {:verifier.code 0} true;
    goto $bb4390;

  $bb4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3557} $i739 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $i740 := $eq.i32($i736, $i739);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i740} true;
    goto $bb4391, $bb4392;

  $bb4392:
    assume {:verifier.code 0} true;
    assume !($i740 == 1);
    goto $bb4393;

  $bb4393:
    assume {:verifier.code 0} true;
    goto $bb4396;

  $bb4396:
    assume {:verifier.code 0} true;
    goto $bb4397;

  $bb4397:
    assume {:verifier.code 0} true;
    goto $bb4398;

  $bb4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3558} __const_udelay(4295000);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    goto $bb4399;

  $bb4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3559} __const_udelay(4295000);
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    goto $bb4400;

  $bb4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3560} __const_udelay(4295000);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    goto $bb4401;

  $bb4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3561} __const_udelay(4295000);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    goto $bb4402;

  $bb4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3562} __const_udelay(4295000);
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    goto $bb4403;

  $bb4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3563} __const_udelay(4295000);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    goto $bb4404;

  $bb4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3564} __const_udelay(4295000);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    goto $bb4405;

  $bb4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3565} __const_udelay(4295000);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    goto $bb4406;

  $bb4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3566} __const_udelay(4295000);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    goto $bb4407;

  $bb4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3567} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4408;

  $bb4408:
    assume {:verifier.code 0} true;
    goto $bb4409;

  $bb4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3568} $i742 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $i743 := $eq.i32($i739, $i742);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i743} true;
    goto $bb4410, $bb4411;

  $bb4411:
    assume {:verifier.code 0} true;
    assume !($i743 == 1);
    goto $bb4412;

  $bb4412:
    assume {:verifier.code 0} true;
    goto $bb4415;

  $bb4415:
    assume {:verifier.code 0} true;
    goto $bb4416;

  $bb4416:
    assume {:verifier.code 0} true;
    goto $bb4417;

  $bb4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3569} __const_udelay(4295000);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    goto $bb4418;

  $bb4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3570} __const_udelay(4295000);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    goto $bb4419;

  $bb4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3571} __const_udelay(4295000);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    goto $bb4420;

  $bb4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3572} __const_udelay(4295000);
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    goto $bb4421;

  $bb4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3573} __const_udelay(4295000);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    goto $bb4422;

  $bb4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3574} __const_udelay(4295000);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    goto $bb4423;

  $bb4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3575} __const_udelay(4295000);
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    goto $bb4424;

  $bb4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3576} __const_udelay(4295000);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    goto $bb4425;

  $bb4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3577} __const_udelay(4295000);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    goto $bb4426;

  $bb4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3578} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4427;

  $bb4427:
    assume {:verifier.code 0} true;
    goto $bb4428;

  $bb4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3579} $i745 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $i746 := $eq.i32($i742, $i745);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i746} true;
    goto $bb4429, $bb4430;

  $bb4430:
    assume {:verifier.code 0} true;
    assume !($i746 == 1);
    goto $bb4431;

  $bb4431:
    assume {:verifier.code 0} true;
    goto $bb4434;

  $bb4434:
    assume {:verifier.code 0} true;
    goto $bb4435;

  $bb4435:
    assume {:verifier.code 0} true;
    goto $bb4436;

  $bb4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3580} __const_udelay(4295000);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    goto $bb4437;

  $bb4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3581} __const_udelay(4295000);
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    goto $bb4438;

  $bb4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} __const_udelay(4295000);
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    goto $bb4439;

  $bb4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3583} __const_udelay(4295000);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    goto $bb4440;

  $bb4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3584} __const_udelay(4295000);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    goto $bb4441;

  $bb4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3585} __const_udelay(4295000);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    goto $bb4442;

  $bb4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3586} __const_udelay(4295000);
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    goto $bb4443;

  $bb4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3587} __const_udelay(4295000);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    goto $bb4444;

  $bb4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3588} __const_udelay(4295000);
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    goto $bb4445;

  $bb4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3589} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4446;

  $bb4446:
    assume {:verifier.code 0} true;
    goto $bb4447;

  $bb4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3590} $i748 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $i749 := $eq.i32($i745, $i748);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i749} true;
    goto $bb4448, $bb4449;

  $bb4449:
    assume {:verifier.code 0} true;
    assume !($i749 == 1);
    goto $bb4450;

  $bb4450:
    assume {:verifier.code 0} true;
    goto $bb4453;

  $bb4453:
    assume {:verifier.code 0} true;
    goto $bb4454;

  $bb4454:
    assume {:verifier.code 0} true;
    goto $bb4455;

  $bb4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3591} __const_udelay(4295000);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    goto $bb4456;

  $bb4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3592} __const_udelay(4295000);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    goto $bb4457;

  $bb4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3593} __const_udelay(4295000);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    goto $bb4458;

  $bb4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3594} __const_udelay(4295000);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    goto $bb4459;

  $bb4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3595} __const_udelay(4295000);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    goto $bb4460;

  $bb4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3596} __const_udelay(4295000);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    goto $bb4461;

  $bb4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3597} __const_udelay(4295000);
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    goto $bb4462;

  $bb4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3598} __const_udelay(4295000);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    goto $bb4463;

  $bb4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3599} __const_udelay(4295000);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    goto $bb4464;

  $bb4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3600} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4465;

  $bb4465:
    assume {:verifier.code 0} true;
    goto $bb4466;

  $bb4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3601} $i751 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $i752 := $eq.i32($i748, $i751);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i752} true;
    goto $bb4467, $bb4468;

  $bb4468:
    assume {:verifier.code 0} true;
    assume !($i752 == 1);
    goto $bb4469;

  $bb4469:
    assume {:verifier.code 0} true;
    goto $bb4472;

  $bb4472:
    assume {:verifier.code 0} true;
    goto $bb4473;

  $bb4473:
    assume {:verifier.code 0} true;
    goto $bb4474;

  $bb4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3602} __const_udelay(4295000);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    goto $bb4475;

  $bb4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3603} __const_udelay(4295000);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    goto $bb4476;

  $bb4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3604} __const_udelay(4295000);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    goto $bb4477;

  $bb4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3605} __const_udelay(4295000);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    goto $bb4478;

  $bb4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3606} __const_udelay(4295000);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    goto $bb4479;

  $bb4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3607} __const_udelay(4295000);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    goto $bb4480;

  $bb4480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3608} __const_udelay(4295000);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    goto $bb4481;

  $bb4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3609} __const_udelay(4295000);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    goto $bb4482;

  $bb4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3610} __const_udelay(4295000);
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    goto $bb4483;

  $bb4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3611} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4484;

  $bb4484:
    assume {:verifier.code 0} true;
    goto $bb4485;

  $bb4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3612} $i754 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $i755 := $eq.i32($i751, $i754);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i755} true;
    goto $bb4486, $bb4487;

  $bb4487:
    assume {:verifier.code 0} true;
    assume !($i755 == 1);
    goto $bb4488;

  $bb4488:
    assume {:verifier.code 0} true;
    goto $bb4491;

  $bb4491:
    assume {:verifier.code 0} true;
    goto $bb4492;

  $bb4492:
    assume {:verifier.code 0} true;
    goto $bb4493;

  $bb4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3613} __const_udelay(4295000);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    goto $bb4494;

  $bb4494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3614} __const_udelay(4295000);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    goto $bb4495;

  $bb4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3615} __const_udelay(4295000);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    goto $bb4496;

  $bb4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3616} __const_udelay(4295000);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    goto $bb4497;

  $bb4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3617} __const_udelay(4295000);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    goto $bb4498;

  $bb4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3618} __const_udelay(4295000);
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    goto $bb4499;

  $bb4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3619} __const_udelay(4295000);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    goto $bb4500;

  $bb4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3620} __const_udelay(4295000);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    goto $bb4501;

  $bb4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3621} __const_udelay(4295000);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    goto $bb4502;

  $bb4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3622} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4503;

  $bb4503:
    assume {:verifier.code 0} true;
    goto $bb4504;

  $bb4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3623} $i757 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $i758 := $eq.i32($i754, $i757);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i758} true;
    goto $bb4505, $bb4506;

  $bb4506:
    assume {:verifier.code 0} true;
    assume !($i758 == 1);
    goto $bb4507;

  $bb4507:
    assume {:verifier.code 0} true;
    goto $bb4510;

  $bb4510:
    assume {:verifier.code 0} true;
    goto $bb4511;

  $bb4511:
    assume {:verifier.code 0} true;
    goto $bb4512;

  $bb4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3624} __const_udelay(4295000);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    goto $bb4513;

  $bb4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3625} __const_udelay(4295000);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    goto $bb4514;

  $bb4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3626} __const_udelay(4295000);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    goto $bb4515;

  $bb4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3627} __const_udelay(4295000);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    goto $bb4516;

  $bb4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3628} __const_udelay(4295000);
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    goto $bb4517;

  $bb4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3629} __const_udelay(4295000);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    goto $bb4518;

  $bb4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3630} __const_udelay(4295000);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    goto $bb4519;

  $bb4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3631} __const_udelay(4295000);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    goto $bb4520;

  $bb4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3632} __const_udelay(4295000);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    goto $bb4521;

  $bb4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3633} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4522;

  $bb4522:
    assume {:verifier.code 0} true;
    goto $bb4523;

  $bb4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3634} $i760 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $i761 := $eq.i32($i757, $i760);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i761} true;
    goto $bb4524, $bb4525;

  $bb4525:
    assume {:verifier.code 0} true;
    assume !($i761 == 1);
    goto $bb4526;

  $bb4526:
    assume {:verifier.code 0} true;
    goto $bb4529;

  $bb4529:
    assume {:verifier.code 0} true;
    goto $bb4530;

  $bb4530:
    assume {:verifier.code 0} true;
    goto $bb4531;

  $bb4531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3635} __const_udelay(4295000);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    goto $bb4532;

  $bb4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3636} __const_udelay(4295000);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    goto $bb4533;

  $bb4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3637} __const_udelay(4295000);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    goto $bb4534;

  $bb4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3638} __const_udelay(4295000);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    goto $bb4535;

  $bb4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3639} __const_udelay(4295000);
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    goto $bb4536;

  $bb4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3640} __const_udelay(4295000);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    goto $bb4537;

  $bb4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3641} __const_udelay(4295000);
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    goto $bb4538;

  $bb4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3642} __const_udelay(4295000);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    goto $bb4539;

  $bb4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3643} __const_udelay(4295000);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    goto $bb4540;

  $bb4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3644} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4541;

  $bb4541:
    assume {:verifier.code 0} true;
    goto $bb4542;

  $bb4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3645} $i763 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $i764 := $eq.i32($i760, $i763);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i764} true;
    goto $bb4543, $bb4544;

  $bb4544:
    assume {:verifier.code 0} true;
    assume !($i764 == 1);
    goto $bb4545;

  $bb4545:
    assume {:verifier.code 0} true;
    goto $bb4548;

  $bb4548:
    assume {:verifier.code 0} true;
    goto $bb4549;

  $bb4549:
    assume {:verifier.code 0} true;
    goto $bb4550;

  $bb4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3646} __const_udelay(4295000);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    goto $bb4551;

  $bb4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3647} __const_udelay(4295000);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    goto $bb4552;

  $bb4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3648} __const_udelay(4295000);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    goto $bb4553;

  $bb4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3649} __const_udelay(4295000);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    goto $bb4554;

  $bb4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3650} __const_udelay(4295000);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    goto $bb4555;

  $bb4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3651} __const_udelay(4295000);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    goto $bb4556;

  $bb4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3652} __const_udelay(4295000);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    goto $bb4557;

  $bb4557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3653} __const_udelay(4295000);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    goto $bb4558;

  $bb4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3654} __const_udelay(4295000);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    goto $bb4559;

  $bb4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3655} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4560;

  $bb4560:
    assume {:verifier.code 0} true;
    goto $bb4561;

  $bb4561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3656} $i766 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $i767 := $eq.i32($i763, $i766);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i767} true;
    goto $bb4562, $bb4563;

  $bb4563:
    assume {:verifier.code 0} true;
    assume !($i767 == 1);
    goto $bb4564;

  $bb4564:
    assume {:verifier.code 0} true;
    goto $bb4567;

  $bb4567:
    assume {:verifier.code 0} true;
    goto $bb4568;

  $bb4568:
    assume {:verifier.code 0} true;
    goto $bb4569;

  $bb4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3657} __const_udelay(4295000);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    goto $bb4570;

  $bb4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3658} __const_udelay(4295000);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    goto $bb4571;

  $bb4571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3659} __const_udelay(4295000);
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    goto $bb4572;

  $bb4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3660} __const_udelay(4295000);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    goto $bb4573;

  $bb4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3661} __const_udelay(4295000);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    goto $bb4574;

  $bb4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3662} __const_udelay(4295000);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    goto $bb4575;

  $bb4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3663} __const_udelay(4295000);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    goto $bb4576;

  $bb4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3664} __const_udelay(4295000);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    goto $bb4577;

  $bb4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3665} __const_udelay(4295000);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    goto $bb4578;

  $bb4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3666} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4579;

  $bb4579:
    assume {:verifier.code 0} true;
    goto $bb4580;

  $bb4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3667} $i769 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $i770 := $eq.i32($i766, $i769);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i770} true;
    goto $bb4581, $bb4582;

  $bb4582:
    assume {:verifier.code 0} true;
    assume !($i770 == 1);
    goto $bb4583;

  $bb4583:
    assume {:verifier.code 0} true;
    goto $bb4586;

  $bb4586:
    assume {:verifier.code 0} true;
    goto $bb4587;

  $bb4587:
    assume {:verifier.code 0} true;
    goto $bb4588;

  $bb4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3668} __const_udelay(4295000);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    goto $bb4589;

  $bb4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3669} __const_udelay(4295000);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    goto $bb4590;

  $bb4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3670} __const_udelay(4295000);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    goto $bb4591;

  $bb4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3671} __const_udelay(4295000);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    goto $bb4592;

  $bb4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3672} __const_udelay(4295000);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    goto $bb4593;

  $bb4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3673} __const_udelay(4295000);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    goto $bb4594;

  $bb4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3674} __const_udelay(4295000);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    goto $bb4595;

  $bb4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3675} __const_udelay(4295000);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    goto $bb4596;

  $bb4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3676} __const_udelay(4295000);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    goto $bb4597;

  $bb4597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3677} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4598;

  $bb4598:
    assume {:verifier.code 0} true;
    goto $bb4599;

  $bb4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3678} $i772 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    $i773 := $eq.i32($i769, $i772);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i773} true;
    goto $bb4600, $bb4601;

  $bb4601:
    assume {:verifier.code 0} true;
    assume !($i773 == 1);
    goto $bb4602;

  $bb4602:
    assume {:verifier.code 0} true;
    goto $bb4605;

  $bb4605:
    assume {:verifier.code 0} true;
    goto $bb4606;

  $bb4606:
    assume {:verifier.code 0} true;
    goto $bb4607;

  $bb4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3679} __const_udelay(4295000);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    goto $bb4608;

  $bb4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3680} __const_udelay(4295000);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    goto $bb4609;

  $bb4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3681} __const_udelay(4295000);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    goto $bb4610;

  $bb4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3682} __const_udelay(4295000);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    goto $bb4611;

  $bb4611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3683} __const_udelay(4295000);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    goto $bb4612;

  $bb4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3684} __const_udelay(4295000);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    goto $bb4613;

  $bb4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3685} __const_udelay(4295000);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    goto $bb4614;

  $bb4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3686} __const_udelay(4295000);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    goto $bb4615;

  $bb4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3687} __const_udelay(4295000);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    goto $bb4616;

  $bb4616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3688} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4617;

  $bb4617:
    assume {:verifier.code 0} true;
    goto $bb4618;

  $bb4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3689} $i775 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    $i776 := $eq.i32($i772, $i775);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i776} true;
    goto $bb4619, $bb4620;

  $bb4620:
    assume {:verifier.code 0} true;
    assume !($i776 == 1);
    goto $bb4621;

  $bb4621:
    assume {:verifier.code 0} true;
    goto $bb4624;

  $bb4624:
    assume {:verifier.code 0} true;
    goto $bb4625;

  $bb4625:
    assume {:verifier.code 0} true;
    goto $bb4626;

  $bb4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3690} __const_udelay(4295000);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    goto $bb4627;

  $bb4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3691} __const_udelay(4295000);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    goto $bb4628;

  $bb4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3692} __const_udelay(4295000);
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    goto $bb4629;

  $bb4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3693} __const_udelay(4295000);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    goto $bb4630;

  $bb4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3694} __const_udelay(4295000);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    goto $bb4631;

  $bb4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3695} __const_udelay(4295000);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    goto $bb4632;

  $bb4632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3696} __const_udelay(4295000);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    goto $bb4633;

  $bb4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3697} __const_udelay(4295000);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    goto $bb4634;

  $bb4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3698} __const_udelay(4295000);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    goto $bb4635;

  $bb4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3699} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4636;

  $bb4636:
    assume {:verifier.code 0} true;
    goto $bb4637;

  $bb4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3700} $i778 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $i779 := $eq.i32($i775, $i778);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i779} true;
    goto $bb4638, $bb4639;

  $bb4639:
    assume {:verifier.code 0} true;
    assume !($i779 == 1);
    goto $bb4640;

  $bb4640:
    assume {:verifier.code 0} true;
    goto $bb4643;

  $bb4643:
    assume {:verifier.code 0} true;
    goto $bb4644;

  $bb4644:
    assume {:verifier.code 0} true;
    goto $bb4645;

  $bb4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3701} __const_udelay(4295000);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    goto $bb4646;

  $bb4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3702} __const_udelay(4295000);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    goto $bb4647;

  $bb4647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3703} __const_udelay(4295000);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    goto $bb4648;

  $bb4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3704} __const_udelay(4295000);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    goto $bb4649;

  $bb4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3705} __const_udelay(4295000);
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    goto $bb4650;

  $bb4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3706} __const_udelay(4295000);
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    goto $bb4651;

  $bb4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3707} __const_udelay(4295000);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    goto $bb4652;

  $bb4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3708} __const_udelay(4295000);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    goto $bb4653;

  $bb4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3709} __const_udelay(4295000);
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    goto $bb4654;

  $bb4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3710} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4655;

  $bb4655:
    assume {:verifier.code 0} true;
    goto $bb4656;

  $bb4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3711} $i781 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    $i782 := $eq.i32($i778, $i781);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i782} true;
    goto $bb4657, $bb4658;

  $bb4658:
    assume {:verifier.code 0} true;
    assume !($i782 == 1);
    goto $bb4659;

  $bb4659:
    assume {:verifier.code 0} true;
    goto $bb4662;

  $bb4662:
    assume {:verifier.code 0} true;
    goto $bb4663;

  $bb4663:
    assume {:verifier.code 0} true;
    goto $bb4664;

  $bb4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3712} __const_udelay(4295000);
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    goto $bb4665;

  $bb4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3713} __const_udelay(4295000);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    goto $bb4666;

  $bb4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3714} __const_udelay(4295000);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    goto $bb4667;

  $bb4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3715} __const_udelay(4295000);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    goto $bb4668;

  $bb4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3716} __const_udelay(4295000);
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    goto $bb4669;

  $bb4669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3717} __const_udelay(4295000);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    goto $bb4670;

  $bb4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3718} __const_udelay(4295000);
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    goto $bb4671;

  $bb4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3719} __const_udelay(4295000);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    goto $bb4672;

  $bb4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3720} __const_udelay(4295000);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    goto $bb4673;

  $bb4673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3721} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4674;

  $bb4674:
    assume {:verifier.code 0} true;
    goto $bb4675;

  $bb4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3722} $i784 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    $i785 := $eq.i32($i781, $i784);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i785} true;
    goto $bb4676, $bb4677;

  $bb4677:
    assume {:verifier.code 0} true;
    assume !($i785 == 1);
    goto $bb4678;

  $bb4678:
    assume {:verifier.code 0} true;
    goto $bb4681;

  $bb4681:
    assume {:verifier.code 0} true;
    goto $bb4682;

  $bb4682:
    assume {:verifier.code 0} true;
    goto $bb4683;

  $bb4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3723} __const_udelay(4295000);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    goto $bb4684;

  $bb4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3724} __const_udelay(4295000);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    goto $bb4685;

  $bb4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3725} __const_udelay(4295000);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    goto $bb4686;

  $bb4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3726} __const_udelay(4295000);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    goto $bb4687;

  $bb4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3727} __const_udelay(4295000);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    goto $bb4688;

  $bb4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3728} __const_udelay(4295000);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    goto $bb4689;

  $bb4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3729} __const_udelay(4295000);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    goto $bb4690;

  $bb4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3730} __const_udelay(4295000);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    goto $bb4691;

  $bb4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3731} __const_udelay(4295000);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    goto $bb4692;

  $bb4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3732} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4693;

  $bb4693:
    assume {:verifier.code 0} true;
    goto $bb4694;

  $bb4694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3733} $i787 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    $i788 := $eq.i32($i784, $i787);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i788} true;
    goto $bb4695, $bb4696;

  $bb4696:
    assume {:verifier.code 0} true;
    assume !($i788 == 1);
    goto $bb4697;

  $bb4697:
    assume {:verifier.code 0} true;
    goto $bb4700;

  $bb4700:
    assume {:verifier.code 0} true;
    goto $bb4701;

  $bb4701:
    assume {:verifier.code 0} true;
    goto $bb4702;

  $bb4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3734} __const_udelay(4295000);
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    goto $bb4703;

  $bb4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3735} __const_udelay(4295000);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    goto $bb4704;

  $bb4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3736} __const_udelay(4295000);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    goto $bb4705;

  $bb4705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3737} __const_udelay(4295000);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    goto $bb4706;

  $bb4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3738} __const_udelay(4295000);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    goto $bb4707;

  $bb4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3739} __const_udelay(4295000);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    goto $bb4708;

  $bb4708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3740} __const_udelay(4295000);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    goto $bb4709;

  $bb4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3741} __const_udelay(4295000);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    goto $bb4710;

  $bb4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3742} __const_udelay(4295000);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    goto $bb4711;

  $bb4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3743} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4712;

  $bb4712:
    assume {:verifier.code 0} true;
    goto $bb4713;

  $bb4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3744} $i790 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $i791 := $eq.i32($i787, $i790);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i791} true;
    goto $bb4714, $bb4715;

  $bb4715:
    assume {:verifier.code 0} true;
    assume !($i791 == 1);
    goto $bb4716;

  $bb4716:
    assume {:verifier.code 0} true;
    goto $bb4719;

  $bb4719:
    assume {:verifier.code 0} true;
    goto $bb4720;

  $bb4720:
    assume {:verifier.code 0} true;
    goto $bb4721;

  $bb4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3745} __const_udelay(4295000);
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    goto $bb4722;

  $bb4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3746} __const_udelay(4295000);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    goto $bb4723;

  $bb4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3747} __const_udelay(4295000);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    goto $bb4724;

  $bb4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3748} __const_udelay(4295000);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    goto $bb4725;

  $bb4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3749} __const_udelay(4295000);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    goto $bb4726;

  $bb4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3750} __const_udelay(4295000);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    goto $bb4727;

  $bb4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3751} __const_udelay(4295000);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    goto $bb4728;

  $bb4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3752} __const_udelay(4295000);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    goto $bb4729;

  $bb4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3753} __const_udelay(4295000);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    goto $bb4730;

  $bb4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3754} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4731;

  $bb4731:
    assume {:verifier.code 0} true;
    goto $bb4732;

  $bb4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3755} $i793 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    $i794 := $eq.i32($i790, $i793);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i794} true;
    goto $bb4733, $bb4734;

  $bb4734:
    assume {:verifier.code 0} true;
    assume !($i794 == 1);
    goto $bb4735;

  $bb4735:
    assume {:verifier.code 0} true;
    goto $bb4738;

  $bb4738:
    assume {:verifier.code 0} true;
    goto $bb4739;

  $bb4739:
    assume {:verifier.code 0} true;
    goto $bb4740;

  $bb4740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3756} __const_udelay(4295000);
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    goto $bb4741;

  $bb4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3757} __const_udelay(4295000);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    goto $bb4742;

  $bb4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3758} __const_udelay(4295000);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    goto $bb4743;

  $bb4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3759} __const_udelay(4295000);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    goto $bb4744;

  $bb4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3760} __const_udelay(4295000);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb4745;

  $bb4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3761} __const_udelay(4295000);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    goto $bb4746;

  $bb4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3762} __const_udelay(4295000);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    goto $bb4747;

  $bb4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3763} __const_udelay(4295000);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    goto $bb4748;

  $bb4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3764} __const_udelay(4295000);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    goto $bb4749;

  $bb4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3765} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4750;

  $bb4750:
    assume {:verifier.code 0} true;
    goto $bb4751;

  $bb4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3766} $i796 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    $i797 := $eq.i32($i793, $i796);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i797} true;
    goto $bb4752, $bb4753;

  $bb4753:
    assume {:verifier.code 0} true;
    assume !($i797 == 1);
    goto $bb4754;

  $bb4754:
    assume {:verifier.code 0} true;
    goto $bb4757;

  $bb4757:
    assume {:verifier.code 0} true;
    goto $bb4758;

  $bb4758:
    assume {:verifier.code 0} true;
    goto $bb4759;

  $bb4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3767} __const_udelay(4295000);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    goto $bb4760;

  $bb4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3768} __const_udelay(4295000);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    goto $bb4761;

  $bb4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3769} __const_udelay(4295000);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    goto $bb4762;

  $bb4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3770} __const_udelay(4295000);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    goto $bb4763;

  $bb4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3771} __const_udelay(4295000);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    goto $bb4764;

  $bb4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3772} __const_udelay(4295000);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    goto $bb4765;

  $bb4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3773} __const_udelay(4295000);
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    goto $bb4766;

  $bb4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3774} __const_udelay(4295000);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    goto $bb4767;

  $bb4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3775} __const_udelay(4295000);
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    goto $bb4768;

  $bb4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3776} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4769;

  $bb4769:
    assume {:verifier.code 0} true;
    goto $bb4770;

  $bb4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3777} $i799 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    $i800 := $eq.i32($i796, $i799);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i800} true;
    goto $bb4771, $bb4772;

  $bb4772:
    assume {:verifier.code 0} true;
    assume !($i800 == 1);
    goto $bb4773;

  $bb4773:
    assume {:verifier.code 0} true;
    goto $bb4776;

  $bb4776:
    assume {:verifier.code 0} true;
    goto $bb4777;

  $bb4777:
    assume {:verifier.code 0} true;
    goto $bb4778;

  $bb4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3778} __const_udelay(4295000);
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    goto $bb4779;

  $bb4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3779} __const_udelay(4295000);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    goto $bb4780;

  $bb4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3780} __const_udelay(4295000);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    goto $bb4781;

  $bb4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3781} __const_udelay(4295000);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    goto $bb4782;

  $bb4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3782} __const_udelay(4295000);
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    goto $bb4783;

  $bb4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3783} __const_udelay(4295000);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    goto $bb4784;

  $bb4784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3784} __const_udelay(4295000);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    goto $bb4785;

  $bb4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3785} __const_udelay(4295000);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    goto $bb4786;

  $bb4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3786} __const_udelay(4295000);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    goto $bb4787;

  $bb4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3787} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4788;

  $bb4788:
    assume {:verifier.code 0} true;
    goto $bb4789;

  $bb4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3788} $i802 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $i803 := $eq.i32($i799, $i802);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i803} true;
    goto $bb4790, $bb4791;

  $bb4791:
    assume {:verifier.code 0} true;
    assume !($i803 == 1);
    goto $bb4792;

  $bb4792:
    assume {:verifier.code 0} true;
    goto $bb4795;

  $bb4795:
    assume {:verifier.code 0} true;
    goto $bb4796;

  $bb4796:
    assume {:verifier.code 0} true;
    goto $bb4797;

  $bb4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3789} __const_udelay(4295000);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    goto $bb4798;

  $bb4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3790} __const_udelay(4295000);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    goto $bb4799;

  $bb4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3791} __const_udelay(4295000);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    goto $bb4800;

  $bb4800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3792} __const_udelay(4295000);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    goto $bb4801;

  $bb4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3793} __const_udelay(4295000);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    goto $bb4802;

  $bb4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3794} __const_udelay(4295000);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    goto $bb4803;

  $bb4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3795} __const_udelay(4295000);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    goto $bb4804;

  $bb4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3796} __const_udelay(4295000);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    goto $bb4805;

  $bb4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3797} __const_udelay(4295000);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    goto $bb4806;

  $bb4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3798} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4807;

  $bb4807:
    assume {:verifier.code 0} true;
    goto $bb4808;

  $bb4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3799} $i805 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $i806 := $eq.i32($i802, $i805);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i806} true;
    goto $bb4809, $bb4810;

  $bb4810:
    assume {:verifier.code 0} true;
    assume !($i806 == 1);
    goto $bb4811;

  $bb4811:
    assume {:verifier.code 0} true;
    goto $bb4814;

  $bb4814:
    assume {:verifier.code 0} true;
    goto $bb4815;

  $bb4815:
    assume {:verifier.code 0} true;
    goto $bb4816;

  $bb4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3800} __const_udelay(4295000);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    goto $bb4817;

  $bb4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3801} __const_udelay(4295000);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    goto $bb4818;

  $bb4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3802} __const_udelay(4295000);
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    goto $bb4819;

  $bb4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3803} __const_udelay(4295000);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    goto $bb4820;

  $bb4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3804} __const_udelay(4295000);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    goto $bb4821;

  $bb4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3805} __const_udelay(4295000);
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    goto $bb4822;

  $bb4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3806} __const_udelay(4295000);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    goto $bb4823;

  $bb4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3807} __const_udelay(4295000);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    goto $bb4824;

  $bb4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3808} __const_udelay(4295000);
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    goto $bb4825;

  $bb4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3809} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4826;

  $bb4826:
    assume {:verifier.code 0} true;
    goto $bb4827;

  $bb4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3810} $i808 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $i809 := $eq.i32($i805, $i808);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i809} true;
    goto $bb4828, $bb4829;

  $bb4829:
    assume {:verifier.code 0} true;
    assume !($i809 == 1);
    goto $bb4830;

  $bb4830:
    assume {:verifier.code 0} true;
    goto $bb4833;

  $bb4833:
    assume {:verifier.code 0} true;
    goto $bb4834;

  $bb4834:
    assume {:verifier.code 0} true;
    goto $bb4835;

  $bb4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3811} __const_udelay(4295000);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    goto $bb4836;

  $bb4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3812} __const_udelay(4295000);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    goto $bb4837;

  $bb4837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3813} __const_udelay(4295000);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    goto $bb4838;

  $bb4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3814} __const_udelay(4295000);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    goto $bb4839;

  $bb4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3815} __const_udelay(4295000);
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    goto $bb4840;

  $bb4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3816} __const_udelay(4295000);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    goto $bb4841;

  $bb4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3817} __const_udelay(4295000);
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    goto $bb4842;

  $bb4842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3818} __const_udelay(4295000);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    goto $bb4843;

  $bb4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3819} __const_udelay(4295000);
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    goto $bb4844;

  $bb4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3820} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4845;

  $bb4845:
    assume {:verifier.code 0} true;
    goto $bb4846;

  $bb4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3821} $i811 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $i812 := $eq.i32($i808, $i811);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i812} true;
    goto $bb4847, $bb4848;

  $bb4848:
    assume {:verifier.code 0} true;
    assume !($i812 == 1);
    goto $bb4849;

  $bb4849:
    assume {:verifier.code 0} true;
    goto $bb4852;

  $bb4852:
    assume {:verifier.code 0} true;
    goto $bb4853;

  $bb4853:
    assume {:verifier.code 0} true;
    goto $bb4854;

  $bb4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3822} __const_udelay(4295000);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    goto $bb4855;

  $bb4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3823} __const_udelay(4295000);
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    goto $bb4856;

  $bb4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3824} __const_udelay(4295000);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    goto $bb4857;

  $bb4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3825} __const_udelay(4295000);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    goto $bb4858;

  $bb4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3826} __const_udelay(4295000);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    goto $bb4859;

  $bb4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3827} __const_udelay(4295000);
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    goto $bb4860;

  $bb4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3828} __const_udelay(4295000);
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    goto $bb4861;

  $bb4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3829} __const_udelay(4295000);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    goto $bb4862;

  $bb4862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3830} __const_udelay(4295000);
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    goto $bb4863;

  $bb4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3831} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4864;

  $bb4864:
    assume {:verifier.code 0} true;
    goto $bb4865;

  $bb4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3832} $i814 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $i815 := $eq.i32($i811, $i814);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i815} true;
    goto $bb4866, $bb4867;

  $bb4867:
    assume {:verifier.code 0} true;
    assume !($i815 == 1);
    goto $bb4868;

  $bb4868:
    assume {:verifier.code 0} true;
    goto $bb4871;

  $bb4871:
    assume {:verifier.code 0} true;
    goto $bb4872;

  $bb4872:
    assume {:verifier.code 0} true;
    goto $bb4873;

  $bb4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3833} __const_udelay(4295000);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    goto $bb4874;

  $bb4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3834} __const_udelay(4295000);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    goto $bb4875;

  $bb4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3835} __const_udelay(4295000);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    goto $bb4876;

  $bb4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3836} __const_udelay(4295000);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    goto $bb4877;

  $bb4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3837} __const_udelay(4295000);
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    goto $bb4878;

  $bb4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3838} __const_udelay(4295000);
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    goto $bb4879;

  $bb4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3839} __const_udelay(4295000);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    goto $bb4880;

  $bb4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3840} __const_udelay(4295000);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    goto $bb4881;

  $bb4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3841} __const_udelay(4295000);
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    goto $bb4882;

  $bb4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3842} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4883;

  $bb4883:
    assume {:verifier.code 0} true;
    goto $bb4884;

  $bb4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3843} $i817 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $i818 := $eq.i32($i814, $i817);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i818} true;
    goto $bb4885, $bb4886;

  $bb4886:
    assume {:verifier.code 0} true;
    assume !($i818 == 1);
    goto $bb4887;

  $bb4887:
    assume {:verifier.code 0} true;
    goto $bb4890;

  $bb4890:
    assume {:verifier.code 0} true;
    goto $bb4891;

  $bb4891:
    assume {:verifier.code 0} true;
    goto $bb4892;

  $bb4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3844} __const_udelay(4295000);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    goto $bb4893;

  $bb4893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3845} __const_udelay(4295000);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    goto $bb4894;

  $bb4894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3846} __const_udelay(4295000);
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    goto $bb4895;

  $bb4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3847} __const_udelay(4295000);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    goto $bb4896;

  $bb4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3848} __const_udelay(4295000);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    goto $bb4897;

  $bb4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3849} __const_udelay(4295000);
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    goto $bb4898;

  $bb4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3850} __const_udelay(4295000);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    goto $bb4899;

  $bb4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3851} __const_udelay(4295000);
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    goto $bb4900;

  $bb4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3852} __const_udelay(4295000);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    goto $bb4901;

  $bb4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3853} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4902;

  $bb4902:
    assume {:verifier.code 0} true;
    goto $bb4903;

  $bb4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3854} $i820 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $i821 := $eq.i32($i817, $i820);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i821} true;
    goto $bb4904, $bb4905;

  $bb4905:
    assume {:verifier.code 0} true;
    assume !($i821 == 1);
    goto $bb4906;

  $bb4906:
    assume {:verifier.code 0} true;
    goto $bb4909;

  $bb4909:
    assume {:verifier.code 0} true;
    goto $bb4910;

  $bb4910:
    assume {:verifier.code 0} true;
    goto $bb4911;

  $bb4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3855} __const_udelay(4295000);
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    goto $bb4912;

  $bb4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3856} __const_udelay(4295000);
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    goto $bb4913;

  $bb4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3857} __const_udelay(4295000);
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    goto $bb4914;

  $bb4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3858} __const_udelay(4295000);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    goto $bb4915;

  $bb4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3859} __const_udelay(4295000);
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    goto $bb4916;

  $bb4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3860} __const_udelay(4295000);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    goto $bb4917;

  $bb4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3861} __const_udelay(4295000);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    goto $bb4918;

  $bb4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3862} __const_udelay(4295000);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    goto $bb4919;

  $bb4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3863} __const_udelay(4295000);
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    goto $bb4920;

  $bb4920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3864} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4921;

  $bb4921:
    assume {:verifier.code 0} true;
    goto $bb4922;

  $bb4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3865} $i823 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    $i824 := $eq.i32($i820, $i823);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i824} true;
    goto $bb4923, $bb4924;

  $bb4924:
    assume {:verifier.code 0} true;
    assume !($i824 == 1);
    goto $bb4925;

  $bb4925:
    assume {:verifier.code 0} true;
    goto $bb4928;

  $bb4928:
    assume {:verifier.code 0} true;
    goto $bb4929;

  $bb4929:
    assume {:verifier.code 0} true;
    goto $bb4930;

  $bb4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3866} __const_udelay(4295000);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    goto $bb4931;

  $bb4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3867} __const_udelay(4295000);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    goto $bb4932;

  $bb4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3868} __const_udelay(4295000);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    goto $bb4933;

  $bb4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3869} __const_udelay(4295000);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    goto $bb4934;

  $bb4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3870} __const_udelay(4295000);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    goto $bb4935;

  $bb4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3871} __const_udelay(4295000);
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    goto $bb4936;

  $bb4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3872} __const_udelay(4295000);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    goto $bb4937;

  $bb4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3873} __const_udelay(4295000);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    goto $bb4938;

  $bb4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3874} __const_udelay(4295000);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    goto $bb4939;

  $bb4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3875} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4940;

  $bb4940:
    assume {:verifier.code 0} true;
    goto $bb4941;

  $bb4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3876} $i826 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    $i827 := $eq.i32($i823, $i826);
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i827} true;
    goto $bb4942, $bb4943;

  $bb4943:
    assume {:verifier.code 0} true;
    assume !($i827 == 1);
    goto $bb4944;

  $bb4944:
    assume {:verifier.code 0} true;
    goto $bb4947;

  $bb4947:
    assume {:verifier.code 0} true;
    goto $bb4948;

  $bb4948:
    assume {:verifier.code 0} true;
    goto $bb4949;

  $bb4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3877} __const_udelay(4295000);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    goto $bb4950;

  $bb4950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3878} __const_udelay(4295000);
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    goto $bb4951;

  $bb4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3879} __const_udelay(4295000);
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    goto $bb4952;

  $bb4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3880} __const_udelay(4295000);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    goto $bb4953;

  $bb4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3881} __const_udelay(4295000);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    goto $bb4954;

  $bb4954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3882} __const_udelay(4295000);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    goto $bb4955;

  $bb4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3883} __const_udelay(4295000);
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    goto $bb4956;

  $bb4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3884} __const_udelay(4295000);
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    goto $bb4957;

  $bb4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3885} __const_udelay(4295000);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    goto $bb4958;

  $bb4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3886} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4959;

  $bb4959:
    assume {:verifier.code 0} true;
    goto $bb4960;

  $bb4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3887} $i829 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $i830 := $eq.i32($i826, $i829);
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i830} true;
    goto $bb4961, $bb4962;

  $bb4962:
    assume {:verifier.code 0} true;
    assume !($i830 == 1);
    goto $bb4963;

  $bb4963:
    assume {:verifier.code 0} true;
    goto $bb4966;

  $bb4966:
    assume {:verifier.code 0} true;
    goto $bb4967;

  $bb4967:
    assume {:verifier.code 0} true;
    goto $bb4968;

  $bb4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3888} __const_udelay(4295000);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    goto $bb4969;

  $bb4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3889} __const_udelay(4295000);
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    goto $bb4970;

  $bb4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3890} __const_udelay(4295000);
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    goto $bb4971;

  $bb4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3891} __const_udelay(4295000);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    goto $bb4972;

  $bb4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3892} __const_udelay(4295000);
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    goto $bb4973;

  $bb4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3893} __const_udelay(4295000);
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    goto $bb4974;

  $bb4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3894} __const_udelay(4295000);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    goto $bb4975;

  $bb4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3895} __const_udelay(4295000);
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    goto $bb4976;

  $bb4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3896} __const_udelay(4295000);
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    goto $bb4977;

  $bb4977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3897} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4978;

  $bb4978:
    assume {:verifier.code 0} true;
    goto $bb4979;

  $bb4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3898} $i832 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $i833 := $eq.i32($i829, $i832);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i833} true;
    goto $bb4980, $bb4981;

  $bb4981:
    assume {:verifier.code 0} true;
    assume !($i833 == 1);
    goto $bb4982;

  $bb4982:
    assume {:verifier.code 0} true;
    goto $bb4985;

  $bb4985:
    assume {:verifier.code 0} true;
    goto $bb4986;

  $bb4986:
    assume {:verifier.code 0} true;
    goto $bb4987;

  $bb4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3899} __const_udelay(4295000);
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    goto $bb4988;

  $bb4988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3900} __const_udelay(4295000);
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    goto $bb4989;

  $bb4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3901} __const_udelay(4295000);
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    goto $bb4990;

  $bb4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3902} __const_udelay(4295000);
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    goto $bb4991;

  $bb4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3903} __const_udelay(4295000);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    goto $bb4992;

  $bb4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3904} __const_udelay(4295000);
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    goto $bb4993;

  $bb4993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3905} __const_udelay(4295000);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    goto $bb4994;

  $bb4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3906} __const_udelay(4295000);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    goto $bb4995;

  $bb4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3907} __const_udelay(4295000);
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    goto $bb4996;

  $bb4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3908} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4997;

  $bb4997:
    assume {:verifier.code 0} true;
    goto $bb4998;

  $bb4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3909} $i835 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $i836 := $eq.i32($i832, $i835);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i836} true;
    goto $bb4999, $bb5000;

  $bb5000:
    assume {:verifier.code 0} true;
    assume !($i836 == 1);
    goto $bb5001;

  $bb5001:
    assume {:verifier.code 0} true;
    goto $bb5004;

  $bb5004:
    assume {:verifier.code 0} true;
    goto $bb5005;

  $bb5005:
    assume {:verifier.code 0} true;
    goto $bb5006;

  $bb5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3910} __const_udelay(4295000);
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    goto $bb5007;

  $bb5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3911} __const_udelay(4295000);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    goto $bb5008;

  $bb5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3912} __const_udelay(4295000);
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    goto $bb5009;

  $bb5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3913} __const_udelay(4295000);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    goto $bb5010;

  $bb5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3914} __const_udelay(4295000);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    goto $bb5011;

  $bb5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3915} __const_udelay(4295000);
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    goto $bb5012;

  $bb5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3916} __const_udelay(4295000);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    goto $bb5013;

  $bb5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3917} __const_udelay(4295000);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    goto $bb5014;

  $bb5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3918} __const_udelay(4295000);
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    goto $bb5015;

  $bb5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3919} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5016;

  $bb5016:
    assume {:verifier.code 0} true;
    goto $bb5017;

  $bb5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3920} $i838 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $i839 := $eq.i32($i835, $i838);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i839} true;
    goto $bb5018, $bb5019;

  $bb5019:
    assume {:verifier.code 0} true;
    assume !($i839 == 1);
    goto $bb5020;

  $bb5020:
    assume {:verifier.code 0} true;
    goto $bb5023;

  $bb5023:
    assume {:verifier.code 0} true;
    goto $bb5024;

  $bb5024:
    assume {:verifier.code 0} true;
    goto $bb5025;

  $bb5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3921} __const_udelay(4295000);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    goto $bb5026;

  $bb5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3922} __const_udelay(4295000);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    goto $bb5027;

  $bb5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3923} __const_udelay(4295000);
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    goto $bb5028;

  $bb5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3924} __const_udelay(4295000);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    goto $bb5029;

  $bb5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3925} __const_udelay(4295000);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    goto $bb5030;

  $bb5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3926} __const_udelay(4295000);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    goto $bb5031;

  $bb5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3927} __const_udelay(4295000);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    goto $bb5032;

  $bb5032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3928} __const_udelay(4295000);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    goto $bb5033;

  $bb5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3929} __const_udelay(4295000);
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    goto $bb5034;

  $bb5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3930} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5035;

  $bb5035:
    assume {:verifier.code 0} true;
    goto $bb5036;

  $bb5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3931} $i841 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $i842 := $eq.i32($i838, $i841);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i842} true;
    goto $bb5037, $bb5038;

  $bb5038:
    assume {:verifier.code 0} true;
    assume !($i842 == 1);
    goto $bb5039;

  $bb5039:
    assume {:verifier.code 0} true;
    goto $bb5042;

  $bb5042:
    assume {:verifier.code 0} true;
    goto $bb5043;

  $bb5043:
    assume {:verifier.code 0} true;
    goto $bb5044;

  $bb5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3932} __const_udelay(4295000);
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    goto $bb5045;

  $bb5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3933} __const_udelay(4295000);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    goto $bb5046;

  $bb5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3934} __const_udelay(4295000);
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    goto $bb5047;

  $bb5047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3935} __const_udelay(4295000);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    goto $bb5048;

  $bb5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3936} __const_udelay(4295000);
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    goto $bb5049;

  $bb5049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3937} __const_udelay(4295000);
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    goto $bb5050;

  $bb5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3938} __const_udelay(4295000);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    goto $bb5051;

  $bb5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3939} __const_udelay(4295000);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    goto $bb5052;

  $bb5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3940} __const_udelay(4295000);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    goto $bb5053;

  $bb5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3941} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5054;

  $bb5054:
    assume {:verifier.code 0} true;
    goto $bb5055;

  $bb5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3942} $i844 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $i845 := $eq.i32($i841, $i844);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i845} true;
    goto $bb5056, $bb5057;

  $bb5057:
    assume {:verifier.code 0} true;
    assume !($i845 == 1);
    goto $bb5058;

  $bb5058:
    assume {:verifier.code 0} true;
    goto $bb5061;

  $bb5061:
    assume {:verifier.code 0} true;
    goto $bb5062;

  $bb5062:
    assume {:verifier.code 0} true;
    goto $bb5063;

  $bb5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3943} __const_udelay(4295000);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    goto $bb5064;

  $bb5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3944} __const_udelay(4295000);
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    goto $bb5065;

  $bb5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3945} __const_udelay(4295000);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    goto $bb5066;

  $bb5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3946} __const_udelay(4295000);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    goto $bb5067;

  $bb5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3947} __const_udelay(4295000);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    goto $bb5068;

  $bb5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3948} __const_udelay(4295000);
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    goto $bb5069;

  $bb5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3949} __const_udelay(4295000);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    goto $bb5070;

  $bb5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3950} __const_udelay(4295000);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    goto $bb5071;

  $bb5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3951} __const_udelay(4295000);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    goto $bb5072;

  $bb5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3952} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5073;

  $bb5073:
    assume {:verifier.code 0} true;
    goto $bb5074;

  $bb5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3953} $i847 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $i848 := $eq.i32($i844, $i847);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i848} true;
    goto $bb5075, $bb5076;

  $bb5076:
    assume {:verifier.code 0} true;
    assume !($i848 == 1);
    goto $bb5077;

  $bb5077:
    assume {:verifier.code 0} true;
    goto $bb5080;

  $bb5080:
    assume {:verifier.code 0} true;
    goto $bb5081;

  $bb5081:
    assume {:verifier.code 0} true;
    goto $bb5082;

  $bb5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3954} __const_udelay(4295000);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    goto $bb5083;

  $bb5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3955} __const_udelay(4295000);
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    goto $bb5084;

  $bb5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3956} __const_udelay(4295000);
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    goto $bb5085;

  $bb5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3957} __const_udelay(4295000);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    goto $bb5086;

  $bb5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3958} __const_udelay(4295000);
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    goto $bb5087;

  $bb5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3959} __const_udelay(4295000);
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    goto $bb5088;

  $bb5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3960} __const_udelay(4295000);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    goto $bb5089;

  $bb5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3961} __const_udelay(4295000);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    goto $bb5090;

  $bb5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3962} __const_udelay(4295000);
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    goto $bb5091;

  $bb5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3963} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5092;

  $bb5092:
    assume {:verifier.code 0} true;
    goto $bb5093;

  $bb5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3964} $i850 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $i851 := $eq.i32($i847, $i850);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i851} true;
    goto $bb5094, $bb5095;

  $bb5095:
    assume {:verifier.code 0} true;
    assume !($i851 == 1);
    goto $bb5096;

  $bb5096:
    assume {:verifier.code 0} true;
    goto $bb5099;

  $bb5099:
    assume {:verifier.code 0} true;
    goto $bb5100;

  $bb5100:
    assume {:verifier.code 0} true;
    goto $bb5101;

  $bb5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3965} __const_udelay(4295000);
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    goto $bb5102;

  $bb5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3966} __const_udelay(4295000);
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    goto $bb5103;

  $bb5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3967} __const_udelay(4295000);
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    goto $bb5104;

  $bb5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3968} __const_udelay(4295000);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    goto $bb5105;

  $bb5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3969} __const_udelay(4295000);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    goto $bb5106;

  $bb5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3970} __const_udelay(4295000);
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    goto $bb5107;

  $bb5107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3971} __const_udelay(4295000);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    goto $bb5108;

  $bb5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3972} __const_udelay(4295000);
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    goto $bb5109;

  $bb5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3973} __const_udelay(4295000);
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    goto $bb5110;

  $bb5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3974} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5111;

  $bb5111:
    assume {:verifier.code 0} true;
    goto $bb5112;

  $bb5112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3975} $i853 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $i854 := $eq.i32($i850, $i853);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i854} true;
    goto $bb5113, $bb5114;

  $bb5114:
    assume {:verifier.code 0} true;
    assume !($i854 == 1);
    goto $bb5115;

  $bb5115:
    assume {:verifier.code 0} true;
    goto $bb5118;

  $bb5118:
    assume {:verifier.code 0} true;
    goto $bb5119;

  $bb5119:
    assume {:verifier.code 0} true;
    goto $bb5120;

  $bb5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3976} __const_udelay(4295000);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    goto $bb5121;

  $bb5121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3977} __const_udelay(4295000);
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    goto $bb5122;

  $bb5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3978} __const_udelay(4295000);
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    goto $bb5123;

  $bb5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3979} __const_udelay(4295000);
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    goto $bb5124;

  $bb5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3980} __const_udelay(4295000);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    goto $bb5125;

  $bb5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3981} __const_udelay(4295000);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    goto $bb5126;

  $bb5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3982} __const_udelay(4295000);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    goto $bb5127;

  $bb5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3983} __const_udelay(4295000);
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    goto $bb5128;

  $bb5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3984} __const_udelay(4295000);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    goto $bb5129;

  $bb5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3985} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5130;

  $bb5130:
    assume {:verifier.code 0} true;
    goto $bb5131;

  $bb5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3986} $i856 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    $i857 := $eq.i32($i853, $i856);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i857} true;
    goto $bb5132, $bb5133;

  $bb5133:
    assume {:verifier.code 0} true;
    assume !($i857 == 1);
    goto $bb5134;

  $bb5134:
    assume {:verifier.code 0} true;
    goto $bb5137;

  $bb5137:
    assume {:verifier.code 0} true;
    goto $bb5138;

  $bb5138:
    assume {:verifier.code 0} true;
    goto $bb5139;

  $bb5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3987} __const_udelay(4295000);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    goto $bb5140;

  $bb5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3988} __const_udelay(4295000);
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    goto $bb5141;

  $bb5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3989} __const_udelay(4295000);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    goto $bb5142;

  $bb5142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3990} __const_udelay(4295000);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    goto $bb5143;

  $bb5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3991} __const_udelay(4295000);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    goto $bb5144;

  $bb5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3992} __const_udelay(4295000);
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    goto $bb5145;

  $bb5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3993} __const_udelay(4295000);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    goto $bb5146;

  $bb5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3994} __const_udelay(4295000);
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    goto $bb5147;

  $bb5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3995} __const_udelay(4295000);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    goto $bb5148;

  $bb5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3996} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5149;

  $bb5149:
    assume {:verifier.code 0} true;
    goto $bb5150;

  $bb5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3997} $i859 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    $i860 := $eq.i32($i856, $i859);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i860} true;
    goto $bb5151, $bb5152;

  $bb5152:
    assume {:verifier.code 0} true;
    assume !($i860 == 1);
    goto $bb5153;

  $bb5153:
    assume {:verifier.code 0} true;
    goto $bb5156;

  $bb5156:
    assume {:verifier.code 0} true;
    goto $bb5157;

  $bb5157:
    assume {:verifier.code 0} true;
    goto $bb5158;

  $bb5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3998} __const_udelay(4295000);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    goto $bb5159;

  $bb5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3999} __const_udelay(4295000);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    goto $bb5160;

  $bb5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4000} __const_udelay(4295000);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    goto $bb5161;

  $bb5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4001} __const_udelay(4295000);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    goto $bb5162;

  $bb5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4002} __const_udelay(4295000);
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    goto $bb5163;

  $bb5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4003} __const_udelay(4295000);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    goto $bb5164;

  $bb5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4004} __const_udelay(4295000);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    goto $bb5165;

  $bb5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4005} __const_udelay(4295000);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    goto $bb5166;

  $bb5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4006} __const_udelay(4295000);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    goto $bb5167;

  $bb5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4007} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5168;

  $bb5168:
    assume {:verifier.code 0} true;
    goto $bb5169;

  $bb5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4008} $i862 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    $i863 := $eq.i32($i859, $i862);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i863} true;
    goto $bb5170, $bb5171;

  $bb5171:
    assume {:verifier.code 0} true;
    assume !($i863 == 1);
    goto $bb5172;

  $bb5172:
    assume {:verifier.code 0} true;
    goto $bb5175;

  $bb5175:
    assume {:verifier.code 0} true;
    goto $bb5176;

  $bb5176:
    assume {:verifier.code 0} true;
    goto $bb5177;

  $bb5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4009} __const_udelay(4295000);
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    goto $bb5178;

  $bb5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4010} __const_udelay(4295000);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    goto $bb5179;

  $bb5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4011} __const_udelay(4295000);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    goto $bb5180;

  $bb5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4012} __const_udelay(4295000);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    goto $bb5181;

  $bb5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4013} __const_udelay(4295000);
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    goto $bb5182;

  $bb5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4014} __const_udelay(4295000);
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    goto $bb5183;

  $bb5183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4015} __const_udelay(4295000);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    goto $bb5184;

  $bb5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4016} __const_udelay(4295000);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    goto $bb5185;

  $bb5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4017} __const_udelay(4295000);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    goto $bb5186;

  $bb5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4018} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5187;

  $bb5187:
    assume {:verifier.code 0} true;
    goto $bb5188;

  $bb5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4019} $i865 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $i866 := $eq.i32($i862, $i865);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i866} true;
    goto $bb5189, $bb5190;

  $bb5190:
    assume {:verifier.code 0} true;
    assume !($i866 == 1);
    goto $bb5191;

  $bb5191:
    assume {:verifier.code 0} true;
    goto $bb5194;

  $bb5194:
    assume {:verifier.code 0} true;
    goto $bb5195;

  $bb5195:
    assume {:verifier.code 0} true;
    goto $bb5196;

  $bb5196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4020} __const_udelay(4295000);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    goto $bb5197;

  $bb5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4021} __const_udelay(4295000);
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    goto $bb5198;

  $bb5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4022} __const_udelay(4295000);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    goto $bb5199;

  $bb5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4023} __const_udelay(4295000);
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    goto $bb5200;

  $bb5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4024} __const_udelay(4295000);
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    goto $bb5201;

  $bb5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4025} __const_udelay(4295000);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    goto $bb5202;

  $bb5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4026} __const_udelay(4295000);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    goto $bb5203;

  $bb5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4027} __const_udelay(4295000);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    goto $bb5204;

  $bb5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4028} __const_udelay(4295000);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    goto $bb5205;

  $bb5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4029} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5206;

  $bb5206:
    assume {:verifier.code 0} true;
    goto $bb5207;

  $bb5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4030} $i868 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $i869 := $eq.i32($i865, $i868);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i869} true;
    goto $bb5208, $bb5209;

  $bb5209:
    assume {:verifier.code 0} true;
    assume !($i869 == 1);
    goto $bb5210;

  $bb5210:
    assume {:verifier.code 0} true;
    goto $bb5213;

  $bb5213:
    assume {:verifier.code 0} true;
    goto $bb5214;

  $bb5214:
    assume {:verifier.code 0} true;
    goto $bb5215;

  $bb5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4031} __const_udelay(4295000);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    goto $bb5216;

  $bb5216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4032} __const_udelay(4295000);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    goto $bb5217;

  $bb5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4033} __const_udelay(4295000);
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    goto $bb5218;

  $bb5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4034} __const_udelay(4295000);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    goto $bb5219;

  $bb5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4035} __const_udelay(4295000);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    goto $bb5220;

  $bb5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4036} __const_udelay(4295000);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    goto $bb5221;

  $bb5221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4037} __const_udelay(4295000);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    goto $bb5222;

  $bb5222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4038} __const_udelay(4295000);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    goto $bb5223;

  $bb5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4039} __const_udelay(4295000);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    goto $bb5224;

  $bb5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4040} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5225;

  $bb5225:
    assume {:verifier.code 0} true;
    goto $bb5226;

  $bb5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4041} $i871 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    $i872 := $eq.i32($i868, $i871);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i872} true;
    goto $bb5227, $bb5228;

  $bb5228:
    assume {:verifier.code 0} true;
    assume !($i872 == 1);
    goto $bb5229;

  $bb5229:
    assume {:verifier.code 0} true;
    goto $bb5232;

  $bb5232:
    assume {:verifier.code 0} true;
    goto $bb5233;

  $bb5233:
    assume {:verifier.code 0} true;
    goto $bb5234;

  $bb5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4042} __const_udelay(4295000);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    goto $bb5235;

  $bb5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4043} __const_udelay(4295000);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    goto $bb5236;

  $bb5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4044} __const_udelay(4295000);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    goto $bb5237;

  $bb5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4045} __const_udelay(4295000);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    goto $bb5238;

  $bb5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4046} __const_udelay(4295000);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    goto $bb5239;

  $bb5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4047} __const_udelay(4295000);
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    goto $bb5240;

  $bb5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4048} __const_udelay(4295000);
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    goto $bb5241;

  $bb5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4049} __const_udelay(4295000);
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    goto $bb5242;

  $bb5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4050} __const_udelay(4295000);
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    goto $bb5243;

  $bb5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4051} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5244;

  $bb5244:
    assume {:verifier.code 0} true;
    goto $bb5245;

  $bb5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4052} $i874 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i875 := $eq.i32($i871, $i874);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i875} true;
    goto $bb5246, $bb5247;

  $bb5247:
    assume {:verifier.code 0} true;
    assume !($i875 == 1);
    goto $bb5248;

  $bb5248:
    assume {:verifier.code 0} true;
    goto $bb5251;

  $bb5251:
    assume {:verifier.code 0} true;
    goto $bb5252;

  $bb5252:
    assume {:verifier.code 0} true;
    goto $bb5253;

  $bb5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4053} __const_udelay(4295000);
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    goto $bb5254;

  $bb5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4054} __const_udelay(4295000);
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    goto $bb5255;

  $bb5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4055} __const_udelay(4295000);
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    goto $bb5256;

  $bb5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4056} __const_udelay(4295000);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    goto $bb5257;

  $bb5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4057} __const_udelay(4295000);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    goto $bb5258;

  $bb5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4058} __const_udelay(4295000);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    goto $bb5259;

  $bb5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4059} __const_udelay(4295000);
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    goto $bb5260;

  $bb5260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4060} __const_udelay(4295000);
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    goto $bb5261;

  $bb5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4061} __const_udelay(4295000);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    goto $bb5262;

  $bb5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4062} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5263;

  $bb5263:
    assume {:verifier.code 0} true;
    goto $bb5264;

  $bb5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4063} $i877 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $i878 := $eq.i32($i874, $i877);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i878} true;
    goto $bb5265, $bb5266;

  $bb5266:
    assume {:verifier.code 0} true;
    assume !($i878 == 1);
    goto $bb5267;

  $bb5267:
    assume {:verifier.code 0} true;
    goto $bb5270;

  $bb5270:
    assume {:verifier.code 0} true;
    goto $bb5271;

  $bb5271:
    assume {:verifier.code 0} true;
    goto $bb5272;

  $bb5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4064} __const_udelay(4295000);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    goto $bb5273;

  $bb5273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4065} __const_udelay(4295000);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    goto $bb5274;

  $bb5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4066} __const_udelay(4295000);
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    goto $bb5275;

  $bb5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4067} __const_udelay(4295000);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    goto $bb5276;

  $bb5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4068} __const_udelay(4295000);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    goto $bb5277;

  $bb5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4069} __const_udelay(4295000);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    goto $bb5278;

  $bb5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4070} __const_udelay(4295000);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    goto $bb5279;

  $bb5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4071} __const_udelay(4295000);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    goto $bb5280;

  $bb5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4072} __const_udelay(4295000);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    goto $bb5281;

  $bb5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4073} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5282;

  $bb5282:
    assume {:verifier.code 0} true;
    goto $bb5283;

  $bb5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4074} $i880 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $i881 := $eq.i32($i877, $i880);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i881} true;
    goto $bb5284, $bb5285;

  $bb5285:
    assume {:verifier.code 0} true;
    assume !($i881 == 1);
    goto $bb5286;

  $bb5286:
    assume {:verifier.code 0} true;
    goto $bb5289;

  $bb5289:
    assume {:verifier.code 0} true;
    goto $bb5290;

  $bb5290:
    assume {:verifier.code 0} true;
    goto $bb5291;

  $bb5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4075} __const_udelay(4295000);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    goto $bb5292;

  $bb5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4076} __const_udelay(4295000);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    goto $bb5293;

  $bb5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4077} __const_udelay(4295000);
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    goto $bb5294;

  $bb5294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4078} __const_udelay(4295000);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    goto $bb5295;

  $bb5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4079} __const_udelay(4295000);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    goto $bb5296;

  $bb5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4080} __const_udelay(4295000);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    goto $bb5297;

  $bb5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4081} __const_udelay(4295000);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    goto $bb5298;

  $bb5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4082} __const_udelay(4295000);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    goto $bb5299;

  $bb5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4083} __const_udelay(4295000);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    goto $bb5300;

  $bb5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4084} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5301;

  $bb5301:
    assume {:verifier.code 0} true;
    goto $bb5302;

  $bb5302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4085} $i883 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $i884 := $eq.i32($i880, $i883);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i884} true;
    goto $bb5303, $bb5304;

  $bb5304:
    assume {:verifier.code 0} true;
    assume !($i884 == 1);
    goto $bb5305;

  $bb5305:
    assume {:verifier.code 0} true;
    goto $bb5308;

  $bb5308:
    assume {:verifier.code 0} true;
    goto $bb5309;

  $bb5309:
    assume {:verifier.code 0} true;
    goto $bb5310;

  $bb5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4086} __const_udelay(4295000);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    goto $bb5311;

  $bb5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4087} __const_udelay(4295000);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    goto $bb5312;

  $bb5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4088} __const_udelay(4295000);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    goto $bb5313;

  $bb5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4089} __const_udelay(4295000);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    goto $bb5314;

  $bb5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4090} __const_udelay(4295000);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    goto $bb5315;

  $bb5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4091} __const_udelay(4295000);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    goto $bb5316;

  $bb5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4092} __const_udelay(4295000);
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    goto $bb5317;

  $bb5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4093} __const_udelay(4295000);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    goto $bb5318;

  $bb5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4094} __const_udelay(4295000);
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    goto $bb5319;

  $bb5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4095} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5320;

  $bb5320:
    assume {:verifier.code 0} true;
    goto $bb5321;

  $bb5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4096} $i886 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $i887 := $eq.i32($i883, $i886);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i887} true;
    goto $bb5322, $bb5323;

  $bb5323:
    assume {:verifier.code 0} true;
    assume !($i887 == 1);
    goto $bb5324;

  $bb5324:
    assume {:verifier.code 0} true;
    goto $bb5327;

  $bb5327:
    assume {:verifier.code 0} true;
    goto $bb5328;

  $bb5328:
    assume {:verifier.code 0} true;
    goto $bb5329;

  $bb5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4097} __const_udelay(4295000);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    goto $bb5330;

  $bb5330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4098} __const_udelay(4295000);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    goto $bb5331;

  $bb5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4099} __const_udelay(4295000);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    goto $bb5332;

  $bb5332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4100} __const_udelay(4295000);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    goto $bb5333;

  $bb5333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4101} __const_udelay(4295000);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    goto $bb5334;

  $bb5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4102} __const_udelay(4295000);
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    goto $bb5335;

  $bb5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4103} __const_udelay(4295000);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    goto $bb5336;

  $bb5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4104} __const_udelay(4295000);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    goto $bb5337;

  $bb5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4105} __const_udelay(4295000);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    goto $bb5338;

  $bb5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4106} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5339;

  $bb5339:
    assume {:verifier.code 0} true;
    goto $bb5340;

  $bb5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4107} $i889 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    $i890 := $eq.i32($i886, $i889);
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i890} true;
    goto $bb5341, $bb5342;

  $bb5342:
    assume {:verifier.code 0} true;
    assume !($i890 == 1);
    goto $bb5343;

  $bb5343:
    assume {:verifier.code 0} true;
    goto $bb5346;

  $bb5346:
    assume {:verifier.code 0} true;
    goto $bb5347;

  $bb5347:
    assume {:verifier.code 0} true;
    goto $bb5348;

  $bb5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4108} __const_udelay(4295000);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    goto $bb5349;

  $bb5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4109} __const_udelay(4295000);
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    goto $bb5350;

  $bb5350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4110} __const_udelay(4295000);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    goto $bb5351;

  $bb5351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4111} __const_udelay(4295000);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    goto $bb5352;

  $bb5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4112} __const_udelay(4295000);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    goto $bb5353;

  $bb5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4113} __const_udelay(4295000);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    goto $bb5354;

  $bb5354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4114} __const_udelay(4295000);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    goto $bb5355;

  $bb5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4115} __const_udelay(4295000);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    goto $bb5356;

  $bb5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4116} __const_udelay(4295000);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    goto $bb5357;

  $bb5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4117} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5358;

  $bb5358:
    assume {:verifier.code 0} true;
    goto $bb5359;

  $bb5359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4118} $i892 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    $i893 := $eq.i32($i889, $i892);
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i893} true;
    goto $bb5360, $bb5361;

  $bb5361:
    assume {:verifier.code 0} true;
    assume !($i893 == 1);
    goto $bb5362;

  $bb5362:
    assume {:verifier.code 0} true;
    goto $bb5365;

  $bb5365:
    assume {:verifier.code 0} true;
    goto $bb5366;

  $bb5366:
    assume {:verifier.code 0} true;
    goto $bb5367;

  $bb5367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4119} __const_udelay(4295000);
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    goto $bb5368;

  $bb5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4120} __const_udelay(4295000);
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    goto $bb5369;

  $bb5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4121} __const_udelay(4295000);
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    goto $bb5370;

  $bb5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4122} __const_udelay(4295000);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    goto $bb5371;

  $bb5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4123} __const_udelay(4295000);
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    goto $bb5372;

  $bb5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4124} __const_udelay(4295000);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    goto $bb5373;

  $bb5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4125} __const_udelay(4295000);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    goto $bb5374;

  $bb5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4126} __const_udelay(4295000);
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    goto $bb5375;

  $bb5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4127} __const_udelay(4295000);
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    goto $bb5376;

  $bb5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4128} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5377;

  $bb5377:
    assume {:verifier.code 0} true;
    goto $bb5378;

  $bb5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4129} $i895 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    $i896 := $eq.i32($i892, $i895);
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i896} true;
    goto $bb5379, $bb5380;

  $bb5380:
    assume {:verifier.code 0} true;
    assume !($i896 == 1);
    goto $bb5381;

  $bb5381:
    assume {:verifier.code 0} true;
    goto $bb5384;

  $bb5384:
    assume {:verifier.code 0} true;
    goto $bb5385;

  $bb5385:
    assume {:verifier.code 0} true;
    goto $bb5386;

  $bb5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4130} __const_udelay(4295000);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    goto $bb5387;

  $bb5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4131} __const_udelay(4295000);
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    goto $bb5388;

  $bb5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4132} __const_udelay(4295000);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    goto $bb5389;

  $bb5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4133} __const_udelay(4295000);
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    goto $bb5390;

  $bb5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4134} __const_udelay(4295000);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    goto $bb5391;

  $bb5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4135} __const_udelay(4295000);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    goto $bb5392;

  $bb5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4136} __const_udelay(4295000);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    goto $bb5393;

  $bb5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4137} __const_udelay(4295000);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    goto $bb5394;

  $bb5394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4138} __const_udelay(4295000);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    goto $bb5395;

  $bb5395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4139} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5396;

  $bb5396:
    assume {:verifier.code 0} true;
    goto $bb5397;

  $bb5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4140} $i898 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $i899 := $eq.i32($i895, $i898);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i899} true;
    goto $bb5398, $bb5399;

  $bb5399:
    assume {:verifier.code 0} true;
    assume !($i899 == 1);
    goto $bb5400;

  $bb5400:
    assume {:verifier.code 0} true;
    goto $bb5403;

  $bb5403:
    assume {:verifier.code 0} true;
    goto $bb5404;

  $bb5404:
    assume {:verifier.code 0} true;
    goto $bb5405;

  $bb5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4141} __const_udelay(4295000);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    goto $bb5406;

  $bb5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4142} __const_udelay(4295000);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    goto $bb5407;

  $bb5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4143} __const_udelay(4295000);
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    goto $bb5408;

  $bb5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4144} __const_udelay(4295000);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    goto $bb5409;

  $bb5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4145} __const_udelay(4295000);
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    goto $bb5410;

  $bb5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4146} __const_udelay(4295000);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    goto $bb5411;

  $bb5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4147} __const_udelay(4295000);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    goto $bb5412;

  $bb5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4148} __const_udelay(4295000);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    goto $bb5413;

  $bb5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4149} __const_udelay(4295000);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    goto $bb5414;

  $bb5414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4150} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5415;

  $bb5415:
    assume {:verifier.code 0} true;
    goto $bb5416;

  $bb5416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4151} $i901 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    $i902 := $eq.i32($i898, $i901);
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i902} true;
    goto $bb5417, $bb5418;

  $bb5418:
    assume {:verifier.code 0} true;
    assume !($i902 == 1);
    goto $bb5419;

  $bb5419:
    assume {:verifier.code 0} true;
    goto $bb5422;

  $bb5422:
    assume {:verifier.code 0} true;
    goto $bb5423;

  $bb5423:
    assume {:verifier.code 0} true;
    goto $bb5424;

  $bb5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4152} __const_udelay(4295000);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    goto $bb5425;

  $bb5425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4153} __const_udelay(4295000);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    goto $bb5426;

  $bb5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4154} __const_udelay(4295000);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    goto $bb5427;

  $bb5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4155} __const_udelay(4295000);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    goto $bb5428;

  $bb5428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4156} __const_udelay(4295000);
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    goto $bb5429;

  $bb5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4157} __const_udelay(4295000);
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    goto $bb5430;

  $bb5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4158} __const_udelay(4295000);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    goto $bb5431;

  $bb5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4159} __const_udelay(4295000);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    goto $bb5432;

  $bb5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4160} __const_udelay(4295000);
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    goto $bb5433;

  $bb5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4161} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5434;

  $bb5434:
    assume {:verifier.code 0} true;
    goto $bb5435;

  $bb5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4162} $i904 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $i905 := $eq.i32($i901, $i904);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i905} true;
    goto $bb5436, $bb5437;

  $bb5437:
    assume {:verifier.code 0} true;
    assume !($i905 == 1);
    goto $bb5438;

  $bb5438:
    assume {:verifier.code 0} true;
    goto $bb5441;

  $bb5441:
    assume {:verifier.code 0} true;
    goto $bb5442;

  $bb5442:
    assume {:verifier.code 0} true;
    goto $bb5443;

  $bb5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4163} __const_udelay(4295000);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    goto $bb5444;

  $bb5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4164} __const_udelay(4295000);
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    goto $bb5445;

  $bb5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4165} __const_udelay(4295000);
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    goto $bb5446;

  $bb5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4166} __const_udelay(4295000);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    goto $bb5447;

  $bb5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4167} __const_udelay(4295000);
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    goto $bb5448;

  $bb5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4168} __const_udelay(4295000);
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    goto $bb5449;

  $bb5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4169} __const_udelay(4295000);
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    goto $bb5450;

  $bb5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4170} __const_udelay(4295000);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    goto $bb5451;

  $bb5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4171} __const_udelay(4295000);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    goto $bb5452;

  $bb5452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4172} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5453;

  $bb5453:
    assume {:verifier.code 0} true;
    goto $bb5454;

  $bb5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4173} $i907 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $i908 := $eq.i32($i904, $i907);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i908} true;
    goto $bb5455, $bb5456;

  $bb5456:
    assume {:verifier.code 0} true;
    assume !($i908 == 1);
    goto $bb5457;

  $bb5457:
    assume {:verifier.code 0} true;
    goto $bb5460;

  $bb5460:
    assume {:verifier.code 0} true;
    goto $bb5461;

  $bb5461:
    assume {:verifier.code 0} true;
    goto $bb5462;

  $bb5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4174} __const_udelay(4295000);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    goto $bb5463;

  $bb5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4175} __const_udelay(4295000);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    goto $bb5464;

  $bb5464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4176} __const_udelay(4295000);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    goto $bb5465;

  $bb5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4177} __const_udelay(4295000);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    goto $bb5466;

  $bb5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4178} __const_udelay(4295000);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    goto $bb5467;

  $bb5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4179} __const_udelay(4295000);
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    goto $bb5468;

  $bb5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4180} __const_udelay(4295000);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    goto $bb5469;

  $bb5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4181} __const_udelay(4295000);
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    goto $bb5470;

  $bb5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4182} __const_udelay(4295000);
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    goto $bb5471;

  $bb5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4183} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5472;

  $bb5472:
    assume {:verifier.code 0} true;
    goto $bb5473;

  $bb5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4184} $i910 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $i911 := $eq.i32($i907, $i910);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i911} true;
    goto $bb5474, $bb5475;

  $bb5475:
    assume {:verifier.code 0} true;
    assume !($i911 == 1);
    goto $bb5476;

  $bb5476:
    assume {:verifier.code 0} true;
    goto $bb5479;

  $bb5479:
    assume {:verifier.code 0} true;
    goto $bb5480;

  $bb5480:
    assume {:verifier.code 0} true;
    goto $bb5481;

  $bb5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4185} __const_udelay(4295000);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    goto $bb5482;

  $bb5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4186} __const_udelay(4295000);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    goto $bb5483;

  $bb5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4187} __const_udelay(4295000);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    goto $bb5484;

  $bb5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4188} __const_udelay(4295000);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    goto $bb5485;

  $bb5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4189} __const_udelay(4295000);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    goto $bb5486;

  $bb5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4190} __const_udelay(4295000);
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    goto $bb5487;

  $bb5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4191} __const_udelay(4295000);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    goto $bb5488;

  $bb5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4192} __const_udelay(4295000);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    goto $bb5489;

  $bb5489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4193} __const_udelay(4295000);
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    goto $bb5490;

  $bb5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4194} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5491;

  $bb5491:
    assume {:verifier.code 0} true;
    goto $bb5492;

  $bb5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4195} $i913 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $i914 := $eq.i32($i910, $i913);
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i914} true;
    goto $bb5493, $bb5494;

  $bb5494:
    assume {:verifier.code 0} true;
    assume !($i914 == 1);
    goto $bb5495;

  $bb5495:
    assume {:verifier.code 0} true;
    goto $bb5498;

  $bb5498:
    assume {:verifier.code 0} true;
    goto $bb5499;

  $bb5499:
    assume {:verifier.code 0} true;
    goto $bb5500;

  $bb5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4196} __const_udelay(4295000);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    goto $bb5501;

  $bb5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4197} __const_udelay(4295000);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    goto $bb5502;

  $bb5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4198} __const_udelay(4295000);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    goto $bb5503;

  $bb5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4199} __const_udelay(4295000);
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    goto $bb5504;

  $bb5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4200} __const_udelay(4295000);
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    goto $bb5505;

  $bb5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4201} __const_udelay(4295000);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    goto $bb5506;

  $bb5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4202} __const_udelay(4295000);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    goto $bb5507;

  $bb5507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4203} __const_udelay(4295000);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    goto $bb5508;

  $bb5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4204} __const_udelay(4295000);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    goto $bb5509;

  $bb5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4205} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5510;

  $bb5510:
    assume {:verifier.code 0} true;
    goto $bb5511;

  $bb5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4206} $i916 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    $i917 := $eq.i32($i913, $i916);
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i917} true;
    goto $bb5512, $bb5513;

  $bb5513:
    assume {:verifier.code 0} true;
    assume !($i917 == 1);
    goto $bb5514;

  $bb5514:
    assume {:verifier.code 0} true;
    goto $bb5517;

  $bb5517:
    assume {:verifier.code 0} true;
    goto $bb5518;

  $bb5518:
    assume {:verifier.code 0} true;
    goto $bb5519;

  $bb5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4207} __const_udelay(4295000);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    goto $bb5520;

  $bb5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4208} __const_udelay(4295000);
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    goto $bb5521;

  $bb5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4209} __const_udelay(4295000);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    goto $bb5522;

  $bb5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4210} __const_udelay(4295000);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    goto $bb5523;

  $bb5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4211} __const_udelay(4295000);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    goto $bb5524;

  $bb5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4212} __const_udelay(4295000);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    goto $bb5525;

  $bb5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4213} __const_udelay(4295000);
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    goto $bb5526;

  $bb5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4214} __const_udelay(4295000);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    goto $bb5527;

  $bb5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4215} __const_udelay(4295000);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    goto $bb5528;

  $bb5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4216} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5529;

  $bb5529:
    assume {:verifier.code 0} true;
    goto $bb5530;

  $bb5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4217} $i919 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    $i920 := $eq.i32($i916, $i919);
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i920} true;
    goto $bb5531, $bb5532;

  $bb5532:
    assume {:verifier.code 0} true;
    assume !($i920 == 1);
    goto $bb5533;

  $bb5533:
    assume {:verifier.code 0} true;
    goto $bb5536;

  $bb5536:
    assume {:verifier.code 0} true;
    goto $bb5537;

  $bb5537:
    assume {:verifier.code 0} true;
    goto $bb5538;

  $bb5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4218} __const_udelay(4295000);
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    goto $bb5539;

  $bb5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4219} __const_udelay(4295000);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    goto $bb5540;

  $bb5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4220} __const_udelay(4295000);
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    goto $bb5541;

  $bb5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4221} __const_udelay(4295000);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    goto $bb5542;

  $bb5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4222} __const_udelay(4295000);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    goto $bb5543;

  $bb5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4223} __const_udelay(4295000);
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    goto $bb5544;

  $bb5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4224} __const_udelay(4295000);
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    goto $bb5545;

  $bb5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4225} __const_udelay(4295000);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    goto $bb5546;

  $bb5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4226} __const_udelay(4295000);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    goto $bb5547;

  $bb5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4227} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5548;

  $bb5548:
    assume {:verifier.code 0} true;
    goto $bb5549;

  $bb5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4228} $i922 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    $i923 := $eq.i32($i919, $i922);
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i923} true;
    goto $bb5550, $bb5551;

  $bb5551:
    assume {:verifier.code 0} true;
    assume !($i923 == 1);
    goto $bb5552;

  $bb5552:
    assume {:verifier.code 0} true;
    goto $bb5555;

  $bb5555:
    assume {:verifier.code 0} true;
    goto $bb5556;

  $bb5556:
    assume {:verifier.code 0} true;
    goto $bb5557;

  $bb5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4229} __const_udelay(4295000);
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    goto $bb5558;

  $bb5558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4230} __const_udelay(4295000);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    goto $bb5559;

  $bb5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4231} __const_udelay(4295000);
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    goto $bb5560;

  $bb5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4232} __const_udelay(4295000);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    goto $bb5561;

  $bb5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4233} __const_udelay(4295000);
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    goto $bb5562;

  $bb5562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4234} __const_udelay(4295000);
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    goto $bb5563;

  $bb5563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4235} __const_udelay(4295000);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    goto $bb5564;

  $bb5564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4236} __const_udelay(4295000);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    goto $bb5565;

  $bb5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4237} __const_udelay(4295000);
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    goto $bb5566;

  $bb5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4238} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5567;

  $bb5567:
    assume {:verifier.code 0} true;
    goto $bb5568;

  $bb5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4239} $i925 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    $i926 := $eq.i32($i922, $i925);
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i926} true;
    goto $bb5569, $bb5570;

  $bb5570:
    assume {:verifier.code 0} true;
    assume !($i926 == 1);
    goto $bb5571;

  $bb5571:
    assume {:verifier.code 0} true;
    goto $bb5574;

  $bb5574:
    assume {:verifier.code 0} true;
    goto $bb5575;

  $bb5575:
    assume {:verifier.code 0} true;
    goto $bb5576;

  $bb5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4240} __const_udelay(4295000);
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    goto $bb5577;

  $bb5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4241} __const_udelay(4295000);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    goto $bb5578;

  $bb5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4242} __const_udelay(4295000);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    goto $bb5579;

  $bb5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4243} __const_udelay(4295000);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    goto $bb5580;

  $bb5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4244} __const_udelay(4295000);
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    goto $bb5581;

  $bb5581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4245} __const_udelay(4295000);
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    goto $bb5582;

  $bb5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4246} __const_udelay(4295000);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    goto $bb5583;

  $bb5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4247} __const_udelay(4295000);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    goto $bb5584;

  $bb5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4248} __const_udelay(4295000);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    goto $bb5585;

  $bb5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4249} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5586;

  $bb5586:
    assume {:verifier.code 0} true;
    goto $bb5587;

  $bb5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4250} $i928 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    $i929 := $eq.i32($i925, $i928);
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i929} true;
    goto $bb5588, $bb5589;

  $bb5589:
    assume {:verifier.code 0} true;
    assume !($i929 == 1);
    goto $bb5590;

  $bb5590:
    assume {:verifier.code 0} true;
    goto $bb5593;

  $bb5593:
    assume {:verifier.code 0} true;
    goto $bb5594;

  $bb5594:
    assume {:verifier.code 0} true;
    goto $bb5595;

  $bb5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4251} __const_udelay(4295000);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    goto $bb5596;

  $bb5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4252} __const_udelay(4295000);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    goto $bb5597;

  $bb5597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4253} __const_udelay(4295000);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    goto $bb5598;

  $bb5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4254} __const_udelay(4295000);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    goto $bb5599;

  $bb5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4255} __const_udelay(4295000);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    goto $bb5600;

  $bb5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4256} __const_udelay(4295000);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    goto $bb5601;

  $bb5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4257} __const_udelay(4295000);
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    goto $bb5602;

  $bb5602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4258} __const_udelay(4295000);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    goto $bb5603;

  $bb5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4259} __const_udelay(4295000);
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    goto $bb5604;

  $bb5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4260} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5605;

  $bb5605:
    assume {:verifier.code 0} true;
    goto $bb5606;

  $bb5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4261} $i931 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    $i932 := $eq.i32($i928, $i931);
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i932} true;
    goto $bb5607, $bb5608;

  $bb5608:
    assume {:verifier.code 0} true;
    assume !($i932 == 1);
    goto $bb5609;

  $bb5609:
    assume {:verifier.code 0} true;
    goto $bb5612;

  $bb5612:
    assume {:verifier.code 0} true;
    goto $bb5613;

  $bb5613:
    assume {:verifier.code 0} true;
    goto $bb5614;

  $bb5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4262} __const_udelay(4295000);
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    goto $bb5615;

  $bb5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4263} __const_udelay(4295000);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    goto $bb5616;

  $bb5616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4264} __const_udelay(4295000);
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    goto $bb5617;

  $bb5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4265} __const_udelay(4295000);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    goto $bb5618;

  $bb5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4266} __const_udelay(4295000);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    goto $bb5619;

  $bb5619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4267} __const_udelay(4295000);
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    goto $bb5620;

  $bb5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4268} __const_udelay(4295000);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    goto $bb5621;

  $bb5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4269} __const_udelay(4295000);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    goto $bb5622;

  $bb5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4270} __const_udelay(4295000);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    goto $bb5623;

  $bb5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4271} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5624;

  $bb5624:
    assume {:verifier.code 0} true;
    goto $bb5625;

  $bb5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4272} $i934 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    $i935 := $eq.i32($i931, $i934);
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i935} true;
    goto $bb5626, $bb5627;

  $bb5627:
    assume {:verifier.code 0} true;
    assume !($i935 == 1);
    goto $bb5628;

  $bb5628:
    assume {:verifier.code 0} true;
    goto $bb5631;

  $bb5631:
    assume {:verifier.code 0} true;
    goto $bb5632;

  $bb5632:
    assume {:verifier.code 0} true;
    goto $bb5633;

  $bb5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4273} __const_udelay(4295000);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    goto $bb5634;

  $bb5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4274} __const_udelay(4295000);
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    goto $bb5635;

  $bb5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4275} __const_udelay(4295000);
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    goto $bb5636;

  $bb5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4276} __const_udelay(4295000);
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    goto $bb5637;

  $bb5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4277} __const_udelay(4295000);
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    goto $bb5638;

  $bb5638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4278} __const_udelay(4295000);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    goto $bb5639;

  $bb5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4279} __const_udelay(4295000);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    goto $bb5640;

  $bb5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4280} __const_udelay(4295000);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    goto $bb5641;

  $bb5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4281} __const_udelay(4295000);
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    goto $bb5642;

  $bb5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4282} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5643;

  $bb5643:
    assume {:verifier.code 0} true;
    goto $bb5644;

  $bb5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4283} $i937 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    $i938 := $eq.i32($i934, $i937);
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i938} true;
    goto $bb5645, $bb5646;

  $bb5646:
    assume {:verifier.code 0} true;
    assume !($i938 == 1);
    goto $bb5647;

  $bb5647:
    assume {:verifier.code 0} true;
    goto $bb5650;

  $bb5650:
    assume {:verifier.code 0} true;
    goto $bb5651;

  $bb5651:
    assume {:verifier.code 0} true;
    goto $bb5652;

  $bb5652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4284} __const_udelay(4295000);
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    goto $bb5653;

  $bb5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4285} __const_udelay(4295000);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    goto $bb5654;

  $bb5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4286} __const_udelay(4295000);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    goto $bb5655;

  $bb5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4287} __const_udelay(4295000);
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    goto $bb5656;

  $bb5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4288} __const_udelay(4295000);
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    goto $bb5657;

  $bb5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4289} __const_udelay(4295000);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    goto $bb5658;

  $bb5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4290} __const_udelay(4295000);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    goto $bb5659;

  $bb5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4291} __const_udelay(4295000);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    goto $bb5660;

  $bb5660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4292} __const_udelay(4295000);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    goto $bb5661;

  $bb5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4293} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5662;

  $bb5662:
    assume {:verifier.code 0} true;
    goto $bb5663;

  $bb5663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4294} $i940 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    $i941 := $eq.i32($i937, $i940);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i941} true;
    goto $bb5664, $bb5665;

  $bb5665:
    assume {:verifier.code 0} true;
    assume !($i941 == 1);
    goto $bb5666;

  $bb5666:
    assume {:verifier.code 0} true;
    goto $bb5669;

  $bb5669:
    assume {:verifier.code 0} true;
    goto $bb5670;

  $bb5670:
    assume {:verifier.code 0} true;
    goto $bb5671;

  $bb5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4295} __const_udelay(4295000);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    goto $bb5672;

  $bb5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4296} __const_udelay(4295000);
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    goto $bb5673;

  $bb5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4297} __const_udelay(4295000);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    goto $bb5674;

  $bb5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4298} __const_udelay(4295000);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    goto $bb5675;

  $bb5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4299} __const_udelay(4295000);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    goto $bb5676;

  $bb5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4300} __const_udelay(4295000);
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    goto $bb5677;

  $bb5677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4301} __const_udelay(4295000);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    goto $bb5678;

  $bb5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4302} __const_udelay(4295000);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    goto $bb5679;

  $bb5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4303} __const_udelay(4295000);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    goto $bb5680;

  $bb5680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4304} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5681;

  $bb5681:
    assume {:verifier.code 0} true;
    goto $bb5682;

  $bb5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4305} $i943 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    $i944 := $eq.i32($i940, $i943);
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i944} true;
    goto $bb5683, $bb5684;

  $bb5684:
    assume {:verifier.code 0} true;
    assume !($i944 == 1);
    goto $bb5685;

  $bb5685:
    assume {:verifier.code 0} true;
    goto $bb5688;

  $bb5688:
    assume {:verifier.code 0} true;
    goto $bb5689;

  $bb5689:
    assume {:verifier.code 0} true;
    goto $bb5690;

  $bb5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4306} __const_udelay(4295000);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    goto $bb5691;

  $bb5691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4307} __const_udelay(4295000);
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    goto $bb5692;

  $bb5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4308} __const_udelay(4295000);
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    goto $bb5693;

  $bb5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4309} __const_udelay(4295000);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    goto $bb5694;

  $bb5694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4310} __const_udelay(4295000);
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    goto $bb5695;

  $bb5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4311} __const_udelay(4295000);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    goto $bb5696;

  $bb5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4312} __const_udelay(4295000);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    goto $bb5697;

  $bb5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4313} __const_udelay(4295000);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    goto $bb5698;

  $bb5698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4314} __const_udelay(4295000);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    goto $bb5699;

  $bb5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4315} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5700;

  $bb5700:
    assume {:verifier.code 0} true;
    goto $bb5701;

  $bb5701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4316} $i946 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    $i947 := $eq.i32($i943, $i946);
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i947} true;
    goto $bb5702, $bb5703;

  $bb5703:
    assume {:verifier.code 0} true;
    assume !($i947 == 1);
    goto $bb5704;

  $bb5704:
    assume {:verifier.code 0} true;
    goto $bb5707;

  $bb5707:
    assume {:verifier.code 0} true;
    goto $bb5708;

  $bb5708:
    assume {:verifier.code 0} true;
    goto $bb5709;

  $bb5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4317} __const_udelay(4295000);
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    goto $bb5710;

  $bb5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4318} __const_udelay(4295000);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    goto $bb5711;

  $bb5711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4319} __const_udelay(4295000);
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    goto $bb5712;

  $bb5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4320} __const_udelay(4295000);
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    goto $bb5713;

  $bb5713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4321} __const_udelay(4295000);
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    goto $bb5714;

  $bb5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4322} __const_udelay(4295000);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    goto $bb5715;

  $bb5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4323} __const_udelay(4295000);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    goto $bb5716;

  $bb5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4324} __const_udelay(4295000);
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    goto $bb5717;

  $bb5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4325} __const_udelay(4295000);
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    goto $bb5718;

  $bb5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4326} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5719;

  $bb5719:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5702:
    assume $i947 == 1;
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    $i948 := $eq.i32($i946, 0);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i948} true;
    goto $bb5705, $bb5706;

  $bb5706:
    assume {:verifier.code 0} true;
    assume !($i948 == 1);
    goto $bb5704;

  $bb5705:
    assume {:verifier.code 0} true;
    assume $i948 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p13, .str);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p14, .str.78);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p15, .str.2);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p16, .str.79);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.16, $p18);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1368);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p18, $i21);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p22, 1);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.17, $p23);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1023} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520)), $mul.ref(1576, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520)), $mul.ref(6352, 1)), $mul.ref(4, 1));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} pch_udc_reconnect($p5);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} pch_udc_init($p5);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520)), $mul.ref(1576, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb18;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520)), $mul.ref(1576, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520)), $mul.ref(0, 1));
    call {:si_unique_call 1025} devirtbounce.3($p46, $p47);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520)), $mul.ref(1584, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} vslice_dummy_var_77 := __dynamic_dev_dbg.ref.ref.ref($p1, $p31, .str.79);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5683:
    assume $i944 == 1;
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $i945 := $eq.i32($i943, 0);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i945} true;
    goto $bb5686, $bb5687;

  $bb5687:
    assume {:verifier.code 0} true;
    assume !($i945 == 1);
    goto $bb5685;

  $bb5686:
    assume {:verifier.code 0} true;
    assume $i945 == 1;
    goto $bb11;

  $bb5664:
    assume $i941 == 1;
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $i942 := $eq.i32($i940, 0);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i942} true;
    goto $bb5667, $bb5668;

  $bb5668:
    assume {:verifier.code 0} true;
    assume !($i942 == 1);
    goto $bb5666;

  $bb5667:
    assume {:verifier.code 0} true;
    assume $i942 == 1;
    goto $bb11;

  $bb5645:
    assume $i938 == 1;
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    $i939 := $eq.i32($i937, 0);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i939} true;
    goto $bb5648, $bb5649;

  $bb5649:
    assume {:verifier.code 0} true;
    assume !($i939 == 1);
    goto $bb5647;

  $bb5648:
    assume {:verifier.code 0} true;
    assume $i939 == 1;
    goto $bb11;

  $bb5626:
    assume $i935 == 1;
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    $i936 := $eq.i32($i934, 0);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i936} true;
    goto $bb5629, $bb5630;

  $bb5630:
    assume {:verifier.code 0} true;
    assume !($i936 == 1);
    goto $bb5628;

  $bb5629:
    assume {:verifier.code 0} true;
    assume $i936 == 1;
    goto $bb11;

  $bb5607:
    assume $i932 == 1;
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $i933 := $eq.i32($i931, 0);
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i933} true;
    goto $bb5610, $bb5611;

  $bb5611:
    assume {:verifier.code 0} true;
    assume !($i933 == 1);
    goto $bb5609;

  $bb5610:
    assume {:verifier.code 0} true;
    assume $i933 == 1;
    goto $bb11;

  $bb5588:
    assume $i929 == 1;
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $i930 := $eq.i32($i928, 0);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i930} true;
    goto $bb5591, $bb5592;

  $bb5592:
    assume {:verifier.code 0} true;
    assume !($i930 == 1);
    goto $bb5590;

  $bb5591:
    assume {:verifier.code 0} true;
    assume $i930 == 1;
    goto $bb11;

  $bb5569:
    assume $i926 == 1;
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $i927 := $eq.i32($i925, 0);
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i927} true;
    goto $bb5572, $bb5573;

  $bb5573:
    assume {:verifier.code 0} true;
    assume !($i927 == 1);
    goto $bb5571;

  $bb5572:
    assume {:verifier.code 0} true;
    assume $i927 == 1;
    goto $bb11;

  $bb5550:
    assume $i923 == 1;
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    $i924 := $eq.i32($i922, 0);
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i924} true;
    goto $bb5553, $bb5554;

  $bb5554:
    assume {:verifier.code 0} true;
    assume !($i924 == 1);
    goto $bb5552;

  $bb5553:
    assume {:verifier.code 0} true;
    assume $i924 == 1;
    goto $bb11;

  $bb5531:
    assume $i920 == 1;
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $i921 := $eq.i32($i919, 0);
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i921} true;
    goto $bb5534, $bb5535;

  $bb5535:
    assume {:verifier.code 0} true;
    assume !($i921 == 1);
    goto $bb5533;

  $bb5534:
    assume {:verifier.code 0} true;
    assume $i921 == 1;
    goto $bb11;

  $bb5512:
    assume $i917 == 1;
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $i918 := $eq.i32($i916, 0);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i918} true;
    goto $bb5515, $bb5516;

  $bb5516:
    assume {:verifier.code 0} true;
    assume !($i918 == 1);
    goto $bb5514;

  $bb5515:
    assume {:verifier.code 0} true;
    assume $i918 == 1;
    goto $bb11;

  $bb5493:
    assume $i914 == 1;
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i915 := $eq.i32($i913, 0);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i915} true;
    goto $bb5496, $bb5497;

  $bb5497:
    assume {:verifier.code 0} true;
    assume !($i915 == 1);
    goto $bb5495;

  $bb5496:
    assume {:verifier.code 0} true;
    assume $i915 == 1;
    goto $bb11;

  $bb5474:
    assume $i911 == 1;
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $i912 := $eq.i32($i910, 0);
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i912} true;
    goto $bb5477, $bb5478;

  $bb5478:
    assume {:verifier.code 0} true;
    assume !($i912 == 1);
    goto $bb5476;

  $bb5477:
    assume {:verifier.code 0} true;
    assume $i912 == 1;
    goto $bb11;

  $bb5455:
    assume $i908 == 1;
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $i909 := $eq.i32($i907, 0);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i909} true;
    goto $bb5458, $bb5459;

  $bb5459:
    assume {:verifier.code 0} true;
    assume !($i909 == 1);
    goto $bb5457;

  $bb5458:
    assume {:verifier.code 0} true;
    assume $i909 == 1;
    goto $bb11;

  $bb5436:
    assume $i905 == 1;
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $i906 := $eq.i32($i904, 0);
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i906} true;
    goto $bb5439, $bb5440;

  $bb5440:
    assume {:verifier.code 0} true;
    assume !($i906 == 1);
    goto $bb5438;

  $bb5439:
    assume {:verifier.code 0} true;
    assume $i906 == 1;
    goto $bb11;

  $bb5417:
    assume $i902 == 1;
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $i903 := $eq.i32($i901, 0);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i903} true;
    goto $bb5420, $bb5421;

  $bb5421:
    assume {:verifier.code 0} true;
    assume !($i903 == 1);
    goto $bb5419;

  $bb5420:
    assume {:verifier.code 0} true;
    assume $i903 == 1;
    goto $bb11;

  $bb5398:
    assume $i899 == 1;
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $i900 := $eq.i32($i898, 0);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i900} true;
    goto $bb5401, $bb5402;

  $bb5402:
    assume {:verifier.code 0} true;
    assume !($i900 == 1);
    goto $bb5400;

  $bb5401:
    assume {:verifier.code 0} true;
    assume $i900 == 1;
    goto $bb11;

  $bb5379:
    assume $i896 == 1;
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $i897 := $eq.i32($i895, 0);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i897} true;
    goto $bb5382, $bb5383;

  $bb5383:
    assume {:verifier.code 0} true;
    assume !($i897 == 1);
    goto $bb5381;

  $bb5382:
    assume {:verifier.code 0} true;
    assume $i897 == 1;
    goto $bb11;

  $bb5360:
    assume $i893 == 1;
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    $i894 := $eq.i32($i892, 0);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i894} true;
    goto $bb5363, $bb5364;

  $bb5364:
    assume {:verifier.code 0} true;
    assume !($i894 == 1);
    goto $bb5362;

  $bb5363:
    assume {:verifier.code 0} true;
    assume $i894 == 1;
    goto $bb11;

  $bb5341:
    assume $i890 == 1;
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $i891 := $eq.i32($i889, 0);
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i891} true;
    goto $bb5344, $bb5345;

  $bb5345:
    assume {:verifier.code 0} true;
    assume !($i891 == 1);
    goto $bb5343;

  $bb5344:
    assume {:verifier.code 0} true;
    assume $i891 == 1;
    goto $bb11;

  $bb5322:
    assume $i887 == 1;
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $i888 := $eq.i32($i886, 0);
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i888} true;
    goto $bb5325, $bb5326;

  $bb5326:
    assume {:verifier.code 0} true;
    assume !($i888 == 1);
    goto $bb5324;

  $bb5325:
    assume {:verifier.code 0} true;
    assume $i888 == 1;
    goto $bb11;

  $bb5303:
    assume $i884 == 1;
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    $i885 := $eq.i32($i883, 0);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i885} true;
    goto $bb5306, $bb5307;

  $bb5307:
    assume {:verifier.code 0} true;
    assume !($i885 == 1);
    goto $bb5305;

  $bb5306:
    assume {:verifier.code 0} true;
    assume $i885 == 1;
    goto $bb11;

  $bb5284:
    assume $i881 == 1;
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $i882 := $eq.i32($i880, 0);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i882} true;
    goto $bb5287, $bb5288;

  $bb5288:
    assume {:verifier.code 0} true;
    assume !($i882 == 1);
    goto $bb5286;

  $bb5287:
    assume {:verifier.code 0} true;
    assume $i882 == 1;
    goto $bb11;

  $bb5265:
    assume $i878 == 1;
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $i879 := $eq.i32($i877, 0);
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i879} true;
    goto $bb5268, $bb5269;

  $bb5269:
    assume {:verifier.code 0} true;
    assume !($i879 == 1);
    goto $bb5267;

  $bb5268:
    assume {:verifier.code 0} true;
    assume $i879 == 1;
    goto $bb11;

  $bb5246:
    assume $i875 == 1;
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    $i876 := $eq.i32($i874, 0);
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i876} true;
    goto $bb5249, $bb5250;

  $bb5250:
    assume {:verifier.code 0} true;
    assume !($i876 == 1);
    goto $bb5248;

  $bb5249:
    assume {:verifier.code 0} true;
    assume $i876 == 1;
    goto $bb11;

  $bb5227:
    assume $i872 == 1;
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $i873 := $eq.i32($i871, 0);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i873} true;
    goto $bb5230, $bb5231;

  $bb5231:
    assume {:verifier.code 0} true;
    assume !($i873 == 1);
    goto $bb5229;

  $bb5230:
    assume {:verifier.code 0} true;
    assume $i873 == 1;
    goto $bb11;

  $bb5208:
    assume $i869 == 1;
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $i870 := $eq.i32($i868, 0);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i870} true;
    goto $bb5211, $bb5212;

  $bb5212:
    assume {:verifier.code 0} true;
    assume !($i870 == 1);
    goto $bb5210;

  $bb5211:
    assume {:verifier.code 0} true;
    assume $i870 == 1;
    goto $bb11;

  $bb5189:
    assume $i866 == 1;
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $i867 := $eq.i32($i865, 0);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i867} true;
    goto $bb5192, $bb5193;

  $bb5193:
    assume {:verifier.code 0} true;
    assume !($i867 == 1);
    goto $bb5191;

  $bb5192:
    assume {:verifier.code 0} true;
    assume $i867 == 1;
    goto $bb11;

  $bb5170:
    assume $i863 == 1;
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $i864 := $eq.i32($i862, 0);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i864} true;
    goto $bb5173, $bb5174;

  $bb5174:
    assume {:verifier.code 0} true;
    assume !($i864 == 1);
    goto $bb5172;

  $bb5173:
    assume {:verifier.code 0} true;
    assume $i864 == 1;
    goto $bb11;

  $bb5151:
    assume $i860 == 1;
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $i861 := $eq.i32($i859, 0);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i861} true;
    goto $bb5154, $bb5155;

  $bb5155:
    assume {:verifier.code 0} true;
    assume !($i861 == 1);
    goto $bb5153;

  $bb5154:
    assume {:verifier.code 0} true;
    assume $i861 == 1;
    goto $bb11;

  $bb5132:
    assume $i857 == 1;
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $i858 := $eq.i32($i856, 0);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i858} true;
    goto $bb5135, $bb5136;

  $bb5136:
    assume {:verifier.code 0} true;
    assume !($i858 == 1);
    goto $bb5134;

  $bb5135:
    assume {:verifier.code 0} true;
    assume $i858 == 1;
    goto $bb11;

  $bb5113:
    assume $i854 == 1;
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $i855 := $eq.i32($i853, 0);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i855} true;
    goto $bb5116, $bb5117;

  $bb5117:
    assume {:verifier.code 0} true;
    assume !($i855 == 1);
    goto $bb5115;

  $bb5116:
    assume {:verifier.code 0} true;
    assume $i855 == 1;
    goto $bb11;

  $bb5094:
    assume $i851 == 1;
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $i852 := $eq.i32($i850, 0);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i852} true;
    goto $bb5097, $bb5098;

  $bb5098:
    assume {:verifier.code 0} true;
    assume !($i852 == 1);
    goto $bb5096;

  $bb5097:
    assume {:verifier.code 0} true;
    assume $i852 == 1;
    goto $bb11;

  $bb5075:
    assume $i848 == 1;
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $i849 := $eq.i32($i847, 0);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i849} true;
    goto $bb5078, $bb5079;

  $bb5079:
    assume {:verifier.code 0} true;
    assume !($i849 == 1);
    goto $bb5077;

  $bb5078:
    assume {:verifier.code 0} true;
    assume $i849 == 1;
    goto $bb11;

  $bb5056:
    assume $i845 == 1;
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i846 := $eq.i32($i844, 0);
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i846} true;
    goto $bb5059, $bb5060;

  $bb5060:
    assume {:verifier.code 0} true;
    assume !($i846 == 1);
    goto $bb5058;

  $bb5059:
    assume {:verifier.code 0} true;
    assume $i846 == 1;
    goto $bb11;

  $bb5037:
    assume $i842 == 1;
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $i843 := $eq.i32($i841, 0);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i843} true;
    goto $bb5040, $bb5041;

  $bb5041:
    assume {:verifier.code 0} true;
    assume !($i843 == 1);
    goto $bb5039;

  $bb5040:
    assume {:verifier.code 0} true;
    assume $i843 == 1;
    goto $bb11;

  $bb5018:
    assume $i839 == 1;
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $i840 := $eq.i32($i838, 0);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i840} true;
    goto $bb5021, $bb5022;

  $bb5022:
    assume {:verifier.code 0} true;
    assume !($i840 == 1);
    goto $bb5020;

  $bb5021:
    assume {:verifier.code 0} true;
    assume $i840 == 1;
    goto $bb11;

  $bb4999:
    assume $i836 == 1;
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    $i837 := $eq.i32($i835, 0);
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i837} true;
    goto $bb5002, $bb5003;

  $bb5003:
    assume {:verifier.code 0} true;
    assume !($i837 == 1);
    goto $bb5001;

  $bb5002:
    assume {:verifier.code 0} true;
    assume $i837 == 1;
    goto $bb11;

  $bb4980:
    assume $i833 == 1;
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $i834 := $eq.i32($i832, 0);
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i834} true;
    goto $bb4983, $bb4984;

  $bb4984:
    assume {:verifier.code 0} true;
    assume !($i834 == 1);
    goto $bb4982;

  $bb4983:
    assume {:verifier.code 0} true;
    assume $i834 == 1;
    goto $bb11;

  $bb4961:
    assume $i830 == 1;
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $i831 := $eq.i32($i829, 0);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i831} true;
    goto $bb4964, $bb4965;

  $bb4965:
    assume {:verifier.code 0} true;
    assume !($i831 == 1);
    goto $bb4963;

  $bb4964:
    assume {:verifier.code 0} true;
    assume $i831 == 1;
    goto $bb11;

  $bb4942:
    assume $i827 == 1;
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $i828 := $eq.i32($i826, 0);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i828} true;
    goto $bb4945, $bb4946;

  $bb4946:
    assume {:verifier.code 0} true;
    assume !($i828 == 1);
    goto $bb4944;

  $bb4945:
    assume {:verifier.code 0} true;
    assume $i828 == 1;
    goto $bb11;

  $bb4923:
    assume $i824 == 1;
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $i825 := $eq.i32($i823, 0);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i825} true;
    goto $bb4926, $bb4927;

  $bb4927:
    assume {:verifier.code 0} true;
    assume !($i825 == 1);
    goto $bb4925;

  $bb4926:
    assume {:verifier.code 0} true;
    assume $i825 == 1;
    goto $bb11;

  $bb4904:
    assume $i821 == 1;
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $i822 := $eq.i32($i820, 0);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i822} true;
    goto $bb4907, $bb4908;

  $bb4908:
    assume {:verifier.code 0} true;
    assume !($i822 == 1);
    goto $bb4906;

  $bb4907:
    assume {:verifier.code 0} true;
    assume $i822 == 1;
    goto $bb11;

  $bb4885:
    assume $i818 == 1;
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $i819 := $eq.i32($i817, 0);
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i819} true;
    goto $bb4888, $bb4889;

  $bb4889:
    assume {:verifier.code 0} true;
    assume !($i819 == 1);
    goto $bb4887;

  $bb4888:
    assume {:verifier.code 0} true;
    assume $i819 == 1;
    goto $bb11;

  $bb4866:
    assume $i815 == 1;
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $i816 := $eq.i32($i814, 0);
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i816} true;
    goto $bb4869, $bb4870;

  $bb4870:
    assume {:verifier.code 0} true;
    assume !($i816 == 1);
    goto $bb4868;

  $bb4869:
    assume {:verifier.code 0} true;
    assume $i816 == 1;
    goto $bb11;

  $bb4847:
    assume $i812 == 1;
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    $i813 := $eq.i32($i811, 0);
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i813} true;
    goto $bb4850, $bb4851;

  $bb4851:
    assume {:verifier.code 0} true;
    assume !($i813 == 1);
    goto $bb4849;

  $bb4850:
    assume {:verifier.code 0} true;
    assume $i813 == 1;
    goto $bb11;

  $bb4828:
    assume $i809 == 1;
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $i810 := $eq.i32($i808, 0);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i810} true;
    goto $bb4831, $bb4832;

  $bb4832:
    assume {:verifier.code 0} true;
    assume !($i810 == 1);
    goto $bb4830;

  $bb4831:
    assume {:verifier.code 0} true;
    assume $i810 == 1;
    goto $bb11;

  $bb4809:
    assume $i806 == 1;
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $i807 := $eq.i32($i805, 0);
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i807} true;
    goto $bb4812, $bb4813;

  $bb4813:
    assume {:verifier.code 0} true;
    assume !($i807 == 1);
    goto $bb4811;

  $bb4812:
    assume {:verifier.code 0} true;
    assume $i807 == 1;
    goto $bb11;

  $bb4790:
    assume $i803 == 1;
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $i804 := $eq.i32($i802, 0);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i804} true;
    goto $bb4793, $bb4794;

  $bb4794:
    assume {:verifier.code 0} true;
    assume !($i804 == 1);
    goto $bb4792;

  $bb4793:
    assume {:verifier.code 0} true;
    assume $i804 == 1;
    goto $bb11;

  $bb4771:
    assume $i800 == 1;
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $i801 := $eq.i32($i799, 0);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i801} true;
    goto $bb4774, $bb4775;

  $bb4775:
    assume {:verifier.code 0} true;
    assume !($i801 == 1);
    goto $bb4773;

  $bb4774:
    assume {:verifier.code 0} true;
    assume $i801 == 1;
    goto $bb11;

  $bb4752:
    assume $i797 == 1;
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    $i798 := $eq.i32($i796, 0);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i798} true;
    goto $bb4755, $bb4756;

  $bb4756:
    assume {:verifier.code 0} true;
    assume !($i798 == 1);
    goto $bb4754;

  $bb4755:
    assume {:verifier.code 0} true;
    assume $i798 == 1;
    goto $bb11;

  $bb4733:
    assume $i794 == 1;
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $i795 := $eq.i32($i793, 0);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i795} true;
    goto $bb4736, $bb4737;

  $bb4737:
    assume {:verifier.code 0} true;
    assume !($i795 == 1);
    goto $bb4735;

  $bb4736:
    assume {:verifier.code 0} true;
    assume $i795 == 1;
    goto $bb11;

  $bb4714:
    assume $i791 == 1;
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i792 := $eq.i32($i790, 0);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i792} true;
    goto $bb4717, $bb4718;

  $bb4718:
    assume {:verifier.code 0} true;
    assume !($i792 == 1);
    goto $bb4716;

  $bb4717:
    assume {:verifier.code 0} true;
    assume $i792 == 1;
    goto $bb11;

  $bb4695:
    assume $i788 == 1;
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $i789 := $eq.i32($i787, 0);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i789} true;
    goto $bb4698, $bb4699;

  $bb4699:
    assume {:verifier.code 0} true;
    assume !($i789 == 1);
    goto $bb4697;

  $bb4698:
    assume {:verifier.code 0} true;
    assume $i789 == 1;
    goto $bb11;

  $bb4676:
    assume $i785 == 1;
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $i786 := $eq.i32($i784, 0);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i786} true;
    goto $bb4679, $bb4680;

  $bb4680:
    assume {:verifier.code 0} true;
    assume !($i786 == 1);
    goto $bb4678;

  $bb4679:
    assume {:verifier.code 0} true;
    assume $i786 == 1;
    goto $bb11;

  $bb4657:
    assume $i782 == 1;
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    $i783 := $eq.i32($i781, 0);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i783} true;
    goto $bb4660, $bb4661;

  $bb4661:
    assume {:verifier.code 0} true;
    assume !($i783 == 1);
    goto $bb4659;

  $bb4660:
    assume {:verifier.code 0} true;
    assume $i783 == 1;
    goto $bb11;

  $bb4638:
    assume $i779 == 1;
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i780 := $eq.i32($i778, 0);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i780} true;
    goto $bb4641, $bb4642;

  $bb4642:
    assume {:verifier.code 0} true;
    assume !($i780 == 1);
    goto $bb4640;

  $bb4641:
    assume {:verifier.code 0} true;
    assume $i780 == 1;
    goto $bb11;

  $bb4619:
    assume $i776 == 1;
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $i777 := $eq.i32($i775, 0);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i777} true;
    goto $bb4622, $bb4623;

  $bb4623:
    assume {:verifier.code 0} true;
    assume !($i777 == 1);
    goto $bb4621;

  $bb4622:
    assume {:verifier.code 0} true;
    assume $i777 == 1;
    goto $bb11;

  $bb4600:
    assume $i773 == 1;
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $i774 := $eq.i32($i772, 0);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i774} true;
    goto $bb4603, $bb4604;

  $bb4604:
    assume {:verifier.code 0} true;
    assume !($i774 == 1);
    goto $bb4602;

  $bb4603:
    assume {:verifier.code 0} true;
    assume $i774 == 1;
    goto $bb11;

  $bb4581:
    assume $i770 == 1;
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $i771 := $eq.i32($i769, 0);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i771} true;
    goto $bb4584, $bb4585;

  $bb4585:
    assume {:verifier.code 0} true;
    assume !($i771 == 1);
    goto $bb4583;

  $bb4584:
    assume {:verifier.code 0} true;
    assume $i771 == 1;
    goto $bb11;

  $bb4562:
    assume $i767 == 1;
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $i768 := $eq.i32($i766, 0);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i768} true;
    goto $bb4565, $bb4566;

  $bb4566:
    assume {:verifier.code 0} true;
    assume !($i768 == 1);
    goto $bb4564;

  $bb4565:
    assume {:verifier.code 0} true;
    assume $i768 == 1;
    goto $bb11;

  $bb4543:
    assume $i764 == 1;
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i765 := $eq.i32($i763, 0);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i765} true;
    goto $bb4546, $bb4547;

  $bb4547:
    assume {:verifier.code 0} true;
    assume !($i765 == 1);
    goto $bb4545;

  $bb4546:
    assume {:verifier.code 0} true;
    assume $i765 == 1;
    goto $bb11;

  $bb4524:
    assume $i761 == 1;
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $i762 := $eq.i32($i760, 0);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i762} true;
    goto $bb4527, $bb4528;

  $bb4528:
    assume {:verifier.code 0} true;
    assume !($i762 == 1);
    goto $bb4526;

  $bb4527:
    assume {:verifier.code 0} true;
    assume $i762 == 1;
    goto $bb11;

  $bb4505:
    assume $i758 == 1;
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $i759 := $eq.i32($i757, 0);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i759} true;
    goto $bb4508, $bb4509;

  $bb4509:
    assume {:verifier.code 0} true;
    assume !($i759 == 1);
    goto $bb4507;

  $bb4508:
    assume {:verifier.code 0} true;
    assume $i759 == 1;
    goto $bb11;

  $bb4486:
    assume $i755 == 1;
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $i756 := $eq.i32($i754, 0);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i756} true;
    goto $bb4489, $bb4490;

  $bb4490:
    assume {:verifier.code 0} true;
    assume !($i756 == 1);
    goto $bb4488;

  $bb4489:
    assume {:verifier.code 0} true;
    assume $i756 == 1;
    goto $bb11;

  $bb4467:
    assume $i752 == 1;
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $i753 := $eq.i32($i751, 0);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i753} true;
    goto $bb4470, $bb4471;

  $bb4471:
    assume {:verifier.code 0} true;
    assume !($i753 == 1);
    goto $bb4469;

  $bb4470:
    assume {:verifier.code 0} true;
    assume $i753 == 1;
    goto $bb11;

  $bb4448:
    assume $i749 == 1;
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $i750 := $eq.i32($i748, 0);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i750} true;
    goto $bb4451, $bb4452;

  $bb4452:
    assume {:verifier.code 0} true;
    assume !($i750 == 1);
    goto $bb4450;

  $bb4451:
    assume {:verifier.code 0} true;
    assume $i750 == 1;
    goto $bb11;

  $bb4429:
    assume $i746 == 1;
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $i747 := $eq.i32($i745, 0);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i747} true;
    goto $bb4432, $bb4433;

  $bb4433:
    assume {:verifier.code 0} true;
    assume !($i747 == 1);
    goto $bb4431;

  $bb4432:
    assume {:verifier.code 0} true;
    assume $i747 == 1;
    goto $bb11;

  $bb4410:
    assume $i743 == 1;
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $i744 := $eq.i32($i742, 0);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i744} true;
    goto $bb4413, $bb4414;

  $bb4414:
    assume {:verifier.code 0} true;
    assume !($i744 == 1);
    goto $bb4412;

  $bb4413:
    assume {:verifier.code 0} true;
    assume $i744 == 1;
    goto $bb11;

  $bb4391:
    assume $i740 == 1;
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $i741 := $eq.i32($i739, 0);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i741} true;
    goto $bb4394, $bb4395;

  $bb4395:
    assume {:verifier.code 0} true;
    assume !($i741 == 1);
    goto $bb4393;

  $bb4394:
    assume {:verifier.code 0} true;
    assume $i741 == 1;
    goto $bb11;

  $bb4372:
    assume $i737 == 1;
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $i738 := $eq.i32($i736, 0);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i738} true;
    goto $bb4375, $bb4376;

  $bb4376:
    assume {:verifier.code 0} true;
    assume !($i738 == 1);
    goto $bb4374;

  $bb4375:
    assume {:verifier.code 0} true;
    assume $i738 == 1;
    goto $bb11;

  $bb4353:
    assume $i734 == 1;
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $i735 := $eq.i32($i733, 0);
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i735} true;
    goto $bb4356, $bb4357;

  $bb4357:
    assume {:verifier.code 0} true;
    assume !($i735 == 1);
    goto $bb4355;

  $bb4356:
    assume {:verifier.code 0} true;
    assume $i735 == 1;
    goto $bb11;

  $bb4334:
    assume $i731 == 1;
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $i732 := $eq.i32($i730, 0);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i732} true;
    goto $bb4337, $bb4338;

  $bb4338:
    assume {:verifier.code 0} true;
    assume !($i732 == 1);
    goto $bb4336;

  $bb4337:
    assume {:verifier.code 0} true;
    assume $i732 == 1;
    goto $bb11;

  $bb4315:
    assume $i728 == 1;
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i729 := $eq.i32($i727, 0);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i729} true;
    goto $bb4318, $bb4319;

  $bb4319:
    assume {:verifier.code 0} true;
    assume !($i729 == 1);
    goto $bb4317;

  $bb4318:
    assume {:verifier.code 0} true;
    assume $i729 == 1;
    goto $bb11;

  $bb4296:
    assume $i725 == 1;
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $i726 := $eq.i32($i724, 0);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i726} true;
    goto $bb4299, $bb4300;

  $bb4300:
    assume {:verifier.code 0} true;
    assume !($i726 == 1);
    goto $bb4298;

  $bb4299:
    assume {:verifier.code 0} true;
    assume $i726 == 1;
    goto $bb11;

  $bb4277:
    assume $i722 == 1;
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i723 := $eq.i32($i721, 0);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i723} true;
    goto $bb4280, $bb4281;

  $bb4281:
    assume {:verifier.code 0} true;
    assume !($i723 == 1);
    goto $bb4279;

  $bb4280:
    assume {:verifier.code 0} true;
    assume $i723 == 1;
    goto $bb11;

  $bb4258:
    assume $i719 == 1;
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $i720 := $eq.i32($i718, 0);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i720} true;
    goto $bb4261, $bb4262;

  $bb4262:
    assume {:verifier.code 0} true;
    assume !($i720 == 1);
    goto $bb4260;

  $bb4261:
    assume {:verifier.code 0} true;
    assume $i720 == 1;
    goto $bb11;

  $bb4239:
    assume $i716 == 1;
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $i717 := $eq.i32($i715, 0);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i717} true;
    goto $bb4242, $bb4243;

  $bb4243:
    assume {:verifier.code 0} true;
    assume !($i717 == 1);
    goto $bb4241;

  $bb4242:
    assume {:verifier.code 0} true;
    assume $i717 == 1;
    goto $bb11;

  $bb4220:
    assume $i713 == 1;
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $i714 := $eq.i32($i712, 0);
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i714} true;
    goto $bb4223, $bb4224;

  $bb4224:
    assume {:verifier.code 0} true;
    assume !($i714 == 1);
    goto $bb4222;

  $bb4223:
    assume {:verifier.code 0} true;
    assume $i714 == 1;
    goto $bb11;

  $bb4201:
    assume $i710 == 1;
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i711 := $eq.i32($i709, 0);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i711} true;
    goto $bb4204, $bb4205;

  $bb4205:
    assume {:verifier.code 0} true;
    assume !($i711 == 1);
    goto $bb4203;

  $bb4204:
    assume {:verifier.code 0} true;
    assume $i711 == 1;
    goto $bb11;

  $bb4182:
    assume $i707 == 1;
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $i708 := $eq.i32($i706, 0);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i708} true;
    goto $bb4185, $bb4186;

  $bb4186:
    assume {:verifier.code 0} true;
    assume !($i708 == 1);
    goto $bb4184;

  $bb4185:
    assume {:verifier.code 0} true;
    assume $i708 == 1;
    goto $bb11;

  $bb4163:
    assume $i704 == 1;
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i705 := $eq.i32($i703, 0);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i705} true;
    goto $bb4166, $bb4167;

  $bb4167:
    assume {:verifier.code 0} true;
    assume !($i705 == 1);
    goto $bb4165;

  $bb4166:
    assume {:verifier.code 0} true;
    assume $i705 == 1;
    goto $bb11;

  $bb4144:
    assume $i701 == 1;
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i702 := $eq.i32($i700, 0);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i702} true;
    goto $bb4147, $bb4148;

  $bb4148:
    assume {:verifier.code 0} true;
    assume !($i702 == 1);
    goto $bb4146;

  $bb4147:
    assume {:verifier.code 0} true;
    assume $i702 == 1;
    goto $bb11;

  $bb4125:
    assume $i698 == 1;
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i699 := $eq.i32($i697, 0);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i699} true;
    goto $bb4128, $bb4129;

  $bb4129:
    assume {:verifier.code 0} true;
    assume !($i699 == 1);
    goto $bb4127;

  $bb4128:
    assume {:verifier.code 0} true;
    assume $i699 == 1;
    goto $bb11;

  $bb4106:
    assume $i695 == 1;
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i696 := $eq.i32($i694, 0);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i696} true;
    goto $bb4109, $bb4110;

  $bb4110:
    assume {:verifier.code 0} true;
    assume !($i696 == 1);
    goto $bb4108;

  $bb4109:
    assume {:verifier.code 0} true;
    assume $i696 == 1;
    goto $bb11;

  $bb4087:
    assume $i692 == 1;
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $i693 := $eq.i32($i691, 0);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i693} true;
    goto $bb4090, $bb4091;

  $bb4091:
    assume {:verifier.code 0} true;
    assume !($i693 == 1);
    goto $bb4089;

  $bb4090:
    assume {:verifier.code 0} true;
    assume $i693 == 1;
    goto $bb11;

  $bb4068:
    assume $i689 == 1;
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $i690 := $eq.i32($i688, 0);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i690} true;
    goto $bb4071, $bb4072;

  $bb4072:
    assume {:verifier.code 0} true;
    assume !($i690 == 1);
    goto $bb4070;

  $bb4071:
    assume {:verifier.code 0} true;
    assume $i690 == 1;
    goto $bb11;

  $bb4049:
    assume $i686 == 1;
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $i687 := $eq.i32($i685, 0);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i687} true;
    goto $bb4052, $bb4053;

  $bb4053:
    assume {:verifier.code 0} true;
    assume !($i687 == 1);
    goto $bb4051;

  $bb4052:
    assume {:verifier.code 0} true;
    assume $i687 == 1;
    goto $bb11;

  $bb4030:
    assume $i683 == 1;
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $i684 := $eq.i32($i682, 0);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i684} true;
    goto $bb4033, $bb4034;

  $bb4034:
    assume {:verifier.code 0} true;
    assume !($i684 == 1);
    goto $bb4032;

  $bb4033:
    assume {:verifier.code 0} true;
    assume $i684 == 1;
    goto $bb11;

  $bb4011:
    assume $i680 == 1;
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $i681 := $eq.i32($i679, 0);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i681} true;
    goto $bb4014, $bb4015;

  $bb4015:
    assume {:verifier.code 0} true;
    assume !($i681 == 1);
    goto $bb4013;

  $bb4014:
    assume {:verifier.code 0} true;
    assume $i681 == 1;
    goto $bb11;

  $bb3992:
    assume $i677 == 1;
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $i678 := $eq.i32($i676, 0);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i678} true;
    goto $bb3995, $bb3996;

  $bb3996:
    assume {:verifier.code 0} true;
    assume !($i678 == 1);
    goto $bb3994;

  $bb3995:
    assume {:verifier.code 0} true;
    assume $i678 == 1;
    goto $bb11;

  $bb3973:
    assume $i674 == 1;
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $i675 := $eq.i32($i673, 0);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i675} true;
    goto $bb3976, $bb3977;

  $bb3977:
    assume {:verifier.code 0} true;
    assume !($i675 == 1);
    goto $bb3975;

  $bb3976:
    assume {:verifier.code 0} true;
    assume $i675 == 1;
    goto $bb11;

  $bb3954:
    assume $i671 == 1;
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $i672 := $eq.i32($i670, 0);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i672} true;
    goto $bb3957, $bb3958;

  $bb3958:
    assume {:verifier.code 0} true;
    assume !($i672 == 1);
    goto $bb3956;

  $bb3957:
    assume {:verifier.code 0} true;
    assume $i672 == 1;
    goto $bb11;

  $bb3935:
    assume $i668 == 1;
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i669 := $eq.i32($i667, 0);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i669} true;
    goto $bb3938, $bb3939;

  $bb3939:
    assume {:verifier.code 0} true;
    assume !($i669 == 1);
    goto $bb3937;

  $bb3938:
    assume {:verifier.code 0} true;
    assume $i669 == 1;
    goto $bb11;

  $bb3916:
    assume $i665 == 1;
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $i666 := $eq.i32($i664, 0);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i666} true;
    goto $bb3919, $bb3920;

  $bb3920:
    assume {:verifier.code 0} true;
    assume !($i666 == 1);
    goto $bb3918;

  $bb3919:
    assume {:verifier.code 0} true;
    assume $i666 == 1;
    goto $bb11;

  $bb3897:
    assume $i662 == 1;
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $i663 := $eq.i32($i661, 0);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i663} true;
    goto $bb3900, $bb3901;

  $bb3901:
    assume {:verifier.code 0} true;
    assume !($i663 == 1);
    goto $bb3899;

  $bb3900:
    assume {:verifier.code 0} true;
    assume $i663 == 1;
    goto $bb11;

  $bb3878:
    assume $i659 == 1;
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $i660 := $eq.i32($i658, 0);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i660} true;
    goto $bb3881, $bb3882;

  $bb3882:
    assume {:verifier.code 0} true;
    assume !($i660 == 1);
    goto $bb3880;

  $bb3881:
    assume {:verifier.code 0} true;
    assume $i660 == 1;
    goto $bb11;

  $bb3859:
    assume $i656 == 1;
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $i657 := $eq.i32($i655, 0);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i657} true;
    goto $bb3862, $bb3863;

  $bb3863:
    assume {:verifier.code 0} true;
    assume !($i657 == 1);
    goto $bb3861;

  $bb3862:
    assume {:verifier.code 0} true;
    assume $i657 == 1;
    goto $bb11;

  $bb3840:
    assume $i653 == 1;
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i654 := $eq.i32($i652, 0);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i654} true;
    goto $bb3843, $bb3844;

  $bb3844:
    assume {:verifier.code 0} true;
    assume !($i654 == 1);
    goto $bb3842;

  $bb3843:
    assume {:verifier.code 0} true;
    assume $i654 == 1;
    goto $bb11;

  $bb3821:
    assume $i650 == 1;
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i651 := $eq.i32($i649, 0);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i651} true;
    goto $bb3824, $bb3825;

  $bb3825:
    assume {:verifier.code 0} true;
    assume !($i651 == 1);
    goto $bb3823;

  $bb3824:
    assume {:verifier.code 0} true;
    assume $i651 == 1;
    goto $bb11;

  $bb3802:
    assume $i647 == 1;
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i648 := $eq.i32($i646, 0);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i648} true;
    goto $bb3805, $bb3806;

  $bb3806:
    assume {:verifier.code 0} true;
    assume !($i648 == 1);
    goto $bb3804;

  $bb3805:
    assume {:verifier.code 0} true;
    assume $i648 == 1;
    goto $bb11;

  $bb3783:
    assume $i644 == 1;
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i645 := $eq.i32($i643, 0);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i645} true;
    goto $bb3786, $bb3787;

  $bb3787:
    assume {:verifier.code 0} true;
    assume !($i645 == 1);
    goto $bb3785;

  $bb3786:
    assume {:verifier.code 0} true;
    assume $i645 == 1;
    goto $bb11;

  $bb3764:
    assume $i641 == 1;
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i642 := $eq.i32($i640, 0);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i642} true;
    goto $bb3767, $bb3768;

  $bb3768:
    assume {:verifier.code 0} true;
    assume !($i642 == 1);
    goto $bb3766;

  $bb3767:
    assume {:verifier.code 0} true;
    assume $i642 == 1;
    goto $bb11;

  $bb3745:
    assume $i638 == 1;
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i639 := $eq.i32($i637, 0);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i639} true;
    goto $bb3748, $bb3749;

  $bb3749:
    assume {:verifier.code 0} true;
    assume !($i639 == 1);
    goto $bb3747;

  $bb3748:
    assume {:verifier.code 0} true;
    assume $i639 == 1;
    goto $bb11;

  $bb3726:
    assume $i635 == 1;
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i636 := $eq.i32($i634, 0);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i636} true;
    goto $bb3729, $bb3730;

  $bb3730:
    assume {:verifier.code 0} true;
    assume !($i636 == 1);
    goto $bb3728;

  $bb3729:
    assume {:verifier.code 0} true;
    assume $i636 == 1;
    goto $bb11;

  $bb3707:
    assume $i632 == 1;
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $i633 := $eq.i32($i631, 0);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i633} true;
    goto $bb3710, $bb3711;

  $bb3711:
    assume {:verifier.code 0} true;
    assume !($i633 == 1);
    goto $bb3709;

  $bb3710:
    assume {:verifier.code 0} true;
    assume $i633 == 1;
    goto $bb11;

  $bb3688:
    assume $i629 == 1;
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $i630 := $eq.i32($i628, 0);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i630} true;
    goto $bb3691, $bb3692;

  $bb3692:
    assume {:verifier.code 0} true;
    assume !($i630 == 1);
    goto $bb3690;

  $bb3691:
    assume {:verifier.code 0} true;
    assume $i630 == 1;
    goto $bb11;

  $bb3669:
    assume $i626 == 1;
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i627 := $eq.i32($i625, 0);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i627} true;
    goto $bb3672, $bb3673;

  $bb3673:
    assume {:verifier.code 0} true;
    assume !($i627 == 1);
    goto $bb3671;

  $bb3672:
    assume {:verifier.code 0} true;
    assume $i627 == 1;
    goto $bb11;

  $bb3650:
    assume $i623 == 1;
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $i624 := $eq.i32($i622, 0);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i624} true;
    goto $bb3653, $bb3654;

  $bb3654:
    assume {:verifier.code 0} true;
    assume !($i624 == 1);
    goto $bb3652;

  $bb3653:
    assume {:verifier.code 0} true;
    assume $i624 == 1;
    goto $bb11;

  $bb3631:
    assume $i620 == 1;
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $i621 := $eq.i32($i619, 0);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i621} true;
    goto $bb3634, $bb3635;

  $bb3635:
    assume {:verifier.code 0} true;
    assume !($i621 == 1);
    goto $bb3633;

  $bb3634:
    assume {:verifier.code 0} true;
    assume $i621 == 1;
    goto $bb11;

  $bb3612:
    assume $i617 == 1;
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $i618 := $eq.i32($i616, 0);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i618} true;
    goto $bb3615, $bb3616;

  $bb3616:
    assume {:verifier.code 0} true;
    assume !($i618 == 1);
    goto $bb3614;

  $bb3615:
    assume {:verifier.code 0} true;
    assume $i618 == 1;
    goto $bb11;

  $bb3593:
    assume $i614 == 1;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i615 := $eq.i32($i613, 0);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i615} true;
    goto $bb3596, $bb3597;

  $bb3597:
    assume {:verifier.code 0} true;
    assume !($i615 == 1);
    goto $bb3595;

  $bb3596:
    assume {:verifier.code 0} true;
    assume $i615 == 1;
    goto $bb11;

  $bb3574:
    assume $i611 == 1;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $i612 := $eq.i32($i610, 0);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i612} true;
    goto $bb3577, $bb3578;

  $bb3578:
    assume {:verifier.code 0} true;
    assume !($i612 == 1);
    goto $bb3576;

  $bb3577:
    assume {:verifier.code 0} true;
    assume $i612 == 1;
    goto $bb11;

  $bb3555:
    assume $i608 == 1;
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $i609 := $eq.i32($i607, 0);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i609} true;
    goto $bb3558, $bb3559;

  $bb3559:
    assume {:verifier.code 0} true;
    assume !($i609 == 1);
    goto $bb3557;

  $bb3558:
    assume {:verifier.code 0} true;
    assume $i609 == 1;
    goto $bb11;

  $bb3536:
    assume $i605 == 1;
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $i606 := $eq.i32($i604, 0);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i606} true;
    goto $bb3539, $bb3540;

  $bb3540:
    assume {:verifier.code 0} true;
    assume !($i606 == 1);
    goto $bb3538;

  $bb3539:
    assume {:verifier.code 0} true;
    assume $i606 == 1;
    goto $bb11;

  $bb3517:
    assume $i602 == 1;
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $i603 := $eq.i32($i601, 0);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i603} true;
    goto $bb3520, $bb3521;

  $bb3521:
    assume {:verifier.code 0} true;
    assume !($i603 == 1);
    goto $bb3519;

  $bb3520:
    assume {:verifier.code 0} true;
    assume $i603 == 1;
    goto $bb11;

  $bb3498:
    assume $i599 == 1;
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i600 := $eq.i32($i598, 0);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i600} true;
    goto $bb3501, $bb3502;

  $bb3502:
    assume {:verifier.code 0} true;
    assume !($i600 == 1);
    goto $bb3500;

  $bb3501:
    assume {:verifier.code 0} true;
    assume $i600 == 1;
    goto $bb11;

  $bb3479:
    assume $i596 == 1;
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $i597 := $eq.i32($i595, 0);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i597} true;
    goto $bb3482, $bb3483;

  $bb3483:
    assume {:verifier.code 0} true;
    assume !($i597 == 1);
    goto $bb3481;

  $bb3482:
    assume {:verifier.code 0} true;
    assume $i597 == 1;
    goto $bb11;

  $bb3460:
    assume $i593 == 1;
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $i594 := $eq.i32($i592, 0);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i594} true;
    goto $bb3463, $bb3464;

  $bb3464:
    assume {:verifier.code 0} true;
    assume !($i594 == 1);
    goto $bb3462;

  $bb3463:
    assume {:verifier.code 0} true;
    assume $i594 == 1;
    goto $bb11;

  $bb3441:
    assume $i590 == 1;
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i591 := $eq.i32($i589, 0);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i591} true;
    goto $bb3444, $bb3445;

  $bb3445:
    assume {:verifier.code 0} true;
    assume !($i591 == 1);
    goto $bb3443;

  $bb3444:
    assume {:verifier.code 0} true;
    assume $i591 == 1;
    goto $bb11;

  $bb3422:
    assume $i587 == 1;
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i588 := $eq.i32($i586, 0);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb3425, $bb3426;

  $bb3426:
    assume {:verifier.code 0} true;
    assume !($i588 == 1);
    goto $bb3424;

  $bb3425:
    assume {:verifier.code 0} true;
    assume $i588 == 1;
    goto $bb11;

  $bb3403:
    assume $i584 == 1;
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $i585 := $eq.i32($i583, 0);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i585} true;
    goto $bb3406, $bb3407;

  $bb3407:
    assume {:verifier.code 0} true;
    assume !($i585 == 1);
    goto $bb3405;

  $bb3406:
    assume {:verifier.code 0} true;
    assume $i585 == 1;
    goto $bb11;

  $bb3384:
    assume $i581 == 1;
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i580, 0);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i582} true;
    goto $bb3387, $bb3388;

  $bb3388:
    assume {:verifier.code 0} true;
    assume !($i582 == 1);
    goto $bb3386;

  $bb3387:
    assume {:verifier.code 0} true;
    assume $i582 == 1;
    goto $bb11;

  $bb3365:
    assume $i578 == 1;
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $i579 := $eq.i32($i577, 0);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i579} true;
    goto $bb3368, $bb3369;

  $bb3369:
    assume {:verifier.code 0} true;
    assume !($i579 == 1);
    goto $bb3367;

  $bb3368:
    assume {:verifier.code 0} true;
    assume $i579 == 1;
    goto $bb11;

  $bb3346:
    assume $i575 == 1;
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $i576 := $eq.i32($i574, 0);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i576} true;
    goto $bb3349, $bb3350;

  $bb3350:
    assume {:verifier.code 0} true;
    assume !($i576 == 1);
    goto $bb3348;

  $bb3349:
    assume {:verifier.code 0} true;
    assume $i576 == 1;
    goto $bb11;

  $bb3327:
    assume $i572 == 1;
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $i573 := $eq.i32($i571, 0);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i573} true;
    goto $bb3330, $bb3331;

  $bb3331:
    assume {:verifier.code 0} true;
    assume !($i573 == 1);
    goto $bb3329;

  $bb3330:
    assume {:verifier.code 0} true;
    assume $i573 == 1;
    goto $bb11;

  $bb3308:
    assume $i569 == 1;
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i570 := $eq.i32($i568, 0);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i570} true;
    goto $bb3311, $bb3312;

  $bb3312:
    assume {:verifier.code 0} true;
    assume !($i570 == 1);
    goto $bb3310;

  $bb3311:
    assume {:verifier.code 0} true;
    assume $i570 == 1;
    goto $bb11;

  $bb3289:
    assume $i566 == 1;
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $i567 := $eq.i32($i565, 0);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i567} true;
    goto $bb3292, $bb3293;

  $bb3293:
    assume {:verifier.code 0} true;
    assume !($i567 == 1);
    goto $bb3291;

  $bb3292:
    assume {:verifier.code 0} true;
    assume $i567 == 1;
    goto $bb11;

  $bb3270:
    assume $i563 == 1;
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i564 := $eq.i32($i562, 0);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i564} true;
    goto $bb3273, $bb3274;

  $bb3274:
    assume {:verifier.code 0} true;
    assume !($i564 == 1);
    goto $bb3272;

  $bb3273:
    assume {:verifier.code 0} true;
    assume $i564 == 1;
    goto $bb11;

  $bb3251:
    assume $i560 == 1;
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $i561 := $eq.i32($i559, 0);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i561} true;
    goto $bb3254, $bb3255;

  $bb3255:
    assume {:verifier.code 0} true;
    assume !($i561 == 1);
    goto $bb3253;

  $bb3254:
    assume {:verifier.code 0} true;
    assume $i561 == 1;
    goto $bb11;

  $bb3232:
    assume $i557 == 1;
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i558 := $eq.i32($i556, 0);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i558} true;
    goto $bb3235, $bb3236;

  $bb3236:
    assume {:verifier.code 0} true;
    assume !($i558 == 1);
    goto $bb3234;

  $bb3235:
    assume {:verifier.code 0} true;
    assume $i558 == 1;
    goto $bb11;

  $bb3213:
    assume $i554 == 1;
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $i555 := $eq.i32($i553, 0);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i555} true;
    goto $bb3216, $bb3217;

  $bb3217:
    assume {:verifier.code 0} true;
    assume !($i555 == 1);
    goto $bb3215;

  $bb3216:
    assume {:verifier.code 0} true;
    assume $i555 == 1;
    goto $bb11;

  $bb3194:
    assume $i551 == 1;
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i552 := $eq.i32($i550, 0);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i552} true;
    goto $bb3197, $bb3198;

  $bb3198:
    assume {:verifier.code 0} true;
    assume !($i552 == 1);
    goto $bb3196;

  $bb3197:
    assume {:verifier.code 0} true;
    assume $i552 == 1;
    goto $bb11;

  $bb3175:
    assume $i548 == 1;
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i549 := $eq.i32($i547, 0);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i549} true;
    goto $bb3178, $bb3179;

  $bb3179:
    assume {:verifier.code 0} true;
    assume !($i549 == 1);
    goto $bb3177;

  $bb3178:
    assume {:verifier.code 0} true;
    assume $i549 == 1;
    goto $bb11;

  $bb3156:
    assume $i545 == 1;
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $i546 := $eq.i32($i544, 0);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i546} true;
    goto $bb3159, $bb3160;

  $bb3160:
    assume {:verifier.code 0} true;
    assume !($i546 == 1);
    goto $bb3158;

  $bb3159:
    assume {:verifier.code 0} true;
    assume $i546 == 1;
    goto $bb11;

  $bb3137:
    assume $i542 == 1;
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i543 := $eq.i32($i541, 0);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i543} true;
    goto $bb3140, $bb3141;

  $bb3141:
    assume {:verifier.code 0} true;
    assume !($i543 == 1);
    goto $bb3139;

  $bb3140:
    assume {:verifier.code 0} true;
    assume $i543 == 1;
    goto $bb11;

  $bb3118:
    assume $i539 == 1;
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i540 := $eq.i32($i538, 0);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i540} true;
    goto $bb3121, $bb3122;

  $bb3122:
    assume {:verifier.code 0} true;
    assume !($i540 == 1);
    goto $bb3120;

  $bb3121:
    assume {:verifier.code 0} true;
    assume $i540 == 1;
    goto $bb11;

  $bb3099:
    assume $i536 == 1;
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i537 := $eq.i32($i535, 0);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i537} true;
    goto $bb3102, $bb3103;

  $bb3103:
    assume {:verifier.code 0} true;
    assume !($i537 == 1);
    goto $bb3101;

  $bb3102:
    assume {:verifier.code 0} true;
    assume $i537 == 1;
    goto $bb11;

  $bb3080:
    assume $i533 == 1;
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32($i532, 0);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i534} true;
    goto $bb3083, $bb3084;

  $bb3084:
    assume {:verifier.code 0} true;
    assume !($i534 == 1);
    goto $bb3082;

  $bb3083:
    assume {:verifier.code 0} true;
    assume $i534 == 1;
    goto $bb11;

  $bb3061:
    assume $i530 == 1;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $i531 := $eq.i32($i529, 0);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i531} true;
    goto $bb3064, $bb3065;

  $bb3065:
    assume {:verifier.code 0} true;
    assume !($i531 == 1);
    goto $bb3063;

  $bb3064:
    assume {:verifier.code 0} true;
    assume $i531 == 1;
    goto $bb11;

  $bb3042:
    assume $i527 == 1;
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $i528 := $eq.i32($i526, 0);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i528} true;
    goto $bb3045, $bb3046;

  $bb3046:
    assume {:verifier.code 0} true;
    assume !($i528 == 1);
    goto $bb3044;

  $bb3045:
    assume {:verifier.code 0} true;
    assume $i528 == 1;
    goto $bb11;

  $bb3023:
    assume $i524 == 1;
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i525 := $eq.i32($i523, 0);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i525} true;
    goto $bb3026, $bb3027;

  $bb3027:
    assume {:verifier.code 0} true;
    assume !($i525 == 1);
    goto $bb3025;

  $bb3026:
    assume {:verifier.code 0} true;
    assume $i525 == 1;
    goto $bb11;

  $bb3004:
    assume $i521 == 1;
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $i522 := $eq.i32($i520, 0);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i522} true;
    goto $bb3007, $bb3008;

  $bb3008:
    assume {:verifier.code 0} true;
    assume !($i522 == 1);
    goto $bb3006;

  $bb3007:
    assume {:verifier.code 0} true;
    assume $i522 == 1;
    goto $bb11;

  $bb2985:
    assume $i518 == 1;
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i519 := $eq.i32($i517, 0);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i519} true;
    goto $bb2988, $bb2989;

  $bb2989:
    assume {:verifier.code 0} true;
    assume !($i519 == 1);
    goto $bb2987;

  $bb2988:
    assume {:verifier.code 0} true;
    assume $i519 == 1;
    goto $bb11;

  $bb2966:
    assume $i515 == 1;
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $i516 := $eq.i32($i514, 0);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i516} true;
    goto $bb2969, $bb2970;

  $bb2970:
    assume {:verifier.code 0} true;
    assume !($i516 == 1);
    goto $bb2968;

  $bb2969:
    assume {:verifier.code 0} true;
    assume $i516 == 1;
    goto $bb11;

  $bb2947:
    assume $i512 == 1;
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i513 := $eq.i32($i511, 0);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i513} true;
    goto $bb2950, $bb2951;

  $bb2951:
    assume {:verifier.code 0} true;
    assume !($i513 == 1);
    goto $bb2949;

  $bb2950:
    assume {:verifier.code 0} true;
    assume $i513 == 1;
    goto $bb11;

  $bb2928:
    assume $i509 == 1;
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i510 := $eq.i32($i508, 0);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i510} true;
    goto $bb2931, $bb2932;

  $bb2932:
    assume {:verifier.code 0} true;
    assume !($i510 == 1);
    goto $bb2930;

  $bb2931:
    assume {:verifier.code 0} true;
    assume $i510 == 1;
    goto $bb11;

  $bb2909:
    assume $i506 == 1;
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $i507 := $eq.i32($i505, 0);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i507} true;
    goto $bb2912, $bb2913;

  $bb2913:
    assume {:verifier.code 0} true;
    assume !($i507 == 1);
    goto $bb2911;

  $bb2912:
    assume {:verifier.code 0} true;
    assume $i507 == 1;
    goto $bb11;

  $bb2890:
    assume $i503 == 1;
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i502, 0);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i504} true;
    goto $bb2893, $bb2894;

  $bb2894:
    assume {:verifier.code 0} true;
    assume !($i504 == 1);
    goto $bb2892;

  $bb2893:
    assume {:verifier.code 0} true;
    assume $i504 == 1;
    goto $bb11;

  $bb2871:
    assume $i500 == 1;
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i501 := $eq.i32($i499, 0);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i501} true;
    goto $bb2874, $bb2875;

  $bb2875:
    assume {:verifier.code 0} true;
    assume !($i501 == 1);
    goto $bb2873;

  $bb2874:
    assume {:verifier.code 0} true;
    assume $i501 == 1;
    goto $bb11;

  $bb2852:
    assume $i497 == 1;
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i498 := $eq.i32($i496, 0);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i498} true;
    goto $bb2855, $bb2856;

  $bb2856:
    assume {:verifier.code 0} true;
    assume !($i498 == 1);
    goto $bb2854;

  $bb2855:
    assume {:verifier.code 0} true;
    assume $i498 == 1;
    goto $bb11;

  $bb2833:
    assume $i494 == 1;
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $i495 := $eq.i32($i493, 0);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i495} true;
    goto $bb2836, $bb2837;

  $bb2837:
    assume {:verifier.code 0} true;
    assume !($i495 == 1);
    goto $bb2835;

  $bb2836:
    assume {:verifier.code 0} true;
    assume $i495 == 1;
    goto $bb11;

  $bb2814:
    assume $i491 == 1;
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i492 := $eq.i32($i490, 0);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i492} true;
    goto $bb2817, $bb2818;

  $bb2818:
    assume {:verifier.code 0} true;
    assume !($i492 == 1);
    goto $bb2816;

  $bb2817:
    assume {:verifier.code 0} true;
    assume $i492 == 1;
    goto $bb11;

  $bb2795:
    assume $i488 == 1;
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $i489 := $eq.i32($i487, 0);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i489} true;
    goto $bb2798, $bb2799;

  $bb2799:
    assume {:verifier.code 0} true;
    assume !($i489 == 1);
    goto $bb2797;

  $bb2798:
    assume {:verifier.code 0} true;
    assume $i489 == 1;
    goto $bb11;

  $bb2776:
    assume $i485 == 1;
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i484, 0);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i486} true;
    goto $bb2779, $bb2780;

  $bb2780:
    assume {:verifier.code 0} true;
    assume !($i486 == 1);
    goto $bb2778;

  $bb2779:
    assume {:verifier.code 0} true;
    assume $i486 == 1;
    goto $bb11;

  $bb2757:
    assume $i482 == 1;
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $i483 := $eq.i32($i481, 0);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb2760, $bb2761;

  $bb2761:
    assume {:verifier.code 0} true;
    assume !($i483 == 1);
    goto $bb2759;

  $bb2760:
    assume {:verifier.code 0} true;
    assume $i483 == 1;
    goto $bb11;

  $bb2738:
    assume $i479 == 1;
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i480 := $eq.i32($i478, 0);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i480} true;
    goto $bb2741, $bb2742;

  $bb2742:
    assume {:verifier.code 0} true;
    assume !($i480 == 1);
    goto $bb2740;

  $bb2741:
    assume {:verifier.code 0} true;
    assume $i480 == 1;
    goto $bb11;

  $bb2719:
    assume $i476 == 1;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i477 := $eq.i32($i475, 0);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i477} true;
    goto $bb2722, $bb2723;

  $bb2723:
    assume {:verifier.code 0} true;
    assume !($i477 == 1);
    goto $bb2721;

  $bb2722:
    assume {:verifier.code 0} true;
    assume $i477 == 1;
    goto $bb11;

  $bb2700:
    assume $i473 == 1;
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i474 := $eq.i32($i472, 0);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i474} true;
    goto $bb2703, $bb2704;

  $bb2704:
    assume {:verifier.code 0} true;
    assume !($i474 == 1);
    goto $bb2702;

  $bb2703:
    assume {:verifier.code 0} true;
    assume $i474 == 1;
    goto $bb11;

  $bb2681:
    assume $i470 == 1;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i471 := $eq.i32($i469, 0);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i471} true;
    goto $bb2684, $bb2685;

  $bb2685:
    assume {:verifier.code 0} true;
    assume !($i471 == 1);
    goto $bb2683;

  $bb2684:
    assume {:verifier.code 0} true;
    assume $i471 == 1;
    goto $bb11;

  $bb2662:
    assume $i467 == 1;
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i468 := $eq.i32($i466, 0);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i468} true;
    goto $bb2665, $bb2666;

  $bb2666:
    assume {:verifier.code 0} true;
    assume !($i468 == 1);
    goto $bb2664;

  $bb2665:
    assume {:verifier.code 0} true;
    assume $i468 == 1;
    goto $bb11;

  $bb2643:
    assume $i464 == 1;
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i465 := $eq.i32($i463, 0);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i465} true;
    goto $bb2646, $bb2647;

  $bb2647:
    assume {:verifier.code 0} true;
    assume !($i465 == 1);
    goto $bb2645;

  $bb2646:
    assume {:verifier.code 0} true;
    assume $i465 == 1;
    goto $bb11;

  $bb2624:
    assume $i461 == 1;
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i460, 0);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb2627, $bb2628;

  $bb2628:
    assume {:verifier.code 0} true;
    assume !($i462 == 1);
    goto $bb2626;

  $bb2627:
    assume {:verifier.code 0} true;
    assume $i462 == 1;
    goto $bb11;

  $bb2605:
    assume $i458 == 1;
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i459 := $eq.i32($i457, 0);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i459} true;
    goto $bb2608, $bb2609;

  $bb2609:
    assume {:verifier.code 0} true;
    assume !($i459 == 1);
    goto $bb2607;

  $bb2608:
    assume {:verifier.code 0} true;
    assume $i459 == 1;
    goto $bb11;

  $bb2586:
    assume $i455 == 1;
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $i456 := $eq.i32($i454, 0);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i456} true;
    goto $bb2589, $bb2590;

  $bb2590:
    assume {:verifier.code 0} true;
    assume !($i456 == 1);
    goto $bb2588;

  $bb2589:
    assume {:verifier.code 0} true;
    assume $i456 == 1;
    goto $bb11;

  $bb2567:
    assume $i452 == 1;
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i453 := $eq.i32($i451, 0);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i453} true;
    goto $bb2570, $bb2571;

  $bb2571:
    assume {:verifier.code 0} true;
    assume !($i453 == 1);
    goto $bb2569;

  $bb2570:
    assume {:verifier.code 0} true;
    assume $i453 == 1;
    goto $bb11;

  $bb2548:
    assume $i449 == 1;
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $i450 := $eq.i32($i448, 0);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i450} true;
    goto $bb2551, $bb2552;

  $bb2552:
    assume {:verifier.code 0} true;
    assume !($i450 == 1);
    goto $bb2550;

  $bb2551:
    assume {:verifier.code 0} true;
    assume $i450 == 1;
    goto $bb11;

  $bb2529:
    assume $i446 == 1;
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i447 := $eq.i32($i445, 0);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i447} true;
    goto $bb2532, $bb2533;

  $bb2533:
    assume {:verifier.code 0} true;
    assume !($i447 == 1);
    goto $bb2531;

  $bb2532:
    assume {:verifier.code 0} true;
    assume $i447 == 1;
    goto $bb11;

  $bb2510:
    assume $i443 == 1;
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i444 := $eq.i32($i442, 0);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i444} true;
    goto $bb2513, $bb2514;

  $bb2514:
    assume {:verifier.code 0} true;
    assume !($i444 == 1);
    goto $bb2512;

  $bb2513:
    assume {:verifier.code 0} true;
    assume $i444 == 1;
    goto $bb11;

  $bb2491:
    assume $i440 == 1;
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i439, 0);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb2494, $bb2495;

  $bb2495:
    assume {:verifier.code 0} true;
    assume !($i441 == 1);
    goto $bb2493;

  $bb2494:
    assume {:verifier.code 0} true;
    assume $i441 == 1;
    goto $bb11;

  $bb2472:
    assume $i437 == 1;
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i436, 0);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i438} true;
    goto $bb2475, $bb2476;

  $bb2476:
    assume {:verifier.code 0} true;
    assume !($i438 == 1);
    goto $bb2474;

  $bb2475:
    assume {:verifier.code 0} true;
    assume $i438 == 1;
    goto $bb11;

  $bb2453:
    assume $i434 == 1;
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i435 := $eq.i32($i433, 0);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb2456, $bb2457;

  $bb2457:
    assume {:verifier.code 0} true;
    assume !($i435 == 1);
    goto $bb2455;

  $bb2456:
    assume {:verifier.code 0} true;
    assume $i435 == 1;
    goto $bb11;

  $bb2434:
    assume $i431 == 1;
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i430, 0);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i432} true;
    goto $bb2437, $bb2438;

  $bb2438:
    assume {:verifier.code 0} true;
    assume !($i432 == 1);
    goto $bb2436;

  $bb2437:
    assume {:verifier.code 0} true;
    assume $i432 == 1;
    goto $bb11;

  $bb2415:
    assume $i428 == 1;
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i427, 0);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb2418, $bb2419;

  $bb2419:
    assume {:verifier.code 0} true;
    assume !($i429 == 1);
    goto $bb2417;

  $bb2418:
    assume {:verifier.code 0} true;
    assume $i429 == 1;
    goto $bb11;

  $bb2396:
    assume $i425 == 1;
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i426 := $eq.i32($i424, 0);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb2399, $bb2400;

  $bb2400:
    assume {:verifier.code 0} true;
    assume !($i426 == 1);
    goto $bb2398;

  $bb2399:
    assume {:verifier.code 0} true;
    assume $i426 == 1;
    goto $bb11;

  $bb2377:
    assume $i422 == 1;
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i423 := $eq.i32($i421, 0);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb2380, $bb2381;

  $bb2381:
    assume {:verifier.code 0} true;
    assume !($i423 == 1);
    goto $bb2379;

  $bb2380:
    assume {:verifier.code 0} true;
    assume $i423 == 1;
    goto $bb11;

  $bb2358:
    assume $i419 == 1;
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $i420 := $eq.i32($i418, 0);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i420} true;
    goto $bb2361, $bb2362;

  $bb2362:
    assume {:verifier.code 0} true;
    assume !($i420 == 1);
    goto $bb2360;

  $bb2361:
    assume {:verifier.code 0} true;
    assume $i420 == 1;
    goto $bb11;

  $bb2339:
    assume $i416 == 1;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i415, 0);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb2342, $bb2343;

  $bb2343:
    assume {:verifier.code 0} true;
    assume !($i417 == 1);
    goto $bb2341;

  $bb2342:
    assume {:verifier.code 0} true;
    assume $i417 == 1;
    goto $bb11;

  $bb2320:
    assume $i413 == 1;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i414 := $eq.i32($i412, 0);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i414} true;
    goto $bb2323, $bb2324;

  $bb2324:
    assume {:verifier.code 0} true;
    assume !($i414 == 1);
    goto $bb2322;

  $bb2323:
    assume {:verifier.code 0} true;
    assume $i414 == 1;
    goto $bb11;

  $bb2301:
    assume $i410 == 1;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i411 := $eq.i32($i409, 0);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i411} true;
    goto $bb2304, $bb2305;

  $bb2305:
    assume {:verifier.code 0} true;
    assume !($i411 == 1);
    goto $bb2303;

  $bb2304:
    assume {:verifier.code 0} true;
    assume $i411 == 1;
    goto $bb11;

  $bb2282:
    assume $i407 == 1;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i406, 0);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb2285, $bb2286;

  $bb2286:
    assume {:verifier.code 0} true;
    assume !($i408 == 1);
    goto $bb2284;

  $bb2285:
    assume {:verifier.code 0} true;
    assume $i408 == 1;
    goto $bb11;

  $bb2263:
    assume $i404 == 1;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i405 := $eq.i32($i403, 0);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb2266, $bb2267;

  $bb2267:
    assume {:verifier.code 0} true;
    assume !($i405 == 1);
    goto $bb2265;

  $bb2266:
    assume {:verifier.code 0} true;
    assume $i405 == 1;
    goto $bb11;

  $bb2244:
    assume $i401 == 1;
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i400, 0);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i402} true;
    goto $bb2247, $bb2248;

  $bb2248:
    assume {:verifier.code 0} true;
    assume !($i402 == 1);
    goto $bb2246;

  $bb2247:
    assume {:verifier.code 0} true;
    assume $i402 == 1;
    goto $bb11;

  $bb2225:
    assume $i398 == 1;
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i397, 0);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb2228, $bb2229;

  $bb2229:
    assume {:verifier.code 0} true;
    assume !($i399 == 1);
    goto $bb2227;

  $bb2228:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb11;

  $bb2206:
    assume $i395 == 1;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i394, 0);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb2209, $bb2210;

  $bb2210:
    assume {:verifier.code 0} true;
    assume !($i396 == 1);
    goto $bb2208;

  $bb2209:
    assume {:verifier.code 0} true;
    assume $i396 == 1;
    goto $bb11;

  $bb2187:
    assume $i392 == 1;
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i391, 0);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb2190, $bb2191;

  $bb2191:
    assume {:verifier.code 0} true;
    assume !($i393 == 1);
    goto $bb2189;

  $bb2190:
    assume {:verifier.code 0} true;
    assume $i393 == 1;
    goto $bb11;

  $bb2168:
    assume $i389 == 1;
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i390 := $eq.i32($i388, 0);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i390} true;
    goto $bb2171, $bb2172;

  $bb2172:
    assume {:verifier.code 0} true;
    assume !($i390 == 1);
    goto $bb2170;

  $bb2171:
    assume {:verifier.code 0} true;
    assume $i390 == 1;
    goto $bb11;

  $bb2149:
    assume $i386 == 1;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i385, 0);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb2152, $bb2153;

  $bb2153:
    assume {:verifier.code 0} true;
    assume !($i387 == 1);
    goto $bb2151;

  $bb2152:
    assume {:verifier.code 0} true;
    assume $i387 == 1;
    goto $bb11;

  $bb2130:
    assume $i383 == 1;
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i382, 0);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i384} true;
    goto $bb2133, $bb2134;

  $bb2134:
    assume {:verifier.code 0} true;
    assume !($i384 == 1);
    goto $bb2132;

  $bb2133:
    assume {:verifier.code 0} true;
    assume $i384 == 1;
    goto $bb11;

  $bb2111:
    assume $i380 == 1;
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i379, 0);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb2114, $bb2115;

  $bb2115:
    assume {:verifier.code 0} true;
    assume !($i381 == 1);
    goto $bb2113;

  $bb2114:
    assume {:verifier.code 0} true;
    assume $i381 == 1;
    goto $bb11;

  $bb2092:
    assume $i377 == 1;
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i376, 0);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i378} true;
    goto $bb2095, $bb2096;

  $bb2096:
    assume {:verifier.code 0} true;
    assume !($i378 == 1);
    goto $bb2094;

  $bb2095:
    assume {:verifier.code 0} true;
    assume $i378 == 1;
    goto $bb11;

  $bb2073:
    assume $i374 == 1;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i375 := $eq.i32($i373, 0);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb2076, $bb2077;

  $bb2077:
    assume {:verifier.code 0} true;
    assume !($i375 == 1);
    goto $bb2075;

  $bb2076:
    assume {:verifier.code 0} true;
    assume $i375 == 1;
    goto $bb11;

  $bb2054:
    assume $i371 == 1;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i370, 0);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb2057, $bb2058;

  $bb2058:
    assume {:verifier.code 0} true;
    assume !($i372 == 1);
    goto $bb2056;

  $bb2057:
    assume {:verifier.code 0} true;
    assume $i372 == 1;
    goto $bb11;

  $bb2035:
    assume $i368 == 1;
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i367, 0);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i369} true;
    goto $bb2038, $bb2039;

  $bb2039:
    assume {:verifier.code 0} true;
    assume !($i369 == 1);
    goto $bb2037;

  $bb2038:
    assume {:verifier.code 0} true;
    assume $i369 == 1;
    goto $bb11;

  $bb2016:
    assume $i365 == 1;
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i364, 0);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i366} true;
    goto $bb2019, $bb2020;

  $bb2020:
    assume {:verifier.code 0} true;
    assume !($i366 == 1);
    goto $bb2018;

  $bb2019:
    assume {:verifier.code 0} true;
    assume $i366 == 1;
    goto $bb11;

  $bb1997:
    assume $i362 == 1;
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i361, 0);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i363} true;
    goto $bb2000, $bb2001;

  $bb2001:
    assume {:verifier.code 0} true;
    assume !($i363 == 1);
    goto $bb1999;

  $bb2000:
    assume {:verifier.code 0} true;
    assume $i363 == 1;
    goto $bb11;

  $bb1978:
    assume $i359 == 1;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i358, 0);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb1981, $bb1982;

  $bb1982:
    assume {:verifier.code 0} true;
    assume !($i360 == 1);
    goto $bb1980;

  $bb1981:
    assume {:verifier.code 0} true;
    assume $i360 == 1;
    goto $bb11;

  $bb1959:
    assume $i356 == 1;
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i355, 0);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i357} true;
    goto $bb1962, $bb1963;

  $bb1963:
    assume {:verifier.code 0} true;
    assume !($i357 == 1);
    goto $bb1961;

  $bb1962:
    assume {:verifier.code 0} true;
    assume $i357 == 1;
    goto $bb11;

  $bb1940:
    assume $i353 == 1;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i352, 0);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb1943, $bb1944;

  $bb1944:
    assume {:verifier.code 0} true;
    assume !($i354 == 1);
    goto $bb1942;

  $bb1943:
    assume {:verifier.code 0} true;
    assume $i354 == 1;
    goto $bb11;

  $bb1921:
    assume $i350 == 1;
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i351 := $eq.i32($i349, 0);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb1924, $bb1925;

  $bb1925:
    assume {:verifier.code 0} true;
    assume !($i351 == 1);
    goto $bb1923;

  $bb1924:
    assume {:verifier.code 0} true;
    assume $i351 == 1;
    goto $bb11;

  $bb1902:
    assume $i347 == 1;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i346, 0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb1905, $bb1906;

  $bb1906:
    assume {:verifier.code 0} true;
    assume !($i348 == 1);
    goto $bb1904;

  $bb1905:
    assume {:verifier.code 0} true;
    assume $i348 == 1;
    goto $bb11;

  $bb1883:
    assume $i344 == 1;
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i343, 0);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb1886, $bb1887;

  $bb1887:
    assume {:verifier.code 0} true;
    assume !($i345 == 1);
    goto $bb1885;

  $bb1886:
    assume {:verifier.code 0} true;
    assume $i345 == 1;
    goto $bb11;

  $bb1864:
    assume $i341 == 1;
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i340, 0);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb1867, $bb1868;

  $bb1868:
    assume {:verifier.code 0} true;
    assume !($i342 == 1);
    goto $bb1866;

  $bb1867:
    assume {:verifier.code 0} true;
    assume $i342 == 1;
    goto $bb11;

  $bb1845:
    assume $i338 == 1;
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i339 := $eq.i32($i337, 0);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb1848, $bb1849;

  $bb1849:
    assume {:verifier.code 0} true;
    assume !($i339 == 1);
    goto $bb1847;

  $bb1848:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb11;

  $bb1826:
    assume $i335 == 1;
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i334, 0);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb1829, $bb1830;

  $bb1830:
    assume {:verifier.code 0} true;
    assume !($i336 == 1);
    goto $bb1828;

  $bb1829:
    assume {:verifier.code 0} true;
    assume $i336 == 1;
    goto $bb11;

  $bb1807:
    assume $i332 == 1;
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i331, 0);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb1810, $bb1811;

  $bb1811:
    assume {:verifier.code 0} true;
    assume !($i333 == 1);
    goto $bb1809;

  $bb1810:
    assume {:verifier.code 0} true;
    assume $i333 == 1;
    goto $bb11;

  $bb1788:
    assume $i329 == 1;
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i328, 0);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb1791, $bb1792;

  $bb1792:
    assume {:verifier.code 0} true;
    assume !($i330 == 1);
    goto $bb1790;

  $bb1791:
    assume {:verifier.code 0} true;
    assume $i330 == 1;
    goto $bb11;

  $bb1769:
    assume $i326 == 1;
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i325, 0);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb1772, $bb1773;

  $bb1773:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb1771;

  $bb1772:
    assume {:verifier.code 0} true;
    assume $i327 == 1;
    goto $bb11;

  $bb1750:
    assume $i323 == 1;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i322, 0);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb1753, $bb1754;

  $bb1754:
    assume {:verifier.code 0} true;
    assume !($i324 == 1);
    goto $bb1752;

  $bb1753:
    assume {:verifier.code 0} true;
    assume $i324 == 1;
    goto $bb11;

  $bb1731:
    assume $i320 == 1;
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i319, 0);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb1734, $bb1735;

  $bb1735:
    assume {:verifier.code 0} true;
    assume !($i321 == 1);
    goto $bb1733;

  $bb1734:
    assume {:verifier.code 0} true;
    assume $i321 == 1;
    goto $bb11;

  $bb1712:
    assume $i317 == 1;
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i316, 0);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i318} true;
    goto $bb1715, $bb1716;

  $bb1716:
    assume {:verifier.code 0} true;
    assume !($i318 == 1);
    goto $bb1714;

  $bb1715:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb11;

  $bb1693:
    assume $i314 == 1;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i313, 0);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb1696, $bb1697;

  $bb1697:
    assume {:verifier.code 0} true;
    assume !($i315 == 1);
    goto $bb1695;

  $bb1696:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb11;

  $bb1674:
    assume $i311 == 1;
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i310, 0);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb1677, $bb1678;

  $bb1678:
    assume {:verifier.code 0} true;
    assume !($i312 == 1);
    goto $bb1676;

  $bb1677:
    assume {:verifier.code 0} true;
    assume $i312 == 1;
    goto $bb11;

  $bb1655:
    assume $i308 == 1;
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i307, 0);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb1658, $bb1659;

  $bb1659:
    assume {:verifier.code 0} true;
    assume !($i309 == 1);
    goto $bb1657;

  $bb1658:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb11;

  $bb1636:
    assume $i305 == 1;
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i304, 0);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb1639, $bb1640;

  $bb1640:
    assume {:verifier.code 0} true;
    assume !($i306 == 1);
    goto $bb1638;

  $bb1639:
    assume {:verifier.code 0} true;
    assume $i306 == 1;
    goto $bb11;

  $bb1617:
    assume $i302 == 1;
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i301, 0);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb1620, $bb1621;

  $bb1621:
    assume {:verifier.code 0} true;
    assume !($i303 == 1);
    goto $bb1619;

  $bb1620:
    assume {:verifier.code 0} true;
    assume $i303 == 1;
    goto $bb11;

  $bb1598:
    assume $i299 == 1;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i298, 0);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb1601, $bb1602;

  $bb1602:
    assume {:verifier.code 0} true;
    assume !($i300 == 1);
    goto $bb1600;

  $bb1601:
    assume {:verifier.code 0} true;
    assume $i300 == 1;
    goto $bb11;

  $bb1579:
    assume $i296 == 1;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i295, 0);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb1582, $bb1583;

  $bb1583:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb1581;

  $bb1582:
    assume {:verifier.code 0} true;
    assume $i297 == 1;
    goto $bb11;

  $bb1560:
    assume $i293 == 1;
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i292, 0);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb1563, $bb1564;

  $bb1564:
    assume {:verifier.code 0} true;
    assume !($i294 == 1);
    goto $bb1562;

  $bb1563:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb11;

  $bb1541:
    assume $i290 == 1;
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i289, 0);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb1544, $bb1545;

  $bb1545:
    assume {:verifier.code 0} true;
    assume !($i291 == 1);
    goto $bb1543;

  $bb1544:
    assume {:verifier.code 0} true;
    assume $i291 == 1;
    goto $bb11;

  $bb1522:
    assume $i287 == 1;
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i286, 0);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb1525, $bb1526;

  $bb1526:
    assume {:verifier.code 0} true;
    assume !($i288 == 1);
    goto $bb1524;

  $bb1525:
    assume {:verifier.code 0} true;
    assume $i288 == 1;
    goto $bb11;

  $bb1503:
    assume $i284 == 1;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i283, 0);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb1506, $bb1507;

  $bb1507:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb1505;

  $bb1506:
    assume {:verifier.code 0} true;
    assume $i285 == 1;
    goto $bb11;

  $bb1484:
    assume $i281 == 1;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i280, 0);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb1487, $bb1488;

  $bb1488:
    assume {:verifier.code 0} true;
    assume !($i282 == 1);
    goto $bb1486;

  $bb1487:
    assume {:verifier.code 0} true;
    assume $i282 == 1;
    goto $bb11;

  $bb1465:
    assume $i278 == 1;
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i277, 0);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb1468, $bb1469;

  $bb1469:
    assume {:verifier.code 0} true;
    assume !($i279 == 1);
    goto $bb1467;

  $bb1468:
    assume {:verifier.code 0} true;
    assume $i279 == 1;
    goto $bb11;

  $bb1446:
    assume $i275 == 1;
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i274, 0);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb1449, $bb1450;

  $bb1450:
    assume {:verifier.code 0} true;
    assume !($i276 == 1);
    goto $bb1448;

  $bb1449:
    assume {:verifier.code 0} true;
    assume $i276 == 1;
    goto $bb11;

  $bb1427:
    assume $i272 == 1;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i271, 0);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb1430, $bb1431;

  $bb1431:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb1429;

  $bb1430:
    assume {:verifier.code 0} true;
    assume $i273 == 1;
    goto $bb11;

  $bb1408:
    assume $i269 == 1;
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i268, 0);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb1411, $bb1412;

  $bb1412:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb1410;

  $bb1411:
    assume {:verifier.code 0} true;
    assume $i270 == 1;
    goto $bb11;

  $bb1389:
    assume $i266 == 1;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i265, 0);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb1392, $bb1393;

  $bb1393:
    assume {:verifier.code 0} true;
    assume !($i267 == 1);
    goto $bb1391;

  $bb1392:
    assume {:verifier.code 0} true;
    assume $i267 == 1;
    goto $bb11;

  $bb1370:
    assume $i263 == 1;
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i262, 0);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb1373, $bb1374;

  $bb1374:
    assume {:verifier.code 0} true;
    assume !($i264 == 1);
    goto $bb1372;

  $bb1373:
    assume {:verifier.code 0} true;
    assume $i264 == 1;
    goto $bb11;

  $bb1351:
    assume $i260 == 1;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i259, 0);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb1354, $bb1355;

  $bb1355:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb1353;

  $bb1354:
    assume {:verifier.code 0} true;
    assume $i261 == 1;
    goto $bb11;

  $bb1332:
    assume $i257 == 1;
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i256, 0);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb1335, $bb1336;

  $bb1336:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb1334;

  $bb1335:
    assume {:verifier.code 0} true;
    assume $i258 == 1;
    goto $bb11;

  $bb1313:
    assume $i254 == 1;
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i253, 0);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb1316, $bb1317;

  $bb1317:
    assume {:verifier.code 0} true;
    assume !($i255 == 1);
    goto $bb1315;

  $bb1316:
    assume {:verifier.code 0} true;
    assume $i255 == 1;
    goto $bb11;

  $bb1294:
    assume $i251 == 1;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i250, 0);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb1297, $bb1298;

  $bb1298:
    assume {:verifier.code 0} true;
    assume !($i252 == 1);
    goto $bb1296;

  $bb1297:
    assume {:verifier.code 0} true;
    assume $i252 == 1;
    goto $bb11;

  $bb1275:
    assume $i248 == 1;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i247, 0);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i249} true;
    goto $bb1278, $bb1279;

  $bb1279:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb1277;

  $bb1278:
    assume {:verifier.code 0} true;
    assume $i249 == 1;
    goto $bb11;

  $bb1256:
    assume $i245 == 1;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i244, 0);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb1259, $bb1260;

  $bb1260:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb1258;

  $bb1259:
    assume {:verifier.code 0} true;
    assume $i246 == 1;
    goto $bb11;

  $bb1237:
    assume $i242 == 1;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i241, 0);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb1240, $bb1241;

  $bb1241:
    assume {:verifier.code 0} true;
    assume !($i243 == 1);
    goto $bb1239;

  $bb1240:
    assume {:verifier.code 0} true;
    assume $i243 == 1;
    goto $bb11;

  $bb1218:
    assume $i239 == 1;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i238, 0);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb1221, $bb1222;

  $bb1222:
    assume {:verifier.code 0} true;
    assume !($i240 == 1);
    goto $bb1220;

  $bb1221:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb11;

  $bb1199:
    assume $i236 == 1;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i235, 0);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb1202, $bb1203;

  $bb1203:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb1201;

  $bb1202:
    assume {:verifier.code 0} true;
    assume $i237 == 1;
    goto $bb11;

  $bb1180:
    assume $i233 == 1;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i232, 0);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb1183, $bb1184;

  $bb1184:
    assume {:verifier.code 0} true;
    assume !($i234 == 1);
    goto $bb1182;

  $bb1183:
    assume {:verifier.code 0} true;
    assume $i234 == 1;
    goto $bb11;

  $bb1161:
    assume $i230 == 1;
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i229, 0);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb1164, $bb1165;

  $bb1165:
    assume {:verifier.code 0} true;
    assume !($i231 == 1);
    goto $bb1163;

  $bb1164:
    assume {:verifier.code 0} true;
    assume $i231 == 1;
    goto $bb11;

  $bb1142:
    assume $i227 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i226, 0);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb1145, $bb1146;

  $bb1146:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb1144;

  $bb1145:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb11;

  $bb1123:
    assume $i224 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i223, 0);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb1126, $bb1127;

  $bb1127:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb1125;

  $bb1126:
    assume {:verifier.code 0} true;
    assume $i225 == 1;
    goto $bb11;

  $bb1104:
    assume $i221 == 1;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i220, 0);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb1107, $bb1108;

  $bb1108:
    assume {:verifier.code 0} true;
    assume !($i222 == 1);
    goto $bb1106;

  $bb1107:
    assume {:verifier.code 0} true;
    assume $i222 == 1;
    goto $bb11;

  $bb1085:
    assume $i218 == 1;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i217, 0);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb1088, $bb1089;

  $bb1089:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb1087;

  $bb1088:
    assume {:verifier.code 0} true;
    assume $i219 == 1;
    goto $bb11;

  $bb1066:
    assume $i215 == 1;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i214, 0);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb1069, $bb1070;

  $bb1070:
    assume {:verifier.code 0} true;
    assume !($i216 == 1);
    goto $bb1068;

  $bb1069:
    assume {:verifier.code 0} true;
    assume $i216 == 1;
    goto $bb11;

  $bb1047:
    assume $i212 == 1;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i211, 0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb1050, $bb1051;

  $bb1051:
    assume {:verifier.code 0} true;
    assume !($i213 == 1);
    goto $bb1049;

  $bb1050:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb11;

  $bb1028:
    assume $i209 == 1;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i208, 0);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb1031, $bb1032;

  $bb1032:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb1030;

  $bb1031:
    assume {:verifier.code 0} true;
    assume $i210 == 1;
    goto $bb11;

  $bb1009:
    assume $i206 == 1;
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i205, 0);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb1012, $bb1013;

  $bb1013:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb1011;

  $bb1012:
    assume {:verifier.code 0} true;
    assume $i207 == 1;
    goto $bb11;

  $bb990:
    assume $i203 == 1;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i202, 0);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb993, $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    assume !($i204 == 1);
    goto $bb992;

  $bb993:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb11;

  $bb971:
    assume $i200 == 1;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i199, 0);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb974, $bb975;

  $bb975:
    assume {:verifier.code 0} true;
    assume !($i201 == 1);
    goto $bb973;

  $bb974:
    assume {:verifier.code 0} true;
    assume $i201 == 1;
    goto $bb11;

  $bb952:
    assume $i197 == 1;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i196, 0);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb955, $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    assume !($i198 == 1);
    goto $bb954;

  $bb955:
    assume {:verifier.code 0} true;
    assume $i198 == 1;
    goto $bb11;

  $bb933:
    assume $i194 == 1;
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i193, 0);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb936, $bb937;

  $bb937:
    assume {:verifier.code 0} true;
    assume !($i195 == 1);
    goto $bb935;

  $bb936:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb11;

  $bb914:
    assume $i191 == 1;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i190, 0);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb917, $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb916;

  $bb917:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb11;

  $bb895:
    assume $i188 == 1;
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i187, 0);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb898, $bb899;

  $bb899:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb897;

  $bb898:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb11;

  $bb876:
    assume $i185 == 1;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i184, 0);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb879, $bb880;

  $bb880:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb878;

  $bb879:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb11;

  $bb857:
    assume $i182 == 1;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i181, 0);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb860, $bb861;

  $bb861:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb859;

  $bb860:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb11;

  $bb838:
    assume $i179 == 1;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i178, 0);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb841, $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    assume !($i180 == 1);
    goto $bb840;

  $bb841:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb11;

  $bb819:
    assume $i176 == 1;
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i175, 0);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb822, $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    assume !($i177 == 1);
    goto $bb821;

  $bb822:
    assume {:verifier.code 0} true;
    assume $i177 == 1;
    goto $bb11;

  $bb800:
    assume $i173 == 1;
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i172, 0);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb803, $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    assume !($i174 == 1);
    goto $bb802;

  $bb803:
    assume {:verifier.code 0} true;
    assume $i174 == 1;
    goto $bb11;

  $bb781:
    assume $i170 == 1;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i169, 0);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb784, $bb785;

  $bb785:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb783;

  $bb784:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb11;

  $bb762:
    assume $i167 == 1;
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i166, 0);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb765, $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb764;

  $bb765:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb11;

  $bb743:
    assume $i164 == 1;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i163, 0);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb746, $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb745;

  $bb746:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb11;

  $bb724:
    assume $i161 == 1;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i160, 0);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb727, $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb726;

  $bb727:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb11;

  $bb705:
    assume $i158 == 1;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i157, 0);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb708, $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb707;

  $bb708:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb11;

  $bb686:
    assume $i155 == 1;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i154, 0);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb689, $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb688;

  $bb689:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb11;

  $bb667:
    assume $i152 == 1;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i151, 0);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb670, $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb669;

  $bb670:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb11;

  $bb648:
    assume $i149 == 1;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i148, 0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb651, $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb650;

  $bb651:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb11;

  $bb629:
    assume $i146 == 1;
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i145, 0);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb632, $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb631;

  $bb632:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb11;

  $bb610:
    assume $i143 == 1;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i142, 0);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb613, $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb612;

  $bb613:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb11;

  $bb591:
    assume $i140 == 1;
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i139, 0);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594, $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb593;

  $bb594:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb11;

  $bb572:
    assume $i137 == 1;
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i136, 0);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb575, $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb574;

  $bb575:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb11;

  $bb553:
    assume $i134 == 1;
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i133, 0);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb556, $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb555;

  $bb556:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb11;

  $bb534:
    assume $i131 == 1;
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i130, 0);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb537, $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb536;

  $bb537:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb11;

  $bb515:
    assume $i128 == 1;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i127, 0);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb518, $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb517;

  $bb518:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb11;

  $bb496:
    assume $i125 == 1;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i124, 0);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb499, $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb498;

  $bb499:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb11;

  $bb477:
    assume $i122 == 1;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i121, 0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb480, $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb479;

  $bb480:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb11;

  $bb458:
    assume $i119 == 1;
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i118, 0);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb461, $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb460;

  $bb461:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb11;

  $bb439:
    assume $i116 == 1;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i115, 0);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb442, $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb441;

  $bb442:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb11;

  $bb420:
    assume $i113 == 1;
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i112, 0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb423, $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb422;

  $bb423:
    assume {:verifier.code 0} true;
    assume $i114 == 1;
    goto $bb11;

  $bb401:
    assume $i110 == 1;
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i109, 0);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb404, $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb403;

  $bb404:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb11;

  $bb382:
    assume $i107 == 1;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i106, 0);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb384;

  $bb385:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb11;

  $bb363:
    assume $i104 == 1;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i103, 0);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb366, $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb365;

  $bb366:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb11;

  $bb344:
    assume $i101 == 1;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i100, 0);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb346;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb11;

  $bb325:
    assume $i98 == 1;
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i97, 0);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb327;

  $bb328:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb11;

  $bb306:
    assume $i95 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i94, 0);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb309, $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb308;

  $bb309:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb11;

  $bb287:
    assume $i92 == 1;
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i91, 0);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb289;

  $bb290:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb11;

  $bb268:
    assume $i89 == 1;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i88, 0);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb270;

  $bb271:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb11;

  $bb249:
    assume $i86 == 1;
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i85, 0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb252, $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb251;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb11;

  $bb230:
    assume $i83 == 1;
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i82, 0);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb232;

  $bb233:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb11;

  $bb211:
    assume $i80 == 1;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i79, 0);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb213;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb11;

  $bb192:
    assume $i77 == 1;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i76, 0);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb194;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb11;

  $bb173:
    assume $i74 == 1;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i73, 0);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb175;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb11;

  $bb154:
    assume $i71 == 1;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i70, 0);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb156;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb11;

  $bb135:
    assume $i68 == 1;
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i67, 0);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb137;

  $bb138:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb11;

  $bb116:
    assume $i65 == 1;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i64, 0);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb118;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb11;

  $bb97:
    assume $i62 == 1;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i61, 0);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb99;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb11;

  $bb78:
    assume $i59 == 1;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i58, 0);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb80;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb11;

  $bb59:
    assume $i56 == 1;
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i55, 0);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb61;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb11;

  $bb40:
    assume $i53 == 1;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i52, 0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb42;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb11;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 0);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gpio_to_irq: ref;

axiom gpio_to_irq == $sub.ref(0, 327772);

procedure gpio_to_irq($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_to_irq($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4327} {:cexpr "gpio_to_irq:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4328} $i1 := __gpio_to_irq($i0);
    call {:si_unique_call 4329} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const irq_set_irq_type: ref;

axiom irq_set_irq_type == $sub.ref(0, 328804);

procedure irq_set_irq_type($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation irq_set_irq_type($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4330} {:cexpr "irq_set_irq_type:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 4331} {:cexpr "irq_set_irq_type:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_13133;

  corral_source_split_13133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4332} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 4333} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_request_irq_20: ref;

axiom ldv_request_irq_20 == $sub.ref(0, 329836);

procedure ldv_request_irq_20($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.19, $M.3, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9;



implementation ldv_request_irq_20($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4334} {:cexpr "ldv_request_irq_20:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 4335} {:cexpr "ldv_request_irq_20:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4336} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 4337} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4338} $i6 := reg_check_1($p1);
    call {:si_unique_call 4339} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4340} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const pch_vbus_gpio_work_rise: ref;

axiom pch_vbus_gpio_work_rise == $sub.ref(0, 330868);

procedure pch_vbus_gpio_work_rise($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation pch_vbus_gpio_work_rise($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4341} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 88), 168));
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520));
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520)), $mul.ref(6352, 1)), $mul.ref(0, 1));
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4342} __const_udelay(4295000);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4343} __const_udelay(4295000);
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4350} __const_udelay(4295000);
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4351} __const_udelay(4295000);
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4352} __const_udelay(4295000);
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4353} __const_udelay(4295000);
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4354} __const_udelay(4295000);
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4355} __const_udelay(4295000);
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4356} __const_udelay(4295000);
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4357} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4344} $i10 := pch_vbus_gpio_get_value($p5);
    call {:si_unique_call 4345} {:cexpr "vbus"} boogie_si_record_i32($i10);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p12, .str);
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p13, .str.80);
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p14, .str.2);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p15, .str.81);
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.16, $p17);
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1406);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p17, $i20);
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p21, 1);
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.17, $p22);
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4346} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 4347} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4349} pch_udc_reconnect($p5);
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6344), 6520)), $mul.ref(1584, 1));
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4348} vslice_dummy_var_78 := __dynamic_dev_dbg.ref.ref.ref($p1, $p30, .str.81);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __gpio_to_irq: ref;

axiom __gpio_to_irq == $sub.ref(0, 331900);

procedure __gpio_to_irq($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __gpio_to_irq($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4358} {:cexpr "__gpio_to_irq:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4359} $p1 := gpio_to_desc($i0);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4360} $i2 := gpiod_to_irq($p1);
    call {:si_unique_call 4361} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gpiod_to_irq: ref;

axiom gpiod_to_irq == $sub.ref(0, 332932);

procedure gpiod_to_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpiod_to_irq($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4362} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4363} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gpiod_direction_input: ref;

axiom gpiod_direction_input == $sub.ref(0, 333964);

procedure gpiod_direction_input($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpiod_direction_input($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4364} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4365} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_ep_set_maxpacket_limit: ref;

axiom usb_ep_set_maxpacket_limit == $sub.ref(0, 334996);

procedure usb_ep_set_maxpacket_limit($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_ep_set_maxpacket_limit($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4366} {:cexpr "usb_ep_set_maxpacket_limit:arg:maxpacket_limit"} boogie_si_record_i32($i1);
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(42, 1));
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i2);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i1);
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $i4);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 336028);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4367} __list_add($p0, $p3, $p1);
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 337060);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 338092);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_pcd_ep_enable: ref;

axiom pch_udc_pcd_ep_enable == $sub.ref(0, 339124);

procedure pch_udc_pcd_ep_enable($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.0;



implementation pch_udc_pcd_ep_enable($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i16;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, $p2i.ref.i64(ep0_string));
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 5);
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_13263;

  corral_source_split_13263:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i25 == 1);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4368} ldv_spin_lock();
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p1);
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $i34 := $and.i8($i33, $sub.i8(0, 65));
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i34);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 6520)), $mul.ref(6340, 1));
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4369} pch_udc_ep_enable($p19, $p37, $p1);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4370} $i38 := usb_endpoint_maxp($p1);
    call {:si_unique_call 4371} {:cexpr "tmp"} boogie_si_record_i32($i38);
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $i39);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    $i46 := $and.i8($i45, 31);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p19);
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(128, 1));
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    $i53 := (if $i52 == 1 then 0 else 16);
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i47, $i53);
    goto corral_source_split_13308;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32(1, $i54);
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4372} pch_udc_enable_ep_interrupts($p43, $i55);
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p21, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4373} spin_unlock_irqrestore($p56, $u1);
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 108);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const pch_udc_pcd_ep_disable: ref;

axiom pch_udc_pcd_ep_disable == $sub.ref(0, 340156);

procedure pch_udc_pcd_ep_disable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.0;



implementation pch_udc_pcd_ep_disable($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, $p2i.ref.i64(ep0_string));
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4374} ldv_spin_lock();
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4375} empty_req_queue($p4);
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, $sub.i8(0, 65));
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    $i17 := $or.i8($i16, 64);
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i17);
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4376} pch_udc_ep_disable($p4);
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $i22 := $and.i8($i21, 31);
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(128, 1));
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 0 else 16);
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i23, $i29);
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    $i31 := $shl.i32(1, $i30);
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4377} pch_udc_disable_ep_interrupts($p19, $i31);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4378} INIT_LIST_HEAD($p34);
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4379} spin_unlock_irqrestore($p37, $u1);
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_alloc_request: ref;

axiom pch_udc_alloc_request == $sub.ref(0, 341188);

procedure pch_udc_alloc_request($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation pch_udc_alloc_request($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4380} {:cexpr "pch_udc_alloc_request:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4381} $p6 := kzalloc(152, $i1);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $sub.i64(0, 1));
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $sub.i64(0, 1));
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4382} INIT_LIST_HEAD($p13);
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 6520)), $mul.ref(6296, 1));
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4383} $p25 := ldv_dma_pool_alloc_23($p23, $i1, $p24);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, $sub.i32(0, 1073741824));
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $sub.i32(0, 1));
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p25);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(104, 1));
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p25);
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 1);
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p7);
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4384} kfree($p29);
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const pch_udc_free_request: ref;

axiom pch_udc_free_request == $sub.ref(0, 342220);

procedure pch_udc_free_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_udc_free_request($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4385} $i11 := list_empty($p10);
    call {:si_unique_call 4386} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_13453;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p7);
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4390} kfree($p37);
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i32($i24, 1);
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4389} dma_pool_free($p31, $p34, $i36);
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4388} pch_udc_free_dma_chain($p27, $p7);
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4387} vslice_dummy_var_79 := dev_err.ref.ref.ref.ref.ref($p15, .str.28, .str.29, $p17, $p7);
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const pch_udc_pcd_queue: ref;

axiom pch_udc_pcd_queue == $sub.ref(0, 343252);

procedure pch_udc_pcd_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.0, assertsPassed, $CurrAddr;



implementation pch_udc_pcd_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i8;
  var $i125: i8;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i8;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $i142: i8;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i8;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i89: i32;
  var $p164: ref;
  var $i15: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4391} {:cexpr "pch_udc_pcd_queue:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p1);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4392} $i31 := list_empty($p30);
    call {:si_unique_call 4393} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i36 == 1);
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_13532;

  corral_source_split_13532:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4394} ldv_spin_lock();
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i131 := 0;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, 0);
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, $sub.i32(0, 115));
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.0, $p134);
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    $i136 := $and.i8($i135, $sub.i8(0, 5));
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p134, $i136);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4405} $i138 := list_empty($p137);
    call {:si_unique_call 4406} {:cexpr "tmp___0"} boogie_si_record_i32($i138);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p29);
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i89 := $i131;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p18, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4398} spin_unlock_irqrestore($p164, $u1);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    $i15 := $i89;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb67:
    assume $i161 == 1;
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4412} list_add_tail($p162, $p163);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb55:
    assume $i139 == 1;
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p16);
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p140, $mul.ref(128, 1));
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.0, $p141);
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i142);
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 0);
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb57;

  $bb58:
    assume $i144 == 1;
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 0);
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p16);
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p148, $mul.ref(128, 1));
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i152 == 1);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4409} pch_udc_wait_ep_stall($p16);
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4410} pch_udc_ep_clear_nak($p16);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_13704;

  corral_source_split_13704:
    assume {:verifier.code 0} true;
    $i157 := $and.i8($i156, 31);
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    $i159 := $shl.i32(1, $i158);
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4411} pch_udc_enable_ep_interrupts($p154, $i159);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i152 == 1;
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4408} pch_udc_start_rxrequest($p16, $p29);
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i147 == 1;
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4407} process_zlp($p16, $p29);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    $i89 := 0;
    goto $bb43;

  $bb49:
    assume $i128 == 1;
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4403} $i129 := prepare_dma($p16, $p29, 32);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 4404} {:cexpr "retval"} boogie_si_record_i32($i129);
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i131 := $i129;
    goto $bb54;

  $bb51:
    assume $i130 == 1;
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    $i89 := $i129;
    goto $bb43;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i43 == 1;
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, $sub.i64(0, 1));
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i46 == 1);
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb29;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 3);
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i54 == 1);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i81);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4395} $p83 := kzalloc($i82, 32);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $p83);
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p16);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(128, 1));
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_13616;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i94 == 1);
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p18, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    $i119 := $zext.i32.i64($i118);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4402} $i120 := dma_map_single_attrs($p114, $p116, $i119, 2, $0.ref);
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p121, $i120);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $i124 := $and.i8($i123, $sub.i8(0, 3));
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    $i125 := $or.i8($i124, 2);
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, $i125);
    goto corral_source_split_13604;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i94 == 1;
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_13620;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i96);
    call {:si_unique_call 4399} {:cexpr "__len"} boogie_si_record_i64($i97);
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_13623;

  corral_source_split_13623:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 4400} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p99, $p101, $i97, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p18, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    $i109 := $zext.i32.i64($i108);
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4401} $i110 := dma_map_single_attrs($p104, $p106, $i109, 1, $0.ref);
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p111, $i110);
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb41:
    assume $i88 == 1;
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32(0, 12);
    goto $bb43;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i54 == 1;
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p16);
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(128, 1));
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_13559;

  corral_source_split_13559:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i59 == 1);
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p18, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4397} $i78 := dma_map_single_attrs($p72, $p74, $i77, 2, $0.ref);
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p79, $i78);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i59 == 1;
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p18, $mul.ref(0, 6520)), $mul.ref(1584, 1));
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4396} $i68 := dma_map_single_attrs($p62, $p64, $i67, 1, $0.ref);
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p69, $i68);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb31;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 108);
    goto $bb10;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb22;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb10;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p16);
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(128, 1));
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb14;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_13516;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const pch_udc_pcd_dequeue: ref;

axiom pch_udc_pcd_dequeue == $sub.ref(0, 344284);

procedure pch_udc_pcd_dequeue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.0;



implementation pch_udc_pcd_dequeue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p26: ref;
  var $i35: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_13730;

  corral_source_split_13730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4413} ldv_spin_lock();
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p2);
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i23, $i24);
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4418} spin_unlock_irqrestore($p45, $u1);
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    $i17 := $i35;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    $p26 := $p22;
    goto $bb16;

  $bb16:
    call $p27, $i28, $i29, $i30, $p31, $p37, $p38, $p39, $p40, $i41, $i42, $p26 := pch_udc_pcd_dequeue_loop_$bb16($p1, $i24, $p27, $i28, $i29, $i30, $p31, $p37, $p38, $p39, $p40, $i41, $i42, $p26);
    goto $bb16_last;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p1);
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i28, $i29);
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    $p31 := $p26;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 152)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, $i24);
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb25:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p26 := $p40;
    goto $bb25_dummy;

  $bb18:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4414} pch_udc_ep_set_nak($p2);
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4415} $i33 := list_empty($p32);
    call {:si_unique_call 4416} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb23;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4417} complete_req($p2, $p31, $sub.i32(0, 104));
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(128, 1));
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb25_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13752;
}



const pch_udc_pcd_set_halt: ref;

axiom pch_udc_pcd_set_halt == $sub.ref(0, 345316);

procedure pch_udc_pcd_set_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.0;



implementation pch_udc_pcd_set_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i16;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4419} {:cexpr "pch_udc_pcd_set_halt:arg:halt___0"} boogie_si_record_i32($i1);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i21 == 1);
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4420} ldv_spin_lock();
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4421} $i29 := list_empty($p28);
    call {:si_unique_call 4422} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 11);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4426} spin_unlock_irqrestore(udc_stall_spinlock, $u1);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    $i4 := $i57;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i1, 0);
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    goto corral_source_split_13835;

  corral_source_split_13835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4423} pch_udc_ep_clear_stall($p5);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb25;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p5);
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(128, 1));
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_13833;

  corral_source_split_13833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4424} pch_udc_ep_set_stall($p5);
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i46, 31);
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p5);
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(128, 1));
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    $i54 := (if $i53 == 1 then 0 else 16);
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i48, $i54);
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32(1, $i55);
    goto corral_source_split_13860;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4425} pch_udc_enable_ep_interrupts($p44, $i56);
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i36 == 1;
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    $i41 := $and.i16($i40, $sub.i16(0, 3));
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    $i42 := $or.i16($i41, 2);
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i42);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 108);
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb12;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p5);
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(128, 1));
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_13802;

  corral_source_split_13802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_13804;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_set_wedge: ref;

axiom pch_udc_pcd_set_wedge == $sub.ref(0, 346348);

procedure pch_udc_pcd_set_wedge($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.0;



implementation pch_udc_pcd_set_wedge($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i16;
  var $i41: i16;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i16;
  var $i60: i16;
  var $i61: i16;
  var $i30: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_13874;

  corral_source_split_13874:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i20 == 1);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 6520)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_13901;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4427} ldv_spin_lock();
    goto corral_source_split_13903;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4428} $i28 := list_empty($p27);
    call {:si_unique_call 4429} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_13906;

  corral_source_split_13906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    goto corral_source_split_13910;

  corral_source_split_13910:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p4);
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(128, 1));
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4431} pch_udc_ep_set_stall($p4);
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13932;

  corral_source_split_13932:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $i46 := $and.i8($i45, 31);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p4);
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(128, 1));
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    $i53 := (if $i52 == 1 then 0 else 16);
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i47, $i53);
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32(1, $i54);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4432} pch_udc_enable_ep_interrupts($p43, $i55);
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $p58);
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $i60 := $and.i16($i59, $sub.i16(0, 5));
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    $i61 := $or.i16($i60, 4);
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, $i61);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4430} spin_unlock_irqrestore(udc_stall_spinlock, $u1);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    $i3 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    $i40 := $and.i16($i39, $sub.i16(0, 3));
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $i41 := $or.i16($i40, 2);
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, $i41);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 11);
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 108);
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb12;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(128, 1));
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_fifo_flush: ref;

axiom pch_udc_pcd_fifo_flush == $sub.ref(0, 347380);

procedure pch_udc_pcd_fifo_flush($p0: ref);
  free requires assertsPassed;



implementation pch_udc_pcd_fifo_flush($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_13954;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_13958;

  corral_source_split_13958:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(128, 1));
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i8($i15, 5);
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, 1);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4433} pch_udc_ep_fifo_flush($p3, $i18);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13956;

  corral_source_split_13956:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 348412);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.18;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4434} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4435} ldv_spin_unlock();
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4436} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 349444);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4437} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13984;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4438} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 350476);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4439} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_13987;

  corral_source_split_13987:
    assume {:verifier.code 0} true;
    return;
}



const prepare_dma: ref;

axiom prepare_dma == $sub.ref(0, 351508);

procedure prepare_dma($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation prepare_dma($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i10: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4440} {:cexpr "prepare_dma:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i64($i5);
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4441} $i7 := pch_udc_create_dma_chain($p0, $p1, $i6, $i2);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 4442} {:cexpr "retval"} boogie_si_record_i32($i7);
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_14001;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(128, 1));
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_14005;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14010;

  corral_source_split_14010:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1073741823);
    goto corral_source_split_14012;

  corral_source_split_14012:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i20);
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4443} vslice_dummy_var_80 := printk.ref.ref.i32(.str.25, .str.26, $i7);
    goto corral_source_split_13997;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const process_zlp: ref;

axiom process_zlp == $sub.ref(0, 352540);

procedure process_zlp($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18;



implementation process_zlp($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i16;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4444} complete_req($p0, $p1, 0);
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(6265, 1));
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_14024;

  corral_source_split_14024:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(6264, 1));
    goto corral_source_split_14036;

  corral_source_split_14036:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(6265, 1));
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 6520)), $mul.ref(1592, 1));
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4446} pch_udc_ep_clear_nak($p23);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    $i26 := $and.i16($i25, $sub.i16(0, 513));
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i26);
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4445} pch_udc_set_csr_done($p3);
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    $i11 := $and.i16($i10, $sub.i16(0, 257));
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i11);
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_set_csr_done: ref;

axiom pch_udc_set_csr_done == $sub.ref(0, 353572);

procedure pch_udc_set_csr_done($p0: ref);
  free requires assertsPassed;



implementation pch_udc_set_csr_done($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4447} pch_udc_bit_set($p0, 1028, 8192);
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_create_dma_chain: ref;

axiom pch_udc_create_dma_chain == $sub.ref(0, 354604);

procedure pch_udc_create_dma_chain($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation pch_udc_create_dma_chain($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i32;
  var $i33: i1;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4448} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 4449} {:cexpr "pch_udc_create_dma_chain:arg:buf_len"} boogie_si_record_i64($i2);
    call {:si_unique_call 4450} {:cexpr "pch_udc_create_dma_chain:arg:gfp_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_14064;

  corral_source_split_14064:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    call {:si_unique_call 4451} {:cexpr "bytes"} boogie_si_record_i64($i10);
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 1);
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, $sub.i64(0, 1));
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_14088;

  corral_source_split_14088:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14090;

  corral_source_split_14090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14092;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 1073741824));
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $p29, $i30, $i31, $i32 := $p6, $i10, 0, 1;
    goto $bb7;

  $bb7:
    call $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $p39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $p60, $i61, $i62 := pch_udc_create_dma_chain_loop_$bb7($p0, $p1, $i2, $i3, $p4, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $p39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $p60, $i61, $i62);
    goto $bb7_last;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    $i33 := $ult.i64($i2, $i30);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    $i34 := $i30;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, $sub.i32(0, 1073741824));
    goto corral_source_split_14104;

  corral_source_split_14104:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p29, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    $i38 := $ule.i64($i30, $i2);
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    $p39, $i40 := $p29, $i32;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14126;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4454} $p45 := ldv_dma_pool_alloc_22($p44, $i3, $p4);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    $i49 := $i32;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i31, $i2);
    call {:si_unique_call 4455} {:cexpr "i"} boogie_si_record_i64($i50);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_14143;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i50);
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i54, $i55);
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.25, $p4);
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p29, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    $i61 := $sub.i64($i30, $i2);
    call {:si_unique_call 4456} {:cexpr "bytes"} boogie_si_record_i64($i61);
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i32, 1);
    call {:si_unique_call 4457} {:cexpr "len"} boogie_si_record_i32($i62);
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    $p29, $i30, $i31, $i32 := $p45, $i61, $i50, $i62;
    goto corral_source_split_14153_dummy;

  $bb15:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i74 := $ugt.i32($i49, 1);
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 1);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 12);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    $r := $i73;
    return;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i49);
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4458} pch_udc_free_dma_chain($p77, $p1);
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(104, 1));
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p39);
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_14114;

  corral_source_split_14114:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i65, 134217728);
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i64.i32($i69);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i40);
    goto corral_source_split_14124;

  corral_source_split_14124:
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb19;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    $i34 := $i2;
    goto $bb10;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_14072;

  corral_source_split_14072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4452} pch_udc_free_dma_chain($p15, $p1);
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_14153_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4453} {:cexpr "pch_udc_create_dma_chain:arg:_min1"} boogie_si_record_i64($i2);
    goto corral_source_split_14095;
}



const pch_udc_free_dma_chain: ref;

axiom pch_udc_free_dma_chain == $sub.ref(0, 355636);

procedure pch_udc_free_dma_chain($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_udc_free_dma_chain($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i11: i64;
  var $i12: i32;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14168;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 4459} {:cexpr "i"} boogie_si_record_i32($i5);
    goto corral_source_split_14171;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    call {:si_unique_call 4460} {:cexpr "addr"} boogie_si_record_i64($i8);
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i5, 1);
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 1);
    goto corral_source_split_14200;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_14179;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    $i11, $i12 := $i8, $i5;
    goto $bb4;

  $bb4:
    call $p13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $i22, $i23, $i11, $i12 := pch_udc_free_dma_chain_loop_$bb4($p0, $p13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $i22, $i23, $i11, $i12);
    goto $bb4_last;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4461} $p13 := phys_to_virt($i11);
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    call {:si_unique_call 4462} {:cexpr "addr2"} boogie_si_record_i64($i17);
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p14);
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4463} dma_pool_free($p19, $p20, $i11);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i12, 1);
    call {:si_unique_call 4464} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 1);
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i11, $i12 := $i17, $i22;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14181;
}



const ldv_dma_pool_alloc_22: ref;

axiom ldv_dma_pool_alloc_22 == $sub.ref(0, 356668);

procedure ldv_dma_pool_alloc_22($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_22($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var vslice_dummy_var_81: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4465} {:cexpr "ldv_dma_pool_alloc_22:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4466} ldv_check_alloc_flags($i1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4467} vslice_dummy_var_81 := dma_pool_alloc($p0, $i1, $p2);
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const ldv_dma_pool_alloc_23: ref;

axiom ldv_dma_pool_alloc_23 == $sub.ref(0, 357700);

procedure ldv_dma_pool_alloc_23($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_23($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var vslice_dummy_var_82: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4468} {:cexpr "ldv_dma_pool_alloc_23:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4469} ldv_check_alloc_flags($i1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4470} vslice_dummy_var_82 := dma_pool_alloc($p0, $i1, $p2);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const pch_udc_ep_disable: ref;

axiom pch_udc_ep_disable == $sub.ref(0, 358732);

procedure pch_udc_ep_disable($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(128, 1));
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4474} pch_udc_ep_writel($p0, 128, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4475} pch_udc_ep_writel($p0, 0, 20);
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4471} pch_udc_ep_writel($p0, 2, 0);
    goto corral_source_split_14218;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4472} pch_udc_ep_writel($p0, 128, 0);
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4473} pch_udc_ep_bit_set($p0, 4, 64);
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_enable: ref;

axiom pch_udc_ep_enable == $sub.ref(0, 359764);

procedure pch_udc_ep_enable($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation pch_udc_ep_enable($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i8;
  var $i27: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i8;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i8;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $i75: i8;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4476} pch_udc_ep_set_trfr_type($p0, $i6);
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_14232;

  corral_source_split_14232:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(128, 1));
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_14234;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i8($i13, 5);
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, 1);
    goto corral_source_split_14243;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4477} pch_udc_ep_set_bufsz($p0, 256, $i16);
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4478} $i17 := usb_endpoint_maxp($p2);
    call {:si_unique_call 4479} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4480} pch_udc_ep_set_maxpkt($p0, $i17);
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4481} pch_udc_ep_set_nak($p0);
    goto corral_source_split_14248;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i8($i19, 5);
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i20, 1);
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4482} pch_udc_ep_fifo_flush($p0, $i22);
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4483} $i23 := usb_endpoint_maxp($p2);
    call {:si_unique_call 4484} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    $i26 := $and.i8($i25, 31);
    goto corral_source_split_14258;

  corral_source_split_14258:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    $i30 := $lshr.i8($i29, 5);
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, 1);
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32($i32, 4);
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i27, $i33);
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 3);
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    $i39 := $shl.i32($i38, 5);
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i34, $i39);
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    $i44 := $shl.i32($i43, 7);
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i40, $i44);
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    $i49 := $shl.i32($i48, 11);
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i45, $i49);
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    $i54 := $shl.i32($i53, 15);
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i50, $i54);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32($i23, 19);
    goto corral_source_split_14288;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i55, $i56);
    call {:si_unique_call 4485} {:cexpr "val"} boogie_si_record_i32($i57);
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(128, 1));
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i62 == 1);
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i57);
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_14312;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    $i76 := $and.i8($i75, 31);
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    $i78 := $mul.i32($i77, 2);
    goto corral_source_split_14315;

  corral_source_split_14315:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 1);
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4487} pch_udc_write_csr($p72, $i73, $i79);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i62 == 1;
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14297;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i57);
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    $i68 := $and.i8($i67, 31);
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_14303;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    $i70 := $mul.i32($i69, 2);
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4486} pch_udc_write_csr($p64, $i65, $i70);
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 360796);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pch_udc_ep_set_trfr_type: ref;

axiom pch_udc_ep_set_trfr_type == $sub.ref(0, 361828);

procedure pch_udc_ep_set_trfr_type($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation pch_udc_ep_set_trfr_type($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4488} {:cexpr "pch_udc_ep_set_trfr_type:arg:type"} boogie_si_record_i8($i1);
    goto corral_source_split_14323;

  corral_source_split_14323:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i2, 4);
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 48);
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4489} pch_udc_ep_writel($p0, $i5, 0);
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_pcd_get_frame: ref;

axiom pch_udc_pcd_get_frame == $sub.ref(0, 362860);

procedure pch_udc_pcd_get_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_pcd_get_frame($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_14331;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4490} $i5 := pch_udc_get_frame($p4);
    call {:si_unique_call 4491} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_14339;

  corral_source_split_14339:
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_wakeup: ref;

axiom pch_udc_pcd_wakeup == $sub.ref(0, 363892);

procedure pch_udc_pcd_wakeup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18;



implementation pch_udc_pcd_wakeup($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14341;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4492} ldv_spin_lock();
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4493} pch_udc_rmt_wakeup($p4);
    goto corral_source_split_14351;

  corral_source_split_14351:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4494} spin_unlock_irqrestore($p5, $u1);
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_selfpowered: ref;

axiom pch_udc_pcd_selfpowered == $sub.ref(0, 364924);

procedure pch_udc_pcd_selfpowered($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_pcd_selfpowered($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4495} {:cexpr "pch_udc_pcd_selfpowered:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4497} pch_udc_clear_selfpowered($p5);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4496} pch_udc_set_selfpowered($p5);
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_vbus_session: ref;

axiom pch_udc_pcd_vbus_session == $sub.ref(0, 365956);

procedure pch_udc_pcd_vbus_session($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.3, $M.5, $M.7, $M.9, $CurrAddr;



implementation pch_udc_pcd_vbus_session($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4498} {:cexpr "pch_udc_pcd_vbus_session:arg:is_active"} boogie_si_record_i32($i1);
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4499} pch_udc_vbus_session($p5, $i1);
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_vbus_draw: ref;

axiom pch_udc_pcd_vbus_draw == $sub.ref(0, 366988);

procedure pch_udc_pcd_vbus_draw($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_pcd_vbus_draw($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4500} {:cexpr "pch_udc_pcd_vbus_draw:arg:mA"} boogie_si_record_i32($i1);
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 95);
    return;
}



const pch_udc_pcd_pullup: ref;

axiom pch_udc_pcd_pullup == $sub.ref(0, 368020);

procedure pch_udc_pcd_pullup($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.3, $M.5, $M.7, $M.9, $CurrAddr;



implementation pch_udc_pcd_pullup($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4501} {:cexpr "pch_udc_pcd_pullup:arg:is_on"} boogie_si_record_i32($i1);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_14392;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4506} pch_udc_set_disconnect($p5);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_14410;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4503} spin_unlock($p17);
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 6520)), $mul.ref(0, 1));
    call {:si_unique_call 4504} devirtbounce.3($p21, $p22);
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4505} spin_lock($p23);
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4502} pch_udc_reconnect($p5);
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_start: ref;

axiom pch_udc_start == $sub.ref(0, 369052);

procedure pch_udc_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_udc_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i16;
  var $i15: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14423;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p1);
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4507} pch_udc_setup_ep0($p2);
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4508} $i6 := pch_vbus_gpio_get_value($p2);
    call {:si_unique_call 4509} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6352, 1)), $mul.ref(4, 1));
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    $i14 := $and.i16($i13, $sub.i16(0, 65));
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    $i15 := $or.i16($i14, 64);
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $i15);
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4510} pch_udc_clear_disconnect($p2);
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const pch_udc_stop: ref;

axiom pch_udc_stop == $sub.ref(0, 370084);

procedure pch_udc_stop($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_udc_stop($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4511} pch_udc_disable_interrupts($p2, 127);
    goto corral_source_split_14448;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_14449;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_14451;

  corral_source_split_14451:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_14452;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    $i6 := $and.i16($i5, $sub.i16(0, 65));
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $i6);
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4512} pch_udc_set_disconnect($p2);
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const pch_udc_setup_ep0: ref;

axiom pch_udc_setup_ep0 == $sub.ref(0, 371116);

procedure pch_udc_setup_ep0($p0: ref);
  free requires assertsPassed;



implementation pch_udc_setup_ep0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14457;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4513} pch_udc_enable_ep_interrupts($p0, 65537);
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4514} pch_udc_enable_interrupts($p0, 95);
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_clear_disconnect: ref;

axiom pch_udc_clear_disconnect == $sub.ref(0, 372148);

procedure pch_udc_clear_disconnect($p0: ref);
  free requires assertsPassed;



implementation pch_udc_clear_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4515} pch_udc_bit_set($p0, 1028, 1);
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4516} pch_udc_bit_clr($p0, 1028, 1024);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4519} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4518} pch_udc_bit_clr($p0, 1028, 1);
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4517} __const_udelay(4295000);
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_vbus_session: ref;

axiom pch_udc_vbus_session == $sub.ref(0, 373180);

procedure pch_udc_vbus_session($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.3, $M.5, $M.7, $M.9, $CurrAddr;



implementation pch_udc_vbus_session($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i16;
  var $i5: i16;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4520} {:cexpr "pch_udc_vbus_session:arg:is_active"} boogie_si_record_i32($i1);
    goto corral_source_split_14472;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_14484;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4525} pch_udc_set_disconnect($p0);
    goto corral_source_split_14508;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    $i26 := $and.i16($i25, $sub.i16(0, 129));
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i26);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4522} spin_unlock($p17);
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(1576, 1));
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(0, 1));
    call {:si_unique_call 4523} devirtbounce.3($p21, $p22);
    goto corral_source_split_14504;

  corral_source_split_14504:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6200, 1));
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4524} spin_lock($p23);
    goto corral_source_split_14506;

  corral_source_split_14506:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4521} pch_udc_reconnect($p0);
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6520)), $mul.ref(6272, 1));
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_14478;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    $i5 := $and.i16($i4, $sub.i16(0, 129));
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    $i6 := $or.i16($i5, 128);
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i6);
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_set_selfpowered: ref;

axiom pch_udc_set_selfpowered == $sub.ref(0, 374212);

procedure pch_udc_set_selfpowered($p0: ref);
  free requires assertsPassed;



implementation pch_udc_set_selfpowered($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14513;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4526} pch_udc_bit_set($p0, 1024, 8);
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_clear_selfpowered: ref;

axiom pch_udc_clear_selfpowered == $sub.ref(0, 375244);

procedure pch_udc_clear_selfpowered($p0: ref);
  free requires assertsPassed;



implementation pch_udc_clear_selfpowered($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4527} pch_udc_bit_clr($p0, 1024, 8);
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_rmt_wakeup: ref;

axiom pch_udc_rmt_wakeup == $sub.ref(0, 376276);

procedure pch_udc_rmt_wakeup($p0: ref);
  free requires assertsPassed;



implementation pch_udc_rmt_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4528} pch_udc_bit_set($p0, 1028, 1);
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4531} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4530} pch_udc_bit_clr($p0, 1028, 1);
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4529} __const_udelay(4295000);
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_get_frame: ref;

axiom pch_udc_get_frame == $sub.ref(0, 377308);

procedure pch_udc_get_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_get_frame($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4532} $i1 := pch_udc_readl($p0, 1032);
    call {:si_unique_call 4533} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i1, 18);
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 378340);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4534} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4535} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4536} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 4537} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4538} $p4 := calloc(1, $i0);
    goto corral_source_split_14540;

  corral_source_split_14540:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4539} __VERIFIER_assume($i7);
    goto corral_source_split_14544;

  corral_source_split_14544:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_initialize_usb_gadget_ops_5: ref;

axiom ldv_initialize_usb_gadget_ops_5 == $sub.ref(0, 379372);

procedure ldv_initialize_usb_gadget_ops_5();
  free requires assertsPassed;
  modifies $M.26, $M.27, $M.0, $CurrAddr;



implementation ldv_initialize_usb_gadget_ops_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14548;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4540} $p0 := ldv_zalloc(184);
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    $M.26 := $p0;
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4541} $p2 := ldv_zalloc(1568);
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    $M.27 := $p2;
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_2: ref;

axiom choose_interrupt_2 == $sub.ref(0, 380404);

procedure choose_interrupt_2();
  free requires assertsPassed;
  modifies $M.28, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.18, $M.3, $M.5, $M.7, $M.9, $M.24, $M.4, $M.19, $M.6, $M.20, $M.8, $M.21, $M.10, $M.22, assertsPassed;



implementation choose_interrupt_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4542} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4543} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 4544} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4553} ldv_stop();
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    $i18 := $M.37;
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    $i19 := $M.38;
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    $p20 := $M.39;
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4547} $i21 := ldv_irq_2($i18, $i19, $p20);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    $M.28 := $i21;
    call {:si_unique_call 4548} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i21);
    goto corral_source_split_14570;

  corral_source_split_14570:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    $i14 := $M.34;
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    $i15 := $M.35;
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    $p16 := $M.36;
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4545} $i17 := ldv_irq_2($i14, $i15, $p16);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 0} true;
    $M.28 := $i17;
    call {:si_unique_call 4546} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i17);
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    $i10 := $M.31;
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    $i11 := $M.32;
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    $p12 := $M.33;
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4549} $i13 := ldv_irq_2($i10, $i11, $p12);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_14576;

  corral_source_split_14576:
    assume {:verifier.code 0} true;
    $M.28 := $i13;
    call {:si_unique_call 4550} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i13);
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    $i6 := $M.28;
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    $i7 := $M.29;
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $p8 := $M.30;
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4551} $i9 := ldv_irq_2($i6, $i7, $p8);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    $M.28 := $i9;
    call {:si_unique_call 4552} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i9);
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const ldv_irq_2: ref;

axiom ldv_irq_2 == $sub.ref(0, 381436);

procedure ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.18, $M.3, $M.5, $M.7, $M.9, $M.24, $M.4, $M.19, $M.6, $M.20, $M.8, $M.21, $M.10, $M.22, assertsPassed;



implementation ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4554} {:cexpr "ldv_irq_2:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 4555} {:cexpr "ldv_irq_2:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14591;

  corral_source_split_14591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4556} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 4557} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 4558} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4563} ldv_stop();
    goto corral_source_split_14601;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_14593;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1);
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4559} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4560} $i7 := pch_udc_isr($i1, $p2);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 4561} {:cexpr "irq_retval"} boogie_si_record_i32($i7);
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4562} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_14599;

  corral_source_split_14599:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 382468);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14603;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_usb_ep_ops_4: ref;

axiom ldv_initialize_usb_ep_ops_4 == $sub.ref(0, 383500);

procedure ldv_initialize_usb_ep_ops_4();
  free requires assertsPassed;
  modifies $M.41, $M.42, $M.0, $CurrAddr;



implementation ldv_initialize_usb_ep_ops_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14605;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4564} $p0 := ldv_zalloc(64);
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    $M.41 := $p0;
    goto corral_source_split_14608;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4565} $p2 := ldv_zalloc(88);
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    $M.42 := $p2;
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_pci_driver_3: ref;

axiom ldv_initialize_pci_driver_3 == $sub.ref(0, 384532);

procedure ldv_initialize_pci_driver_3();
  free requires assertsPassed;
  modifies $M.43, $M.0, $CurrAddr;



implementation ldv_initialize_pci_driver_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4566} $p0 := ldv_zalloc(2976);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    goto corral_source_split_14615;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    $M.43 := $p0;
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 385564);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4567} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 4568} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_14619;

  corral_source_split_14619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14621;

  corral_source_split_14621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4569} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 4570} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 4571} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4576} ldv_stop();
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1);
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4572} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4573} $i7 := pch_vbus_gpio_irq($i1, $p2);
    call {:si_unique_call 4574} {:cexpr "irq_retval"} boogie_si_record_i32($i7);
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4575} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 386596);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.3;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4577} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4578} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 4579} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4588} ldv_stop();
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 0} true;
    $i18 := $M.9;
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    $i19 := $M.10;
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 0} true;
    $p20 := $M.22;
    goto corral_source_split_14645;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4582} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    $M.3 := $i21;
    call {:si_unique_call 4583} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $i14 := $M.7;
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    $i15 := $M.8;
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    $p16 := $M.21;
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4580} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto corral_source_split_14639;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    $M.3 := $i17;
    call {:si_unique_call 4581} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    $i11 := $M.6;
    goto corral_source_split_14651;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    $p12 := $M.20;
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4584} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto corral_source_split_14653;

  corral_source_split_14653:
    assume {:verifier.code 0} true;
    $M.3 := $i13;
    call {:si_unique_call 4585} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    $i6 := $M.3;
    goto corral_source_split_14657;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    $i7 := $M.4;
    goto corral_source_split_14658;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    $p8 := $M.19;
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4586} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $M.3 := $i9;
    call {:si_unique_call 4587} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const main: ref;

axiom main == $sub.ref(0, 387628);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.18, $M.0, $M.3, $M.54, $M.26, $M.27, $M.43, $M.41, $M.42, $M.55, $M.1, $M.56, $M.57, $M.28, $M.9, $M.7, $M.5, $M.37, $M.34, $M.31, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.38, $M.39, $M.4, $M.6, $M.8, $M.10, $M.19, $M.20, $M.21, $M.22, $M.11, $M.65, $M.23, $CurrAddr, $M.2, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.24, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: ref;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    call {:si_unique_call 4589} $initialize();
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4590} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 4591} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4592} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4593} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_14666;

  corral_source_split_14666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4594} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 4595} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 4596} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4597} $p4 := ldv_zalloc(9);
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_14669;

  corral_source_split_14669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4598} $p6 := ldv_zalloc(32);
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_14671;

  corral_source_split_14671:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4599} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 4600} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 4601} {:cexpr "tmp___2"} boogie_si_record_i32($i8);
    goto corral_source_split_14672;

  corral_source_split_14672:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4602} $i9 := __VERIFIER_nondet_uint();
    call {:si_unique_call 4603} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i9);
    call {:si_unique_call 4604} {:cexpr "tmp___3"} boogie_si_record_i32($i9);
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4605} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 4606} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 4607} {:cexpr "tmp___4"} boogie_si_record_i32($i10);
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4608} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 4609} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 4610} {:cexpr "tmp___5"} boogie_si_record_i32($i11);
    goto corral_source_split_14675;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4611} ldv_initialize();
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.44;
    call {:si_unique_call 4612} cmdloc_dummy_var_24 := $memset.i8(cmdloc_dummy_var_23, $p12, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.44 := cmdloc_dummy_var_24;
    goto corral_source_split_14678;

  corral_source_split_14678:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.45;
    call {:si_unique_call 4613} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p13, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.45 := cmdloc_dummy_var_26;
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_14681;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.46;
    call {:si_unique_call 4614} cmdloc_dummy_var_28 := $memset.i8(cmdloc_dummy_var_27, $p14, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.46 := cmdloc_dummy_var_28;
    goto corral_source_split_14682;

  corral_source_split_14682:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 4615} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 4616} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_14684;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 4617} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 4618} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_14686;

  corral_source_split_14686:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 4619} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 4620} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 4621} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p38, $i40, $i41, $p42, $p43, $i44, $i46, $i47, $p48, $i49, $i51, $i52, $p53, $i55, $i56, $p57, $p58, $i60, $i61, $p62, $p63, $i64, $i65, $p66, $i68, $i69, $p70, $i71, $i72, $p73, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $i114, $i115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $p127, $i128, $i129, $i130, $i131, $p132, $i133, $i134, $i135, $i136, $p137, $i138, $i139, $i140, $i141, $p142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $p162, $i164, $i165, $p166, $p167, $i169, $i170, $p171, $i173, $i174, $p175, $i177, $i178, $p179, $i181, $i182, $p183, $i185, $i186, $p187, $p188, $i190, $i191, $p192, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97 := main_loop_$bb1($p0, $p1, $p2, $i3, $p5, $p7, $i8, $i9, $i10, $i11, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p38, $i40, $i41, $p42, $p43, $i44, $i46, $i47, $p48, $i49, $i51, $i52, $p53, $i55, $i56, $p57, $p58, $i60, $i61, $p62, $p63, $i64, $i65, $p66, $i68, $i69, $p70, $i71, $i72, $p73, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $i114, $i115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $p127, $i128, $i129, $i130, $i131, $p132, $i133, $i134, $i135, $i136, $p137, $i138, $i139, $i140, $i141, $p142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $p162, $i164, $i165, $p166, $p167, $i169, $i170, $p171, $i173, $i174, $p175, $i177, $i178, $p179, $i181, $i182, $p183, $i185, $i186, $p187, $p188, $i190, $i191, $p192, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4713} ldv_stop();
    goto corral_source_split_15034;

  corral_source_split_15034:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb73_dummy;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_14699;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    $i148 := $M.53;
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb163:
    assume $i149 == 1;
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4693} $i150 := __VERIFIER_nondet_int();
    call {:si_unique_call 4694} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i150);
    call {:si_unique_call 4695} {:cexpr "tmp___10"} boogie_si_record_i32($i150);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $i151 := $slt.i32($i150, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    $i152 := $slt.i32($i150, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i150, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i150, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4712} ldv_stop();
    goto corral_source_split_15032;

  corral_source_split_15032:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb172:
    assume $i154 == 1;
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    $i190 := $M.53;
    goto corral_source_split_14963;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 1);
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb207:
    assume $i191 == 1;
    goto corral_source_split_15027;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    $p192 := $M.27;
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4710} vslice_dummy_var_97 := pch_udc_pcd_wakeup($p192);
    goto corral_source_split_15029;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4711} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb170:
    assume $i153 == 1;
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    $i185 := $M.53;
    goto corral_source_split_14959;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 1);
    goto corral_source_split_14960;

  corral_source_split_14960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb204:
    assume $i186 == 1;
    goto corral_source_split_15021;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    $p187 := $M.27;
    goto corral_source_split_15022;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    $p188 := $M.26;
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4708} vslice_dummy_var_96 := pch_udc_stop($p187, $p188);
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4709} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15025;

  corral_source_split_15025:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb168:
    assume $i152 == 1;
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i150, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i155 == 1);
    goto corral_source_split_14970;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    $i181 := $M.53;
    goto corral_source_split_14971;

  corral_source_split_14971:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 1);
    goto corral_source_split_14972;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb201:
    assume $i182 == 1;
    goto corral_source_split_15016;

  corral_source_split_15016:
    assume {:verifier.code 0} true;
    $p183 := $M.27;
    goto corral_source_split_15017;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4706} vslice_dummy_var_95 := pch_udc_pcd_vbus_session($p183, $i11);
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4707} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15019;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb175:
    assume $i155 == 1;
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    $i177 := $M.53;
    goto corral_source_split_14967;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 1);
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb198:
    assume $i178 == 1;
    goto corral_source_split_15011;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    $p179 := $M.27;
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4704} vslice_dummy_var_94 := pch_udc_pcd_get_frame($p179);
    goto corral_source_split_15013;

  corral_source_split_15013:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4705} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb166:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i150, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i157 := $slt.i32($i150, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i157 == 1);
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    $i173 := $M.53;
    goto corral_source_split_14979;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 1);
    goto corral_source_split_14980;

  corral_source_split_14980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb195:
    assume $i174 == 1;
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    $p175 := $M.27;
    goto corral_source_split_15007;

  corral_source_split_15007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4702} vslice_dummy_var_93 := pch_udc_pcd_vbus_draw($p175, $i9);
    goto corral_source_split_15008;

  corral_source_split_15008:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4703} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15009;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb179:
    assume $i157 == 1;
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    $i169 := $M.53;
    goto corral_source_split_14975;

  corral_source_split_14975:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 1);
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb192:
    assume $i170 == 1;
    goto corral_source_split_15001;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    $p171 := $M.27;
    goto corral_source_split_15002;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4700} vslice_dummy_var_92 := pch_udc_pcd_selfpowered($p171, $i8);
    goto corral_source_split_15003;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4701} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15004;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb177:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i150, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i158 == 1);
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    $i164 := $M.53;
    goto corral_source_split_14983;

  corral_source_split_14983:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 1);
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb189:
    assume $i165 == 1;
    goto corral_source_split_14995;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    $p166 := $M.27;
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    $p167 := $M.26;
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4698} vslice_dummy_var_91 := pch_udc_start($p166, $p167);
    goto corral_source_split_14998;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4699} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb181:
    assume $i158 == 1;
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i150, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb174;

  $bb183:
    assume $i159 == 1;
    goto corral_source_split_14986;

  corral_source_split_14986:
    assume {:verifier.code 0} true;
    $i160 := $M.53;
    goto corral_source_split_14987;

  corral_source_split_14987:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 1);
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb185:
    assume $i161 == 1;
    goto corral_source_split_14990;

  corral_source_split_14990:
    assume {:verifier.code 0} true;
    $p162 := $M.27;
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4696} vslice_dummy_var_90 := pch_udc_pcd_pullup($p162, $i10);
    goto corral_source_split_14992;

  corral_source_split_14992:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4697} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    $i146 := $M.52;
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_14697;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb160:
    assume $i147 == 1;
    goto corral_source_split_14953;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4692} choose_interrupt_2();
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    goto $bb162;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    $i94 := $M.51;
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_14693;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb107:
    assume $i95 == 1;
    goto corral_source_split_14851;

  corral_source_split_14851:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4665} $i96 := __VERIFIER_nondet_int();
    call {:si_unique_call 4666} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i96);
    call {:si_unique_call 4667} {:cexpr "tmp___9"} boogie_si_record_i32($i96);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i96, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i96, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i96, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i96, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4691} ldv_stop();
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb116:
    assume $i100 == 1;
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    $i140 := $M.51;
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 4);
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb151:
    assume $i141 == 1;
    goto corral_source_split_14941;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    $p142 := $M.43;
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4688} $i143 := pch_udc_resume($p142);
    goto corral_source_split_14943;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    $M.57 := $i143;
    call {:si_unique_call 4689} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i143);
    goto corral_source_split_14944;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    $i144 := $M.57;
    goto corral_source_split_14945;

  corral_source_split_14945:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_14946;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb153:
    assume $i145 == 1;
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 4690} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_14949;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb114:
    assume $i99 == 1;
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    $i125 := $M.51;
    goto corral_source_split_14858;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 4);
    goto corral_source_split_14859;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i130 := $M.51;
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 3);
    goto corral_source_split_14920;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i135 := $M.51;
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 2);
    goto corral_source_split_14931;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb148:
    assume $i136 == 1;
    goto corral_source_split_14933;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    $p137 := $M.43;
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4685} pch_udc_remove($p137);
    goto corral_source_split_14935;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 4686} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    $i138 := $M.49;
    goto corral_source_split_14937;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i138, 1);
    goto corral_source_split_14938;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    $M.49 := $i139;
    call {:si_unique_call 4687} {:cexpr "ref_cnt"} boogie_si_record_i32($i139);
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb145:
    assume $i131 == 1;
    goto corral_source_split_14922;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    $p132 := $M.43;
    goto corral_source_split_14923;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4682} pch_udc_remove($p132);
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 4683} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    $i133 := $M.49;
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    $i134 := $sub.i32($i133, 1);
    goto corral_source_split_14927;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    $M.49 := $i134;
    call {:si_unique_call 4684} {:cexpr "ref_cnt"} boogie_si_record_i32($i134);
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume $i126 == 1;
    goto corral_source_split_14911;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    $p127 := $M.43;
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4679} pch_udc_remove($p127);
    goto corral_source_split_14913;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 4680} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14914;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    $i128 := $M.49;
    goto corral_source_split_14915;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    $i129 := $sub.i32($i128, 1);
    goto corral_source_split_14916;

  corral_source_split_14916:
    assume {:verifier.code 0} true;
    $M.49 := $i129;
    call {:si_unique_call 4681} {:cexpr "ref_cnt"} boogie_si_record_i32($i129);
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb112:
    assume $i98 == 1;
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    $i117 := $M.51;
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 2);
    goto corral_source_split_14855;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb136:
    assume $i118 == 1;
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    $p119 := $M.43;
    goto corral_source_split_14900;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14901;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.46, $p120);
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4676} $i122 := pch_udc_suspend($p119, $i121);
    goto corral_source_split_14903;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    $M.56 := $i122;
    call {:si_unique_call 4677} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i122);
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    $i123 := $M.56;
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb138:
    assume $i124 == 1;
    goto corral_source_split_14908;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    $M.51 := 4;
    call {:si_unique_call 4678} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_14909;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb110:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i96, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i101 == 1);
    goto corral_source_split_14865;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    $i111 := $M.51;
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 4);
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i114 := $M.51;
    goto corral_source_split_14891;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 2);
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb133:
    assume $i115 == 1;
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    $p116 := $M.43;
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4674} pch_udc_shutdown($p116);
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    $M.51 := 3;
    call {:si_unique_call 4675} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_14897;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume $i112 == 1;
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    $p113 := $M.43;
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4672} pch_udc_shutdown($p113);
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    $M.51 := 3;
    call {:si_unique_call 4673} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_14889;

  corral_source_split_14889:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb119:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i96, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb118;

  $bb121:
    assume $i102 == 1;
    goto corral_source_split_14869;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    $i103 := $M.51;
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1);
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb123:
    assume $i104 == 1;
    goto corral_source_split_14873;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    $p105 := $M.43;
    goto corral_source_split_14874;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4668} $i106 := pch_udc_probe($p105, $p7);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_14875;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    $M.55 := $i106;
    call {:si_unique_call 4669} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i106);
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    $i107 := $M.55;
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb125:
    assume $i108 == 1;
    goto corral_source_split_14880;

  corral_source_split_14880:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 4670} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    $i109 := $M.49;
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, 1);
    goto corral_source_split_14883;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    $M.49 := $i110;
    call {:si_unique_call 4671} {:cexpr "ref_cnt"} boogie_si_record_i32($i110);
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    goto $bb127;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    $i77 := $M.50;
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb77:
    assume $i78 == 1;
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4648} $i79 := __VERIFIER_nondet_int();
    call {:si_unique_call 4649} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i79);
    call {:si_unique_call 4650} {:cexpr "tmp___8"} boogie_si_record_i32($i79);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i79, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4664} ldv_stop();
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb82:
    assume $i81 == 1;
    goto corral_source_split_14810;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    $i87 := $M.50;
    goto corral_source_split_14811;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb95:
    assume $i88 == 1;
    goto corral_source_split_14828;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4654} $i89 := pch_udc_driver_init();
    goto corral_source_split_14829;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    $M.54 := $i89;
    call {:si_unique_call 4655} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i89);
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    $i90 := $M.54;
    goto corral_source_split_14831;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 0);
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i92 := $M.54;
    goto corral_source_split_14843;

  corral_source_split_14843:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb100:
    assume $i93 == 1;
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 4663} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_14847;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4653} ldv_check_final_state();
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb97:
    assume $i91 == 1;
    goto corral_source_split_14834;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 4656} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_14835;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4657} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14836;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4658} ldv_initialize_usb_gadget_ops_5();
    goto corral_source_split_14837;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 4659} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14838;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4660} ldv_initialize_pci_driver_3();
    goto corral_source_split_14839;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4661} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4662} ldv_initialize_usb_ep_ops_4();
    goto corral_source_split_14841;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb80:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i79, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb84;

  $bb85:
    assume $i82 == 1;
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    $i83 := $M.50;
    goto corral_source_split_14815;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 3);
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb87:
    assume $i84 == 1;
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    $i85 := $M.49;
    goto corral_source_split_14819;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_14820;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb89;

  $bb90:
    assume $i86 == 1;
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4651} pch_udc_driver_exit();
    goto corral_source_split_14823;

  corral_source_split_14823:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 4652} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_14824;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    $i75 := $M.48;
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb74:
    assume $i76 == 1;
    goto corral_source_split_14805;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4647} choose_interrupt_1();
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb12:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    $i23 := $M.47;
    goto corral_source_split_14712;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4625} $i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 4626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i25);
    call {:si_unique_call 4627} {:cexpr "tmp___7"} boogie_si_record_i32($i25);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i25, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i25, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i25, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i25, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4646} ldv_stop();
    goto corral_source_split_14803;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb29:
    assume $i30 == 1;
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    $i71 := $M.47;
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_14727;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb67:
    assume $i72 == 1;
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    $p73 := $M.41;
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4644} vslice_dummy_var_89 := pch_udc_pcd_ep_enable($p73, $p5);
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4645} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14801;

  corral_source_split_14801:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb27:
    assume $i29 == 1;
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    $i68 := $M.47;
    goto corral_source_split_14722;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb64:
    assume $i69 == 1;
    goto corral_source_split_14793;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    $p70 := $M.41;
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4642} pch_udc_pcd_fifo_flush($p70);
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4643} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    $i64 := $M.47;
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb61:
    assume $i65 == 1;
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    $p66 := $M.41;
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4640} vslice_dummy_var_88 := pch_udc_pcd_set_halt($p66, $i3);
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4641} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14791;

  corral_source_split_14791:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb23:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i25, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i31 == 1);
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    $i60 := $M.47;
    goto corral_source_split_14734;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_14735;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb58:
    assume $i61 == 1;
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    $p62 := $M.41;
    goto corral_source_split_14783;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    $p63 := $M.42;
    goto corral_source_split_14784;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4638} pch_udc_free_request($p62, $p63);
    goto corral_source_split_14785;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4639} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb32:
    assume $i31 == 1;
    goto corral_source_split_14729;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    $i55 := $M.47;
    goto corral_source_split_14730;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 1);
    goto corral_source_split_14731;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb55:
    assume $i56 == 1;
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    $p57 := $M.41;
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    $p58 := $M.42;
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4636} vslice_dummy_var_87 := pch_udc_pcd_dequeue($p57, $p58);
    goto corral_source_split_14779;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4637} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb21:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i25, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i25, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i33 == 1);
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    $i51 := $M.47;
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb52:
    assume $i52 == 1;
    goto corral_source_split_14771;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    $p53 := $M.41;
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4634} vslice_dummy_var_86 := pch_udc_pcd_set_wedge($p53);
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4635} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14774;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb36:
    assume $i33 == 1;
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    $i46 := $M.47;
    goto corral_source_split_14738;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb49:
    assume $i47 == 1;
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    $p48 := $M.41;
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.45, $p1);
    goto corral_source_split_14767;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4632} vslice_dummy_var_85 := pch_udc_alloc_request($p48, $i49);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4633} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i25, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i34 == 1);
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    $i40 := $M.47;
    goto corral_source_split_14746;

  corral_source_split_14746:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_14747;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb46:
    assume $i41 == 1;
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    $p42 := $M.41;
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    $p43 := $M.42;
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.44, $p0);
    goto corral_source_split_14761;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4630} vslice_dummy_var_84 := pch_udc_pcd_queue($p42, $p43, $i44);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4631} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14763;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb31;

  $bb40:
    assume $i35 == 1;
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    $i36 := $M.47;
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i37 == 1;
    goto corral_source_split_14753;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    $p38 := $M.41;
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4628} vslice_dummy_var_83 := pch_udc_pcd_ep_disable($p38);
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4629} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb73_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4622} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 4623} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 4624} {:cexpr "tmp___6"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 388660);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_driver_exit: ref;

axiom pch_udc_driver_exit == $sub.ref(0, 389692);

procedure pch_udc_driver_exit();
  free requires assertsPassed;



implementation pch_udc_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4714} pci_unregister_driver(pch_udc_driver);
    goto corral_source_split_15039;

  corral_source_split_15039:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_driver_init: ref;

axiom pch_udc_driver_init == $sub.ref(0, 390724);

procedure pch_udc_driver_init() returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4715} $i0 := __pci_register_driver(pch_udc_driver, __this_module, .str);
    call {:si_unique_call 4716} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_15042;

  corral_source_split_15042:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 391756);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15044;

  corral_source_split_15044:
    assume {:verifier.code 0} true;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 392788);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15046;

  corral_source_split_15046:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4717} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 4718} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_15047;

  corral_source_split_15047:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 393820);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15049;

  corral_source_split_15049:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 394852);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4719} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_15051;

  corral_source_split_15051:
    assume {:verifier.code 1} true;
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_15053;

  corral_source_split_15053:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 395884);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 396916);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 397948);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15055;

  corral_source_split_15055:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 398980);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 400012);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 401044);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 402076);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 403108);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 404140);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 405172);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 406204);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 407236);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 408268);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4720} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 4721} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 4722} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15059;

  corral_source_split_15059:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_15060;

  corral_source_split_15060:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15064;

  corral_source_split_15064:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15065;

  corral_source_split_15065:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4723} __VERIFIER_assume($i4);
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 409300);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 410332);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 411364);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 412396);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15068;

  corral_source_split_15068:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4724} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 4725} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 4726} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4727} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 4728} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 4729} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4730} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 4731} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 4732} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_15071;

  corral_source_split_15071:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15077;

  corral_source_split_15077:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15078;

  corral_source_split_15078:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4733} __VERIFIER_assume($i7);
    goto corral_source_split_15079;

  corral_source_split_15079:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_15080;

  corral_source_split_15080:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15086;

  corral_source_split_15086:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15087;

  corral_source_split_15087:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4734} __VERIFIER_assume($i11);
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_15075;

  corral_source_split_15075:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15082;

  corral_source_split_15082:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 413428);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 414460);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 415492);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 416524);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 417556);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 418588);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4735} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 4736} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 4737} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15091;

  corral_source_split_15091:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4738} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 4739} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 4740} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4741} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 4742} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 4743} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_15094;

  corral_source_split_15094:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15100;

  corral_source_split_15100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4744} __VERIFIER_assume($i7);
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_15102;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15108;

  corral_source_split_15108:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4745} __VERIFIER_assume($i11);
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15106;

  corral_source_split_15106:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15096;

  corral_source_split_15096:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15104;

  corral_source_split_15104:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 419620);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 420652);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 421684);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 422716);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 423748);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 424780);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 425812);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 426844);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 427876);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4746} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4747} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15114;

  corral_source_split_15114:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 4748} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15117;

  corral_source_split_15117:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_15125;

  corral_source_split_15125:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_15120;

  corral_source_split_15120:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4749} __VERIFIER_assume($i10);
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 428908);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4750} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 4751} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 4752} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15131;

  corral_source_split_15131:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 429940);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15133;

  corral_source_split_15133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4753} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 4754} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 4755} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15134;

  corral_source_split_15134:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 430972);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4756} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 4757} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_15137;

  corral_source_split_15137:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 432004);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 433036);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 4758} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 4759} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 434068);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 435100);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15139;

  corral_source_split_15139:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 436132);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4760} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 4761} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4762} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 4763} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15143;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_15144;

  corral_source_split_15144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_15149;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4764} $p6 := malloc($i5);
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 4765} cmdloc_dummy_var_30 := $memset.i8(cmdloc_dummy_var_29, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15153;

  corral_source_split_15153:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15146;

  corral_source_split_15146:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 437164);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 438196);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.9, $M.3, $M.28, $M.7, $M.5, $M.37, $M.34, $M.31, $M.26, $M.27, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.38, $M.39, $M.41, $M.42, $M.4, $M.6, $M.8, $M.10, $M.43, $M.19, $M.20, $M.21, $M.22, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.18, $M.0, $M.11, $M.65, $M.23;



implementation __SMACK_static_init()
{

  $bb0:
    $M.9 := 0;
    call {:si_unique_call 4766} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 4767} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 4768} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 4769} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 4770} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.5 := 0;
    call {:si_unique_call 4771} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 4772} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 4773} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 4774} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    $M.26 := $0.ref;
    $M.27 := $0.ref;
    $M.29 := 0;
    call {:si_unique_call 4775} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    $M.30 := $0.ref;
    $M.32 := 0;
    call {:si_unique_call 4776} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    $M.33 := $0.ref;
    $M.35 := 0;
    call {:si_unique_call 4777} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.38 := 0;
    call {:si_unique_call 4778} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.39 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.4 := 0;
    call {:si_unique_call 4779} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.6 := 0;
    call {:si_unique_call 4780} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 4781} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 4782} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.43 := $0.ref;
    $M.19 := $0.ref;
    $M.20 := $0.ref;
    $M.21 := $0.ref;
    $M.22 := $0.ref;
    $M.47 := 0;
    call {:si_unique_call 4783} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 4784} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 4785} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 4786} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 4787} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 4788} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 4789} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 4790} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 4791} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 4792} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 4793} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 4794} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, pch_udc_ops, pch_udc_pcd_get_frame);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), pch_udc_pcd_wakeup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), pch_udc_pcd_selfpowered);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), pch_udc_pcd_vbus_session);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), pch_udc_pcd_vbus_draw);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), pch_udc_pcd_pullup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), pch_udc_start);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), pch_udc_stop);
    $M.11 := $sub.i32(0, 1);
    call {:si_unique_call 4795} {:cexpr "vbus_gpio_port"} boogie_si_record_i32($sub.i32(0, 1));
    $M.0 := $store.ref($M.0, pch_udc_ep_ops, pch_udc_pcd_ep_enable);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), pch_udc_pcd_ep_disable);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), pch_udc_alloc_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), pch_udc_free_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), pch_udc_pcd_queue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), pch_udc_pcd_dequeue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), pch_udc_pcd_set_halt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), pch_udc_pcd_set_wedge);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), pch_udc_pcd_fifo_flush);
    $M.0 := $store.i32($M.0, pch_udc_pcidev_id, 32902);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(4, 1)), 34824);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(16, 1)), 787454);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4315);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(4, 1)), 32797);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(16, 1)), 787454);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(0, 1)), 4315);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(4, 1)), 34824);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(16, 1)), 787454);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.ref($M.65, pch_udc_driver, $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), pch_udc_pcidev_id);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), pch_udc_probe);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), pch_udc_remove);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), pch_udc_suspend);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), pch_udc_resume);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), pch_udc_shutdown);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.65 := $store.i32($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i32($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.65 := $store.i32($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.65 := $store.i32($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, udc_stall_spinlock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.27);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, ep0_string, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.23 := 0;
    call {:si_unique_call 4796} {:cexpr "speed_fs"} boogie_si_record_i8(0);
    $M.0 := $store.i8($M.0, .str.27, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(17, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(2, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.75, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.38, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.39, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 6)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 6)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.42, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.43, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 6)), $mul.ref(2, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.44, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 7)), $mul.ref(2, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 6)), $mul.ref(2, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(2, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 6)), $mul.ref(2, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(2, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 6)), $mul.ref(2, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(2, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 6)), $mul.ref(2, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(2, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 6)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 6)), $mul.ref(2, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 7)), $mul.ref(2, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 7)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.61, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.62, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 8)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 7)), $mul.ref(3, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(3, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.65, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 7)), $mul.ref(3, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.66, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(3, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(2, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(15, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    call {:si_unique_call 4797} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 439228);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 440260);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 441292);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 442324);

procedure devirtbounce.3(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.3, $M.5, $M.7, $M.9, $CurrAddr;



implementation devirtbounce.3(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(pch_udc_pcd_fifo_flush, $p0);
    assume {:branchcond $i12} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(pch_vbus_gpio_work_rise, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(pch_vbus_gpio_work_fall, $p0);
    assume {:branchcond $i10} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(gadget_release, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(pch_udc_shutdown, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(pch_udc_remove, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4798} pch_udc_remove($p1);
    return;

  $bb3:
    assume $i8 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4799} pch_udc_shutdown($p2);
    return;

  $bb4:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4800} gadget_release($p3);
    return;

  $bb5:
    assume $i10 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4801} pch_vbus_gpio_work_fall($p4);
    return;

  $bb6:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4802} pch_vbus_gpio_work_rise($p5);
    return;

  $bb7:
    assume $i12 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4803} pch_udc_pcd_fifo_flush($p6);
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 443356);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr, $M.24, $M.4, $M.19, $M.3, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(pch_udc_stop, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(pch_udc_start, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i17 == 1);
    $i16 := $eq.ref(pch_udc_pcd_dequeue, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(pch_udc_pcd_ep_enable, $p0);
    assume {:branchcond $i15} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i15 == 1);
    $i14 := $eq.ref(pch_udc_probe, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4804} $i3 := pch_udc_probe($p1, $p2);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    $r := $i3;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4805} $i6 := pch_udc_pcd_ep_enable($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4806} $i9 := pch_udc_pcd_dequeue($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i17 == 1;
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4807} $i11 := pch_udc_start(arg, $p10);
    $r := $i11;
    return;

  $bb6:
    assume $i18 == 1;
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4808} $i13 := pch_udc_stop(arg, $p12);
    $r := $i13;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 444388);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(pch_udc_free_request, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 4809} pch_udc_free_request(arg, arg1);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 445420);

procedure devirtbounce.6(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.9, $M.3, $M.28, $M.7, $M.5, $M.37, $M.34, $M.31, $M.26, $M.27, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.38, $M.39, $M.41, $M.42, $M.4, $M.6, $M.8, $M.10, $M.43, $M.19, $M.20, $M.21, $M.22, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.18, $M.0, $M.11, $M.65, $M.23, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 4810} __SMACK_static_init();
    call {:si_unique_call 4811} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.18, $M.0, $M.3, $M.54, $M.26, $M.27, $M.43, $M.41, $M.42, $M.55, $M.1, $M.56, $M.57, $M.28, $M.9, $M.7, $M.5, $M.37, $M.34, $M.31, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.38, $M.39, $M.4, $M.6, $M.8, $M.10, $M.19, $M.20, $M.21, $M.22, $M.11, $M.65, $M.23, $CurrAddr, $M.2, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.24;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation {:SIextraRecBound 3} pch_udc_isr_loop_$bb34(in_$p3: ref, in_$i5: i32, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i41: i32) returns (out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i41: i32)
{

  entry:
    out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i41 := in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i41;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_679;

  $bb39:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := out_$i45;
    goto $bb39_dummy;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$i46 := $sle.i32(out_$i45, 3);
    goto corral_source_split_690;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i41, 1);
    call {:si_unique_call 204} {:cexpr "i"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_689;

  $bb37:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} pch_udc_postsvc_epinters(in_$p3, out_$i41);
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} pch_udc_svc_data_in(in_$p3, out_$i41);
    goto corral_source_split_686;

  $bb36:
    assume out_$i44 == 1;
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, in_$i5);
    goto corral_source_split_682;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i42 := $shl.i32(1, out_$i41);
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i41 := pch_udc_isr_loop_$bb34(in_$p3, in_$i5, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i41);
    return;

  exit:
    return;
}



procedure pch_udc_isr_loop_$bb34(in_$p3: ref, in_$i5: i32, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i41: i32) returns (out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i41: i32);
  modifies $M.0, $M.18;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation pch_udc_start_rxrequest_loop_$bb4(in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27 := in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$p14 := out_$p18;
    goto $bb8_dummy;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 134217728);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p23, out_$i22);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i21, 1073741823);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} out_$p18 := phys_to_virt(out_$i17);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i16);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_2047;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2046;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27 := pch_udc_start_rxrequest_loop_$bb4(out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure pch_udc_start_rxrequest_loop_$bb4(in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1);
  modifies $M.0;



implementation pch_udc_complete_receiver_loop_$bb11(in_$p9: ref, in_$p28: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$p62: ref, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i1) returns (out_$p28: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$p62: ref, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i1)
{

  entry:
    out_$p28, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70 := in_$p28, in_$p41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p53, in_$p54, in_$i55, in_$i56, in_$i57, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb24:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$p28 := out_$p65;
    goto $bb24_dummy;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_2174;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 805306368);
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p67);
    goto corral_source_split_2172;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p66, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_2170;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} out_$p65 := phys_to_virt(out_$i64);
    goto corral_source_split_2169;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i32.i64(out_$i63);
    call {:si_unique_call 472} {:cexpr "addr"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_2168;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_2167;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2166;

  $bb22:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i64(out_$i55, out_$i56);
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_2155;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2154;

  $bb15:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    out_$p49 := out_$p28;
    assume true;
    goto $bb17;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i46, 134217728);
    goto corral_source_split_2144;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2142;

  $bb14:
    assume out_$i44 == 1;
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, $sub.i32(0, 2147483648));
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, $sub.i32(0, 1073741824));
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_2137;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2136;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p28, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70 := pch_udc_complete_receiver_loop_$bb11(in_$p9, out_$p28, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70);
    return;

  exit:
    return;
}



procedure pch_udc_complete_receiver_loop_$bb11(in_$p9: ref, in_$p28: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$p62: ref, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i1) returns (out_$p28: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$p62: ref, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i1);



implementation pch_udc_ep_clear_nak_loop_$bb25(in_$p0: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i33: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i37: i32) returns (out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i33: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i37: i32)
{

  entry:
    out_$i34, out_$i35, out_$i36, out_$i33, out_$i38, out_$i39, out_$i40, out_$i37 := in_$i34, in_$i35, in_$i36, in_$i33, in_$i38, in_$i39, in_$i40, in_$i37;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2495;

  $bb27:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i38;
    goto $bb27_dummy;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i38;
    assume true;
    goto $bb27;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i34, 64);
    goto corral_source_split_2502;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} out_$i34 := pch_udc_read_ep_control(in_$p0);
    call {:si_unique_call 540} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_2501;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __const_udelay(21475);
    goto corral_source_split_2500;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} pch_udc_ep_bit_set(in_$p0, 0, 256);
    goto corral_source_split_2499;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume out_$i39 == 1;
    goto corral_source_split_2507;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i38;
    assume true;
    goto $bb29;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_2497;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i32(out_$i33, 1);
    call {:si_unique_call 536} {:cexpr "loopcnt"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2496;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$i36, out_$i33, out_$i38, out_$i39, out_$i40, out_$i37 := pch_udc_ep_clear_nak_loop_$bb25(in_$p0, out_$i34, out_$i35, out_$i36, out_$i33, out_$i38, out_$i39, out_$i40, out_$i37);
    return;

  exit:
    return;
}



procedure pch_udc_ep_clear_nak_loop_$bb25(in_$p0: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i33: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i37: i32) returns (out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i33: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i37: i32);



implementation pch_udc_ep_clear_nak_loop_$bb10(in_$p0: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i15: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i19: i32) returns (out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i15: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i19: i32)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$i15, out_$i20, out_$i21, out_$i22, out_$i19 := in_$i16, in_$i17, in_$i18, in_$i15, in_$i20, in_$i21, in_$i22, in_$i19;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2465;

  $bb12:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i20;
    goto $bb12_dummy;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i20;
    assume true;
    goto $bb12;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_2472;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i32(out_$i16, 256);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} out_$i16 := pch_udc_read_ep_status(in_$p0);
    call {:si_unique_call 532} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_2470;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __const_udelay(21475);
    goto corral_source_split_2469;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume out_$i21 == 1;
    goto corral_source_split_2476;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    assume true;
    goto $bb14;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i15, 1);
    call {:si_unique_call 529} {:cexpr "loopcnt"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_2466;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$i15, out_$i20, out_$i21, out_$i22, out_$i19 := pch_udc_ep_clear_nak_loop_$bb10(in_$p0, out_$i16, out_$i17, out_$i18, out_$i15, out_$i20, out_$i21, out_$i22, out_$i19);
    return;

  exit:
    return;
}



procedure pch_udc_ep_clear_nak_loop_$bb10(in_$p0: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i15: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i19: i32) returns (out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i15: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i19: i32);



implementation pch_udc_start_next_txrequest_loop_$bb17(in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1) returns (out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1)
{

  entry:
    out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48 := in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$p35 := out_$p39;
    goto $bb21_dummy;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i46, 134217728);
    goto corral_source_split_2732;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2730;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p44, out_$i43);
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2728;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, 1073741823);
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} out_$p39 := phys_to_virt(out_$i38);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i37);
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_2721;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2720;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48 := pch_udc_start_next_txrequest_loop_$bb17(out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48);
    return;

  exit:
    return;
}



procedure pch_udc_start_next_txrequest_loop_$bb17(in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1) returns (out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1);
  modifies $M.0;



implementation pch_udc_wait_ep_stall_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := in_$i6, in_$i7, in_$i8, in_$i5, in_$i10, in_$i11, in_$i12, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2742;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb6_dummy;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i10;
    assume true;
    goto $bb6;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$i7 := $and.i32(out_$i6, 1);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} out_$i6 := pch_udc_read_ep_control(in_$p0);
    call {:si_unique_call 575} {:cexpr "tmp"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_2747;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} __const_udelay(21475);
    goto corral_source_split_2746;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_2753;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i10;
    assume true;
    goto $bb8;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$i10 := $sub.i32(out_$i5, 1);
    call {:si_unique_call 572} {:cexpr "count"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2743;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := pch_udc_wait_ep_stall_loop_$bb4(in_$p0, out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9);
    return;

  exit:
    return;
}



procedure pch_udc_wait_ep_stall_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32);



implementation pch_udc_svc_enum_interrupt_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb13_dummy:
    call {:si_unique_call 1} pch_udc_svc_enum_interrupt_loop_$bb13();
    return;

  exit:
    return;
}



procedure pch_udc_svc_enum_interrupt_loop_$bb13();



implementation pch_udc_csr_busy_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := in_$i6, in_$i7, in_$i8, in_$i5, in_$i10, in_$i11, in_$i12, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3605;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb6_dummy;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i10;
    assume true;
    goto $bb6;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$i7 := $and.i32(out_$i6, 1);
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_$i6 := pch_udc_readl(in_$p0, 1264);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_3610;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} cpu_relax();
    goto corral_source_split_3609;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_3616;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i10;
    assume true;
    goto $bb8;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i10 := $sub.i32(out_$i5, 1);
    call {:si_unique_call 831} {:cexpr "count"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_3606;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := pch_udc_csr_busy_loop_$bb4(in_$p0, out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9);
    return;

  exit:
    return;
}



procedure pch_udc_csr_busy_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32);



implementation empty_req_queue_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14 := in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb6_dummy;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 0);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} out_$i13 := list_empty(in_$p5);
    call {:si_unique_call 875} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_3767;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} complete_req(in_$p0, out_$p12, $sub.i32(0, 108));
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p11, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_3763;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_3762;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14 := empty_req_queue_loop_$bb4(in_$p0, in_$p5, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14);
    return;

  exit:
    return;
}



procedure empty_req_queue_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1);
  modifies $M.0, $M.18;



implementation pch_udc_pcd_dequeue_loop_$bb16(in_$p1: ref, in_$i24: i64, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p26: ref) returns (out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p26: ref)
{

  entry:
    out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p26 := in_$p27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p26;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_13752;

  $bb25:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p26 := out_$p40;
    goto $bb25_dummy;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, in_$i24);
    goto corral_source_split_13779;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_13778;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p39, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_13777;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_13776;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_13775;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 152)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_13774;

  $bb19:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p26;
    assume true;
    goto $bb19;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i64(out_$i28, out_$i29);
    goto corral_source_split_13757;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_13756;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_13755;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_13754;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p26 := pch_udc_pcd_dequeue_loop_$bb16(in_$p1, in_$i24, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p26);
    return;

  exit:
    return;
}



procedure pch_udc_pcd_dequeue_loop_$bb16(in_$p1: ref, in_$i24: i64, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p26: ref) returns (out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p26: ref);



implementation pch_udc_create_dma_chain_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i3: i32, in_$p4: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i32, in_$i33: i1, in_$i34: i64, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$p57: ref, in_$i58: i64, in_$i59: i32, in_$p60: ref, in_$i61: i64, in_$i62: i32) returns (out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i32, out_$i33: i1, out_$i34: i64, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$p57: ref, out_$i58: i64, out_$i59: i32, out_$p60: ref, out_$i61: i64, out_$i62: i32)
{

  entry:
    out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62 := in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$p39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4453} {:cexpr "pch_udc_create_dma_chain:arg:_min1"} boogie_si_record_i64(in_$i2);
    goto corral_source_split_14095;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    out_$p29, out_$i30, out_$i31, out_$i32 := out_$p45, out_$i61, out_$i50, out_$i62;
    goto corral_source_split_14153_dummy;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i32, 1);
    call {:si_unique_call 4457} {:cexpr "len"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_14153;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i64(out_$i30, in_$i2);
    call {:si_unique_call 4456} {:cexpr "bytes"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_14152;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p60, out_$i59);
    goto corral_source_split_14151;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p29, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14150;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i64.i32(out_$i58);
    goto corral_source_split_14149;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i64($M.25, in_$p4);
    goto corral_source_split_14148;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p57, out_$i56);
    goto corral_source_split_14147;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p46, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14146;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i54, out_$i55);
    goto corral_source_split_14145;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i64.i32(out_$i50);
    goto corral_source_split_14144;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_14143;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14142;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_14141;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14140;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i64(out_$i31, in_$i2);
    call {:si_unique_call 4455} {:cexpr "i"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_14139;

  $bb16:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i32;
    assume true;
    goto $bb16;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i64(out_$i47, 0);
    goto corral_source_split_14133;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_14132;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_14131;

  SeqInstr_69:
    goto corral_source_split_14130;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4454} out_$p45 := ldv_dma_pool_alloc_22(out_$p44, in_$i3, in_$p4);
    goto SeqInstr_68;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_14129;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_14128;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_14127;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14126;

  $bb12:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    out_$p39, out_$i40 := out_$p29, out_$i32;
    assume true;
    goto $bb12;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    out_$i38 := $ule.i64(out_$i30, in_$i2);
    goto corral_source_split_14107;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p37, out_$i36);
    goto corral_source_split_14106;

  corral_source_split_14104:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p29, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14105;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    out_$i36 := $or.i32(out_$i35, $sub.i32(0, 1073741824));
    goto corral_source_split_14104;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i64.i32(out_$i34);
    goto corral_source_split_14103;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_14102;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i30;
    goto $bb10;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    out_$i34 := in_$i2;
    goto $bb10;

  $bb8:
    assume out_$i33 == 1;
    goto corral_source_split_14098;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    out_$i33 := $ult.i64(in_$i2, out_$i30);
    goto corral_source_split_14096;

  $bb9:
    assume !(out_$i33 == 1);
    goto corral_source_split_14100;

  corral_source_split_14153_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62 := pch_udc_create_dma_chain_loop_$bb7(in_$p0, in_$p1, in_$i2, in_$i3, in_$p4, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62);
    return;

  exit:
    return;
}



procedure pch_udc_create_dma_chain_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i3: i32, in_$p4: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i32, in_$i33: i1, in_$i34: i64, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$p57: ref, in_$i58: i64, in_$i59: i32, in_$p60: ref, in_$i61: i64, in_$i62: i32) returns (out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i32, out_$i33: i1, out_$i34: i64, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$p57: ref, out_$i58: i64, out_$i59: i32, out_$p60: ref, out_$i61: i64, out_$i62: i32);
  modifies $M.0, assertsPassed;



implementation pch_udc_free_dma_chain_loop_$bb4(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i11: i64, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i11: i64, out_$i12: i32)
{

  entry:
    out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i11, out_$i12 := in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i11, in_$i12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14181;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$i12 := out_$i17, out_$i22;
    goto $bb6_dummy;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    out_$i23 := $ugt.i32(out_$i22, 1);
    goto corral_source_split_14195;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    out_$i22 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 4464} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_14194;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p21, 0);
    goto corral_source_split_14193;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14192;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4463} dma_pool_free(out_$p19, out_$p20, out_$i11);
    goto corral_source_split_14191;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_14190;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_14189;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6520)), $mul.ref(6280, 1));
    goto corral_source_split_14188;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i16);
    call {:si_unique_call 4462} {:cexpr "addr2"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_14187;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_14186;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14185;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_14184;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4461} out_$p13 := phys_to_virt(out_$i11);
    goto corral_source_split_14183;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i11, out_$i12 := pch_udc_free_dma_chain_loop_$bb4(in_$p0, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i11, out_$i12);
    return;

  exit:
    return;
}



procedure pch_udc_free_dma_chain_loop_$bb4(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i11: i64, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i11: i64, out_$i12: i32);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p5: ref, in_$p7: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: ref, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32) returns (out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: ref, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i46, out_$i47, out_$p48, out_$i49, out_$i51, out_$i52, out_$p53, out_$i55, out_$i56, out_$p57, out_$p58, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i164, out_$i165, out_$p166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i181, out_$i182, out_$p183, out_$i185, out_$i186, out_$p187, out_$p188, out_$i190, out_$i191, out_$p192, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i46, in_$i47, in_$p48, in_$i49, in_$i51, in_$i52, in_$p53, in_$i55, in_$i56, in_$p57, in_$p58, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$p73, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$i130, in_$i131, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$p142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$i164, in_$i165, in_$p166, in_$p167, in_$i169, in_$i170, in_$p171, in_$i173, in_$i174, in_$p175, in_$i177, in_$i178, in_$p179, in_$i181, in_$i182, in_$p183, in_$i185, in_$i186, in_$p187, in_$p188, in_$i190, in_$i191, in_$p192, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4622} out_$i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 4623} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i15);
    call {:si_unique_call 4624} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i15);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb73_dummy;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb19:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4629} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14756;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4628} out_vslice_dummy_var_83 := pch_udc_pcd_ep_disable(out_$p38);
    goto corral_source_split_14755;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    out_$p38 := $M.41;
    goto corral_source_split_14754;

  $bb42:
    assume out_$i37 == 1;
    goto corral_source_split_14753;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 1);
    goto corral_source_split_14751;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    out_$i36 := $M.47;
    goto corral_source_split_14750;

  $bb40:
    assume out_$i35 == 1;
    goto corral_source_split_14749;

  $bb38:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb34:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i25, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb21:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i25, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i25, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_14715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4625} out_$i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 4626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i25);
    call {:si_unique_call 4627} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i25);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i24 == 1;
    goto corral_source_split_14715;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_14713;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    out_$i23 := $M.47;
    goto corral_source_split_14712;

  $bb16:
    assume out_$i22 == 1;
    goto corral_source_split_14711;

  $bb12:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb3:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb47:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4631} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14763;

  SeqInstr_93:
    goto corral_source_split_14762;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4630} out_vslice_dummy_var_84 := pch_udc_pcd_queue(out_$p42, out_$p43, out_$i44);
    goto SeqInstr_92;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.44, in_$p0);
    goto corral_source_split_14761;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    out_$p43 := $M.42;
    goto corral_source_split_14760;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    out_$p42 := $M.41;
    goto corral_source_split_14759;

  $bb46:
    assume out_$i41 == 1;
    goto corral_source_split_14758;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_14746:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_14747;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    out_$i40 := $M.47;
    goto corral_source_split_14746;

  $bb39:
    assume !(out_$i34 == 1);
    goto corral_source_split_14745;

  $bb50:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4633} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14769;

  SeqInstr_96:
    goto corral_source_split_14768;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4632} out_vslice_dummy_var_85 := pch_udc_alloc_request(out_$p48, out_$i49);
    goto SeqInstr_95;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.45, in_$p1);
    goto corral_source_split_14767;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    out_$p48 := $M.41;
    goto corral_source_split_14766;

  $bb49:
    assume out_$i47 == 1;
    goto corral_source_split_14765;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 1);
    goto corral_source_split_14739;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    out_$i46 := $M.47;
    goto corral_source_split_14738;

  $bb36:
    assume out_$i33 == 1;
    goto corral_source_split_14737;

  $bb35:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i25, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb53:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4635} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14774;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4634} out_vslice_dummy_var_86 := pch_udc_pcd_set_wedge(out_$p53);
    goto corral_source_split_14773;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    out_$p53 := $M.41;
    goto corral_source_split_14772;

  $bb52:
    assume out_$i52 == 1;
    goto corral_source_split_14771;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 1);
    goto corral_source_split_14743;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    out_$i51 := $M.47;
    goto corral_source_split_14742;

  $bb37:
    assume !(out_$i33 == 1);
    goto corral_source_split_14741;

  $bb56:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4637} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14780;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4636} out_vslice_dummy_var_87 := pch_udc_pcd_dequeue(out_$p57, out_$p58);
    goto corral_source_split_14779;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    out_$p58 := $M.42;
    goto corral_source_split_14778;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    out_$p57 := $M.41;
    goto corral_source_split_14777;

  $bb55:
    assume out_$i56 == 1;
    goto corral_source_split_14776;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 1);
    goto corral_source_split_14731;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    out_$i55 := $M.47;
    goto corral_source_split_14730;

  $bb32:
    assume out_$i31 == 1;
    goto corral_source_split_14729;

  $bb23:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i25, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb22:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i25, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb59:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4639} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14786;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4638} pch_udc_free_request(out_$p62, out_$p63);
    goto corral_source_split_14785;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    out_$p63 := $M.42;
    goto corral_source_split_14784;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    out_$p62 := $M.41;
    goto corral_source_split_14783;

  $bb58:
    assume out_$i61 == 1;
    goto corral_source_split_14782;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 1);
    goto corral_source_split_14735;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    out_$i60 := $M.47;
    goto corral_source_split_14734;

  $bb33:
    assume !(out_$i31 == 1);
    goto corral_source_split_14733;

  $bb62:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_14791:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4641} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14791;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4640} out_vslice_dummy_var_88 := pch_udc_pcd_set_halt(out_$p66, in_$i3);
    goto corral_source_split_14790;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    out_$p66 := $M.41;
    goto corral_source_split_14789;

  $bb61:
    assume out_$i65 == 1;
    goto corral_source_split_14788;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 1);
    goto corral_source_split_14719;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    out_$i64 := $M.47;
    goto corral_source_split_14718;

  $bb25:
    assume out_$i28 == 1;
    goto corral_source_split_14717;

  $bb24:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i25, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb65:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4643} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14796;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4642} pch_udc_pcd_fifo_flush(out_$p70);
    goto corral_source_split_14795;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    out_$p70 := $M.41;
    goto corral_source_split_14794;

  $bb64:
    assume out_$i69 == 1;
    goto corral_source_split_14793;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 1);
    goto corral_source_split_14723;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    out_$i68 := $M.47;
    goto corral_source_split_14722;

  $bb27:
    assume out_$i29 == 1;
    goto corral_source_split_14721;

  $bb26:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i25, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb68:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_14801:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4645} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14801;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4644} out_vslice_dummy_var_89 := pch_udc_pcd_ep_enable(out_$p73, in_$p5);
    goto corral_source_split_14800;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    out_$p73 := $M.41;
    goto corral_source_split_14799;

  $bb67:
    assume out_$i72 == 1;
    goto corral_source_split_14798;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 1);
    goto corral_source_split_14727;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    out_$i71 := $M.47;
    goto corral_source_split_14726;

  $bb29:
    assume out_$i30 == 1;
    goto corral_source_split_14725;

  $bb28:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i25, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4646} ldv_stop();
    goto corral_source_split_14803;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb31;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb31;

  $bb75:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4647} choose_interrupt_1();
    goto corral_source_split_14806;

  $bb74:
    assume out_$i76 == 1;
    goto corral_source_split_14805;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_14705;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    out_$i75 := $M.48;
    goto corral_source_split_14704;

  $bb14:
    assume out_$i21 == 1;
    goto corral_source_split_14703;

  $bb13:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb78:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb89;

  $bb91:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb89;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 0);
    goto corral_source_split_14820;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    out_$i85 := $M.49;
    goto corral_source_split_14819;

  $bb87:
    assume out_$i84 == 1;
    goto corral_source_split_14818;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 3);
    goto corral_source_split_14816;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    out_$i83 := $M.50;
    goto corral_source_split_14815;

  $bb85:
    assume out_$i82 == 1;
    goto corral_source_split_14814;

  $bb80:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i79, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i79, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_14808:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4648} out_$i79 := __VERIFIER_nondet_int();
    call {:si_unique_call 4649} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i79);
    call {:si_unique_call 4650} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i79);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume out_$i78 == 1;
    goto corral_source_split_14808;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 0);
    goto corral_source_split_14709;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    out_$i77 := $M.50;
    goto corral_source_split_14708;

  $bb15:
    assume !(out_$i21 == 1);
    goto corral_source_split_14707;

  $bb96:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb101:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101;

  corral_source_split_14843:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_14844;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i92 := $M.54;
    goto corral_source_split_14843;

  $bb98:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4662} ldv_initialize_usb_ep_ops_4();
    goto corral_source_split_14841;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 4661} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14840;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4660} ldv_initialize_pci_driver_3();
    goto corral_source_split_14839;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 4659} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14838;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4658} ldv_initialize_usb_gadget_ops_5();
    goto corral_source_split_14837;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4657} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14836;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 4656} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_14835;

  $bb97:
    assume out_$i91 == 1;
    goto corral_source_split_14834;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 0);
    goto corral_source_split_14832;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    out_$i90 := $M.54;
    goto corral_source_split_14831;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    $M.54 := out_$i89;
    call {:si_unique_call 4655} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_14830;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4654} out_$i89 := pch_udc_driver_init();
    goto corral_source_split_14829;

  $bb95:
    assume out_$i88 == 1;
    goto corral_source_split_14828;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 1);
    goto corral_source_split_14812;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    out_$i87 := $M.50;
    goto corral_source_split_14811;

  $bb82:
    assume out_$i81 == 1;
    goto corral_source_split_14810;

  $bb81:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i79, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4664} ldv_stop();
    goto corral_source_split_14849;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb84;

  $bb86:
    assume {:verifier.code 0} true;
    assume !(out_$i82 == 1);
    goto $bb84;

  $bb108:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb126:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    $M.49 := out_$i110;
    call {:si_unique_call 4671} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_14884;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i32(out_$i109, 1);
    goto corral_source_split_14883;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    out_$i109 := $M.49;
    goto corral_source_split_14882;

  corral_source_split_14880:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 4670} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_14881;

  $bb125:
    assume out_$i108 == 1;
    goto corral_source_split_14880;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 0);
    goto corral_source_split_14878;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    out_$i107 := $M.55;
    goto corral_source_split_14877;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    $M.55 := out_$i106;
    call {:si_unique_call 4669} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_14876;

  SeqInstr_99:
    goto corral_source_split_14875;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4668} out_$i106 := pch_udc_probe(out_$p105, in_$p7);
    goto SeqInstr_98;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    out_$p105 := $M.43;
    goto corral_source_split_14874;

  $bb123:
    assume out_$i104 == 1;
    goto corral_source_split_14873;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 1);
    goto corral_source_split_14871;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    out_$i103 := $M.51;
    goto corral_source_split_14870;

  $bb121:
    assume out_$i102 == 1;
    goto corral_source_split_14869;

  $bb119:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i96, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb110:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i96, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i96, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_14851:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4665} out_$i96 := __VERIFIER_nondet_int();
    call {:si_unique_call 4666} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i96);
    call {:si_unique_call 4667} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i96);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb107:
    assume out_$i95 == 1;
    goto corral_source_split_14851;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i94, 0);
    goto corral_source_split_14693;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    out_$i94 := $M.51;
    goto corral_source_split_14692;

  $bb5:
    assume out_$i17 == 1;
    goto corral_source_split_14691;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb134:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    $M.51 := 3;
    call {:si_unique_call 4675} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_14897;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4674} pch_udc_shutdown(out_$p116);
    goto corral_source_split_14896;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    out_$p116 := $M.43;
    goto corral_source_split_14895;

  $bb133:
    assume out_$i115 == 1;
    goto corral_source_split_14894;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 2);
    goto corral_source_split_14892;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i114 := $M.51;
    goto corral_source_split_14891;

  $bb131:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_14889:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    $M.51 := 3;
    call {:si_unique_call 4673} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_14889;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4672} pch_udc_shutdown(out_$p113);
    goto corral_source_split_14888;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    out_$p113 := $M.43;
    goto corral_source_split_14887;

  $bb130:
    assume out_$i112 == 1;
    goto corral_source_split_14886;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i111, 4);
    goto corral_source_split_14867;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    out_$i111 := $M.51;
    goto corral_source_split_14866;

  $bb120:
    assume !(out_$i101 == 1);
    goto corral_source_split_14865;

  $bb137:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb139:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    $M.51 := 4;
    call {:si_unique_call 4678} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_14909;

  $bb138:
    assume out_$i124 == 1;
    goto corral_source_split_14908;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 0);
    goto corral_source_split_14906;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    out_$i123 := $M.56;
    goto corral_source_split_14905;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    $M.56 := out_$i122;
    call {:si_unique_call 4677} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_14904;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4676} out_$i122 := pch_udc_suspend(out_$p119, out_$i121);
    goto corral_source_split_14903;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.46, out_$p120);
    goto corral_source_split_14902;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14901;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    out_$p119 := $M.43;
    goto corral_source_split_14900;

  $bb136:
    assume out_$i118 == 1;
    goto corral_source_split_14899;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 2);
    goto corral_source_split_14855;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    out_$i117 := $M.51;
    goto corral_source_split_14854;

  $bb112:
    assume out_$i98 == 1;
    goto corral_source_split_14853;

  $bb111:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i96, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb149:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    $M.49 := out_$i139;
    call {:si_unique_call 4687} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i139);
    goto corral_source_split_14939;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    out_$i139 := $sub.i32(out_$i138, 1);
    goto corral_source_split_14938;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    out_$i138 := $M.49;
    goto corral_source_split_14937;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 4686} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14936;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4685} pch_udc_remove(out_$p137);
    goto corral_source_split_14935;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    out_$p137 := $M.43;
    goto corral_source_split_14934;

  $bb148:
    assume out_$i136 == 1;
    goto corral_source_split_14933;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 2);
    goto corral_source_split_14931;

  $bb147:
    assume {:verifier.code 0} true;
    out_$i135 := $M.51;
    goto corral_source_split_14930;

  $bb146:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    $M.49 := out_$i134;
    call {:si_unique_call 4684} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_14928;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    out_$i134 := $sub.i32(out_$i133, 1);
    goto corral_source_split_14927;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    out_$i133 := $M.49;
    goto corral_source_split_14926;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 4683} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14925;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4682} pch_udc_remove(out_$p132);
    goto corral_source_split_14924;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    out_$p132 := $M.43;
    goto corral_source_split_14923;

  $bb145:
    assume out_$i131 == 1;
    goto corral_source_split_14922;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 3);
    goto corral_source_split_14920;

  $bb144:
    assume {:verifier.code 0} true;
    out_$i130 := $M.51;
    goto corral_source_split_14919;

  $bb143:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_14916:
    assume {:verifier.code 0} true;
    $M.49 := out_$i129;
    call {:si_unique_call 4681} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_14917;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    out_$i129 := $sub.i32(out_$i128, 1);
    goto corral_source_split_14916;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    out_$i128 := $M.49;
    goto corral_source_split_14915;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 4680} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14914;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4679} pch_udc_remove(out_$p127);
    goto corral_source_split_14913;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    out_$p127 := $M.43;
    goto corral_source_split_14912;

  $bb142:
    assume out_$i126 == 1;
    goto corral_source_split_14911;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 4);
    goto corral_source_split_14859;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    out_$i125 := $M.51;
    goto corral_source_split_14858;

  $bb114:
    assume out_$i99 == 1;
    goto corral_source_split_14857;

  $bb113:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i96, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb152:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb154:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 4690} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_14949;

  $bb153:
    assume out_$i145 == 1;
    goto corral_source_split_14948;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_14945:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 0);
    goto corral_source_split_14946;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    out_$i144 := $M.57;
    goto corral_source_split_14945;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    $M.57 := out_$i143;
    call {:si_unique_call 4689} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_14944;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4688} out_$i143 := pch_udc_resume(out_$p142);
    goto corral_source_split_14943;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    out_$p142 := $M.43;
    goto corral_source_split_14942;

  $bb151:
    assume out_$i141 == 1;
    goto corral_source_split_14941;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 4);
    goto corral_source_split_14863;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    out_$i140 := $M.51;
    goto corral_source_split_14862;

  $bb116:
    assume out_$i100 == 1;
    goto corral_source_split_14861;

  $bb115:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i96, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4691} ldv_stop();
    goto corral_source_split_14951;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb117:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb118;

  $bb122:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb118;

  $bb161:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    goto $bb162;

  SeqInstr_102:
    goto corral_source_split_14954;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4692} choose_interrupt_2();
    goto SeqInstr_101;

  $bb160:
    assume out_$i147 == 1;
    goto corral_source_split_14953;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    out_$i147 := $ne.i32(out_$i146, 0);
    goto corral_source_split_14697;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    out_$i146 := $M.52;
    goto corral_source_split_14696;

  $bb7:
    assume out_$i18 == 1;
    goto corral_source_split_14695;

  $bb6:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb164:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb186:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_14992:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4697} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14993;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4696} out_vslice_dummy_var_90 := pch_udc_pcd_pullup(out_$p162, in_$i10);
    goto corral_source_split_14992;

  corral_source_split_14990:
    assume {:verifier.code 0} true;
    out_$p162 := $M.27;
    goto corral_source_split_14991;

  $bb185:
    assume out_$i161 == 1;
    goto corral_source_split_14990;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_14987:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 1);
    goto corral_source_split_14988;

  corral_source_split_14986:
    assume {:verifier.code 0} true;
    out_$i160 := $M.53;
    goto corral_source_split_14987;

  $bb183:
    assume out_$i159 == 1;
    goto corral_source_split_14986;

  $bb181:
    assume out_$i158 == 1;
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i150, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb177:
    assume out_$i156 == 1;
    assume {:verifier.code 0} true;
    out_$i158 := $slt.i32(out_$i150, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb166:
    assume out_$i151 == 1;
    assume {:verifier.code 0} true;
    out_$i156 := $slt.i32(out_$i150, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb165:
    assume {:verifier.code 0} true;
    out_$i151 := $slt.i32(out_$i150, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_14956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4693} out_$i150 := __VERIFIER_nondet_int();
    call {:si_unique_call 4694} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i150);
    call {:si_unique_call 4695} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i150);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb163:
    assume out_$i149 == 1;
    goto corral_source_split_14956;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    out_$i149 := $ne.i32(out_$i148, 0);
    goto corral_source_split_14701;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    out_$i148 := $M.53;
    goto corral_source_split_14700;

  $bb9:
    assume out_$i19 == 1;
    goto corral_source_split_14699;

  $bb8:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb190:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4699} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14999;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4698} out_vslice_dummy_var_91 := pch_udc_start(out_$p166, out_$p167);
    goto corral_source_split_14998;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    out_$p167 := $M.26;
    goto corral_source_split_14997;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    out_$p166 := $M.27;
    goto corral_source_split_14996;

  $bb189:
    assume out_$i165 == 1;
    goto corral_source_split_14995;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_14983:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 1);
    goto corral_source_split_14984;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    out_$i164 := $M.53;
    goto corral_source_split_14983;

  $bb182:
    assume !(out_$i158 == 1);
    goto corral_source_split_14982;

  $bb193:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4701} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15004;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4700} out_vslice_dummy_var_92 := pch_udc_pcd_selfpowered(out_$p171, in_$i8);
    goto corral_source_split_15003;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    out_$p171 := $M.27;
    goto corral_source_split_15002;

  $bb192:
    assume out_$i170 == 1;
    goto corral_source_split_15001;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_14975:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 1);
    goto corral_source_split_14976;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    out_$i169 := $M.53;
    goto corral_source_split_14975;

  $bb179:
    assume out_$i157 == 1;
    goto corral_source_split_14974;

  $bb178:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    out_$i157 := $slt.i32(out_$i150, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb196:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_15008:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4703} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15009;

  corral_source_split_15007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4702} out_vslice_dummy_var_93 := pch_udc_pcd_vbus_draw(out_$p175, in_$i9);
    goto corral_source_split_15008;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    out_$p175 := $M.27;
    goto corral_source_split_15007;

  $bb195:
    assume out_$i174 == 1;
    goto corral_source_split_15006;

  corral_source_split_14980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 1);
    goto corral_source_split_14980;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    out_$i173 := $M.53;
    goto corral_source_split_14979;

  $bb180:
    assume !(out_$i157 == 1);
    goto corral_source_split_14978;

  $bb199:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_15013:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4705} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15014;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4704} out_vslice_dummy_var_94 := pch_udc_pcd_get_frame(out_$p179);
    goto corral_source_split_15013;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    out_$p179 := $M.27;
    goto corral_source_split_15012;

  $bb198:
    assume out_$i178 == 1;
    goto corral_source_split_15011;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 1);
    goto corral_source_split_14968;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    out_$i177 := $M.53;
    goto corral_source_split_14967;

  $bb175:
    assume out_$i155 == 1;
    goto corral_source_split_14966;

  $bb168:
    assume out_$i152 == 1;
    assume {:verifier.code 0} true;
    out_$i155 := $slt.i32(out_$i150, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb167:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    out_$i152 := $slt.i32(out_$i150, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb202:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4707} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15019;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4706} out_vslice_dummy_var_95 := pch_udc_pcd_vbus_session(out_$p183, in_$i11);
    goto corral_source_split_15018;

  corral_source_split_15016:
    assume {:verifier.code 0} true;
    out_$p183 := $M.27;
    goto corral_source_split_15017;

  $bb201:
    assume out_$i182 == 1;
    goto corral_source_split_15016;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_14971:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 1);
    goto corral_source_split_14972;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    out_$i181 := $M.53;
    goto corral_source_split_14971;

  $bb176:
    assume !(out_$i155 == 1);
    goto corral_source_split_14970;

  $bb205:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_15025:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4709} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15025;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4708} out_vslice_dummy_var_96 := pch_udc_stop(out_$p187, out_$p188);
    goto corral_source_split_15024;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    out_$p188 := $M.26;
    goto corral_source_split_15023;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    out_$p187 := $M.27;
    goto corral_source_split_15022;

  $bb204:
    assume out_$i186 == 1;
    goto corral_source_split_15021;

  corral_source_split_14960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 1);
    goto corral_source_split_14960;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    out_$i185 := $M.53;
    goto corral_source_split_14959;

  $bb170:
    assume out_$i153 == 1;
    goto corral_source_split_14958;

  $bb169:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i150, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb208:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 4711} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15030;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4710} out_vslice_dummy_var_97 := pch_udc_pcd_wakeup(out_$p192);
    goto corral_source_split_15029;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    out_$p192 := $M.27;
    goto corral_source_split_15028;

  $bb207:
    assume out_$i191 == 1;
    goto corral_source_split_15027;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 1);
    goto corral_source_split_14964;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    out_$i190 := $M.53;
    goto corral_source_split_14963;

  $bb172:
    assume out_$i154 == 1;
    goto corral_source_split_14962;

  $bb171:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i150, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_15032:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4712} ldv_stop();
    goto corral_source_split_15032;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb173:
    assume {:verifier.code 0} true;
    assume !(out_$i154 == 1);
    goto $bb174;

  $bb184:
    assume {:verifier.code 0} true;
    assume !(out_$i159 == 1);
    goto $bb174;

  corral_source_split_15034:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4713} ldv_stop();
    goto corral_source_split_15034;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb11;

  $bb73_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i46, out_$i47, out_$p48, out_$i49, out_$i51, out_$i52, out_$p53, out_$i55, out_$i56, out_$p57, out_$p58, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i164, out_$i165, out_$p166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i181, out_$i182, out_$p183, out_$i185, out_$i186, out_$p187, out_$p188, out_$i190, out_$i191, out_$p192, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$i3, in_$p5, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i46, out_$i47, out_$p48, out_$i49, out_$i51, out_$i52, out_$p53, out_$i55, out_$i56, out_$p57, out_$p58, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i164, out_$i165, out_$p166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i181, out_$i182, out_$p183, out_$i185, out_$i186, out_$p187, out_$p188, out_$i190, out_$i191, out_$p192, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p5: ref, in_$p7: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: ref, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32) returns (out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: ref, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32);
  modifies $M.47, $M.18, $M.0, assertsPassed, $CurrAddr, $M.3, $M.41, $M.42, $M.43, $M.51, $M.26, $M.27, $M.53, $M.50, $M.54, $M.49, $M.55, $M.24, $M.4, $M.19, $M.6, $M.20, $M.5, $M.8, $M.21, $M.7, $M.10, $M.22, $M.9, $M.56, $M.1, $M.2, $M.57, $M.28, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17;


