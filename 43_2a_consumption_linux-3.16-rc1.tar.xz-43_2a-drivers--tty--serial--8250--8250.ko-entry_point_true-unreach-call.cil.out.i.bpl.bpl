var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: i32;

var $M.3: [ref]i32;

var $M.4: [ref]i64;

var $M.5: [ref]i32;

var $M.6: ref;

var $M.7: i32;

var $M.8: [ref]i16;

var $M.9: [ref]i16;

var $M.10: [ref]i32;

var $M.11: ref;

var $M.12: [ref]i8;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]ref;

var $M.17: [ref]i24;

var $M.18: [ref]i8;

var $M.19: [ref]i8;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]i24;

var $M.25: [ref]i8;

var $M.26: i32;

var $M.27: [ref]ref;

var $M.28: i32;

var $M.29: [ref]i64;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: ref;

var $M.39: i32;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: i32;

var $M.45: [ref]i32;

var $M.46: [ref]i32;

var $M.48: [ref]ref;

var $M.49: [ref]i64;

var $M.50: [ref]i32;

var $M.51: [ref]i32;

var $M.52: [ref]i64;

var $M.53: [ref]i32;

var $M.54: [ref]i32;

var $M.55: [ref]i8;

var $M.56: [ref]ref;

var $M.57: [ref]i8;

var $M.58: [ref]i16;

var $M.60: ref;

var $M.61: ref;

var $M.62: [ref]i8;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: ref;

var $M.75: [ref]i8;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: [ref]i8;

var $M.132: [ref]i8;

var $M.133: [ref]i8;

var $M.134: [ref]i8;

var $M.135: [ref]i8;

var $M.136: [ref]i32;

var $M.137: [ref]i8;

var $M.138: [ref]i8;

var $M.139: [ref]i8;

var $M.140: [ref]i8;

var $M.141: [ref]i8;

var $M.142: [ref]i8;

var $M.143: [ref]i8;

var $M.144: [ref]i8;

var $M.175: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 571365);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 3084);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 4112);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 5140);

const ldv_timer_state_2: ref;

axiom ldv_timer_state_2 == $sub.ref(0, 6168);

const __ksymtab_serial8250_clear_and_reinit_fifos: ref;

axiom __ksymtab_serial8250_clear_and_reinit_fifos == $sub.ref(0, 7208);

const {:count 34} __kstrtab_serial8250_clear_and_reinit_fifos: ref;

axiom __kstrtab_serial8250_clear_and_reinit_fifos == $sub.ref(0, 8266);

const {:count 23} __kstrtab_serial8250_release_dma: ref;

axiom __kstrtab_serial8250_release_dma == $sub.ref(0, 9313);

const {:count 23} __kstrtab_serial8250_request_dma: ref;

axiom __kstrtab_serial8250_request_dma == $sub.ref(0, 10360);

const {:count 18} __kstrtab_serial8250_rx_dma: ref;

axiom __kstrtab_serial8250_rx_dma == $sub.ref(0, 11402);

const {:count 18} __kstrtab_serial8250_tx_dma: ref;

axiom __kstrtab_serial8250_tx_dma == $sub.ref(0, 12444);

const {:count 25} modem_names: ref;

axiom modem_names == $sub.ref(0, 13668);

const {:count 154} pnp_dev_table: ref;

axiom pnp_dev_table == $sub.ref(0, 17156);

const serial_pnp_driver: ref;

axiom serial_pnp_driver == $sub.ref(0, 18364);

const skip_txen_test: ref;

axiom skip_txen_test == $sub.ref(0, 19392);

const {:count 32} irq_lists: ref;

axiom irq_lists == $sub.ref(0, 20672);

const hash_mutex: ref;

axiom hash_mutex == $sub.ref(0, 21864);

const probe_rsa_count: ref;

axiom probe_rsa_count == $sub.ref(0, 22892);

const {:count 4} probe_rsa: ref;

axiom probe_rsa == $sub.ref(0, 23948);

const serial8250_isa_driver: ref;

axiom serial8250_isa_driver == $sub.ref(0, 25148);

const {:count 23} __kstrtab_serial8250_resume_port: ref;

axiom __kstrtab_serial8250_resume_port == $sub.ref(0, 26195);

const {:count 24} __kstrtab_serial8250_suspend_port: ref;

axiom __kstrtab_serial8250_suspend_port == $sub.ref(0, 27243);

const {:count 27} __kstrtab_serial8250_unregister_port: ref;

axiom __kstrtab_serial8250_unregister_port == $sub.ref(0, 28294);

const {:count 30} __kstrtab_serial8250_register_8250_port: ref;

axiom __kstrtab_serial8250_register_8250_port == $sub.ref(0, 29348);

const serial_mutex: ref;

axiom serial_mutex == $sub.ref(0, 30540);

const serial8250_reg: ref;

axiom serial8250_reg == $sub.ref(0, 31628);

const {:count 4} old_serial_port: ref;

axiom old_serial_port == $sub.ref(0, 32844);

const share_irqs: ref;

axiom share_irqs == $sub.ref(0, 33872);

const serial8250_pops: ref;

axiom serial8250_pops == $sub.ref(0, 35104);

const nr_uarts: ref;

axiom nr_uarts == $sub.ref(0, 36132);

const {:count 32} __kstrtab_serial8250_set_isa_configurator: ref;

axiom __kstrtab_serial8250_set_isa_configurator == $sub.ref(0, 37188);

const {:count 17} __kstrtab_serial8250_do_pm: ref;

axiom __kstrtab_serial8250_do_pm == $sub.ref(0, 38229);

const {:count 26} __kstrtab_serial8250_do_set_termios: ref;

axiom __kstrtab_serial8250_do_set_termios == $sub.ref(0, 39279);

const {:count 22} __kstrtab_serial8250_handle_irq: ref;

axiom __kstrtab_serial8250_handle_irq == $sub.ref(0, 40325);

const {:count 24} __kstrtab_serial8250_modem_status: ref;

axiom __kstrtab_serial8250_modem_status == $sub.ref(0, 41373);

const {:count 20} __kstrtab_serial8250_tx_chars: ref;

axiom __kstrtab_serial8250_tx_chars == $sub.ref(0, 42417);

const {:count 20} __kstrtab_serial8250_rx_chars: ref;

axiom __kstrtab_serial8250_rx_chars == $sub.ref(0, 43461);

const {:count 29} uart_config: ref;

axiom uart_config == $sub.ref(0, 45181);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 46209);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 47237);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 48265);

const __mod_pnp__pnp_dev_table_device_table: ref;

axiom __mod_pnp__pnp_dev_table_device_table == $sub.ref(0, 49305);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 50333);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 51361);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 52389);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 53417);

const serial8250_isa_devs: ref;

axiom serial8250_isa_devs == $sub.ref(0, 54449);

const serial8250_isa_config: ref;

axiom serial8250_isa_config == $sub.ref(0, 55481);

const {:count 4} serial8250_ports: ref;

axiom serial8250_ports == $sub.ref(0, 58521);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 59549);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 60577);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 61605);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 62633);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 63661);

const ldv_timer_list_2: ref;

axiom ldv_timer_list_2 == $sub.ref(0, 64693);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 65721);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 66749);

const serial8250_isa_driver_group0: ref;

axiom serial8250_isa_driver_group0 == $sub.ref(0, 67781);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 68809);

const serial_pnp_driver_group0: ref;

axiom serial_pnp_driver_group0 == $sub.ref(0, 69841);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 70873);

const serial8250_pops_group0: ref;

axiom serial8250_pops_group0 == $sub.ref(0, 71905);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 72937);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 73965);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 74993);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 76021);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 77053);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 78085);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 79113);

const __ksymtab_serial8250_release_dma: ref;

axiom __ksymtab_serial8250_release_dma == $sub.ref(0, 80153);

const __ksymtab_serial8250_request_dma: ref;

axiom __ksymtab_serial8250_request_dma == $sub.ref(0, 81193);

const __ksymtab_serial8250_rx_dma: ref;

axiom __ksymtab_serial8250_rx_dma == $sub.ref(0, 82233);

const __ksymtab_serial8250_tx_dma: ref;

axiom __ksymtab_serial8250_tx_dma == $sub.ref(0, 83273);

const __ksymtab_serial8250_resume_port: ref;

axiom __ksymtab_serial8250_resume_port == $sub.ref(0, 84313);

const __ksymtab_serial8250_suspend_port: ref;

axiom __ksymtab_serial8250_suspend_port == $sub.ref(0, 85353);

const __ksymtab_serial8250_unregister_port: ref;

axiom __ksymtab_serial8250_unregister_port == $sub.ref(0, 86393);

const __ksymtab_serial8250_register_8250_port: ref;

axiom __ksymtab_serial8250_register_8250_port == $sub.ref(0, 87433);

const __ksymtab_serial8250_set_isa_configurator: ref;

axiom __ksymtab_serial8250_set_isa_configurator == $sub.ref(0, 88473);

const __ksymtab_serial8250_do_pm: ref;

axiom __ksymtab_serial8250_do_pm == $sub.ref(0, 89513);

const __ksymtab_serial8250_do_set_termios: ref;

axiom __ksymtab_serial8250_do_set_termios == $sub.ref(0, 90553);

const __ksymtab_serial8250_handle_irq: ref;

axiom __ksymtab_serial8250_handle_irq == $sub.ref(0, 91593);

const __ksymtab_serial8250_modem_status: ref;

axiom __ksymtab_serial8250_modem_status == $sub.ref(0, 92633);

const __ksymtab_serial8250_tx_chars: ref;

axiom __ksymtab_serial8250_tx_chars == $sub.ref(0, 93673);

const __ksymtab_serial8250_rx_chars: ref;

axiom __ksymtab_serial8250_rx_chars == $sub.ref(0, 94713);

const {:count 41} .str.83: ref;

axiom .str.83 == $sub.ref(0, 95778);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const .str: ref;

axiom .str == $sub.ref(0, 96805);

const {:count 3} .str.1: ref;

axiom .str.1 == $sub.ref(0, 97832);

const {:count 9} .str.2: ref;

axiom .str.2 == $sub.ref(0, 98865);

const {:count 5} .str.3: ref;

axiom .str.3 == $sub.ref(0, 99894);

const {:count 23} .str.4: ref;

axiom .str.4 == $sub.ref(0, 100941);

const {:count 224} .str.5: ref;

axiom .str.5 == $sub.ref(0, 102189);

const {:count 23} .str.6: ref;

axiom .str.6 == $sub.ref(0, 103236);

const {:count 37} .str.84: ref;

axiom .str.84 == $sub.ref(0, 104297);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 34} .str.85: ref;

axiom .str.85 == $sub.ref(0, 105355);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 23} .str.7: ref;

axiom .str.7 == $sub.ref(0, 106402);

const {:count 23} .str.8: ref;

axiom .str.8 == $sub.ref(0, 107449);

const {:count 8} .str.9: ref;

axiom .str.9 == $sub.ref(0, 108481);

const {:count 6} .str.10: ref;

axiom .str.10 == $sub.ref(0, 109511);

const {:count 6} .str.11: ref;

axiom .str.11 == $sub.ref(0, 110541);

const {:count 7} .str.12: ref;

axiom .str.12 == $sub.ref(0, 111572);

const {:count 7} .str.13: ref;

axiom .str.13 == $sub.ref(0, 112603);

const {:count 8} .str.14: ref;

axiom .str.14 == $sub.ref(0, 113635);

const {:count 10} .str.15: ref;

axiom .str.15 == $sub.ref(0, 114669);

const {:count 8} .str.16: ref;

axiom .str.16 == $sub.ref(0, 115701);

const {:count 9} .str.17: ref;

axiom .str.17 == $sub.ref(0, 116734);

const {:count 11} .str.18: ref;

axiom .str.18 == $sub.ref(0, 117769);

const {:count 8} .str.19: ref;

axiom .str.19 == $sub.ref(0, 118801);

const {:count 8} .str.20: ref;

axiom .str.20 == $sub.ref(0, 119833);

const {:count 4} .str.21: ref;

axiom .str.21 == $sub.ref(0, 120861);

const {:count 9} .str.22: ref;

axiom .str.22 == $sub.ref(0, 121894);

const {:count 7} .str.23: ref;

axiom .str.23 == $sub.ref(0, 122925);

const {:count 7} .str.24: ref;

axiom .str.24 == $sub.ref(0, 123956);

const {:count 4} .str.25: ref;

axiom .str.25 == $sub.ref(0, 124984);

const {:count 10} .str.26: ref;

axiom .str.26 == $sub.ref(0, 126018);

const {:count 6} .str.27: ref;

axiom .str.27 == $sub.ref(0, 127048);

const {:count 9} .str.28: ref;

axiom .str.28 == $sub.ref(0, 128081);

const {:count 8} .str.29: ref;

axiom .str.29 == $sub.ref(0, 129113);

const {:count 9} .str.30: ref;

axiom .str.30 == $sub.ref(0, 130146);

const {:count 9} .str.31: ref;

axiom .str.31 == $sub.ref(0, 131179);

const {:count 10} .str.32: ref;

axiom .str.32 == $sub.ref(0, 132213);

const {:count 20} .str.33: ref;

axiom .str.33 == $sub.ref(0, 133257);

const {:count 20} .str.34: ref;

axiom .str.34 == $sub.ref(0, 134301);

const {:count 21} .str.35: ref;

axiom .str.35 == $sub.ref(0, 135346);

const nr_irqs: ref;

axiom nr_irqs == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const ioport_resource: ref;

axiom ioport_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const pv_cpu_ops: ref;

axiom pv_cpu_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 44} .str.49: ref;

axiom .str.49 == $sub.ref(0, 136414);

const {:count 11} .str.48: ref;

axiom .str.48 == $sub.ref(0, 137449);

const {:count 7} .str.37: ref;

axiom .str.37 == $sub.ref(0, 138480);

const {:count 225} .str.52: ref;

axiom .str.52 == $sub.ref(0, 139729);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 19} .str.50: ref;

axiom .str.50 == $sub.ref(0, 140772);

const {:count 36} .str.51: ref;

axiom .str.51 == $sub.ref(0, 141832);

const {:count 29} .str.53: ref;

axiom .str.53 == $sub.ref(0, 142885);

const {:count 45} .str.54: ref;

axiom .str.54 == $sub.ref(0, 143954);

const {:count 33} .str.55: ref;

axiom .str.55 == $sub.ref(0, 145011);

const {:count 19} .str.56: ref;

axiom .str.56 == $sub.ref(0, 146054);

const {:count 21} .str.41: ref;

axiom .str.41 == $sub.ref(0, 147099);

const {:count 38} .str.42: ref;

axiom .str.42 == $sub.ref(0, 148161);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 5} .str.38: ref;

axiom .str.38 == $sub.ref(0, 149190);

const {:count 23} .str.39: ref;

axiom .str.39 == $sub.ref(0, 150237);

const {:count 13} .str.40: ref;

axiom .str.40 == $sub.ref(0, 151274);

const {:count 11} .str.44: ref;

axiom .str.44 == $sub.ref(0, 152309);

const {:count 63} .str.43: ref;

axiom .str.43 == $sub.ref(0, 153396);

const {:count 21} .str.57: ref;

axiom .str.57 == $sub.ref(0, 154441);

const {:count 11} .str.58: ref;

axiom .str.58 == $sub.ref(0, 155476);

const {:count 6} .str.59: ref;

axiom .str.59 == $sub.ref(0, 156506);

const {:count 6} .str.60: ref;

axiom .str.60 == $sub.ref(0, 157536);

const {:count 6} .str.61: ref;

axiom .str.61 == $sub.ref(0, 158566);

const {:count 4} .str.62: ref;

axiom .str.62 == $sub.ref(0, 159594);

const {:count 4} .str.63: ref;

axiom .str.63 == $sub.ref(0, 160622);

const {:count 4} .str.64: ref;

axiom .str.64 == $sub.ref(0, 161650);

const {:count 4} .str.65: ref;

axiom .str.65 == $sub.ref(0, 162678);

const {:count 4} .str.66: ref;

axiom .str.66 == $sub.ref(0, 163706);

const {:count 4} .str.67: ref;

axiom .str.67 == $sub.ref(0, 164734);

const {:count 5} .str.68: ref;

axiom .str.68 == $sub.ref(0, 165763);

const {:count 5} .str.69: ref;

axiom .str.69 == $sub.ref(0, 166792);

const {:count 5} .str.70: ref;

axiom .str.70 == $sub.ref(0, 167821);

const {:count 7} .str.71: ref;

axiom .str.71 == $sub.ref(0, 168852);

const {:count 7} .str.72: ref;

axiom .str.72 == $sub.ref(0, 169883);

const {:count 7} .str.73: ref;

axiom .str.73 == $sub.ref(0, 170914);

const {:count 7} .str.74: ref;

axiom .str.74 == $sub.ref(0, 171945);

const {:count 7} .str.75: ref;

axiom .str.75 == $sub.ref(0, 172976);

const {:count 7} .str.76: ref;

axiom .str.76 == $sub.ref(0, 174007);

const {:count 6} .str.77: ref;

axiom .str.77 == $sub.ref(0, 175037);

const {:count 6} .str.78: ref;

axiom .str.78 == $sub.ref(0, 176067);

const {:count 6} .str.79: ref;

axiom .str.79 == $sub.ref(0, 177097);

const {:count 5} .str.80: ref;

axiom .str.80 == $sub.ref(0, 178126);

const {:count 5} .str.81: ref;

axiom .str.81 == $sub.ref(0, 179155);

const {:count 5} .str.82: ref;

axiom .str.82 == $sub.ref(0, 180184);

const {:count 22} .str.36: ref;

axiom .str.36 == $sub.ref(0, 181230);

const {:count 3} .str.46: ref;

axiom .str.46 == $sub.ref(0, 182257);

const {:count 4} .str.47: ref;

axiom .str.47 == $sub.ref(0, 183285);

const {:count 59} .str.45: ref;

axiom .str.45 == $sub.ref(0, 184368);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 185400);

const {:count 3} .str.1.184: ref;

axiom .str.1.184 == $sub.ref(0, 186427);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 187465);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 188493);

const serial8250_clear_and_reinit_fifos: ref;

axiom serial8250_clear_and_reinit_fifos == $sub.ref(0, 189525);

procedure serial8250_clear_and_reinit_fifos($p0: ref);
  free requires assertsPassed;



implementation serial8250_clear_and_reinit_fifos($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} serial8250_clear_fifos($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i4, 24)), $mul.ref(12, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    call {:si_unique_call 1} {:cexpr "fcr"} boogie_si_record_i8($i7);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} serial_out($p0, 2, $i8);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 190557);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const serial8250_clear_fifos: ref;

axiom serial8250_clear_fifos == $sub.ref(0, 191589);

procedure serial8250_clear_fifos($p0: ref);
  free requires assertsPassed;



implementation serial8250_clear_fifos($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 256);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} serial_out($p0, 2, 1);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} serial_out($p0, 2, 7);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} serial_out($p0, 2, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_out: ref;

axiom serial_out == $sub.ref(0, 192621);

procedure serial_out($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation serial_out($p0: ref, $i1: i32, $i2: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} {:cexpr "serial_out:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 7} {:cexpr "serial_out:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1));
    call {:si_unique_call 8} devirtbounce($p5, $p6, $i1, $i2);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_rx_chars: ref;

axiom serial8250_rx_chars == $sub.ref(0, 193653);

procedure serial8250_rx_chars($p0: ref, $i1: i8) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.6, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_rx_chars($p0: ref, $i1: i8) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i8;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i8;
  var $i11: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p64: ref;
  var $i46: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i8;
  var $i88: i8;
  var $i84: i8;
  var $i93: i8;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i8;
  var $i103: i8;
  var $i107: i8;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} {:cexpr "serial8250_rx_chars:arg:lsr"} boogie_si_record_i8($i1);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i3, $i4 := 256, $i1;
    goto $bb1;

  $bb1:
    call $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $p13, $i14, $i15, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p39, $i40, $i41, $p43, $i44, $i45, $i47, $i48, $i49, $p51, $i52, $i53, $p55, $i56, $i57, $i58, $p60, $i61, $i62, $p64, $i46, $i65, $i66, $i67, $p69, $i70, $i71, $p73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i85, $i86, $i87, $i89, $i90, $i91, $i92, $i88, $i84, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i104, $i105, $i106, $i103 := serial8250_rx_chars_loop_$bb1($p0, $p2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $p13, $i14, $i15, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p39, $i40, $i41, $p43, $i44, $i45, $i47, $i48, $i49, $p51, $i52, $i53, $p55, $i56, $i57, $i58, $p60, $i61, $i62, $p64, $i46, $i65, $i66, $i67, $p69, $i70, $i71, $p73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i85, $i86, $i87, $i89, $i90, $i91, $i92, $i88, $i84, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i104, $i105, $i106, $i103);
    goto $bb1_last;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i64($i4);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 1);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i7 := ldv__builtin_expect($i6, 1);
    call {:si_unique_call 11} {:cexpr "tmp___0"} boogie_si_record_i64($i7);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(16, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(16, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i15);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i4);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i20, $i21);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    call {:si_unique_call 15} {:cexpr "lsr"} boogie_si_record_i8($i23);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i23);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 30);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 17} {:cexpr "tmp___2"} boogie_si_record_i64($i30);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i93, $i94 := $i23, 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i93);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i11);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i97 := $sext.i8.i32($i94);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} uart_insert_char($p2, $i95, 2, $i96, $i97);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i98 := serial_in($p0, 5);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 22} {:cexpr "tmp___3"} boogie_si_record_i32($i98);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    call {:si_unique_call 23} {:cexpr "lsr"} boogie_si_record_i8($i99);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 17);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i103 := $i99;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i107 := $i103;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} spin_unlock($p108);
    $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 1096)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} tty_flip_buffer_push($p111);
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} spin_lock($p112);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $r := $i107;
    return;

  $bb33:
    assume $i102 == 1;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i104 := $sub.i32($i3, 1);
    call {:si_unique_call 26} {:cexpr "max_count"} boogie_si_record_i32($i104);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i105 := $sgt.i32($i3, 0);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i106 := $i99;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i107 := $i106;
    goto $bb37;

  $bb35:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i3, $i4 := $i104, $i99;
    goto $bb35_dummy;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i23);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i23);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 4);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i49 == 1);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i23);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 8);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i46 := $i23;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i46);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 2);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(164, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i46);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i77, $i78);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i79);
    call {:si_unique_call 24} {:cexpr "lsr"} boogie_si_record_i8($i80);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 16);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i83 == 1);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i80);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 4);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i87 == 1);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i80);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 8);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i88 := $i92;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i84 := $i88;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i93, $i94 := $i80, $i84;
    goto $bb32;

  $bb29:
    assume $i91 == 1;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i92 := 2;
    goto $bb31;

  $bb26:
    assume $i87 == 1;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i88 := 3;
    goto $bb28;

  $bb23:
    assume $i83 == 1;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i84 := 1;
    goto $bb25;

  $bb20:
    assume $i67 == 1;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(28, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 1);
    $p73 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(28, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i71);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i58 == 1;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(24, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 1);
    $p64 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(24, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i62);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i49 == 1;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(32, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(32, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i53);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i23);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 243);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    call {:si_unique_call 18} {:cexpr "lsr"} boogie_si_record_i8($i37);
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(36, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(36, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i44 := uart_handle_break($p2);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 20} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i46 := $i37;
    goto $bb13;

  $bb9:
    assume $i45 == 1;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i8 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i9 := serial_in($p0, 0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 13} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 14} {:cexpr "ch"} boogie_si_record_i8($i10);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb4;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb35_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_31;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 194685);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 31} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const serial_in: ref;

axiom serial_in == $sub.ref(0, 195717);

procedure serial_in($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial_in($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} {:cexpr "serial_in:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1));
    call {:si_unique_call 33} $i6 := devirtbounce.1($p4, $p5, $i1);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 34} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const uart_handle_break: ref;

axiom uart_handle_break == $sub.ref(0, 196749);

procedure uart_handle_break($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $CurrAddr, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation uart_handle_break($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(176, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(128, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(320, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} do_SAK($p15);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(128, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 35} devirtbounce.2($p8, $p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const uart_insert_char: ref;

axiom uart_insert_char == $sub.ref(0, 197781);

procedure uart_insert_char($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;



implementation uart_insert_char($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} {:cexpr "uart_insert_char:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 38} {:cexpr "uart_insert_char:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 39} {:cexpr "uart_insert_char:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 40} {:cexpr "uart_insert_char:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 198813);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} ldv_spin_unlock();
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} ldv_spin_unlock_5($p0);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    return;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 199845);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 200877);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} ldv_spin_lock();
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} ldv_spin_lock_1($p0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 201909);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 45} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 202941);

procedure ldv_spin_lock_1($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} _raw_spin_lock($p2);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 203973);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 205005);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 47} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 206037);

procedure ldv_spin_unlock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} _raw_spin_unlock($p2);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 207069);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    return;
}



const do_SAK: ref;

axiom do_SAK == $sub.ref(0, 208101);

procedure do_SAK($p0: ref);
  free requires assertsPassed;



implementation do_SAK($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_tx_chars: ref;

axiom serial8250_tx_chars == $sub.ref(0, 209133);

procedure serial8250_tx_chars($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_tx_chars($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(160, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i19 := uart_tx_stopped($p1);
    call {:si_unique_call 51} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(8, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i22, $i24);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(460, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 54} {:cexpr "count"} boogie_si_record_i32($i27);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb11;

  $bb11:
    call $i28, $p29, $p30, $p31, $i32, $i33, $p34, $i35, $i36, $p37, $i38, $i39, $i40, $p41, $p43, $i44, $i45, $p47, $p48, $i49, $p50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62 := serial8250_tx_chars_loop_$bb11($p0, $p1, $p3, $i28, $p29, $p30, $p31, $i32, $i33, $p34, $i35, $i36, $p37, $i38, $i39, $i40, $p41, $p43, $i44, $i45, $p47, $p48, $i49, $p50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62);
    goto $bb11_last;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    $p31 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p30, $mul.ref($i33, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i36 := $sext.i8.i32($i35);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} serial_out($p0, 0, $i36);
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 1);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 4095);
    $p41 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i45);
    $p48 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(8, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    $p50 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i49, $i51);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 16384);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i28, 1);
    call {:si_unique_call 58} {:cexpr "count"} boogie_si_record_i32($i61);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, 0);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p63 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(8, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    $p65 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i64, $i66);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 4095);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i70 := $ule.i64($i69, 255);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $p71 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(8, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    $p73 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i72, $i74);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i75 == 1;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} __stop_tx($p0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i70 == 1;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} uart_write_wakeup($p1);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i61;
    goto $bb22_dummy;

  $bb16:
    assume $i57 == 1;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i58 := serial_port_in($p1, 5);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 57} {:cexpr "tmp___0"} boogie_si_record_i32($i58);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 96);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 96);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i60 == 1;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i52 == 1;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} __stop_tx($p0);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} serial8250_stop_tx($p1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(160, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} serial_out($p0, 0, $i11);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i15);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(160, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(0, 1));
    goto corral_source_split_259;
}



const uart_tx_stopped: ref;

axiom uart_tx_stopped == $sub.ref(0, 210165);

procedure uart_tx_stopped($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_tx_stopped($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(176, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(320, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(1316, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p5);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(1316, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const serial8250_stop_tx: ref;

axiom serial8250_stop_tx == $sub.ref(0, 211197);

procedure serial8250_stop_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_stop_tx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} __stop_tx($p1);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 10);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 2);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} serial_icr_write($p1, 0, $i13);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __stop_tx: ref;

axiom __stop_tx == $sub.ref(0, 212229);

procedure __stop_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __stop_tx($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 2);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 253);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} serial_out($p0, 1, $i14);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_port_in: ref;

axiom serial_port_in == $sub.ref(0, 213261);

procedure serial_port_in($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial_port_in($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} {:cexpr "serial_port_in:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(88, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 65} $i4 := devirtbounce.1($p3, $p0, $i1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 66} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const uart_write_wakeup: ref;

axiom uart_write_wakeup == $sub.ref(0, 214293);

procedure uart_write_wakeup($p0: ref);
  free requires assertsPassed;



implementation uart_write_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    return;
}



const serial_icr_write: ref;

axiom serial_icr_write == $sub.ref(0, 215325);

procedure serial_icr_write($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation serial_icr_write($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} {:cexpr "serial_icr_write:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 68} {:cexpr "serial_icr_write:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} serial_out($p0, 7, $i1);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} serial_out($p0, 5, $i2);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_modem_status: ref;

axiom serial8250_modem_status == $sub.ref(0, 216357);

procedure serial8250_modem_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_modem_status($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i2 := serial_in($p0, 6);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 72} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(472, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $i2);
    call {:si_unique_call 73} {:cexpr "status"} boogie_si_record_i32($i6);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(472, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i6, 15);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 8);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i6, 4);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i6, 2);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i6, 8);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i6, 1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(600, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} __wake_up($p44, 1, 1, $0.ref);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i6, 16);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} uart_handle_cts_change($p1, $i40);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i6, 128);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} uart_handle_dcd_change($p1, $i37);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i28 == 1;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(4, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(4, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i32);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(8, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(8, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i24);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const uart_handle_dcd_change: ref;

axiom uart_handle_dcd_change == $sub.ref(0, 217389);

procedure uart_handle_dcd_change($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation uart_handle_dcd_change($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} {:cexpr "uart_handle_dcd_change:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    return;
}



const uart_handle_cts_change: ref;

axiom uart_handle_cts_change == $sub.ref(0, 218421);

procedure uart_handle_cts_change($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation uart_handle_cts_change($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} {:cexpr "uart_handle_cts_change:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 219453);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 80} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_handle_irq: ref;

axiom serial8250_handle_irq == $sub.ref(0, 220485);

procedure serial8250_handle_irq($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_handle_irq($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i8;
  var $i24: i8;
  var $i25: i8;
  var $i26: i8;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i5: i32;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} {:cexpr "serial8250_handle_irq:arg:iir"} boogie_si_record_i32($i1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} ldv_spin_lock();
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i6 := serial_port_in($p0, 5);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 84} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 85} {:cexpr "status"} boogie_si_record_i8($i7);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 17);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i7;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_12 := serial8250_modem_status($p2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} spin_unlock_irqrestore($p35, $u0);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i26);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 32);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb19;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} serial8250_tx_chars($p2);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i16, 0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i7;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb16;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i7);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i24 := serial8250_rx_chars($p2, $i23);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 89} {:cexpr "status"} boogie_si_record_i8($i24);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb15;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb11;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i15 := serial8250_rx_dma($p2, $i1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 87} {:cexpr "dma_err"} boogie_si_record_i32($i15);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb9;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const serial8250_rx_dma: ref;

axiom serial8250_rx_dma == $sub.ref(0, 221517);

procedure serial8250_rx_dma($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $CurrAddr, $M.2, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.6, $M.45, $M.46, $M.38, $M.39, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation serial8250_rx_dma($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i14: i32;
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 94} {:cexpr "serial8250_rx_dma:arg:iir"} boogie_si_record_i32($i1);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i9 := dmaengine_tx_status($p6, $i8, $p2);
    call {:si_unique_call 96} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i1, 63);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i9, 0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p27 := dmaengine_prep_slave_single($p22, $i24, $i26, 2, 3);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p27, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, __dma_rx_complete);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p27, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i33 := dmaengine_submit($p27);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} dma_sync_single_for_device($p40, $i42, $i44, 2);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} dma_async_issue_pending($p46);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb9;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i9, 1);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 110);
    goto $bb9;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vslice_dummy_var_13 := dmaengine_pause($p17);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} __dma_rx_complete($p19);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 5);
    goto $bb9;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 222549);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.2;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} ldv_spin_unlock();
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 223581);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 224613);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    return;
}



const dmaengine_tx_status: ref;

axiom dmaengine_tx_status == $sub.ref(0, 225645);

procedure dmaengine_tx_status($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dmaengine_tx_status($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} {:cexpr "dmaengine_tx_status:arg:cookie"} boogie_si_record_i32($i1);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 110} $i7 := devirtbounce.3($p6, $p0, $i1, $p2);
    call {:si_unique_call 111} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const dmaengine_pause: ref;

axiom dmaengine_pause == $sub.ref(0, 226677);

procedure dmaengine_pause($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dmaengine_pause($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i1 := dmaengine_device_control($p0, 1, 0);
    call {:si_unique_call 113} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __dma_rx_complete: ref;

axiom __dma_rx_complete == $sub.ref(0, 227709);

procedure __dma_rx_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __dma_rx_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p44: ref;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1096)), $mul.ref(0, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} dma_sync_single_for_cpu($p14, $i16, $i18, 2);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_14 := dmaengine_tx_status($p20, $i22, $p1);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} vslice_dummy_var_15 := dmaengine_terminate_all($p25);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.3, $p30);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i29, $i31);
    call {:si_unique_call 118} {:cexpr "count"} boogie_si_record_i32($i32);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i32);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vslice_dummy_var_16 := tty_insert_flip_string($p8, $p34, $i35);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(16, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, $i32);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(16, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i41);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} tty_flip_buffer_push($p8);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    return;
}



const dmaengine_prep_slave_single: ref;

axiom dmaengine_prep_slave_single == $sub.ref(0, 228741);

procedure dmaengine_prep_slave_single($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $CurrAddr;



implementation dmaengine_prep_slave_single($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i64) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 122} {:cexpr "dmaengine_prep_slave_single:arg:buf"} boogie_si_record_i64($i1);
    call {:si_unique_call 123} {:cexpr "dmaengine_prep_slave_single:arg:len"} boogie_si_record_i64($i2);
    call {:si_unique_call 124} {:cexpr "dmaengine_prep_slave_single:arg:dir"} boogie_si_record_i32($i3);
    call {:si_unique_call 125} {:cexpr "dmaengine_prep_slave_single:arg:flags"} boogie_si_record_i64($i4);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} sg_init_table($p5, 1);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p6, $i1);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i2);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p8, $i7);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 127} $p13 := devirtbounce.4($p12, $p0, $p5, 1, $i3, $i4, $0.ref);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;
}



const dmaengine_submit: ref;

axiom dmaengine_submit == $sub.ref(0, 229773);

procedure dmaengine_submit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation dmaengine_submit($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    call {:si_unique_call 128} $i3 := devirtbounce.5($p2, $p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 129} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const dma_sync_single_for_device: ref;

axiom dma_sync_single_for_device == $sub.ref(0, 230805);

procedure dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} {:cexpr "dma_sync_single_for_device:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 131} {:cexpr "dma_sync_single_for_device:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 132} {:cexpr "dma_sync_single_for_device:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $p4 := get_dma_ops($p0);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 135} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 137} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} debug_dma_sync_single_for_device($p0, $i1, $i2, $i3);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 139} devirtbounce.7($p16, $p0, $i1, $i2, $i3);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 138} devirtbounce.6(0, .str.83, 115, 12);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_sync_single_for_device_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dma_async_issue_pending: ref;

axiom dma_async_issue_pending == $sub.ref(0, 231837);

procedure dma_async_issue_pending($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $CurrAddr, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation dma_async_issue_pending($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 141} devirtbounce.8($p4, $p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 232869);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 143} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 233901);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_sync_single_for_device: ref;

axiom debug_dma_sync_single_for_device == $sub.ref(0, 234933);

procedure debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} {:cexpr "debug_dma_sync_single_for_device:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 146} {:cexpr "debug_dma_sync_single_for_device:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 147} {:cexpr "debug_dma_sync_single_for_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    return;
}



const sg_init_table: ref;

axiom sg_init_table == $sub.ref(0, 235965);

procedure sg_init_table($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation sg_init_table($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} {:cexpr "sg_init_table:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    return;
}



const dma_sync_single_for_cpu: ref;

axiom dma_sync_single_for_cpu == $sub.ref(0, 236997);

procedure dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} {:cexpr "dma_sync_single_for_cpu:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 150} {:cexpr "dma_sync_single_for_cpu:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 151} {:cexpr "dma_sync_single_for_cpu:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p4 := get_dma_ops($p0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 154} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 156} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} debug_dma_sync_single_for_cpu($p0, $i1, $i2, $i3);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 158} devirtbounce.7($p16, $p0, $i1, $i2, $i3);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 157} devirtbounce.6(0, .str.83, 103, 12);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_sync_single_for_cpu_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dmaengine_terminate_all: ref;

axiom dmaengine_terminate_all == $sub.ref(0, 238029);

procedure dmaengine_terminate_all($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dmaengine_terminate_all($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i1 := dmaengine_device_control($p0, 0, 0);
    call {:si_unique_call 161} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 239061);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} {:cexpr "tty_insert_flip_string:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i3 := tty_insert_flip_string_fixed_flag($p0, $p1, 0, $i2);
    call {:si_unique_call 164} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 240093);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 166} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 1} true;
    call {:si_unique_call 167} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dmaengine_device_control: ref;

axiom dmaengine_device_control == $sub.ref(0, 241125);

procedure dmaengine_device_control($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dmaengine_device_control($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} {:cexpr "dmaengine_device_control:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 170} {:cexpr "dmaengine_device_control:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 38);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 171} $i13 := devirtbounce.9($p12, $p0, $i1, $i2);
    call {:si_unique_call 172} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const debug_dma_sync_single_for_cpu: ref;

axiom debug_dma_sync_single_for_cpu == $sub.ref(0, 242157);

procedure debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 174} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 175} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_do_set_termios: ref;

axiom serial8250_do_set_termios == $sub.ref(0, 243189);

procedure serial8250_do_set_termios($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_do_set_termios($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i8;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $i22: i8;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $i45: i8;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i8;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $p83: ref;
  var $i84: i8;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $i90: i1;
  var $i91: i32;
  var $i92: i32;
  var $i93: i8;
  var $i94: i8;
  var $i95: i8;
  var $p96: ref;
  var $i97: i16;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i8;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i32;
  var $i121: i8;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $p174: ref;
  var $p175: ref;
  var $i176: i8;
  var $i177: i32;
  var $i178: i32;
  var $i179: i8;
  var $p180: ref;
  var $p181: ref;
  var $i182: i16;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $p187: ref;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i199: i8;
  var $i200: i32;
  var $i201: i32;
  var $i202: i8;
  var $p203: ref;
  var $p204: ref;
  var $i205: i16;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i8;
  var $i211: i32;
  var $i212: i32;
  var $i213: i8;
  var $p214: ref;
  var $p215: ref;
  var $i216: i16;
  var $i217: i32;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i8;
  var $p225: ref;
  var $p226: ref;
  var $i227: i8;
  var $i228: i32;
  var $p229: ref;
  var $i230: i16;
  var $i231: i32;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i32;
  var $i239: i8;
  var $i240: i8;
  var $p241: ref;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $i245: i32;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $i249: i1;
  var $i250: i32;
  var $i251: i32;
  var $p252: ref;
  var $i253: i16;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i32;
  var $p260: ref;
  var $i261: i32;
  var $i262: i1;
  var $p263: ref;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i268: i16;
  var $i269: i32;
  var $i270: i32;
  var $i271: i32;
  var $i272: i32;
  var $i273: i8;
  var $i274: i32;
  var $i275: i32;
  var $i276: i32;
  var $p277: ref;
  var $i278: i32;
  var $i279: i1;
  var $i280: i32;
  var $i281: i32;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $i285: i1;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $p290: ref;
  var $i291: i32;
  var $p292: ref;
  var $i293: i32;
  var $i294: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 48);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := 3;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 64);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i14;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 256);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i36, $i37 := $i22, 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 512);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i36;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 1073741824);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i53 := $i45;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(152, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i56 := $udiv.i32($i55, 1048560);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(152, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i59 := $udiv.i32($i58, 16);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i60 := uart_get_baud_rate($p0, $p1, $p2, $i56, $i59);
    call {:si_unique_call 181} {:cexpr "baud"} boogie_si_record_i32($i60);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i61 := serial8250_get_divisor($p0, $i60);
    call {:si_unique_call 183} {:cexpr "quot"} boogie_si_record_i32($i61);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i70 := $i61;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 256);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.0, $p96);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 2048);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 2097152);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} ldv_spin_lock();
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} uart_update_timeout($p0, $i124, $i60);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(164, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, 35);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 16);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, 10);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p142, 0);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i145 := $and.i32($i144, 4);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 1);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, 128);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 0);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i176 := $load.i8($M.0, $p175);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i176);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i177, 247);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i8($i178);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p180, $i179);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i182 := $load.i16($M.0, $p181);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i183 := $zext.i16.i32($i182);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i183, 4);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i205 := $load.i16($M.0, $p204);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i206 := $zext.i16.i32($i205);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i207 := $and.i32($i206, 4096);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i216 := $load.i16($M.0, $p215);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i216);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i218 := $and.i32($i217, 8192);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.0, $p226);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i228 := $zext.i8.i32($i227);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} serial_port_out($p0, 1, $i228);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i230 := $load.i16($M.0, $p229);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i231 := $zext.i16.i32($i230);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i232 := $and.i32($i231, 512);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i232, 0);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i247 := is_omap1_8250($p3);
    call {:si_unique_call 195} {:cexpr "tmp"} boogie_si_record_i32($i247);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i248 := $ne.i32($i247, 0);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    $i251 := $i70;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i253 := $load.i16($M.0, $p252);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i254 := $zext.i16.i32($i253);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i255 := $and.i32($i254, 8);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i256 == 1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i53);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i258 := $or.i32($i257, 128);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} serial_port_out($p0, 3, $i258);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} serial_dl_write($p3, $i251);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.0, $p260);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 24);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i278 := $load.i32($M.0, $p277);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 8);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i281 := $zext.i8.i32($i53);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} serial_port_out($p0, 3, $i281);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(466, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p282, $i53);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i285 := $ne.i32($i284, 8);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(252, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.0, $p290);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} serial8250_set_mctrl($p0, $i291);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} spin_unlock_irqrestore($p292, $u0);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i293 := tty_termios_baud_rate($p1);
    call {:si_unique_call 214} {:cexpr "tmp___0"} boogie_si_record_i32($i293);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    return;

  $bb133:
    assume $i294 == 1;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} tty_termios_encode_baud_rate($p1, $i60, $i60);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb127:
    assume $i285 == 1;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i286 := $zext.i8.i32($i95);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i287 := $and.i32($i286, 1);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i289 := $zext.i8.i32($i95);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} serial_port_out($p0, 2, $i289);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb129:
    assume $i288 == 1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} serial_port_out($p0, 2, 1);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb124:
    assume $i279 == 1;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i280 := $zext.i8.i32($i95);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} serial_port_out($p0, 2, $i280);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb121:
    assume $i262 == 1;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(152, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.0, $p263);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i265 := $mul.i32($i264, 2);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i266 := $udiv.i32($i265, $i60);
    call {:si_unique_call 201} {:cexpr "baud_x32"} boogie_si_record_i32($i266);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i267 := $udiv.i32($i266, 32);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i32.i16($i267);
    call {:si_unique_call 202} {:cexpr "quot___0"} boogie_si_record_i16($i268);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i269 := $and.i32($i266, 31);
    call {:si_unique_call 203} {:cexpr "__x"} boogie_si_record_i32($i269);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i270 := $sdiv.i32(2, 2);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i271 := $add.i32($i270, $i269);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i272 := $udiv.i32($i271, 2);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i273 := $trunc.i32.i8($i272);
    call {:si_unique_call 204} {:cexpr "quot_frac"} boogie_si_record_i8($i273);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i274 := $zext.i16.i32($i268);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} serial_dl_write($p3, $i274);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i273);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i276 := $and.i32($i275, 15);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} serial_port_out($p0, 2, $i276);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    goto $bb123;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb118:
    assume $i256 == 1;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} serial_port_out($p0, 3, 224);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb112:
    assume $i248 == 1;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i60, 115200);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i249} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i249 == 1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} serial_port_out($p0, 19, 0);
    assume {:verifier.code 0} true;
    $i250 := $i70;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i251 := $i250;
    goto $bb117;

  $bb114:
    assume $i249 == 1;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} serial_port_out($p0, 19, 1);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i250 := 1;
    goto $bb116;

  $bb103:
    assume $i233 == 1;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p234);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i235, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    $i240 := 0;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} serial_port_out($p0, 3, 191);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.0, $p241);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i243 := $and.i32($i242, 33554432);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i243, 0);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i244 == 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i240);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} serial_port_out($p0, 2, $i246);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb108:
    assume $i244 == 1;
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i240);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} serial_port_out($p0, 9, $i245);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb105:
    assume $i236 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i32(0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i238 := $or.i32($i237, 128);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i32.i8($i238);
    call {:si_unique_call 190} {:cexpr "efr"} boogie_si_record_i8($i239);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i240 := $i239;
    goto $bb107;

  $bb100:
    assume $i219 == 1;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.0, $p220);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i223 := $or.i32($i222, 16);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i8($i223);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p225, $i224);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i208 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.0, $p209);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i210);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i212 := $or.i32($i211, 64);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i8($i212);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p214, $i213);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb86:
    assume $i185 == 1;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p187);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i189 := $and.i32($i188, 2048);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb89, $bb91;

  $bb91:
    assume !($i190 == 1);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, $p191);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i192, 0);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i193 == 1);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p194);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, 2048);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 0);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb88;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.0, $p198);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i199);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i201 := $or.i32($i200, 8);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i8($i201);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p203, $i202);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i193 == 1;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb90;

  $bb83:
    assume $i170 == 1;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i173 := $or.i32($i172, 1);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p174, $i173);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb77:
    assume $i154 == 1;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i157 := $or.i32($i156, 16);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, $i157);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i161 := $and.i32($i160, 4);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb79:
    assume $i162 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i164, 2);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, $i165);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb74:
    assume $i146 == 1;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i149 := $or.i32($i148, 12);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, $i149);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i137 == 1;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(164, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i140 := $or.i32($i139, 16);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(164, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $i140);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume $i129 == 1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(164, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i132 := $or.i32($i131, 12);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(164, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, $i132);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(467, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 223);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i8($i111);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(467, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, $i112);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 0);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i116 == 1;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(467, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i120 := $or.i32($i119, 32);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i8($i120);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(467, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, $i121);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb56:
    assume $i100 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(156, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i103 := $ugt.i32($i102, 31);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb58;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb60;

  $bb41:
    assume $i75 == 1;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(156, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i32($i77, 1);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb43;

  $bb44:
    assume $i78 == 1;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i81, 24)), $mul.ref(12, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.1, $p83);
    call {:si_unique_call 185} {:cexpr "fcr"} boogie_si_record_i8($i84);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i85 := $ule.i32($i60, 2399);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i37, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i94 := $i84;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb55;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i84);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 63);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    call {:si_unique_call 186} {:cexpr "fcr"} boogie_si_record_i8($i93);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i94 := $i93;
    goto $bb54;

  $bb46:
    assume $i85 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb48;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb50;

  $bb35:
    assume $i66 == 1;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i61, 255);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb37;

  $bb38:
    assume $i68 == 1;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i61, 1);
    call {:si_unique_call 184} {:cexpr "quot"} boogie_si_record_i32($i69);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb40;

  $bb32:
    assume $i49 == 1;
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i45);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, 32);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    call {:si_unique_call 179} {:cexpr "cval"} boogie_si_record_i8($i52);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb34;

  $bb29:
    assume $i41 == 1;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i36);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i42, 16);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    call {:si_unique_call 178} {:cexpr "cval"} boogie_si_record_i8($i44);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb31;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i22);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 8);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    call {:si_unique_call 177} {:cexpr "cval"} boogie_si_record_i8($i29);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i29, $i35;
    goto $bb28;

  $bb25:
    assume $i34 == 1;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb27;

  $bb20:
    assume $i18 == 1;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i14);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 4);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    call {:si_unique_call 176} {:cexpr "cval"} boogie_si_record_i8($i21);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb22;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb9;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i14 := 2;
    goto $bb18;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i6, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb9;

  $bb14:
    assume $i12 == 1;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb18;

  $bb12:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb18;
}



const uart_get_baud_rate: ref;

axiom uart_get_baud_rate == $sub.ref(0, 244221);

procedure uart_get_baud_rate($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uart_get_baud_rate($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 216} {:cexpr "uart_get_baud_rate:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 217} {:cexpr "uart_get_baud_rate:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 218} $i5 := __VERIFIER_nondet_uint();
    call {:si_unique_call 219} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i5);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const serial8250_get_divisor: ref;

axiom serial8250_get_divisor == $sub.ref(0, 245253);

procedure serial8250_get_divisor($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation serial8250_get_divisor($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i19: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} {:cexpr "serial8250_get_divisor:arg:baud"} boogie_si_record_i32($i1);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 65536);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 65536);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i20 := uart_get_divisor($p0, $i1);
    call {:si_unique_call 222} {:cexpr "quot"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(152, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i17 := $udiv.i32($i16, 8);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, $i1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i19 := 32770;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(152, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i8 := $udiv.i32($i7, 4);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, $i1);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i10 := 32769;
    goto $bb6;
}



const uart_update_timeout: ref;

axiom uart_update_timeout == $sub.ref(0, 246285);

procedure uart_update_timeout($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation uart_update_timeout($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} {:cexpr "uart_update_timeout:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 224} {:cexpr "uart_update_timeout:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    return;
}



const serial_port_out: ref;

axiom serial_port_out == $sub.ref(0, 247317);

procedure serial_port_out($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation serial_port_out($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} {:cexpr "serial_port_out:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 226} {:cexpr "serial_port_out:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(96, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 227} devirtbounce($p4, $p0, $i1, $i2);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    return;
}



const is_omap1_8250: ref;

axiom is_omap1_8250 == $sub.ref(0, 248349);

procedure is_omap1_8250($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_omap1_8250($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const serial_dl_write: ref;

axiom serial_dl_write == $sub.ref(0, 249381);

procedure serial_dl_write($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial_dl_write($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} {:cexpr "serial_dl_write:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 229} devirtbounce.10($p3, $p0, $i1);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const serial8250_set_mctrl: ref;

axiom serial8250_set_mctrl == $sub.ref(0, 250413);

procedure serial8250_set_mctrl($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation serial8250_set_mctrl($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i8;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} {:cexpr "serial8250_set_mctrl:arg:mctrl"} boogie_si_record_i32($i1);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 4);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i1, 2);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i1, 8192);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i14;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i1, 16384);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i20;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i1, 32768);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i26;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(468, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i32);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i35, $i36);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(469, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i37, $i40);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(467, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i41, $i44);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    call {:si_unique_call 236} {:cexpr "mcr"} boogie_si_record_i8($i46);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} serial_port_out($p0, 4, $i47);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i26);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 16);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    call {:si_unique_call 235} {:cexpr "mcr"} boogie_si_record_i8($i31);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb15;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i20);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 8);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    call {:si_unique_call 234} {:cexpr "mcr"} boogie_si_record_i8($i25);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb12;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i14);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 4);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 233} {:cexpr "mcr"} boogie_si_record_i8($i19);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i8);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 1);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 232} {:cexpr "mcr"} boogie_si_record_i8($i13);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32(0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 2);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 231} {:cexpr "mcr"} boogie_si_record_i8($i7);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 251445);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 1} true;
    call {:si_unique_call 238} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 239} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_termios_encode_baud_rate: ref;

axiom tty_termios_encode_baud_rate == $sub.ref(0, 252477);

procedure tty_termios_encode_baud_rate($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation tty_termios_encode_baud_rate($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "tty_termios_encode_baud_rate:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 241} {:cexpr "tty_termios_encode_baud_rate:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    return;
}



const uart_get_divisor: ref;

axiom uart_get_divisor == $sub.ref(0, 253509);

procedure uart_get_divisor($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uart_get_divisor($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 242} {:cexpr "uart_get_divisor:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 244} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial8250_do_pm: ref;

axiom serial8250_do_pm == $sub.ref(0, 254541);

procedure serial8250_do_pm($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation serial8250_do_pm($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} {:cexpr "serial8250_do_pm:arg:state"} boogie_si_record_i32($i1);
    call {:si_unique_call 246} {:cexpr "serial8250_do_pm:arg:oldstate"} boogie_si_record_i32($i2);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} serial8250_set_sleep($p3, $i5);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_set_sleep: ref;

axiom serial8250_set_sleep == $sub.ref(0, 255573);

procedure serial8250_set_sleep($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation serial8250_set_sleep($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} {:cexpr "serial8250_set_sleep:arg:sleep"} boogie_si_record_i32($i1);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 24);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 21);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1024);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 512);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i1, 0);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 16 else 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} serial_out($p0, 1, $i23);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 512);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} serial_out($p0, 3, 191);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} serial_out($p0, 2, 0);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} serial_out($p0, 3, 0);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} serial_out($p0, 3, 191);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} serial_out($p0, 2, 16);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} serial_out($p0, 3, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i1, 0);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i11 := (if $i10 == 1 then 255 else 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} serial_out($p0, 139, $i11);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const serial8250_set_isa_configurator: ref;

axiom serial8250_set_isa_configurator == $sub.ref(0, 256605);

procedure serial8250_set_isa_configurator($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation serial8250_set_isa_configurator($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_register_8250_port: ref;

axiom serial8250_register_8250_port == $sub.ref(0, 257637);

procedure serial8250_register_8250_port($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_register_8250_port($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $p50: ref;
  var $p52: ref;
  var $i53: i8;
  var $p55: ref;
  var $p57: ref;
  var $i58: i8;
  var $p60: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i16;
  var $p69: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $i82: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i16;
  var $p90: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p137: ref;
  var $p138: ref;
  var $p140: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $p147: ref;
  var $p148: ref;
  var $p150: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $p157: ref;
  var $p158: ref;
  var $p160: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i64;
  var $i165: i1;
  var $p167: ref;
  var $p168: ref;
  var $p170: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $i175: i1;
  var $p177: ref;
  var $p178: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i64;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i64;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $i198: i1;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i64;
  var $i204: i1;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i32;
  var $i215: i32;
  var $i5: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} mutex_lock_nested(serial_mutex, 0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p7 := serial8250_find_match_or_unused($p6);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i215 := $sub.i32(0, 28);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} mutex_unlock(serial_mutex);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i5 := $i215;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 23);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i23);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p28);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i33);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, $i38);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i43);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(156, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(156, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i48);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i53);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $i58);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, 268435456);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i64);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i68);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p74, $i72);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(304, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(304, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $p77);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(156, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(156, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i82);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(460, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(460, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.0, $p88);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, $i89);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(156, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 134217728);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} set_io_from_upio($p120);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p163);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i164, 0);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(488, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p182);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i184 := $ne.i64($i183, 0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p189);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i191 := $ne.i64($i190, 0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p196);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i198 := $ne.i64($i197, 0);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p202 := $M.6;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i203 := $p2i.ref.i64($p202);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i204 := $ne.i64($i203, 0);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i209 := uart_add_one_port(serial8250_reg, $p208);
    call {:si_unique_call 264} {:cexpr "ret"} boogie_si_record_i32($i209);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 0);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    $i214 := $i209;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i215 := $i214;
    goto $bb58;

  $bb55:
    assume $i210 == 1;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(276, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    call {:si_unique_call 265} {:cexpr "ret"} boogie_si_record_i32($i213);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i214 := $i213;
    goto $bb57;

  $bb52:
    assume $i204 == 1;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p205 := $M.6;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(456, 1));
    call {:si_unique_call 262} devirtbounce.11($p205, 0, $p206, $p207);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i198 == 1;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p201, $p200);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i191 == 1;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p194, $p193);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i184 == 1;
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(488, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(488, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p187, $p186);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i175 == 1;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p180, $p178);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i165 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p170, $p168);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i155 == 1;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p160, $p158);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i145 == 1;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p150, $p148);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i135 == 1;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p140, $p138);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i125 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p130, $p128);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i116 == 1;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} serial8250_init_fixed_type_port($p7, $i119);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i106 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p111, $p109);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb13:
    assume $i94 == 1;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(460, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb15;

  $bb16:
    assume $i97 == 1;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(156, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(460, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $i100);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_17 := uart_remove_one_port(serial8250_reg, $p19);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 258669);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_find_match_or_unused: ref;

axiom serial8250_find_match_or_unused == $sub.ref(0, 259701);

procedure serial8250_find_match_or_unused($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation serial8250_find_match_or_unused($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i3: i32;
  var $i16: i32;
  var $i17: i1;
  var $i19: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i18: i32;
  var $i37: i32;
  var $i38: i1;
  var $i40: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i39: i32;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i1 := $M.7;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i2 := $ult.i32(0, $i1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := $M.7;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32(0, $i16);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i37 := $M.7;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i38 := $ult.i32(0, $i37);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb27:
    assume $i38 == 1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb30;

  $bb30:
    call $i40, $p43, $i44, $i45, $i46, $i49, $i50, $i51, $i39 := serial8250_find_match_or_unused_loop_$bb30($i40, $p43, $i44, $i45, $i46, $i49, $i50, $i51, $i39);
    goto $bb30_last;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i40, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i46 := $i39;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i39, 1);
    call {:si_unique_call 272} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i50 := $M.7;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i51 := $ult.i32($i49, $i50);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i51 == 1);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb35:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i39 := $i49;
    goto $bb35_dummy;

  $bb32:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    $p48 := $add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i47, 504));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p12 := $p48;
    goto $bb8;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb16;

  $bb16:
    call $i19, $p22, $i23, $i24, $i25, $p28, $i29, $i30, $i31, $i34, $i35, $i36, $i18 := serial8250_find_match_or_unused_loop_$bb16($i19, $p22, $i23, $i24, $i25, $p28, $i29, $i30, $i31, $i34, $i35, $i36, $i18);
    goto $bb16_last;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i19, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i18, 1);
    call {:si_unique_call 271} {:cexpr "i"} boogie_si_record_i32($i34);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i35 := $M.7;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32($i34, $i35);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i36 == 1);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb24:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i34;
    goto $bb24_dummy;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i18);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i25, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i31 := $i18;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb20;

  $bb21:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    $p33 := $add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i32, 504));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p12 := $p33;
    goto $bb8;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $i4, $p6, $i7, $i8, $i9, $i13, $i14, $i15, $i3 := serial8250_find_match_or_unused_loop_$bb4($p0, $i4, $p6, $i7, $i8, $i9, $i13, $i14, $i15, $i3);
    goto $bb4_last;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i4, 504)), $mul.ref(0, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i7 := uart_match_port($p6, $p0);
    call {:si_unique_call 269} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i3, 1);
    call {:si_unique_call 270} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i14 := $M.7;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32($i13, $i14);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i13;
    goto $bb10_dummy;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    $p11 := $add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i10, 504));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p12 := $p11;
    goto $bb8;

  $bb35_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1670;

  $bb24_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1643;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1620;
}



const uart_remove_one_port: ref;

axiom uart_remove_one_port == $sub.ref(0, 260733);

procedure uart_remove_one_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_remove_one_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 1} true;
    call {:si_unique_call 273} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 274} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial8250_init_fixed_type_port: ref;

axiom serial8250_init_fixed_type_port == $sub.ref(0, 261765);

procedure serial8250_init_fixed_type_port($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_init_fixed_type_port($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} {:cexpr "serial8250_init_fixed_type_port:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(156, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(460, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i28, 24)), $mul.ref(16, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.10, $p30);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $i32);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i18, 24)), $mul.ref(10, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.9, $p20);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(460, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i1);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i8, 24)), $mul.ref(8, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.8, $p10);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(156, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i12);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_io_from_upio: ref;

axiom set_io_from_upio == $sub.ref(0, 262797);

procedure set_io_from_upio($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_io_from_upio($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(488, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, default_serial_dl_read);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, default_serial_dl_write);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(162, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(88, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, io_serial_in);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(96, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, io_serial_out);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(162, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(470, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i20);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(112, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, serial8250_default_handle_irq);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(88, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, mem32_serial_in);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(96, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, mem32_serial_out);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(88, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, mem_serial_in);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(96, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, mem_serial_out);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(88, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, hub6_serial_in);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(96, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, hub6_serial_out);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const uart_add_one_port: ref;

axiom uart_add_one_port == $sub.ref(0, 263829);

procedure uart_add_one_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_add_one_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 1} true;
    call {:si_unique_call 276} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 277} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 264861);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    return;
}



const default_serial_dl_read: ref;

axiom default_serial_dl_read == $sub.ref(0, 265893);

procedure default_serial_dl_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation default_serial_dl_read($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i1 := serial_in($p0, 0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 279} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i2 := serial_in($p0, 1);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 281} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i2, 8);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, $i3);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const default_serial_dl_write: ref;

axiom default_serial_dl_write == $sub.ref(0, 266925);

procedure default_serial_dl_write($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation default_serial_dl_write($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} {:cexpr "default_serial_dl_write:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 255);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} serial_out($p0, 0, $i2);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i3 := $ashr.i32($i1, 8);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 255);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} serial_out($p0, 1, $i4);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    return;
}



const hub6_serial_in: ref;

axiom hub6_serial_in == $sub.ref(0, 267957);

procedure hub6_serial_in($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation hub6_serial_in($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} {:cexpr "hub6_serial_in:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(161, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, $i4);
    call {:si_unique_call 286} {:cexpr "offset"} boogie_si_record_i32($i5);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(296, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i5);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i8, $i10);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 255);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} outb($i13, $i16);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i21 := inb($i20);
    call {:si_unique_call 289} {:cexpr "tmp"} boogie_si_record_i8($i21);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;
}



const hub6_serial_out: ref;

axiom hub6_serial_out == $sub.ref(0, 268989);

procedure hub6_serial_out($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation hub6_serial_out($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} {:cexpr "hub6_serial_out:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 291} {:cexpr "hub6_serial_out:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(161, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i1, $i5);
    call {:si_unique_call 292} {:cexpr "offset"} boogie_si_record_i32($i6);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(296, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i6);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i9, $i11);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 255);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} outb($i14, $i17);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i2);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} outb($i20, $i24);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    return;
}



const mem_serial_in: ref;

axiom mem_serial_in == $sub.ref(0, 270021);

procedure mem_serial_in($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mem_serial_in($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} {:cexpr "mem_serial_in:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(161, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, $i4);
    call {:si_unique_call 296} {:cexpr "offset"} boogie_si_record_i32($i5);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i10 := readb($p9);
    call {:si_unique_call 298} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const mem_serial_out: ref;

axiom mem_serial_out == $sub.ref(0, 271053);

procedure mem_serial_out($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation mem_serial_out($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} {:cexpr "mem_serial_out:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 300} {:cexpr "mem_serial_out:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(161, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i1, $i5);
    call {:si_unique_call 301} {:cexpr "offset"} boogie_si_record_i32($i6);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i2);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i6);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} writeb($i9, $p13);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    return;
}



const mem32_serial_in: ref;

axiom mem32_serial_in == $sub.ref(0, 272085);

procedure mem32_serial_in($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation mem32_serial_in($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} {:cexpr "mem32_serial_in:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(161, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, $i4);
    call {:si_unique_call 304} {:cexpr "offset"} boogie_si_record_i32($i5);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i10 := readl($p9);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const mem32_serial_out: ref;

axiom mem32_serial_out == $sub.ref(0, 273117);

procedure mem32_serial_out($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation mem32_serial_out($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "mem32_serial_out:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 308} {:cexpr "mem32_serial_out:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(161, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i1, $i5);
    call {:si_unique_call 309} {:cexpr "offset"} boogie_si_record_i32($i6);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} writel($i2, $p10);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    return;
}



const io_serial_in: ref;

axiom io_serial_in == $sub.ref(0, 274149);

procedure io_serial_in($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation io_serial_in($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} {:cexpr "io_serial_in:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(161, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, $i4);
    call {:si_unique_call 312} {:cexpr "offset"} boogie_si_record_i32($i5);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i5);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i10 := inb($i9);
    call {:si_unique_call 314} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const io_serial_out: ref;

axiom io_serial_out == $sub.ref(0, 275181);

procedure io_serial_out($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation io_serial_out($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "io_serial_out:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 316} {:cexpr "io_serial_out:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(161, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i1, $i5);
    call {:si_unique_call 317} {:cexpr "offset"} boogie_si_record_i32($i6);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i2);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i6);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} outb($i9, $i13);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_default_handle_irq: ref;

axiom serial8250_default_handle_irq == $sub.ref(0, 276213);

procedure serial8250_default_handle_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_default_handle_irq($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i1 := serial_port_in($p0, 2);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 320} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i2 := serial8250_handle_irq($p0, $i1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 322} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 277245);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 324} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 325} devirtbounce.12(0, $i0, $i1);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    return;
}



const inb: ref;

axiom inb == $sub.ref(0, 278277);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 327} $i1 := devirtbounce.13(0, $i0);
    call {:si_unique_call 328} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 279309);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 330} devirtbounce.14(0, $i0, $p2);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 280341);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 331} $i2 := devirtbounce.15(0, $p1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 332} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const writeb: ref;

axiom writeb == $sub.ref(0, 281373);

procedure writeb($i0: i8, $p1: ref);
  free requires assertsPassed;



implementation writeb($i0: i8, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} {:cexpr "writeb:arg:val"} boogie_si_record_i8($i0);
    call {:si_unique_call 334} devirtbounce.16(0, $i0, $p1);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    return;
}



const readb: ref;

axiom readb == $sub.ref(0, 282405);

procedure readb($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation readb($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i1 := devirtbounce.17(0, $p0);
    call {:si_unique_call 336} {:cexpr "ret"} boogie_si_record_i8($i1);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const uart_match_port: ref;

axiom uart_match_port == $sub.ref(0, 283437);

procedure uart_match_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_match_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 1} true;
    call {:si_unique_call 337} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 338} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial8250_unregister_port: ref;

axiom serial8250_unregister_port == $sub.ref(0, 284469);

procedure serial8250_unregister_port($i0: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_unregister_port($i0: i32)
{
  var $i1: i64;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i16;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "serial8250_unregister_port:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} mutex_lock_nested(serial_mutex, 0);
    $p3 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_18 := uart_remove_one_port(serial8250_reg, $p3);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p5 := $M.11;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    $p32 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} mutex_unlock(serial_mutex);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    $p9 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $sub.i32(0, 268435457));
    $p13 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i11);
    $p15 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p16 := $M.11;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1472)), $mul.ref(16, 1));
    $p19 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p17);
    $p21 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i23, 24)), $mul.ref(16, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.10, $p25);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    $p28 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(456, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i27);
    $p29 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} vslice_dummy_var_19 := uart_add_one_port(serial8250_reg, $p29);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial8250_suspend_port: ref;

axiom serial8250_suspend_port == $sub.ref(0, 285501);

procedure serial8250_suspend_port($i0: i32);
  free requires assertsPassed;



implementation serial8250_suspend_port($i0: i32)
{
  var $i1: i64;
  var $p3: ref;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} {:cexpr "serial8250_suspend_port:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_20 := uart_suspend_port(serial8250_reg, $p3);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    return;
}



const uart_suspend_port: ref;

axiom uart_suspend_port == $sub.ref(0, 286533);

procedure uart_suspend_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_suspend_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 1} true;
    call {:si_unique_call 346} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 347} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial8250_resume_port: ref;

axiom serial8250_resume_port == $sub.ref(0, 287565);

procedure serial8250_resume_port($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_resume_port($i0: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "serial8250_resume_port:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    $p2 := $add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504));
    $p3 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1));
    $p4 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(456, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 8);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} vslice_dummy_var_22 := uart_resume_port(serial8250_reg, $p3);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} serial_port_out($p3, 3, 224);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_21 := ns16550a_goto_highspeed($p2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} serial_port_out($p3, 3, 0);
    $p10 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i1, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 14745600);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ns16550a_goto_highspeed: ref;

axiom ns16550a_goto_highspeed == $sub.ref(0, 288597);

procedure ns16550a_goto_highspeed($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation ns16550a_goto_highspeed($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i1 := serial_in($p0, 4);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 354} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    call {:si_unique_call 355} {:cexpr "status"} boogie_si_record_i8($i2);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 48);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 16);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 79);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 356} {:cexpr "status"} boogie_si_record_i8($i9);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 16);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 357} {:cexpr "status"} boogie_si_record_i8($i12);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} serial_out($p0, 4, $i13);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const uart_resume_port: ref;

axiom uart_resume_port == $sub.ref(0, 289629);

procedure uart_resume_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_resume_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 1} true;
    call {:si_unique_call 359} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 360} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial8250_tx_dma: ref;

axiom serial8250_tx_dma == $sub.ref(0, 290661);

procedure serial8250_tx_dma($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.2, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.6, $CurrAddr, $M.45, $M.46, $M.38, $M.39, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation serial8250_tx_dma($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i8;
  var $i48: i8;
  var $p49: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i8 := uart_tx_stopped($p7);
    call {:si_unique_call 362} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(192, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(8, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i16, $i18);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(4096, $i22);
    call {:si_unique_call 363} {:cexpr "end"} boogie_si_record_i32($i23);
    $p24 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(8, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, $i23);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 4095);
    call {:si_unique_call 364} {:cexpr "n"} boogie_si_record_i32($i27);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, $i23);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i29 := $i23;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, $i30);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(152, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    $p36 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i35, $i38);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p42 := dmaengine_prep_slave_single($p33, $i39, $i41, 1, 3);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i46, $sub.i8(0, 2));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i48 := $or.i8($i47, 1);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i48);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p42, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, __dma_tx_complete);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p42, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p0);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i52 := dmaengine_submit($p42);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(164, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(152, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} dma_sync_single_for_device($p59, $i61, 4096, 1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} dma_async_issue_pending($p63);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 16);
    goto $bb8;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const __dma_tx_complete: ref;

axiom __dma_tx_complete == $sub.ref(0, 291693);

procedure __dma_tx_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.6, $CurrAddr, $M.45, $M.46, $M.38, $M.39, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation __dma_tx_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i37: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p60: ref;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 200)), $mul.ref(152, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} dma_sync_single_for_cpu($p13, $i15, 4096, 1);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} ldv_spin_lock();
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 2));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i18);
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i20, $i23);
    $p25 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    $p26 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 4095);
    $p29 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i33, $i36);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i37);
    $p41 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(8, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    $p43 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i42, $i44);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 4095);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i48 := $ule.i64($i47, 255);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p50 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(8, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    $p52 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i51, $i53);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} spin_unlock_irqrestore($p60, $u0);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i54 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i56 := uart_tx_stopped($p55);
    call {:si_unique_call 373} {:cexpr "tmp"} boogie_si_record_i32($i56);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i57 == 1;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_23 := serial8250_tx_dma($p1);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i48 == 1;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} uart_write_wakeup($p49);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial8250_request_dma: ref;

axiom serial8250_request_dma == $sub.ref(0, 292725);

procedure serial8250_request_dma($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.19;



implementation serial8250_request_dma($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p118: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p128: ref;
  var $p132: ref;
  var $p136: ref;
  var $p139: ref;
  var $p142: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i24;
  var $i158: i24;
  var $i159: i24;
  var $p160: ref;
  var $p161: ref;
  var $i162: i8;
  var $i163: i64;
  var $i164: i64;
  var $i165: i64;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i37: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p2 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 2);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(24, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i12);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 1);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(80, 1)), $mul.ref(28, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 1);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(80, 1)), $mul.ref(16, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, $i21);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} __dma_cap_zero($p1);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} __dma_cap_set(9, $p1);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p31 := __dma_request_slave_channel_compat($p1, $p25, $p27, $p30, .str);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p31);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(32, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_24 := dmaengine_slave_config($p39, $p40);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(16, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p49 := __dma_request_slave_channel_compat($p1, $p43, $p45, $p48, .str.1);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p49);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(80, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_25 := dmaengine_slave_config($p58, $p59);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p74 := dma_alloc_attrs($p70, $i72, $p73, 208, $0.ref);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p74);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(0, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i92 := dma_map_single_attrs($p85, $p91, 4096, 1, $0.ref);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(152, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p93, $i92);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(152, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i102 := dma_mapping_error($p99, $i101);
    call {:si_unique_call 391} {:cexpr "tmp"} boogie_si_record_i32($i102);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p119, 0);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p121, $sub.i32(0, 559067475));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p123, $sub.i32(0, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p125, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p128, $0.ref);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p132, $0.ref);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p136, $0.ref);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p139, .str.2);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p142, 0);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p145, 0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p146, 1250);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p147, 10);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p148, 0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p149, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p150, 0);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p151, .str.3);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p152, .str.4);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p153, .str.5);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p154, .str.6);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i157 := $load.i24($M.17, $p156);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i158 := $and.i24($i157, $sub.i24(0, 262144));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i159 := $or.i24($i158, 267);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $M.17 := $store.i24($M.17, $p156, $i159);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p160, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.18, $p161);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i64($i162);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i164 := $and.i64($i163, 1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i165 := ldv__builtin_expect($i164, 0);
    call {:si_unique_call 394} {:cexpr "tmp___0"} boogie_si_record_i64($i165);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb18:
    assume $i166 == 1;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i167 := ___ratelimit($p2, .str.4);
    call {:si_unique_call 396} {:cexpr "tmp___1"} boogie_si_record_i32($i167);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i168 == 1;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} vslice_dummy_var_26 := __dynamic_dev_dbg.ref.ref.ref($p3, $p171, .str.6);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume $i103 == 1;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.0, $p110);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} dma_free_attrs($p109, $i111, $p113, $i115, $0.ref);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} dma_release_channel($p174);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} dma_release_channel($p176);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 12);
    goto $bb3;

  $bb11:
    assume $i79 == 1;
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i63 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, 4096);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i54 == 1;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} dma_release_channel($p56);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i36 == 1;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 19);
    goto $bb3;
}



const __dma_cap_zero: ref;

axiom __dma_cap_zero == $sub.ref(0, 293757);

procedure __dma_cap_zero($p0: ref);
  free requires assertsPassed;
  modifies $M.19;



implementation __dma_cap_zero($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} bitmap_zero($p2, 12);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    return;
}



const __dma_cap_set: ref;

axiom __dma_cap_set == $sub.ref(0, 294789);

procedure __dma_cap_set($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation __dma_cap_set($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} {:cexpr "__dma_cap_set:arg:tx_type"} boogie_si_record_i32($i0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} set_bit($i2, $p4);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    return;
}



const __dma_request_slave_channel_compat: ref;

axiom __dma_request_slave_channel_compat == $sub.ref(0, 295821);

procedure __dma_request_slave_channel_compat($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __dma_request_slave_channel_compat($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p5 := dma_request_slave_channel($p3, $p4);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p9 := __dma_request_channel($p0, $p1, $p2);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p8 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb3;
}



const dmaengine_slave_config: ref;

axiom dmaengine_slave_config == $sub.ref(0, 296853);

procedure dmaengine_slave_config($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dmaengine_slave_config($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i3 := dmaengine_device_control($p0, 3, $i2);
    call {:si_unique_call 404} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dma_release_channel: ref;

axiom dma_release_channel == $sub.ref(0, 297885);

procedure dma_release_channel($p0: ref);
  free requires assertsPassed;



implementation dma_release_channel($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 298917);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 406} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p5 := get_dma_ops($p0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 408} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 410} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 412} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 413} $p20 := devirtbounce.18($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 299949);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 416} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $p5 := get_dma_ops($p0);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 420} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 422} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i14 := __phys_addr($i13);
    call {:si_unique_call 425} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 426} $i21 := devirtbounce.19($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 427} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i23 := __phys_addr($i22);
    call {:si_unique_call 429} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 423} devirtbounce.6(0, .str.83, 19, 12);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 300981);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p2 := get_dma_ops($p0);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 434} $i9 := devirtbounce.20($p8, $p0, $i1);
    call {:si_unique_call 435} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 302013);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 437} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p5 := get_dma_ops($p0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i6 := arch_local_save_flags();
    call {:si_unique_call 440} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 442} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 443} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 445} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vslice_dummy_var_27 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 449} devirtbounce.21($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} warn_slowpath_null(.str.84, 166);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ___ratelimit: ref;

axiom ___ratelimit == $sub.ref(0, 303045);

procedure ___ratelimit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ___ratelimit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 450} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 451} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 304077);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 452} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 453} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 305109);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 455} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 457} $i7 := devirtbounce.22(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 458} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 456} devirtbounce.6(0, .str.85, 804, 12);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 306141);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 307173);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 308205);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 462} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 309237);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 310269);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 311301);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 465} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 1} true;
    call {:si_unique_call 466} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 467} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 312333);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 469} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 470} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 471} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 472} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    return;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 313365);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 314397);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 475} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 477} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 476} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 315429);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 479} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 316461);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 481} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 482} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const dma_request_slave_channel: ref;

axiom dma_request_slave_channel == $sub.ref(0, 317493);

procedure dma_request_slave_channel($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_request_slave_channel($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p2 := external_alloc();
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __dma_request_channel: ref;

axiom __dma_request_channel == $sub.ref(0, 318525);

procedure __dma_request_channel($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __dma_request_channel($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p3 := external_alloc();
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 319557);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 1} true;
    call {:si_unique_call 485} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 486} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 320589);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 488} devirtbounce.23(0, $p1, $i0, $p1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    return;
}



const bitmap_zero: ref;

axiom bitmap_zero == $sub.ref(0, 321621);

procedure bitmap_zero($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.19;



implementation bitmap_zero($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} {:cexpr "bitmap_zero:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 63);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($i3, 64);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 8);
    call {:si_unique_call 490} {:cexpr "len"} boogie_si_record_i32($i6);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.19;
    call {:si_unique_call 491} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p7, 0, $i8, $zext.i32.i64(1), 0 == 1);
    $M.19 := cmdloc_dummy_var_1;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 322653);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const serial8250_release_dma: ref;

axiom serial8250_release_dma == $sub.ref(0, 323685);

procedure serial8250_release_dma($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr;



implementation serial8250_release_dma($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i8;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p54: ref;
  var $p58: ref;
  var $p62: ref;
  var $p65: ref;
  var $p68: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $p96: ref;
  var $p97: ref;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p1 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_28 := dmaengine_terminate_all($p8);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(144, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} dma_free_attrs($p15, $i17, $p19, $i21, $0.ref);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} dma_release_channel($p23);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_29 := dmaengine_terminate_all($p26);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 200)), $mul.ref(64, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(152, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} dma_unmap_single_attrs($p33, $i35, 4096, 1, $0.ref);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} dma_release_channel($p37);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(136, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i41 := $and.i8($i40, $sub.i8(0, 2));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i41);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p45, 0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p47, $sub.i32(0, 559067475));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p49, $sub.i32(0, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p51, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p54, $0.ref);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p58, $0.ref);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p62, $0.ref);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p65, .str.2);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p68, 0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p71, 0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p72, 1250);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p73, 10);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p74, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p75, 0);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p76, 0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p77, .str.3);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p78, .str.7);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p79, .str.5);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p80, .str.8);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.17, $p82);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 300);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.17 := $store.i24($M.17, $p82, $i85);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p86, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.18, $p87);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 501} {:cexpr "tmp"} boogie_si_record_i64($i91);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i92 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i93 := ___ratelimit($p1, .str.7);
    call {:si_unique_call 503} {:cexpr "tmp___0"} boogie_si_record_i32($i93);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i94 == 1;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_30 := __dynamic_dev_dbg.ref.ref.ref($p2, $p97, .str.8);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 324717);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 506} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 507} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p5 := get_dma_ops($p0);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 510} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 512} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 514} devirtbounce.24($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 513} devirtbounce.6(0, .str.83, 36, 12);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 325749);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 517} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 518} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 519} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_tx_empty: ref;

axiom serial8250_tx_empty == $sub.ref(0, 326781);

procedure serial8250_tx_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_tx_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} ldv_spin_lock();
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i2 := serial_port_in($p0, 5);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 522} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i2);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 30);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, $i8);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} spin_unlock_irqrestore($p12, $u0);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i2, 96);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 96);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const serial8250_get_mctrl: ref;

axiom serial8250_get_mctrl == $sub.ref(0, 327813);

procedure serial8250_get_mctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_get_mctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i2 := serial8250_modem_status($p1);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 525} {:cexpr "status"} boogie_si_record_i32($i2);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 128);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i2, 64);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i2, 32);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i10;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i2, 16);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i14;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i14, 32);
    call {:si_unique_call 529} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb12;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, 256);
    call {:si_unique_call 528} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb9;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i6, 128);
    call {:si_unique_call 527} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i5 := $or.i32(0, 64);
    call {:si_unique_call 526} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const serial8250_start_tx: ref;

axiom serial8250_start_tx == $sub.ref(0, 328845);

procedure serial8250_start_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.2, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.6, $M.45, $M.46, $CurrAddr, $M.38, $M.39, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation serial8250_start_tx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 10);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 2);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb19;

  $bb20:
    assume $i47 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 253);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i52);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} serial_icr_write($p1, 0, $i56);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 2);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} serial_port_out($p0, 1, $i21);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 2);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i27 := serial_in($p1, 5);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 534} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    call {:si_unique_call 535} {:cexpr "lsr"} boogie_si_record_i8($i28);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i31 := $sext.i8.i32($i30);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i32 := $sext.i8.i32($i28);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 30);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i31, $i33);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i28);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 64);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} serial8250_tx_chars($p1);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i6 := serial8250_tx_dma($p1);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 531} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const serial8250_stop_rx: ref;

axiom serial8250_stop_rx == $sub.ref(0, 329877);

procedure serial8250_stop_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_stop_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 251);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i6);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(164, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $sub.i32(0, 2));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(164, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i11);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} serial_port_out($p0, 1, $i16);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_enable_ms: ref;

axiom serial8250_enable_ms == $sub.ref(0, 330909);

procedure serial8250_enable_ms($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_enable_ms($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 4);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 8);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i11);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} serial_port_out($p0, 1, $i15);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial8250_break_ctl: ref;

axiom serial8250_break_ctl == $sub.ref(0, 331941);

procedure serial8250_break_ctl($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0;



implementation serial8250_break_ctl($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} {:cexpr "serial8250_break_ctl:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} ldv_spin_lock();
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(466, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 191);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(466, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(466, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} serial_port_out($p0, 3, $i18);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} spin_unlock_irqrestore($p19, $u0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(466, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 64);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(466, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i8);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial8250_startup: ref;

axiom serial8250_startup == $sub.ref(0, 332973);

procedure serial8250_startup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.2, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.45, $M.46, $M.38, $M.39, $CurrAddr, $M.4, $M.5, $M.19, $M.6, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation serial8250_startup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p78: ref;
  var $p82: ref;
  var $p86: ref;
  var $p89: ref;
  var $p92: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p121: ref;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i8;
  var $i129: i32;
  var $i130: i8;
  var $p131: ref;
  var $i132: i64;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $i136: i32;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i16;
  var $i151: i32;
  var $i152: i32;
  var $i153: i16;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i24;
  var $i162: i24;
  var $i163: i24;
  var $p164: ref;
  var $p165: ref;
  var $i166: i8;
  var $i167: i64;
  var $i168: i64;
  var $i169: i64;
  var $i170: i1;
  var $i171: i32;
  var $p173: ref;
  var $i174: i16;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $p179: ref;
  var $i180: i64;
  var $p182: ref;
  var $i183: i32;
  var $p184: ref;
  var $i185: i64;
  var $i186: i64;
  var $i187: i64;
  var $i188: i64;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $i193: i64;
  var $p195: ref;
  var $i196: i32;
  var $p197: ref;
  var $i198: i64;
  var $i199: i64;
  var $i200: i64;
  var $i202: i32;
  var $i203: i1;
  var $p205: ref;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $p210: ref;
  var $i211: i32;
  var $i212: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $p218: ref;
  var $p219: ref;
  var $i220: i32;
  var $i221: i1;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $p227: ref;
  var $p228: ref;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $p233: ref;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i8;
  var $i239: i32;
  var $i240: i8;
  var $i241: i32;
  var $i242: i32;
  var $i243: i1;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i248: i16;
  var $i249: i32;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i253: i16;
  var $i254: i32;
  var $i255: i32;
  var $i256: i16;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i24;
  var $i265: i24;
  var $i266: i24;
  var $p267: ref;
  var $p268: ref;
  var $i269: i8;
  var $i270: i64;
  var $i271: i64;
  var $i272: i64;
  var $i273: i1;
  var $i274: i32;
  var $p276: ref;
  var $i277: i16;
  var $i278: i32;
  var $i279: i32;
  var $i280: i16;
  var $p281: ref;
  var $p282: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i64;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $p297: ref;
  var $p298: ref;
  var $p300: ref;
  var $p302: ref;
  var $p304: ref;
  var $p307: ref;
  var $p311: ref;
  var $p315: ref;
  var $p318: ref;
  var $p321: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $i330: i32;
  var $i331: i1;
  var $i332: i32;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $i337: i8;
  var $i338: i32;
  var $p339: ref;
  var $i340: i32;
  var $i341: i32;
  var $i342: i1;
  var $p343: ref;
  var $i344: i64;
  var $i345: i32;
  var $i346: i32;
  var $i347: i32;
  var $i9: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $p1 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $p4 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 23);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(156, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(460, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(467, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(162, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(470, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i47, $i50);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 10);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} enable_rsa($p5);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} serial8250_clear_fifos($p5);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} vslice_dummy_var_31 := serial_port_in($p0, 5);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_32 := serial_port_in($p0, 0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} vslice_dummy_var_33 := serial_port_in($p0, 2);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_34 := serial_port_in($p0, 6);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 16384);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 12);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(136, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i174 := $load.i16($M.0, $p173);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i175 := $zext.i16.i32($i174);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i175, 8);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(136, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i192 == 1);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i202 := serial_link_irq_chain($p5);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 608} {:cexpr "retval"} boogie_si_record_i32($i202);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i203 := $ne.i32($i202, 0);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} serial_port_out($p0, 3, 3);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} ldv_spin_lock();
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.0, $p205);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i207 := $and.i32($i206, 2);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i208 == 1);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(136, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p219);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(252, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.0, $p228);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} serial8250_set_mctrl($p0, $i229);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i230 := $M.26;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb71, $bb73;

  $bb73:
    assume !($i231 == 1);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i235 := $and.i32($i234, 32768);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i236 := $ne.i32($i235, 0);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} serial_port_out($p0, 1, 2);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i237 := serial_port_in($p0, 5);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 619} {:cexpr "tmp___9"} boogie_si_record_i32($i237);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i238 := $trunc.i32.i8($i237);
    call {:si_unique_call 620} {:cexpr "lsr"} boogie_si_record_i8($i238);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i239 := serial_port_in($p0, 2);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 622} {:cexpr "tmp___10"} boogie_si_record_i32($i239);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i240 := $trunc.i32.i8($i239);
    call {:si_unique_call 623} {:cexpr "iir"} boogie_si_record_i8($i240);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} serial_port_out($p0, 1, 0);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i241 := $zext.i8.i32($i238);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i242 := $and.i32($i241, 64);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i243 := $ne.i32($i242, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i243 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i277 := $load.i16($M.0, $p276);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i278 := $zext.i16.i32($i277);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i279 := $and.i32($i278, 65533);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i280 := $trunc.i32.i16($i279);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p281, $i280);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} spin_unlock_irqrestore($p282, $u0);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_39 := serial_port_in($p0, 5);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_40 := serial_port_in($p0, 0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} vslice_dummy_var_41 := serial_port_in($p0, 2);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_42 := serial_port_in($p0, 6);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p287, 0);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(472, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p288, 0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.0, $p289);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p290);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i292 := $ne.i64($i291, 0);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i292} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p335, 5);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i337 := $load.i8($M.0, $p336);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i338 := $zext.i8.i32($i337);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} serial_port_out($p0, 1, $i338);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i340 := $load.i32($M.0, $p339);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i341 := $and.i32($i340, 2);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i342 := $ne.i32($i341, 0);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb99:
    assume $i342 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i344 := $load.i64($M.0, $p343);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i345 := $trunc.i64.i32($i344);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i346 := $and.i32($i345, 4064);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i347 := $or.i32($i346, 31);
    call {:si_unique_call 638} {:cexpr "icp"} boogie_si_record_i32($i347);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} outb_p($sub.i8(0, 128), $i347);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_45 := inb_p($i347);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb90:
    assume $i292 == 1;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i293 := serial8250_request_dma($p5);
    call {:si_unique_call 631} {:cexpr "retval"} boogie_si_record_i32($i293);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb92:
    assume $i294 == 1;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p298 := $bitcast.ref.ref($p297);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p298, 0);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p300, $sub.i32(0, 559067475));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p302, $sub.i32(0, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p304, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p307, $0.ref);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p311, $0.ref);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p315, $0.ref);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p318, .str.2);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p321, 0);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p324, 0);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p325, 1250);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p326, 10);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p327, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p328, 0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p329, 0);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i330 := ___ratelimit($p4, .str.50);
    call {:si_unique_call 633} {:cexpr "tmp___14"} boogie_si_record_i32($i330);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i331 := $ne.i32($i330, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p334, $0.ref);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb94:
    assume $i331 == 1;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i332 := serial_index($p0);
    call {:si_unique_call 635} {:cexpr "tmp___13"} boogie_si_record_i32($i332);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_44 := printk.ref.i32(.str.55, $i332);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i243 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i240);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i245 := $and.i32($i244, 1);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb80;

  $bb81:
    assume $i246 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i248 := $load.i16($M.0, $p247);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i249 := $zext.i16.i32($i248);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i250 := $and.i32($i249, 2);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb83:
    assume $i251 == 1;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i253 := $load.i16($M.0, $p252);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i254 := $zext.i16.i32($i253);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i255 := $or.i32($i254, 2);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i256 := $trunc.i32.i16($i255);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p257, $i256);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p258, .str.3);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p259, .str.50);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p260, .str.52);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p261, .str.54);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p262);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i264 := $load.i24($M.24, $p263);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i265 := $and.i24($i264, $sub.i24(0, 262144));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i266 := $or.i24($i265, 2200);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $M.24 := $store.i24($M.24, $p263, $i266);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p267, 0);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.25, $p268);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i64($i269);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i271 := $and.i64($i270, 1);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i272 := ldv__builtin_expect($i271, 0);
    call {:si_unique_call 626} {:cexpr "tmp___12"} boogie_si_record_i64($i272);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i273 := $ne.i64($i272, 0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume $i273 == 1;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i274 := serial_index($p0);
    call {:si_unique_call 628} {:cexpr "tmp___11"} boogie_si_record_i32($i274);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_43 := __dynamic_pr_debug.ref.ref.i32($p3, .str.54, $i274);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i236 == 1;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i231 == 1;
    goto $bb72;

  $bb68:
    assume $i221 == 1;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(252, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i225 := $or.i32($i224, 16384);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(252, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p227, $i225);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb62:
    assume $i208 == 1;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.0, $p210);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i212 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(252, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i216 := $or.i32($i215, 8192);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(252, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, $i216);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb59:
    assume $i203 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i9 := $i202;
    goto $bb3;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i192 == 1;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p5);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(40, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p195, $i193);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i196 := uart_poll_timeout($p0);
    call {:si_unique_call 605} {:cexpr "tmp___8"} boogie_si_record_i32($i196);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(312, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i198 := $sext.i32.i64($i196);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i199 := $load.i64($M.0, jiffies);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i200 := $add.i64($i198, $i199);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_38 := ldv_mod_timer_24($p197, $i200);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i177 == 1;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(32, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p179, serial8250_backup_timeout);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p5);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(40, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p182, $i180);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i183 := uart_poll_timeout($p0);
    call {:si_unique_call 602} {:cexpr "tmp___7"} boogie_si_record_i32($i183);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(312, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i185 := $sext.i32.i64($i183);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i186 := $load.i64($M.0, jiffies);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i187 := $add.i64($i185, $i186);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i188 := $add.i64($i187, 50);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_37 := ldv_mod_timer_23($p184, $i188);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb32:
    assume $i119 == 1;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} ldv_spin_lock();
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.0, $p121);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i123 := $and.i64($i122, 128);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} wait_for_xmitr($p5, 32);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} serial_port_out_sync($p0, 1, 2);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} __const_udelay(4295);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i127 := serial_port_in($p0, 2);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 585} {:cexpr "tmp___3"} boogie_si_record_i32($i127);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i8($i127);
    call {:si_unique_call 586} {:cexpr "iir1"} boogie_si_record_i8($i128);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} serial_port_out($p0, 1, 0);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} serial_port_out_sync($p0, 1, 2);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} __const_udelay(4295);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i129 := serial_port_in($p0, 2);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 591} {:cexpr "tmp___4"} boogie_si_record_i32($i129);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i8($i129);
    call {:si_unique_call 592} {:cexpr "iir"} boogie_si_record_i8($i130);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} serial_port_out($p0, 1, 0);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(144, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.0, $p131);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i133 := $and.i64($i132, 128);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} spin_unlock_irqrestore($p137, $u0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i128);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i138, 1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 0);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 67108864);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i150 := $load.i16($M.0, $p149);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i150);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i152 := $or.i32($i151, 8);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i16($i152);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p154, $i153);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p155, .str.3);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p156, .str.50);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p157, .str.52);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p158, .str.53);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i161 := $load.i24($M.24, $p160);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i162 := $and.i24($i161, $sub.i24(0, 262144));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i163 := $or.i24($i162, 2126);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $M.24 := $store.i24($M.24, $p160, $i163);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p164, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.25, $p165);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i64($i166);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i168 := $and.i64($i167, 1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i169 := ldv__builtin_expect($i168, 0);
    call {:si_unique_call 597} {:cexpr "tmp___6"} boogie_si_record_i64($i169);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i170 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i171 := serial_index($p0);
    call {:si_unique_call 599} {:cexpr "tmp___5"} boogie_si_record_i32($i171);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} vslice_dummy_var_36 := __dynamic_pr_debug.ref.ref.i32($p2, .str.53, $i171);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb40:
    assume $i140 == 1;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i130);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i141, 1);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb42;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb44;

  $bb37:
    assume $i134 == 1;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(136, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} enable_irq($i136);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i124 == 1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(136, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} disable_irq_nosync($i126);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29:
    assume $i107 == 1;
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} serial_out($p5, 3, 191);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i108 := serial_in($p5, 1);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 572} {:cexpr "tmp___2"} boogie_si_record_i32($i108);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 127);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i8($i111);
    call {:si_unique_call 573} {:cexpr "fctr"} boogie_si_record_i8($i112);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i113, 48);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} serial_port_out($p0, 1, $i114);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} serial_port_out($p0, 0, 96);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i112);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i116 := $or.i32($i115, 176);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} serial_port_out($p0, 1, $i116);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} serial_port_out($p0, 0, 96);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} serial_port_out($p0, 3, 0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i64 := serial_port_in($p0, 5);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 564} {:cexpr "tmp___1"} boogie_si_record_i32($i64);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 255);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i65 == 1;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p69, 0);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p71, $sub.i32(0, 559067475));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p73, $sub.i32(0, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p75, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p78, $0.ref);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p82, $0.ref);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p86, $0.ref);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p89, .str.2);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p92, 0);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p95, 0);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p96, 1250);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p97, 10);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p98, 0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p99, 0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p100, 0);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i101 := ___ratelimit($p1, .str.50);
    call {:si_unique_call 566} {:cexpr "tmp___0"} boogie_si_record_i32($i101);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb24:
    assume $i102 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i103 := serial_index($p0);
    call {:si_unique_call 568} {:cexpr "tmp"} boogie_si_record_i32($i103);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_35 := printk.ref.i32(.str.51, $i103);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} serial_port_out($p0, 3, 191);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} serial_port_out($p0, 2, 16);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} serial_port_out($p0, 1, 0);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} serial_port_out($p0, 3, 0);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} serial_icr_write($p5, 12, 0);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} serial_port_out($p0, 3, 191);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} serial_port_out($p0, 2, 16);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} serial_port_out($p0, 3, 0);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} set_io_from_upio($p0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i38, 24)), $mul.ref(16, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.10, $p40);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i42);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i26, 24)), $mul.ref(10, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.9, $p28);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(460, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i15, 24)), $mul.ref(8, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.8, $p17);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(156, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const serial8250_shutdown: ref;

axiom serial8250_shutdown == $sub.ref(0, 334005);

procedure serial8250_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.2, $M.45, $M.46, $CurrAddr, $M.4, $M.5, $M.39, $M.6, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.30, $M.32, $M.34, $M.36, $M.38, $M.19, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var vslice_dummy_var_46: i8;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 0);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} serial_port_out($p0, 1, 0);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(480, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} ldv_spin_lock();
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(252, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $sub.i32(0, 16385));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(252, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(252, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} serial8250_set_mctrl($p0, $i26);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} spin_unlock_irqrestore($p27, $u0);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i28 := serial_port_in($p0, 3);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 648} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, $sub.i32(0, 65));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} serial_port_out($p0, 3, $i29);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} serial8250_clear_fifos($p1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} disable_rsa($p1);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_47 := serial_port_in($p0, 0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(312, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_48 := ldv_del_timer_sync_25($p31);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(32, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, serial8250_timeout);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(136, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} serial_unlink_irq_chain($p1);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 4064);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 31);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_46 := inb($i15);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(252, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 8192);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(252, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} serial8250_release_dma($p1);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial8250_set_termios: ref;

axiom serial8250_set_termios == $sub.ref(0, 335037);

procedure serial8250_set_termios($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_set_termios($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(104, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} serial8250_do_set_termios($p0, $p1, $p2);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(104, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 655} devirtbounce.25($p8, $p0, $p1, $p2);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const serial8250_set_ldisc: ref;

axiom serial8250_set_ldisc == $sub.ref(0, 336069);

procedure serial8250_set_ldisc($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_set_ldisc($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} {:cexpr "serial8250_set_ldisc:arg:new"} boogie_si_record_i32($i1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 18);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $sub.i32(0, 2049));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 2048);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} serial8250_enable_ms($p0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial8250_pm: ref;

axiom serial8250_pm == $sub.ref(0, 337101);

procedure serial8250_pm($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation serial8250_pm($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} {:cexpr "serial8250_pm:arg:state"} boogie_si_record_i32($i1);
    call {:si_unique_call 660} {:cexpr "serial8250_pm:arg:oldstate"} boogie_si_record_i32($i2);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(120, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} serial8250_do_pm($p0, $i1, $i2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(120, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 661} devirtbounce($p8, $p0, $i1, $i2);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial8250_type: ref;

axiom serial8250_type == $sub.ref(0, 338133);

procedure serial8250_type($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation serial8250_type($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 663} {:cexpr "type"} boogie_si_record_i32($i2);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 28);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i5, 24)), $mul.ref(0, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.27, $p7);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const serial8250_release_port: ref;

axiom serial8250_release_port == $sub.ref(0, 339165);

procedure serial8250_release_port($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_release_port($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} serial8250_release_std_resource($p1);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 13);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} serial8250_release_rsa_resource($p1);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial8250_request_port: ref;

axiom serial8250_request_port == $sub.ref(0, 340197);

procedure serial8250_request_port($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_request_port($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 23);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i6 := serial8250_request_std_resource($p1);
    call {:si_unique_call 667} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $i6;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 13);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i11 := serial8250_request_rsa_resource($p1);
    call {:si_unique_call 669} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb13;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} serial8250_release_std_resource($p1);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const serial8250_config_port: ref;

axiom serial8250_config_port == $sub.ref(0, 341229);

procedure serial8250_config_port($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_config_port($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "serial8250_config_port:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 23);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i6 := serial8250_request_std_resource($p2);
    call {:si_unique_call 673} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i8 := serial8250_request_rsa_resource($p2);
    call {:si_unique_call 675} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(162, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(470, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i14, $i17);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i1, 1);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 4);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 20);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 13);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 24);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i58 == 1);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 21);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(112, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, exar_handle_irq);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb42;

  $bb38:
    assume $i55 == 1;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} serial8250_release_std_resource($p2);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i50 == 1;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i11, 1);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb34;

  $bb35:
    assume $i52 == 1;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} serial8250_release_rsa_resource($p2);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i45 == 1;
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i1, 2);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb28;

  $bb29:
    assume $i47 == 1;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} autoconfig_irq($p2);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, 4);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p42, $i41);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(162, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb19;

  $bb20:
    assume $i27 == 1;
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 4);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $i32);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} autoconfig($p2, $i11);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} set_io_from_upio($p0);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($sub.i32(0, 1), $sub.i32(0, 2));
    call {:si_unique_call 676} {:cexpr "probeflags"} boogie_si_record_i32($i10);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb10;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial8250_verify_port: ref;

axiom serial8250_verify_port == $sub.ref(0, 342261);

procedure serial8250_verify_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial8250_verify_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, nr_irqs);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i3, $i4);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(28, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, 9599);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 28);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 5);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 9);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb16;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const serial8250_put_poll_char: ref;

axiom serial8250_put_poll_char == $sub.ref(0, 343293);

procedure serial8250_put_poll_char($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_put_poll_char($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} {:cexpr "serial8250_put_poll_char:arg:c"} boogie_si_record_i8($i1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i3 := serial_port_in($p0, 1);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 684} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4096);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} serial_port_out($p0, 1, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} wait_for_xmitr($p2, 96);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} serial_port_out($p0, 0, $i9);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} wait_for_xmitr($p2, 96);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} serial_port_out($p0, 1, $i3);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} serial_port_out($p0, 1, 64);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const serial8250_get_poll_char: ref;

axiom serial8250_get_poll_char == $sub.ref(0, 344325);

procedure serial8250_get_poll_char($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_get_poll_char($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i1 := serial_port_in($p0, 5);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 692} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    call {:si_unique_call 693} {:cexpr "lsr"} boogie_si_record_i8($i2);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i7 := serial_port_in($p0, 0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 695} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i6 := 16711680;
    goto $bb3;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const wait_for_xmitr: ref;

axiom wait_for_xmitr == $sub.ref(0, 345357);

procedure wait_for_xmitr($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation wait_for_xmitr($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i33: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} {:cexpr "wait_for_xmitr:arg:bits"} boogie_si_record_i32($i1);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i2 := serial_in($p0, 5);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 698} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i2);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 30);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, $i8);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i2, $i1);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, $i1);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i13 == 1);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i14 := 10000;
    goto $bb4;

  $bb4:
    call $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26 := wait_for_xmitr_loop_$bb4($p0, $i1, $p3, $p11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    call {:si_unique_call 699} {:cexpr "tmout"} boogie_si_record_i32($i15);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} __const_udelay(4295);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i17 := serial_in($p0, 5);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 702} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p3);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i17);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 30);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i19, $i22);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i24);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i17, $i1);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, $i1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb11_dummy;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 8388608);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i32 := 1000000;
    goto $bb14;

  $bb14:
    call $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $i46, $i32 := wait_for_xmitr_loop_$bb14($p0, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $i46, $i32);
    goto $bb14_last;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i33 := serial_in($p0, 6);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 704} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(472, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i33);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 15);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i36, $i39);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(472, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i41);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i33, 16);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __const_udelay(4295);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} touch_nmi_watchdog();
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i32, 1);
    call {:si_unique_call 707} {:cexpr "tmout___0"} boogie_si_record_i32($i45);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i32 := $i45;
    goto $bb20_dummy;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb20_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 346389);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    return;
}



const touch_nmi_watchdog: ref;

axiom touch_nmi_watchdog == $sub.ref(0, 347421);

procedure touch_nmi_watchdog();
  free requires assertsPassed;



implementation touch_nmi_watchdog()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_request_std_resource: ref;

axiom serial8250_request_std_resource == $sub.ref(0, 348453);

procedure serial8250_request_std_resource($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_request_std_resource($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i1 := serial8250_port_size($p0);
    call {:si_unique_call 710} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i1);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p20 := __request_region(iomem_resource, $i18, $i19, .str.37, 0);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i16 := $i39;
    goto $bb23;

  $bb28:
    assume $i25 == 1;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i1);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $p29 := ioremap_nocache($i27, $i28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p29);
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb33;

  $bb30:
    assume $i34 == 1;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i1);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} __release_region(iomem_resource, $i36, $i37);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 12);
    goto $bb32;

  $bb25:
    assume $i22 == 1;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 16);
    goto $bb23;

  $bb21:
    assume $i15 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb23;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb17;

  $bb15:
    assume $i11 == 1;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i1);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p43 := __request_region(ioport_resource, $i41, $i42, .str.37, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i16 := $i46;
    goto $bb23;

  $bb34:
    assume $i45 == 1;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 16);
    goto $bb36;

  $bb13:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb12;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb19;
}



const serial8250_request_rsa_resource: ref;

axiom serial8250_request_rsa_resource == $sub.ref(0, 349485);

procedure serial8250_request_rsa_resource($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial8250_request_rsa_resource($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($sub.i32(0, 8), $i4);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    call {:si_unique_call 715} {:cexpr "start"} boogie_si_record_i64($i6);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32(8, $i10);
    call {:si_unique_call 716} {:cexpr "size"} boogie_si_record_i32($i11);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, $i6);
    call {:si_unique_call 717} {:cexpr "start"} boogie_si_record_i64($i21);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i11);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p23 := __request_region(ioport_resource, $i21, $i22, .str.48, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 16);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb13;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb12;

  $bb2:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb8;
}



const autoconfig: ref;

axiom autoconfig == $sub.ref(0, 350517);

procedure autoconfig($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation autoconfig($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i72: i32;
  var $i85: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i64;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $p102: ref;
  var $i103: i32;
  var $i104: i16;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i64;
  var $p110: ref;
  var $i111: i16;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $p122: ref;
  var $i123: i16;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $i129: i16;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $p133: ref;
  var $i134: i16;
  var $i135: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} {:cexpr "autoconfig:arg:probeflags"} boogie_si_record_i32($i1);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1));
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} ldv_spin_lock();
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, 0);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 0);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 16384);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i37 := serial_in($p0, 4);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 735} {:cexpr "tmp___2"} boogie_si_record_i32($i37);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    call {:si_unique_call 736} {:cexpr "save_mcr"} boogie_si_record_i8($i38);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i39 := serial_in($p0, 3);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 738} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    call {:si_unique_call 739} {:cexpr "save_lcr"} boogie_si_record_i8($i40);
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 64);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} serial_out($p0, 3, 191);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} serial_out($p0, 2, 0);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} serial_out($p0, 3, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} serial_out($p0, 2, 1);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i54 := serial_in($p0, 2);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 751} {:cexpr "tmp___5"} boogie_si_record_i32($i54);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i55 := $ashr.i32($i54, 6);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    call {:si_unique_call 752} {:cexpr "scratch"} boogie_si_record_i8($i56);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i57, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i57, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 4);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i40);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} serial_out($p0, 3, $i85);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i89 := $zext.i32.i64($i88);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i89, 24)), $mul.ref(8, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.8, $p91);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(156, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.0, $p95);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    call {:si_unique_call 759} {:cexpr "old_capabilities"} boogie_si_record_i32($i97);
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i99);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i100, 24)), $mul.ref(16, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.10, $p102);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i16($i103);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, $i104);
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i108 := $zext.i32.i64($i107);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref($i108, 24)), $mul.ref(10, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i111 := $load.i16($M.9, $p110);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(460, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i112);
    $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 0);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 13);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i38);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} serial_out($p0, 4, $i120);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} serial8250_clear_fifos($p0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_49 := serial_in($p0, 0);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i123 := $load.i16($M.0, $p122);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i124, 4096);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i126 == 1);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} serial_out($p0, 1, 0);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} spin_unlock_irqrestore($p127, $u0);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.0, $p128);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i129);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, $i97);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb71:
    assume $i131 == 1;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i132 := serial_index($p2);
    call {:si_unique_call 768} {:cexpr "tmp___7"} boogie_si_record_i32($i132);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.0, $p133);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i134);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} vslice_dummy_var_50 := printk.ref.i32.i32.i32(.str.49, $i132, $i97, $i135);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume $i126 == 1;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} serial_out($p0, 1, 64);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i119 == 1;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} serial_out($p0, $sub.i32(0, 6), 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb61:
    assume $i116 == 1;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb40:
    assume $i67 == 1;
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i1, 1);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb42;

  $bb43:
    assume $i69 == 1;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i70 := $M.28;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32(0, $i70);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb45:
    assume $i71 == 1;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb48;

  $bb48:
    call $i73, $p74, $i75, $p76, $i77, $i78, $i79, $i80, $i82, $i83, $i84, $i72 := autoconfig_loop_$bb48($p0, $i73, $p74, $i75, $p76, $i77, $i78, $i79, $i80, $i82, $i83, $i84, $i72);
    goto $bb48_last;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref(probe_rsa, $mul.ref(0, 32)), $mul.ref($i73, 8));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.29, $p74);
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i75, $i77);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i72, 1);
    call {:si_unique_call 757} {:cexpr "i"} boogie_si_record_i32($i82);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i83 := $M.28;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i84 := $ult.i32($i82, $i83);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i84 == 1);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb57:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i72 := $i82;
    goto $bb57_dummy;

  $bb50:
    assume $i78 == 1;
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i79 := __enable_rsa($p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 756} {:cexpr "tmp___6"} boogie_si_record_i32($i79);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb52:
    assume $i80 == 1;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 13);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i60 == 1;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} autoconfig_16550a($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i59 == 1;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 3);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb27:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i57, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i61 == 1);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 0);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb34:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i57, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb33;

  $bb36:
    assume $i62 == 1;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} autoconfig_8250($p0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} serial_out($p0, 4, 26);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i45 := serial_in($p0, 6);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 742} {:cexpr "tmp___4"} boogie_si_record_i32($i45);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 240);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    call {:si_unique_call 743} {:cexpr "status1"} boogie_si_record_i8($i49);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i38);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} serial_out($p0, 4, $i50);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i49);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 144);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i52 == 1;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} spin_unlock_irqrestore($p53, $u0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i19 := serial_in($p0, 1);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 722} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 723} {:cexpr "scratch"} boogie_si_record_i8($i20);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} serial_out($p0, 1, 0);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i21 := serial_in($p0, 1);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 726} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 15);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    call {:si_unique_call 727} {:cexpr "scratch2"} boogie_si_record_i8($i25);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} serial_out($p0, 1, 15);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i26 := serial_in($p0, 1);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 730} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 15);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    call {:si_unique_call 731} {:cexpr "scratch3"} boogie_si_record_i8($i30);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i20);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} serial_out($p0, 1, $i31);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i25);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i33 == 1);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i30);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 15);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb13;

  $bb13:
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} spin_unlock_irqrestore($p36, $u0);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb13;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb57_dummy:
    assume false;
    return;

  $bb48_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4007;
}



const autoconfig_irq: ref;

axiom autoconfig_irq == $sub.ref(0, 351549);

procedure autoconfig_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation autoconfig_irq($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $i13: i8;
  var $i14: i32;
  var $i15: i64;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i8;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var vslice_dummy_var_51: i8;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 2);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i13, $i14 := 0, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i15 := probe_irq_on();
    call {:si_unique_call 776} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_52 := probe_irq_off($i15);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i17 := serial_in($p0, 4);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 779} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 780} {:cexpr "save_mcr"} boogie_si_record_i8($i18);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i19 := serial_in($p0, 1);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 782} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 783} {:cexpr "save_ier"} boogie_si_record_i8($i20);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} serial_out($p0, 4, 12);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i21 := probe_irq_on();
    call {:si_unique_call 786} {:cexpr "irqs"} boogie_si_record_i64($i21);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} serial_out($p0, 4, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} __const_udelay(42950);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 2);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} serial_out($p0, 4, 11);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} serial_out($p0, 1, 15);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_53 := serial_in($p0, 5);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} vslice_dummy_var_54 := serial_in($p0, 0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_55 := serial_in($p0, 2);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} vslice_dummy_var_56 := serial_in($p0, 6);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} serial_out($p0, 0, 255);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} __const_udelay(85900);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i30 := probe_irq_off($i21);
    call {:si_unique_call 799} {:cexpr "irq"} boogie_si_record_i32($i30);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i18);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} serial_out($p0, 4, $i31);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i20);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} serial_out($p0, 1, $i32);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 2);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32(0, $i30);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i40 := $i30;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb12;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i13);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} outb_p($i38, $i14);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} serial_out($p0, 4, 3);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4064);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 31);
    call {:si_unique_call 770} {:cexpr "ICP"} boogie_si_record_i32($i10);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i11 := inb_p($i10);
    call {:si_unique_call 772} {:cexpr "save_ICP"} boogie_si_record_i8($i11);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} outb_p($sub.i8(0, 128), $i10);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_51 := inb_p($i10);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i13, $i14 := $i11, $i10;
    goto $bb3;
}



const serial8250_release_rsa_resource: ref;

axiom serial8250_release_rsa_resource == $sub.ref(0, 352581);

procedure serial8250_release_rsa_resource($p0: ref);
  free requires assertsPassed;



implementation serial8250_release_rsa_resource($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($sub.i32(0, 8), $i4);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    call {:si_unique_call 803} {:cexpr "offset"} boogie_si_record_i64($i6);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32(8, $i10);
    call {:si_unique_call 804} {:cexpr "size"} boogie_si_record_i32($i11);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, $i6);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i11);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} __release_region(ioport_resource, $i21, $i22);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb2:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb8;
}



const serial8250_release_std_resource: ref;

axiom serial8250_release_std_resource == $sub.ref(0, 353613);

procedure serial8250_release_std_resource($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_release_std_resource($p0: ref)
{
  var $i1: i32;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i1 := serial8250_port_size($p0);
    call {:si_unique_call 807} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i1);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} __release_region(iomem_resource, $i23, $i24);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb25:
    assume $i18 == 1;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} iounmap($p20);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i15 == 1;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb17;

  $bb15:
    assume $i11 == 1;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} __release_region(ioport_resource, $i26, $i27);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb12;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb19;
}



const exar_handle_irq: ref;

axiom exar_handle_irq == $sub.ref(0, 354645);

procedure exar_handle_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation exar_handle_irq($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i1 := serial_port_in($p0, 2);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 812} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i2 := serial8250_handle_irq($p0, $i1);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 814} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 24);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(260, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 21);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i9 := serial_port_in($p0, 128);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    call {:si_unique_call 816} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i10 := serial_port_in($p0, 129);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 818} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i11 := serial_port_in($p0, 130);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 820} {:cexpr "tmp___2"} boogie_si_record_i32($i11);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i12 := serial_port_in($p0, 131);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 822} {:cexpr "tmp___3"} boogie_si_record_i32($i12);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const serial8250_port_size: ref;

axiom serial8250_port_size == $sub.ref(0, 355677);

procedure serial8250_port_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial8250_port_size($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 4);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i7 := is_omap1_8250($p0);
    call {:si_unique_call 824} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32(8, $i17);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i6 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32(22, $i12);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i6 := 4096;
    goto $bb3;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 356709);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 357741);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 826} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    return;
}



const inb_p: ref;

axiom inb_p == $sub.ref(0, 358773);

procedure inb_p($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb_p($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} {:cexpr "inb_p:arg:port"} boogie_si_record_i32($i0);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i1 := inb($i0);
    call {:si_unique_call 829} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} slow_down_io();
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const outb_p: ref;

axiom outb_p == $sub.ref(0, 359805);

procedure outb_p($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb_p($i0: i8, $i1: i32)
{
  var $i2: i32;
  var $i3: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} {:cexpr "outb_p:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 832} {:cexpr "outb_p:arg:port"} boogie_si_record_i32($i1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} outb($i3, $i1);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} slow_down_io();
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    return;
}



const probe_irq_on: ref;

axiom probe_irq_on == $sub.ref(0, 360837);

procedure probe_irq_on() returns ($r: i64);
  free requires assertsPassed;



implementation probe_irq_on() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 1} true;
    call {:si_unique_call 835} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 836} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const probe_irq_off: ref;

axiom probe_irq_off == $sub.ref(0, 361869);

procedure probe_irq_off($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation probe_irq_off($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 837} {:cexpr "probe_irq_off:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 1} true;
    call {:si_unique_call 838} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 839} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const slow_down_io: ref;

axiom slow_down_io == $sub.ref(0, 362901);

procedure slow_down_io();
  free requires assertsPassed;



implementation slow_down_io()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 320)), $mul.ref(208, 1)));
    call {:si_unique_call 840} devirtbounce.26($p0);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    return;
}



const autoconfig_8250: ref;

axiom autoconfig_8250 == $sub.ref(0, 363933);

procedure autoconfig_8250($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation autoconfig_8250($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i3 := serial_in($p0, 7);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 842} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 843} {:cexpr "scratch"} boogie_si_record_i8($i4);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} serial_out($p0, 7, 165);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i5 := serial_in($p0, 7);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    call {:si_unique_call 846} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 847} {:cexpr "status1"} boogie_si_record_i8($i6);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} serial_out($p0, 7, 90);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i7 := serial_in($p0, 7);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    call {:si_unique_call 850} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    call {:si_unique_call 851} {:cexpr "status2"} boogie_si_record_i8($i8);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i4);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} serial_out($p0, 7, $i9);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i6);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 165);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i8);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 90);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 2);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const autoconfig_16550a: ref;

axiom autoconfig_16550a == $sub.ref(0, 364965);

procedure autoconfig_16550a($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.6, $CurrAddr, $M.38, $M.39, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation autoconfig_16550a($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i16;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i32;
  var $i81: i16;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i32;
  var $i99: i16;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $p111: ref;
  var $p112: ref;
  var $i113: i16;
  var $i114: i32;
  var $i115: i32;
  var $i116: i16;
  var $p117: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i16;
  var $i127: i32;
  var $i128: i32;
  var $i129: i16;
  var $p130: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i1;
  var $p138: ref;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $i142: i32;
  var $i143: i16;
  var $p144: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 4);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 256);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $i7);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 33554432);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} serial_out($p0, 3, 128);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i30 := serial_in($p0, 2);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 858} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} serial_out($p0, 3, 191);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i42 := serial_in($p0, 2);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    call {:si_unique_call 865} {:cexpr "tmp___2"} boogie_si_record_i32($i42);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} serial_out($p0, 3, 0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i46 := serial_in($p0, 4);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    call {:si_unique_call 871} {:cexpr "tmp___4"} boogie_si_record_i32($i46);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    call {:si_unique_call 872} {:cexpr "status1"} boogie_si_record_i8($i47);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} serial_out($p0, 3, 224);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $i48 := serial_in($p0, 2);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    call {:si_unique_call 875} {:cexpr "tmp___5"} boogie_si_record_i32($i48);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    call {:si_unique_call 876} {:cexpr "status2"} boogie_si_record_i8($i49);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i47);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i52 := $xor.i32($i50, $i51);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 16);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} serial_out($p0, 3, 0);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} serial_out($p0, 2, 33);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i83 := serial_in($p0, 2);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    call {:si_unique_call 897} {:cexpr "tmp___9"} boogie_si_record_i32($i83);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i84 := $ashr.i32($i83, 5);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    call {:si_unique_call 898} {:cexpr "status1"} boogie_si_record_i8($i85);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} serial_out($p0, 2, 1);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} serial_out($p0, 3, 128);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} serial_out($p0, 2, 33);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i86 := serial_in($p0, 2);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    call {:si_unique_call 903} {:cexpr "tmp___10"} boogie_si_record_i32($i86);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i87 := $ashr.i32($i86, 5);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    call {:si_unique_call 904} {:cexpr "status2"} boogie_si_record_i8($i88);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} serial_out($p0, 2, 1);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} serial_out($p0, 3, 0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i85);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 6);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i101 := serial_in($p0, 1);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    call {:si_unique_call 908} {:cexpr "tmp___11"} boogie_si_record_i32($i101);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, $sub.i32(0, 65));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} serial_out($p0, 1, $i102);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i103 := serial_in($p0, 1);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    call {:si_unique_call 911} {:cexpr "tmp___13"} boogie_si_record_i32($i103);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 64);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} serial_out($p0, 1, $i101);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i120, 33554432);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 4);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb49:
    assume $i134 == 1;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i135 := size_fifo($p0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    call {:si_unique_call 917} {:cexpr "tmp___14"} boogie_si_record_i32($i135);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 64);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i136 == 1;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, 19);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.0, $p139);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i142 := $or.i32($i141, 2048);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i142);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p144, $i143);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i122 == 1;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, 21);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i126 := $load.i16($M.0, $p125);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i126);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i128 := $or.i32($i127, 3584);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p130, $i129);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb40:
    assume $i105 == 1;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i101, 64);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} serial_out($p0, 1, $i106);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i107 := serial_in($p0, 1);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 914} {:cexpr "tmp___12"} boogie_si_record_i32($i107);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 64);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i109 == 1;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, 15);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.0, $p112);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i115 := $or.i32($i114, 12288);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p117, $i116);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i90 == 1;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i88);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 7);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb36;

  $bb37:
    assume $i92 == 1;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, 8);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.0, $p95);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i97, 3072);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i98);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p100, $i99);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i54 == 1;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} serial_out($p0, 3, 0);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i47);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i56 := $xor.i32($i55, 16);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} serial_out($p0, 4, $i56);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} serial_out($p0, 3, 224);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i57 := serial_in($p0, 2);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 881} {:cexpr "tmp___6"} boogie_si_record_i32($i57);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    call {:si_unique_call 882} {:cexpr "status2"} boogie_si_record_i8($i58);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} serial_out($p0, 3, 0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i47);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} serial_out($p0, 4, $i59);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i58);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i47);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i62 := $xor.i32($i60, $i61);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 16);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i64 == 1;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} serial_out($p0, 3, 224);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i65 := serial_dl_read($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    call {:si_unique_call 887} {:cexpr "tmp___7"} boogie_si_record_i32($i65);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    call {:si_unique_call 888} {:cexpr "quot"} boogie_si_record_i16($i66);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i68 := $shl.i32($i67, 3);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    call {:si_unique_call 889} {:cexpr "quot"} boogie_si_record_i16($i69);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i70 := ns16550a_goto_highspeed($p0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    call {:si_unique_call 891} {:cexpr "tmp___8"} boogie_si_record_i32($i70);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} serial_out($p0, 3, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 14745600);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 14);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i80 := $or.i32($i79, 8);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p82, $i81);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb29:
    assume $i71 == 1;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i69);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} serial_dl_write($p0, $i72);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i44 := broken_efr($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 867} {:cexpr "tmp___3"} boogie_si_record_i32($i44);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} autoconfig_has_efr($p0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} serial_out($p0, 2, 168);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i32 := serial_in($p0, 2);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 861} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} serial_out($p0, 2, 0);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 6);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 1536);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $i40);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i14 := serial_in($p0, 141);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 854} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    call {:si_unique_call 855} {:cexpr "status1"} boogie_si_record_i8($i15);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 130);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i15);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 132);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i15);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 136);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 24);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 3584);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i28);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb4;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const __enable_rsa: ref;

axiom __enable_rsa == $sub.ref(0, 365997);

procedure __enable_rsa($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation __enable_rsa($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i1 := serial_in($p0, $sub.i32(0, 8));
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 919} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    call {:si_unique_call 920} {:cexpr "mode"} boogie_si_record_i8($i2);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    call {:si_unique_call 921} {:cexpr "result"} boogie_si_record_i32($i4);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 14745600);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i2);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 4);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} serial_out($p0, $sub.i32(0, 8), $i7);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i8 := serial_in($p0, $sub.i32(0, 8));
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 924} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 925} {:cexpr "mode"} boogie_si_record_i8($i9);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4);
    call {:si_unique_call 926} {:cexpr "result"} boogie_si_record_i32($i11);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const serial_index: ref;

axiom serial_index == $sub.ref(0, 367029);

procedure serial_index($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial_index($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, $add.ref($add.ref(serial8250_reg, $mul.ref(0, 64)), $mul.ref(28, 1)));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(276, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i1, $i3);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, $sub.i32(0, 64));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 368061);

procedure printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 931} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 932} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const broken_efr: ref;

axiom broken_efr == $sub.ref(0, 369093);

procedure broken_efr($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation broken_efr($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i1 := autoconfig_read_divisor_id($p0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    call {:si_unique_call 934} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 513);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i3 := size_fifo($p0);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    call {:si_unique_call 936} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 16);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const autoconfig_has_efr: ref;

axiom autoconfig_has_efr == $sub.ref(0, 370125);

procedure autoconfig_has_efr($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation autoconfig_has_efr($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, 1536);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i5);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} serial_out($p0, 3, 191);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} serial_out($p0, 2, 16);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} serial_out($p0, 3, 0);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i8 := serial_icr_read($p0, 8);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    call {:si_unique_call 941} {:cexpr "id1"} boogie_si_record_i32($i8);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i9 := serial_icr_read($p0, 9);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    call {:si_unique_call 943} {:cexpr "id2"} boogie_si_record_i32($i9);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $i10 := serial_icr_read($p0, 10);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 945} {:cexpr "id3"} boogie_si_record_i32($i10);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i11 := serial_icr_read($p0, 11);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 947} {:cexpr "rev"} boogie_si_record_i32($i11);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 22);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i27 := autoconfig_read_divisor_id($p0);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 949} {:cexpr "id1"} boogie_si_record_i32($i27);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i32($i27, 8);
    call {:si_unique_call 950} {:cexpr "id2"} boogie_si_record_i32($i28);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 16);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i29 == 1);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i28, 18);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i30 == 1);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i28, 20);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i34 := size_fifo($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 952} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 64);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 7);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 11);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 12);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb22;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i9, 201);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 80);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i10, 82);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 84);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 10);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i10, 82);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i11, 1);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb15;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 1);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(458, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i25);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb7;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const serial_dl_read: ref;

axiom serial_dl_read == $sub.ref(0, 371157);

procedure serial_dl_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation serial_dl_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(488, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    call {:si_unique_call 953} $i3 := devirtbounce.27($p2, $p0);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 954} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const size_fifo: ref;

axiom size_fifo == $sub.ref(0, 372189);

procedure size_fifo($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation size_fifo($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i8;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i13: i32;
  var $i21: i32;
  var $i12: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i1 := serial_in($p0, 3);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    call {:si_unique_call 956} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    call {:si_unique_call 957} {:cexpr "old_lcr"} boogie_si_record_i8($i2);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} serial_out($p0, 3, 0);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i3 := serial_in($p0, 2);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 960} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 961} {:cexpr "old_fcr"} boogie_si_record_i8($i4);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i5 := serial_in($p0, 4);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    call {:si_unique_call 963} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 964} {:cexpr "old_mcr"} boogie_si_record_i8($i6);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} serial_out($p0, 2, 7);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} serial_out($p0, 4, 16);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} serial_out($p0, 3, 128);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i7 := serial_dl_read($p0);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    call {:si_unique_call 969} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    call {:si_unique_call 970} {:cexpr "old_dl"} boogie_si_record_i16($i8);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} serial_dl_write($p0, 1);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} serial_out($p0, 3, 3);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} serial_out($p0, 0, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} serial_out($p0, 0, 1);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} serial_out($p0, 0, 2);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} serial_out($p0, 0, 3);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} serial_out($p0, 0, 4);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} serial_out($p0, 0, 5);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} serial_out($p0, 0, 6);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} serial_out($p0, 0, 7);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} serial_out($p0, 0, 8);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} serial_out($p0, 0, 9);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} serial_out($p0, 0, 10);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} serial_out($p0, 0, 11);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} serial_out($p0, 0, 12);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} serial_out($p0, 0, 13);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} serial_out($p0, 0, 14);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} serial_out($p0, 0, 15);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} serial_out($p0, 0, 16);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} serial_out($p0, 0, 17);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} serial_out($p0, 0, 18);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} serial_out($p0, 0, 19);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} serial_out($p0, 0, 20);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} serial_out($p0, 0, 21);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} serial_out($p0, 0, 22);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} serial_out($p0, 0, 23);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} serial_out($p0, 0, 24);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} serial_out($p0, 0, 25);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} serial_out($p0, 0, 26);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} serial_out($p0, 0, 27);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} serial_out($p0, 0, 28);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} serial_out($p0, 0, 29);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} serial_out($p0, 0, 30);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} serial_out($p0, 0, 31);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} serial_out($p0, 0, 32);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} serial_out($p0, 0, 33);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} serial_out($p0, 0, 34);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} serial_out($p0, 0, 35);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} serial_out($p0, 0, 36);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} serial_out($p0, 0, 37);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} serial_out($p0, 0, 38);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} serial_out($p0, 0, 39);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} serial_out($p0, 0, 40);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} serial_out($p0, 0, 41);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} serial_out($p0, 0, 42);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} serial_out($p0, 0, 43);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} serial_out($p0, 0, 44);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} serial_out($p0, 0, 45);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} serial_out($p0, 0, 46);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} serial_out($p0, 0, 47);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} serial_out($p0, 0, 48);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} serial_out($p0, 0, 49);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} serial_out($p0, 0, 50);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} serial_out($p0, 0, 51);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} serial_out($p0, 0, 52);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} serial_out($p0, 0, 53);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} serial_out($p0, 0, 54);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} serial_out($p0, 0, 55);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} serial_out($p0, 0, 56);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} serial_out($p0, 0, 57);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} serial_out($p0, 0, 58);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} serial_out($p0, 0, 59);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} serial_out($p0, 0, 60);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} serial_out($p0, 0, 61);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} serial_out($p0, 0, 62);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} serial_out($p0, 0, 63);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} serial_out($p0, 0, 64);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} serial_out($p0, 0, 65);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} serial_out($p0, 0, 66);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} serial_out($p0, 0, 67);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} serial_out($p0, 0, 68);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} serial_out($p0, 0, 69);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} serial_out($p0, 0, 70);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} serial_out($p0, 0, 71);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} serial_out($p0, 0, 72);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} serial_out($p0, 0, 73);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} serial_out($p0, 0, 74);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} serial_out($p0, 0, 75);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} serial_out($p0, 0, 76);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} serial_out($p0, 0, 77);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} serial_out($p0, 0, 78);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} serial_out($p0, 0, 79);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} serial_out($p0, 0, 80);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} serial_out($p0, 0, 81);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} serial_out($p0, 0, 82);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} serial_out($p0, 0, 83);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} serial_out($p0, 0, 84);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} serial_out($p0, 0, 85);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} serial_out($p0, 0, 86);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} serial_out($p0, 0, 87);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} serial_out($p0, 0, 88);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} serial_out($p0, 0, 89);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} serial_out($p0, 0, 90);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} serial_out($p0, 0, 91);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} serial_out($p0, 0, 92);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} serial_out($p0, 0, 93);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} serial_out($p0, 0, 94);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} serial_out($p0, 0, 95);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} serial_out($p0, 0, 96);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} serial_out($p0, 0, 97);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} serial_out($p0, 0, 98);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} serial_out($p0, 0, 99);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} serial_out($p0, 0, 100);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} serial_out($p0, 0, 101);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} serial_out($p0, 0, 102);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} serial_out($p0, 0, 103);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} serial_out($p0, 0, 104);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} serial_out($p0, 0, 105);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} serial_out($p0, 0, 106);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} serial_out($p0, 0, 107);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} serial_out($p0, 0, 108);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} serial_out($p0, 0, 109);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} serial_out($p0, 0, 110);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} serial_out($p0, 0, 111);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} serial_out($p0, 0, 112);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} serial_out($p0, 0, 113);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} serial_out($p0, 0, 114);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} serial_out($p0, 0, 115);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} serial_out($p0, 0, 116);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} serial_out($p0, 0, 117);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} serial_out($p0, 0, 118);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} serial_out($p0, 0, 119);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} serial_out($p0, 0, 120);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} serial_out($p0, 0, 121);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} serial_out($p0, 0, 122);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} serial_out($p0, 0, 123);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} serial_out($p0, 0, 124);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} serial_out($p0, 0, 125);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} serial_out($p0, 0, 126);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} serial_out($p0, 0, 127);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} serial_out($p0, 0, 128);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} serial_out($p0, 0, 129);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} serial_out($p0, 0, 130);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} serial_out($p0, 0, 131);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} serial_out($p0, 0, 132);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} serial_out($p0, 0, 133);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} serial_out($p0, 0, 134);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} serial_out($p0, 0, 135);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} serial_out($p0, 0, 136);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} serial_out($p0, 0, 137);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} serial_out($p0, 0, 138);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} serial_out($p0, 0, 139);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} serial_out($p0, 0, 140);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} serial_out($p0, 0, 141);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} serial_out($p0, 0, 142);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} serial_out($p0, 0, 143);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} serial_out($p0, 0, 144);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} serial_out($p0, 0, 145);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} serial_out($p0, 0, 146);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} serial_out($p0, 0, 147);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} serial_out($p0, 0, 148);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} serial_out($p0, 0, 149);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} serial_out($p0, 0, 150);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} serial_out($p0, 0, 151);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} serial_out($p0, 0, 152);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} serial_out($p0, 0, 153);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} serial_out($p0, 0, 154);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} serial_out($p0, 0, 155);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} serial_out($p0, 0, 156);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} serial_out($p0, 0, 157);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} serial_out($p0, 0, 158);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} serial_out($p0, 0, 159);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} serial_out($p0, 0, 160);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} serial_out($p0, 0, 161);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} serial_out($p0, 0, 162);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} serial_out($p0, 0, 163);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} serial_out($p0, 0, 164);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} serial_out($p0, 0, 165);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} serial_out($p0, 0, 166);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} serial_out($p0, 0, 167);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} serial_out($p0, 0, 168);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} serial_out($p0, 0, 169);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} serial_out($p0, 0, 170);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} serial_out($p0, 0, 171);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} serial_out($p0, 0, 172);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} serial_out($p0, 0, 173);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} serial_out($p0, 0, 174);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} serial_out($p0, 0, 175);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} serial_out($p0, 0, 176);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} serial_out($p0, 0, 177);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} serial_out($p0, 0, 178);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} serial_out($p0, 0, 179);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} serial_out($p0, 0, 180);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} serial_out($p0, 0, 181);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} serial_out($p0, 0, 182);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} serial_out($p0, 0, 183);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} serial_out($p0, 0, 184);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} serial_out($p0, 0, 185);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} serial_out($p0, 0, 186);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} serial_out($p0, 0, 187);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} serial_out($p0, 0, 188);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} serial_out($p0, 0, 189);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} serial_out($p0, 0, 190);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} serial_out($p0, 0, 191);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} serial_out($p0, 0, 192);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} serial_out($p0, 0, 193);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} serial_out($p0, 0, 194);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} serial_out($p0, 0, 195);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} serial_out($p0, 0, 196);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} serial_out($p0, 0, 197);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} serial_out($p0, 0, 198);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} serial_out($p0, 0, 199);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} serial_out($p0, 0, 200);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} serial_out($p0, 0, 201);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} serial_out($p0, 0, 202);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} serial_out($p0, 0, 203);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} serial_out($p0, 0, 204);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} serial_out($p0, 0, 205);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} serial_out($p0, 0, 206);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} serial_out($p0, 0, 207);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} serial_out($p0, 0, 208);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} serial_out($p0, 0, 209);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} serial_out($p0, 0, 210);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} serial_out($p0, 0, 211);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} serial_out($p0, 0, 212);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} serial_out($p0, 0, 213);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} serial_out($p0, 0, 214);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} serial_out($p0, 0, 215);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} serial_out($p0, 0, 216);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} serial_out($p0, 0, 217);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} serial_out($p0, 0, 218);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} serial_out($p0, 0, 219);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} serial_out($p0, 0, 220);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} serial_out($p0, 0, 221);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} serial_out($p0, 0, 222);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} serial_out($p0, 0, 223);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} serial_out($p0, 0, 224);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} serial_out($p0, 0, 225);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} serial_out($p0, 0, 226);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} serial_out($p0, 0, 227);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} serial_out($p0, 0, 228);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} serial_out($p0, 0, 229);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} serial_out($p0, 0, 230);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} serial_out($p0, 0, 231);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} serial_out($p0, 0, 232);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} serial_out($p0, 0, 233);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} serial_out($p0, 0, 234);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} serial_out($p0, 0, 235);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} serial_out($p0, 0, 236);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} serial_out($p0, 0, 237);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} serial_out($p0, 0, 238);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} serial_out($p0, 0, 239);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} serial_out($p0, 0, 240);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} serial_out($p0, 0, 241);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} serial_out($p0, 0, 242);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} serial_out($p0, 0, 243);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} serial_out($p0, 0, 244);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} serial_out($p0, 0, 245);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} serial_out($p0, 0, 246);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} serial_out($p0, 0, 247);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} serial_out($p0, 0, 248);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} serial_out($p0, 0, 249);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} serial_out($p0, 0, 250);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} serial_out($p0, 0, 251);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} serial_out($p0, 0, 252);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} serial_out($p0, 0, 253);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} serial_out($p0, 0, 254);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} serial_out($p0, 0, 255);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} __const_udelay(4295000);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} __const_udelay(4295000);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} __const_udelay(4295000);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} __const_udelay(4295000);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} __const_udelay(4295000);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} __const_udelay(4295000);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} __const_udelay(4295000);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} __const_udelay(4295000);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __const_udelay(4295000);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} __const_udelay(4295000);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} __const_udelay(4295000);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __const_udelay(4295000);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} __const_udelay(4295000);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} __const_udelay(4295000);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __const_udelay(4295000);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} __const_udelay(4295000);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __const_udelay(4295000);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} __const_udelay(4295000);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} __const_udelay(4295000);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i9 := serial_in($p0, 5);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 978} {:cexpr "tmp___4"} boogie_si_record_i32($i9);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i4);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} serial_out($p0, 2, $i22);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i6);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} serial_out($p0, 4, $i23);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} serial_out($p0, 3, 128);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i8);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} serial_dl_write($p0, $i24);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i2);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} serial_out($p0, 3, $i25);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb12;

  $bb12:
    call $i15, $i16, $i17, $i18, $i19, $i20, $i13, $i21, vslice_dummy_var_57 := size_fifo_loop_$bb12($p0, $i15, $i16, $i17, $i18, $i19, $i20, $i13, $i21, vslice_dummy_var_57);
    goto $bb12_last;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} vslice_dummy_var_57 := serial_in($p0, 0);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i13, 1);
    call {:si_unique_call 980} {:cexpr "count"} boogie_si_record_i32($i15);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i16 := serial_in($p0, 5);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 982} {:cexpr "tmp___4"} boogie_si_record_i32($i16);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 1);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i19 := $sle.i32($i15, 255);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i20 := $and.i1($i18, $i19);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i21 := $i15;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i12 := $i21;
    goto $bb11;

  $bb14:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb14_dummy;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4678;
}



const serial_icr_read: ref;

axiom serial_icr_read == $sub.ref(0, 373221);

procedure serial_icr_read($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial_icr_read($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} {:cexpr "serial_icr_read:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 64);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} serial_icr_write($p0, 0, $i5);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} serial_out($p0, 7, $i1);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i6 := serial_in($p0, 5);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 1264} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(464, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} serial_icr_write($p0, 0, $i9);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const autoconfig_read_divisor_id: ref;

axiom autoconfig_read_divisor_id == $sub.ref(0, 374253);

procedure autoconfig_read_divisor_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation autoconfig_read_divisor_id($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i8;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i1 := serial_in($p0, 3);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    call {:si_unique_call 1267} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    call {:si_unique_call 1268} {:cexpr "old_lcr"} boogie_si_record_i8($i2);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} serial_out($p0, 3, 128);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i3 := serial_in($p0, 0);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 1271} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 1272} {:cexpr "old_dll"} boogie_si_record_i8($i4);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i5 := serial_in($p0, 1);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 1274} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 1275} {:cexpr "old_dlm"} boogie_si_record_i8($i6);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} serial_out($p0, 0, 0);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} serial_out($p0, 1, 0);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i7 := serial_in($p0, 0);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    call {:si_unique_call 1279} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i8 := serial_in($p0, 1);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 1281} {:cexpr "tmp___3"} boogie_si_record_i32($i8);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i8, 8);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i7, $i9);
    call {:si_unique_call 1282} {:cexpr "id"} boogie_si_record_i32($i10);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i4);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} serial_out($p0, 0, $i11);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i6);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} serial_out($p0, 1, $i12);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i2);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} serial_out($p0, 3, $i13);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 375285);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1287} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1288} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p5 := external_alloc();
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 376317);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1291} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p2 := external_alloc();
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const disable_rsa: ref;

axiom disable_rsa == $sub.ref(0, 377349);

procedure disable_rsa($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation disable_rsa($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 13);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 14745600);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} spin_lock_irq($p10);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i11 := serial_in($p0, $sub.i32(0, 8));
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    call {:si_unique_call 1295} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 1296} {:cexpr "mode"} boogie_si_record_i8($i12);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 4);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 1297} {:cexpr "result"} boogie_si_record_i32($i16);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i16;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} spin_unlock_irq($p31);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 1843200);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i12);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, $sub.i32(0, 5));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} serial_out($p0, $sub.i32(0, 8), $i19);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $i20 := serial_in($p0, $sub.i32(0, 8));
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 1300} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    call {:si_unique_call 1301} {:cexpr "mode"} boogie_si_record_i8($i21);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 4);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 1302} {:cexpr "result"} boogie_si_record_i32($i25);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb8;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const ldv_del_timer_sync_25: ref;

axiom ldv_del_timer_sync_25 == $sub.ref(0, 378381);

procedure ldv_del_timer_sync_25($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39;



implementation ldv_del_timer_sync_25($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i1 := del_timer_sync($p0);
    call {:si_unique_call 1305} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} disable_suitable_timer_2($p0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const serial8250_timeout: ref;

axiom serial8250_timeout == $sub.ref(0, 379413);

procedure serial8250_timeout($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation serial8250_timeout($i0: i64)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} {:cexpr "serial8250_timeout:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1));
    call {:si_unique_call 1308} vslice_dummy_var_58 := devirtbounce.28($p4, $p5);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $i8 := uart_poll_timeout($p7);
    call {:si_unique_call 1310} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(312, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, jiffies);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i10, $i11);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} vslice_dummy_var_59 := ldv_mod_timer_21($p9, $i12);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;
}



const serial_unlink_irq_chain: ref;

axiom serial_unlink_irq_chain == $sub.ref(0, 380445);

procedure serial_unlink_irq_chain($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.32, $M.34, $M.36, $M.2;



implementation serial_unlink_irq_chain($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p13: ref;
  var $p29: ref;
  var $p30: ref;
  var $p11: ref;
  var $p12: ref;
  var $p23: ref;
  var $p24: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} mutex_lock_nested(hash_mutex, 0);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 31);
    $p7 := $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref($i5, 8)), $mul.ref(0, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p11, $p12 := $u1, $p8;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p12, $p11;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p23);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 1314} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p24, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 1317} {:cexpr "tmp___0"} boogie_si_record_i64($i43);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p24, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $i47 := list_empty($p46);
    call {:si_unique_call 1320} {:cexpr "tmp___1"} boogie_si_record_i32($i47);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} serial_do_unlink($p24, $p0);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} mutex_unlock(hash_mutex);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i48 == 1;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p24);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} ldv_free_irq_20($i51, $p52);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i44 == 1;
    call {:si_unique_call 1318} devirtbounce.6(0, .str.52, 1775, 12);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call serial_unlink_irq_chain_loop_$bb19();
    goto $bb19_last;

  $bb13:
    assume $i36 == 1;
    call {:si_unique_call 1315} devirtbounce.6(0, .str.52, 1774, 12);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call serial_unlink_irq_chain_loop_$bb15();
    goto $bb15_last;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p13 := $p8;
    goto $bb4;

  $bb4:
    call $p14, $p15, $i16, $p18, $i19, $i20, $p21, $p22, $p25, $p26, $i27, $i28, $p13, $p29, $p30 := serial_unlink_irq_chain_loop_$bb4($p0, $p14, $p15, $i16, $p18, $i19, $i20, $p21, $p22, $p25, $p26, $i27, $i28, $p13, $p29, $p30);
    goto $bb4_last;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i16, $i19);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p21, $p22 := $p13, $p13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p29, $p30 := $p13, $p26;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p11, $p12 := $p29, $p30;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p26;
    goto $bb10_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p21, $p22;
    goto $bb8;

  $bb19_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb15_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5352;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 381477);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_free_irq_20: ref;

axiom ldv_free_irq_20 == $sub.ref(0, 382509);

procedure ldv_free_irq_20($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.30, $M.32, $M.34, $M.36;



implementation ldv_free_irq_20($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} {:cexpr "ldv_free_irq_20:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} free_irq($i0, $p1);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    return;
}



const serial_do_unlink: ref;

axiom serial_do_unlink == $sub.ref(0, 383541);

procedure serial_do_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation serial_do_unlink($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} spin_lock_irq($p2);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i5 := list_empty($p4);
    call {:si_unique_call 1329} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(440, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i21, $i23);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1331} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} spin_unlock_irq($p30);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} hlist_del($p35);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} kfree($p36);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i28 == 1;
    call {:si_unique_call 1334} devirtbounce.6(0, .str.52, 1693, 12);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call serial_do_unlink_loop_$bb9();
    goto $bb9_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(440, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(440, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} list_del($p18);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 384573);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_spin_lock();
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_spin_lock_irq_4($p0);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 385605);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 386637);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} ldv_spin_unlock();
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} ldv_spin_unlock_irq_7($p0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    return;
}



const hlist_del: ref;

axiom hlist_del == $sub.ref(0, 387669);

procedure hlist_del($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} __hlist_del($p0);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $i2p.i64.ref($sub.i64(0, 2401263026317557504)));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $i2p.i64.ref($sub.i64(0, 2401263026316508672)));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 388701);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} free_($p0);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 389733);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1343} $free($p0);
    return;
}



const __hlist_del: ref;

axiom __hlist_del == $sub.ref(0, 390765);

procedure __hlist_del($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __hlist_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p4);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_spin_unlock_irq_7: ref;

axiom ldv_spin_unlock_irq_7 == $sub.ref(0, 391797);

procedure ldv_spin_unlock_irq_7($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_7($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} _raw_spin_unlock_irq($p2);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 392829);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_4: ref;

axiom ldv_spin_lock_irq_4 == $sub.ref(0, 393861);

procedure ldv_spin_lock_irq_4($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_4($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} _raw_spin_lock_irq($p2);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 394893);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 395925);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 396957);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.30, $M.32, $M.34, $M.36;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i2 := $M.30;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.32;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.34;
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.36;
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i16 := $M.37;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 1351} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i12 := $M.35;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 1350} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i8 := $M.33;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 1349} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i4 := $M.31;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 1348} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const uart_poll_timeout: ref;

axiom uart_poll_timeout == $sub.ref(0, 397989);

procedure uart_poll_timeout($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_poll_timeout($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(256, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 1352} {:cexpr "timeout"} boogie_si_record_i32($i2);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 6);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i4 := $sdiv.i32($i2, 2);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, $sub.i32(0, 2));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const ldv_mod_timer_21: ref;

axiom ldv_mod_timer_21 == $sub.ref(0, 399021);

procedure ldv_mod_timer_21($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.0, $M.39;



implementation ldv_mod_timer_21($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} {:cexpr "ldv_mod_timer_21:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 1355} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} activate_pending_timer_2($p0, $i1, 1);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 400053);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1357} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1358} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_2: ref;

axiom activate_pending_timer_2 == $sub.ref(0, 401085);

procedure activate_pending_timer_2($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.38, $M.0, $M.39;



implementation activate_pending_timer_2($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} {:cexpr "activate_pending_timer_2:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 1361} {:cexpr "activate_pending_timer_2:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p3 := $M.38;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_60 := reg_timer_2($p0);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p13 := $M.38;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i1);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i7 := $M.39;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p10 := $M.38;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1362} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(1);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const reg_timer_2: ref;

axiom reg_timer_2 == $sub.ref(0, 402117);

procedure reg_timer_2($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.39;



implementation reg_timer_2($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1364} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(1);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 403149);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1365} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1366} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_2: ref;

axiom disable_suitable_timer_2 == $sub.ref(0, 404181);

procedure disable_suitable_timer_2($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation disable_suitable_timer_2($p0: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p2 := $M.38;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i1, $i3);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 1367} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(0);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const enable_rsa: ref;

axiom enable_rsa == $sub.ref(0, 405213);

procedure enable_rsa($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation enable_rsa($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 13);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 14745600);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 14745600);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} serial_out($p0, $sub.i32(0, 6), 0);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} spin_lock_irq($p10);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} vslice_dummy_var_61 := __enable_rsa($p0);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} spin_unlock_irq($p13);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const disable_irq_nosync: ref;

axiom disable_irq_nosync == $sub.ref(0, 406245);

procedure disable_irq_nosync($i0: i32);
  free requires assertsPassed;



implementation disable_irq_nosync($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} {:cexpr "disable_irq_nosync:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    return;
}



const serial_port_out_sync: ref;

axiom serial_port_out_sync == $sub.ref(0, 407277);

procedure serial_port_out_sync($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial_port_out_sync($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} {:cexpr "serial_port_out_sync:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 1374} {:cexpr "serial_port_out_sync:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(162, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(96, 1));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 1377} devirtbounce($p16, $p0, $i1, $i2);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(96, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 1375} devirtbounce($p11, $p0, $i1, $i2);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(88, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1376} vslice_dummy_var_62 := devirtbounce.1($p13, $p0, 3);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const enable_irq: ref;

axiom enable_irq == $sub.ref(0, 408309);

procedure enable_irq($i0: i32);
  free requires assertsPassed;



implementation enable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} {:cexpr "enable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 409341);

procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1379} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1380} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial8250_backup_timeout: ref;

axiom serial8250_backup_timeout == $sub.ref(0, 410373);

procedure serial8250_backup_timeout($i0: i64);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.38, $M.39, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_backup_timeout($i0: i64)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} {:cexpr "serial8250_backup_timeout:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} ldv_spin_lock();
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i8 := serial_in($p1, 2);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    call {:si_unique_call 1387} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i9 := serial_in($p1, 5);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    call {:si_unique_call 1389} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i9);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 30);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i12, $i15);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i8, 1);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i48 := $i8;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 1);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} spin_unlock_irqrestore($p56, $u0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i58 := uart_poll_timeout($p57);
    call {:si_unique_call 1396} {:cexpr "tmp___2"} boogie_si_record_i32($i58);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(312, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i58);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, jiffies);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i60, $i61);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 50);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} vslice_dummy_var_63 := ldv_mod_timer_22($p59, $i63);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} serial_out($p1, 1, $i7);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i50 == 1;
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} serial8250_tx_chars($p1);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(465, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 2);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb6;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(8, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i31, $i37);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i38 == 1);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(160, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i9, 32);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb6;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i8, $sub.i32(0, 16));
    call {:si_unique_call 1390} {:cexpr "iir"} boogie_si_record_i32($i46);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 2);
    call {:si_unique_call 1391} {:cexpr "iir"} boogie_si_record_i32($i47);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb16;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb10;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i6 := serial_in($p1, 1);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    call {:si_unique_call 1384} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} serial_out($p1, 1, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;

  SeqInstr_436:
    assume !assertsPassed;
    return;
}



const ldv_mod_timer_23: ref;

axiom ldv_mod_timer_23 == $sub.ref(0, 411405);

procedure ldv_mod_timer_23($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.0, $M.39;



implementation ldv_mod_timer_23($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} {:cexpr "ldv_mod_timer_23:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 1400} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} activate_pending_timer_2($p0, $i1, 1);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mod_timer_24: ref;

axiom ldv_mod_timer_24 == $sub.ref(0, 412437);

procedure ldv_mod_timer_24($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.0, $M.39;



implementation ldv_mod_timer_24($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} {:cexpr "ldv_mod_timer_24:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 1404} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} activate_pending_timer_2($p0, $i1, 1);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial_link_irq_chain: ref;

axiom serial_link_irq_chain == $sub.ref(0, 413469);

procedure serial_link_irq_chain($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation serial_link_irq_chain($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p20: ref;
  var $p36: ref;
  var $p37: ref;
  var $p18: ref;
  var $p19: ref;
  var $p30: ref;
  var $p31: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i32;
  var $i74: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i65: i32;
  var $i44: i32;
  var vslice_dummy_var_64: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 16777216);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 128 else 0);
    call {:si_unique_call 1407} {:cexpr "irq_flags"} boogie_si_record_i32($i7);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} mutex_lock_nested(hash_mutex, 0);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 31);
    $p13 := $add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref($i12, 8));
    $p14 := $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref($i12, 8)), $mul.ref(0, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p18, $p19 := $u1, $p15;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30, $p31 := $p19, $p18;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p30);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $p55 := $p31;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} mutex_unlock(hash_mutex);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} spin_lock_irq($p56);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p55, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i60 == 1);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(440, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} INIT_LIST_HEAD($p66);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(440, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p55, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p67);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p55, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} spin_unlock_irq($p69);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i72);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, $i7);
    call {:si_unique_call 1420} {:cexpr "irq_flags"} boogie_si_record_i32($i74);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i74);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p55);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $i80 := ldv_request_irq_19($i77, serial8250_interrupt, $i78, .str.37, $p79);
    call {:si_unique_call 1422} {:cexpr "ret"} boogie_si_record_i32($i80);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 0);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i65 := $i80;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i44 := $i65;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb23:
    assume $i81 == 1;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} serial_do_unlink($p55, $p0);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i60 == 1;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(440, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p55, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} list_add($p61, $p63);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p55, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} spin_unlock_irq($p64);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb22;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $p40 := kzalloc(104, 208);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p41, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} vslice_dummy_var_64 := spinlock_check($p45);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 104)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} __raw_spin_lock_init($p49, .str.56, $p1);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p41, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p41, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} hlist_add_head($p54, $p13);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p55 := $p40;
    goto $bb19;

  $bb15:
    assume $i43 == 1;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} mutex_unlock(hash_mutex);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 12);
    goto $bb17;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p20 := $p15;
    goto $bb4;

  $bb4:
    call $p21, $p22, $i23, $p25, $i26, $i27, $p28, $p29, $p32, $p33, $i34, $i35, $p20, $p36, $p37 := serial_link_irq_chain_loop_$bb4($p0, $p21, $p22, $i23, $p25, $i26, $i27, $p28, $p29, $p32, $p33, $i34, $i35, $p20, $p36, $p37);
    goto $bb4_last;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i23, $i26);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p28, $p29 := $p20, $p20;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p36, $p37 := $p20, $p33;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p18, $p19 := $p36, $p37;
    goto $bb3;

  $bb10:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p20 := $p33;
    goto $bb10_dummy;

  $bb6:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p30, $p31 := $p28, $p29;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5776;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 414501);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1425} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} ldv_check_alloc_flags($i1);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 415533);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 416565);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    return;
}



const hlist_add_head: ref;

axiom hlist_add_head == $sub.ref(0, 417597);

procedure hlist_add_head($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_add_head($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p0);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p1);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p0);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 418629);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} __list_add($p0, $p1, $p3);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 419661);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_interrupt: ref;

axiom serial8250_interrupt == $sub.ref(0, 420693);

procedure serial8250_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.2, $M.0, $M.4, $M.5, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, $M.45, $M.46, $M.6, $M.38, $M.39, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation serial8250_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p18: ref;
  var $i19: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p45: ref;
  var $p49: ref;
  var $p53: ref;
  var $p56: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $i76: i32;
  var $i71: i32;
  var $p77: ref;
  var $i78: i1;
  var $i79: i32;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p2 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 1429} {:cexpr "serial8250_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} spin_lock($p4);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p7, $p8, $i9, $i10 := $p6, $0.ref, 0, 0;
    goto $bb1;

  $bb1:
    call $p7, $p8, $i9, $i10, $p11, $p13, $p14, $p15, $i16, $i17, $i20, $i21, $p22, $p18, $i19, $p23, $p24, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i72, $i73, $i74, $i75, $i76 := serial8250_interrupt_loop_$bb1($p3, $p7, $p8, $i9, $i10, $p11, $p13, $p14, $p15, $i16, $i17, $i20, $i21, $p22, $p18, $i19, $p23, $p24, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i72, $i73, $i74, $i75, $i76);
    goto $bb1_last;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p7);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 440), 504)), $mul.ref(0, 1));
    $p14 := $add.ref($add.ref($add.ref($p11, $mul.ref($sub.ref(0, 440), 504)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 1431} $i16 := devirtbounce.28($p15, $p13);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    call {:si_unique_call 1432} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i17 == 1);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p8);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $p22 := $p8;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p18, $i19 := $p22, $i10;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p24);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i27, $i28);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i72 := $i9;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p24);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p18);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i73, $i74);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i76 := $i19;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i71 := $i76;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} spin_unlock($p77);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i71, 0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $r := $i79;
    return;

  $bb18:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $p7, $p8, $i9, $i10 := $p24, $p18, $i72, $i19;
    goto $bb18_dummy;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i9, 1);
    call {:si_unique_call 1433} {:cexpr "pass_counter"} boogie_si_record_i32($i30);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i9, 512);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i32 := $i19;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i72 := $i30;
    goto $bb17;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p36, 0);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p38, $sub.i32(0, 559067475));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p40, $sub.i32(0, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p42, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p45, $0.ref);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p49, $0.ref);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p53, $0.ref);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p56, .str.2);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p59, 0);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p62, 0);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p63, 1250);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p64, 10);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p65, 0);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p66, 0);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p67, 0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $i68 := ___ratelimit($p2, .str.41);
    call {:si_unique_call 1435} {:cexpr "tmp___0"} boogie_si_record_i32($i68);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i71 := $i32;
    goto $bb15;

  $bb12:
    assume $i69 == 1;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} vslice_dummy_var_65 := printk.ref.i32(.str.42, $i0);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p22 := $p7;
    goto $bb7;

  $bb2:
    assume $i17 == 1;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p18, $i19 := $0.ref, 1;
    goto $bb4;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb18_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5908;
}



const ldv_request_irq_19: ref;

axiom ldv_request_irq_19 == $sub.ref(0, 421725);

procedure ldv_request_irq_19($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36;



implementation ldv_request_irq_19($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} {:cexpr "ldv_request_irq_19:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1439} {:cexpr "ldv_request_irq_19:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1441} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i6 := reg_check_1($p1);
    call {:si_unique_call 1443} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 422757);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1446} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1448} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 423789);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(serial8250_interrupt));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 424821);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i2 := $M.30;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.32;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.34;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.36;
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $M.37 := $i0;
    call {:si_unique_call 1456} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $M.43 := $p1;
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1457} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $M.35 := $i0;
    call {:si_unique_call 1454} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $M.42 := $p1;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1455} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $M.33 := $i0;
    call {:si_unique_call 1452} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $M.41 := $p1;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 1453} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $M.31 := $i0;
    call {:si_unique_call 1450} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $M.40 := $p1;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1451} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 425853);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1458} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1459} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1460} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1461} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 426885);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 427917);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} ldv_error();
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 428949);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1464} __VERIFIER_error();
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const ldv_mod_timer_22: ref;

axiom ldv_mod_timer_22 == $sub.ref(0, 429981);

procedure ldv_mod_timer_22($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.0, $M.39;



implementation ldv_mod_timer_22($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} {:cexpr "ldv_mod_timer_22:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 1467} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} activate_pending_timer_2($p0, $i1, 1);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial8250_probe: ref;

axiom serial8250_probe == $sub.ref(0, 431013);

procedure serial8250_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation serial8250_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $i103: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i64;
  var $i108: i1;
  var $p11: ref;
  var $i12: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p1 := $alloc($mul.ref(504, $zext.i32.i64(1)));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $p3 := dev_get_platdata($p2);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 1471} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p5, 0, 504, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i6 := $M.44;
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p4);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p3, 0;
    goto $bb7;

  $bb7:
    call $p13, $i14, $p16, $p17, $p18, $p20, $p21, $i22, $p24, $p25, $i26, $p28, $p29, $i30, $p32, $p33, $i34, $p36, $p37, $i38, $p40, $p41, $i42, $p44, $p45, $i46, $p48, $p49, $i50, $p52, $p53, $p54, $p56, $p57, $i58, $p60, $p61, $p62, $p64, $p65, $p66, $p68, $p69, $p70, $p72, $p73, $p74, $p76, $p77, $p78, $p80, $p81, $p82, $p84, $p85, $p87, $p89, $i90, $i91, $i92, $p94, $i95, $i96, $p97, $p98, $i99, $p100, $i101, $p102, $i103, $p105, $i106, $i107, $i108, $p11, $i12, $p109, $i110, $i111, vslice_dummy_var_66 := serial8250_probe_loop_$bb7($p0, $p1, $i8, $p13, $i14, $p16, $p17, $p18, $p20, $p21, $i22, $p24, $p25, $i26, $p28, $p29, $i30, $p32, $p33, $i34, $p36, $p37, $i38, $p40, $p41, $i42, $p44, $p45, $i46, $p48, $p49, $i50, $p52, $p53, $p54, $p56, $p57, $i58, $p60, $p61, $p62, $p64, $p65, $p66, $p68, $p69, $p70, $p72, $p73, $p74, $p76, $p77, $p78, $p80, $p81, $p82, $p84, $p85, $p87, $p89, $i90, $i91, $i92, $p94, $i95, $i96, $p97, $p98, $i99, $p100, $i101, $p102, $i103, $p105, $i106, $i107, $i108, $p11, $i12, $p109, $i110, $i111, vslice_dummy_var_66);
    goto $bb7_last;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(60, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i111 == 1);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i111 == 1;
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, $i14);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p18);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i22);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i26);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(56, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i34);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(57, 1));
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i38);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(60, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i42);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i46);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(58, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i50);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(48, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(304, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p54);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(64, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i58);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p62);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(80, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p66);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p70);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $p74);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $p78);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $p82);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p85);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i8);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i92 := $or.i64($i90, $i91);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p94, $i92);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $i95 := serial8250_register_8250_port($p1);
    call {:si_unique_call 1473} {:cexpr "ret"} boogie_si_record_i32($i95);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p11, $mul.ref(1, 120));
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i12, 1);
    call {:si_unique_call 1475} {:cexpr "i"} boogie_si_record_i32($i106);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p105);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i108 == 1);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $p11, $i12 := $p105, $i106;
    goto $bb12_dummy;

  $bb9:
    assume $i96 == 1;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.0, $p98);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} vslice_dummy_var_66 := dev_err.ref.ref.i32.i64.i64.i32.i32($p97, .str.43, $i12, $i99, $i101, $i103, $i95);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i8 := 128;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6080;
}



const serial8250_remove: ref;

axiom serial8250_remove == $sub.ref(0, 432045);

procedure serial8250_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_remove($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i1 := $M.7;
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i2 := $ult.i32(0, $i1);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $i4, $p7, $p8, $i9, $p10, $i11, $i12, $i13, $i14, $i15, $i3 := serial8250_remove_loop_$bb4($p0, $i4, $p7, $p8, $i9, $p10, $i11, $i12, $i13, $i14, $i15, $i3);
    goto $bb4_last;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    $p7 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i4, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i3, 1);
    call {:si_unique_call 1477} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i14 := $M.7;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32($i13, $i14);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i13;
    goto $bb9_dummy;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} serial8250_unregister_port($i3);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6196;
}



const serial8250_suspend: ref;

axiom serial8250_suspend == $sub.ref(0, 433077);

procedure serial8250_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $CurrAddr;



implementation serial8250_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.45 := $store.i32($M.45, $p3, $i1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)));
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i31, $i33);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb27;

  $bb28:
    assume $i34 == 1;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} vslice_dummy_var_70 := uart_suspend_port(serial8250_reg, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb18:
    assume $i21 == 1;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i23, $i25);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb20;

  $bb21:
    assume $i26 == 1;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} vslice_dummy_var_69 := uart_suspend_port(serial8250_reg, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} vslice_dummy_var_68 := uart_suspend_port(serial8250_reg, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i7, $i9);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb5;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} vslice_dummy_var_67 := uart_suspend_port(serial8250_reg, serial8250_ports);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const serial8250_resume: ref;

axiom serial8250_resume == $sub.ref(0, 434109);

procedure serial8250_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)));
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb25:
    assume $i23 == 1;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i25, $i27);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb27;

  $bb28:
    assume $i28 == 1;
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} serial8250_resume_port(3);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i18, $i20);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb20;

  $bb21:
    assume $i21 == 1;
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} serial8250_resume_port(2);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i11, $i13);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb13;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} serial8250_resume_port(1);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i2 == 1;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i4, $i6);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb5;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} serial8250_resume_port(0);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const dev_get_platdata: ref;

axiom dev_get_platdata == $sub.ref(0, 435141);

procedure dev_get_platdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_platdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 436173);

procedure dev_err.ref.ref.i32.i64.i64.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i64, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i64.i64.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i64, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1487} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1488} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial_pnp_probe: ref;

axiom serial_pnp_probe == $sub.ref(0, 437205);

procedure serial_pnp_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.49;



implementation serial_pnp_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $p69: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i10: i32;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p2 := $alloc($mul.ref(504, $zext.i32.i64(1)));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1490} {:cexpr "flags"} boogie_si_record_i32($i5);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 12288);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 1493} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p11, 0, 504, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i12 := pnp_irq_valid($p0, 0);
    call {:si_unique_call 1495} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i5, 2048);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i27 := pnp_port_valid($p0, 0);
    call {:si_unique_call 1503} {:cexpr "tmp___4"} boogie_si_record_i32($i27);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i28 == 1);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $i34 := pnp_mem_valid($p0, 0);
    call {:si_unique_call 1507} {:cexpr "tmp___3"} boogie_si_record_i32($i34);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $i36 := pnp_mem_start($p0, 0);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i36);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 2);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $sub.i32(0, 2147483648));
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i5, 2048);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 268435520);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i56);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $i59 := pnp_irq_flags($p0, 0);
    call {:si_unique_call 1510} {:cexpr "tmp___6"} boogie_si_record_i64($i59);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 16);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 1843200);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p0);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $i73 := serial8250_register_8250_port($p2);
    call {:si_unique_call 1512} {:cexpr "line"} boogie_si_record_i32($i73);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 0);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i74 == 1);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i5, 2048);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i73);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 1);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} pnp_set_drvdata($p0, $p79);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb5;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb31;

  $bb27:
    assume $i61 == 1;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, 16777216);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i44 == 1;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 671088640);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i48);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 23);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i28 == 1;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i29 := pnp_port_start($p0, 0);
    call {:si_unique_call 1505} {:cexpr "tmp___2"} boogie_si_record_i64($i29);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, $i29);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i20 := pnp_port_valid($p0, 2);
    call {:si_unique_call 1499} {:cexpr "tmp___5"} boogie_si_record_i32($i20);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i22 := pnp_port_start($p0, 2);
    call {:si_unique_call 1501} {:cexpr "tmp___1"} boogie_si_record_i64($i22);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i22);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i14 := pnp_irq($p0, 0);
    call {:si_unique_call 1497} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i15);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $i8 := serial_pnp_guess_board($p0);
    call {:si_unique_call 1492} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb5;
}



const serial_pnp_remove: ref;

axiom serial_pnp_remove == $sub.ref(0, 438237);

procedure serial_pnp_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial_pnp_remove($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p1 := pnp_get_drvdata($p0);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 1515} {:cexpr "line"} boogie_si_record_i64($i2);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i2);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, $sub.i32(0, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} serial8250_unregister_port($i5);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_pnp_suspend: ref;

axiom serial_pnp_suspend == $sub.ref(0, 439269);

procedure serial_pnp_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $CurrAddr;



implementation serial_pnp_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p3, $i1);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p4 := pnp_get_drvdata($p0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 1519} {:cexpr "line"} boogie_si_record_i64($i5);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i5);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} serial8250_suspend_port($i9);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const serial_pnp_resume: ref;

axiom serial_pnp_resume == $sub.ref(0, 440301);

procedure serial_pnp_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial_pnp_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $p1 := pnp_get_drvdata($p0);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 1522} {:cexpr "line"} boogie_si_record_i64($i2);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i2);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} serial8250_resume_port($i6);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const pnp_get_drvdata: ref;

axiom pnp_get_drvdata == $sub.ref(0, 441333);

procedure pnp_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pnp_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1664)), $mul.ref(0, 1));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 442365);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const serial_pnp_guess_board: ref;

axiom serial_pnp_guess_board == $sub.ref(0, 443397);

procedure serial_pnp_guess_board($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $CurrAddr;



implementation serial_pnp_guess_board($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1664)), $mul.ref(1592, 1));
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $i3 := check_name($p2);
    call {:si_unique_call 1526} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $i16 := check_resources($p0);
    call {:si_unique_call 1530} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1664)), $mul.ref(1512, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1664)), $mul.ref(1512, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1568)), $mul.ref(1496, 1));
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $i14 := check_name($p13);
    call {:si_unique_call 1528} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb5;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb5;
}



const pnp_irq_valid: ref;

axiom pnp_irq_valid == $sub.ref(0, 444429);

procedure pnp_irq_valid($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pnp_irq_valid($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} {:cexpr "pnp_irq_valid:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $p2 := pnp_get_resource($p0, 1024, $i1);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $i3 := pnp_resource_valid($p2);
    call {:si_unique_call 1534} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pnp_irq: ref;

axiom pnp_irq == $sub.ref(0, 445461);

procedure pnp_irq($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pnp_irq($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} {:cexpr "pnp_irq:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $p2 := pnp_get_resource($p0, 1024, $i1);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $i3 := pnp_resource_valid($p2);
    call {:si_unique_call 1538} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const pnp_port_valid: ref;

axiom pnp_port_valid == $sub.ref(0, 446493);

procedure pnp_port_valid($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pnp_port_valid($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} {:cexpr "pnp_port_valid:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $p2 := pnp_get_resource($p0, 256, $i1);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $i3 := pnp_resource_valid($p2);
    call {:si_unique_call 1542} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pnp_port_start: ref;

axiom pnp_port_start == $sub.ref(0, 447525);

procedure pnp_port_start($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pnp_port_start($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} {:cexpr "pnp_port_start:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $p2 := pnp_get_resource($p0, 256, $i1);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $i3 := pnp_resource_valid($p2);
    call {:si_unique_call 1546} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const pnp_mem_valid: ref;

axiom pnp_mem_valid == $sub.ref(0, 448557);

procedure pnp_mem_valid($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pnp_mem_valid($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} {:cexpr "pnp_mem_valid:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $p2 := pnp_get_resource($p0, 512, $i1);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $i3 := pnp_resource_valid($p2);
    call {:si_unique_call 1550} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pnp_mem_start: ref;

axiom pnp_mem_start == $sub.ref(0, 449589);

procedure pnp_mem_start($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pnp_mem_start($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} {:cexpr "pnp_mem_start:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $p2 := pnp_get_resource($p0, 512, $i1);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $i3 := pnp_resource_valid($p2);
    call {:si_unique_call 1554} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const pnp_irq_flags: ref;

axiom pnp_irq_flags == $sub.ref(0, 450621);

procedure pnp_irq_flags($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pnp_irq_flags($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} {:cexpr "pnp_irq_flags:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $p2 := pnp_get_resource($p0, 1024, $i1);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $i3 := pnp_resource_valid($p2);
    call {:si_unique_call 1558} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := 1073742848;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const pnp_set_drvdata: ref;

axiom pnp_set_drvdata == $sub.ref(0, 451653);

procedure pnp_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pnp_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1664)), $mul.ref(0, 1));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} dev_set_drvdata($p2, $p1);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 452685);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    return;
}



const pnp_get_resource: ref;

axiom pnp_get_resource == $sub.ref(0, 453717);

procedure pnp_get_resource($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation pnp_get_resource($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} {:cexpr "pnp_get_resource:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1561} {:cexpr "pnp_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $p3 := external_alloc();
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pnp_resource_valid: ref;

axiom pnp_resource_valid == $sub.ref(0, 454749);

procedure pnp_resource_valid($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pnp_resource_valid($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const check_name: ref;

axiom check_name == $sub.ref(0, 455781);

procedure check_name($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation check_name($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p4: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.48, modem_names);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p4 := modem_names;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $i8, $p10, $p11, $i12, $i13, $p4 := check_name_loop_$bb4($p0, $p5, $p6, $i7, $i8, $p10, $p11, $i12, $i13, $p4);
    goto $bb4_last;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.48, $p4);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $p6 := strstr($p0, $p5);
    assume $isExternal($p6);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p4, $mul.ref(1, 8));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.48, $p10);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p10;
    goto $bb10_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6601;
}



const check_resources: ref;

axiom check_resources == $sub.ref(0, 456813);

procedure check_resources($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $CurrAddr;



implementation check_resources($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i6: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.49 := $store.i64($M.49, $p2, 760);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(1, 8));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $M.49 := $store.i64($M.49, $p3, 1016);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $M.49 := $store.i64($M.49, $p4, 744);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.49 := $store.i64($M.49, $p5, 1000);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb1;

  $bb1:
    call $i7, $p8, $i9, $i10, $i11, $i13, $i14, $i6 := check_resources_loop_$bb1($p0, $p1, $i7, $p8, $i9, $i10, $i11, $i13, $i14, $i6);
    goto $bb1_last;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref($i7, 8));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.49, $p8);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} $i10 := pnp_possible_config($p0, 256, $i9, 8);
    call {:si_unique_call 1566} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i6, 1);
    call {:si_unique_call 1567} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i14 := $ule.i32($i13, 3);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb7:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb7_dummy;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6629;
}



const pnp_possible_config: ref;

axiom pnp_possible_config == $sub.ref(0, 457845);

procedure pnp_possible_config($p0: ref, $i1: i32, $i2: i64, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pnp_possible_config($p0: ref, $i1: i32, $i2: i64, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1568} {:cexpr "pnp_possible_config:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1569} {:cexpr "pnp_possible_config:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1570} {:cexpr "pnp_possible_config:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1571} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1572} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const strstr: ref;

axiom strstr == $sub.ref(0, 458877);

procedure strstr($p0: ref, $p1: ref) returns ($r: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 459909);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1573} $r := $malloc($i0);
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 460941);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1574} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1575} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1576} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1577} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $p4 := calloc(1, $i0);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1579} __VERIFIER_assume($i7);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const serial8250_isa_init_ports: ref;

axiom serial8250_isa_init_ports == $sub.ref(0, 461973);

procedure serial8250_isa_init_ports();
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.38, $M.39, $CurrAddr;



implementation serial8250_isa_init_ports()
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i6: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i64;
  var $p63: ref;
  var $i64: i8;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $i74: i8;
  var $p75: ref;
  var $i76: i64;
  var $p78: ref;
  var $i79: i16;
  var $i80: i8;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $i95: i1;
  var $p30: ref;
  var $i31: i32;
  var $i96: i32;
  var $i97: i1;
  var vslice_dummy_var_71: ref;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(1, 0);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := $M.7;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 4);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $M.7;
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i4);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i27 := $M.44;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p30, $i31 := serial8250_ports, 0;
    goto $bb19;

  $bb19:
    call $p32, $i33, $p35, $i36, $i37, $p38, $i39, $p41, $i42, $i43, $p44, $i45, $p47, $i48, $p49, $i50, $p52, $i53, $i54, $p55, $i56, $p58, $i59, $p60, $i61, $p63, $i64, $p65, $i66, $p68, $p69, $p70, $i71, $p73, $i74, $p75, $i76, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $i85, $p86, $p87, $i88, $i89, $p90, $p91, $p92, $i93, $p94, $i95, $p30, $i31, $i96, $i97 := serial8250_isa_init_ports_loop_$bb19($i29, $p32, $i33, $p35, $i36, $i37, $p38, $i39, $p41, $i42, $i43, $p44, $i45, $p47, $i48, $p49, $i50, $p52, $i53, $i54, $p55, $i56, $p58, $i59, $p60, $i61, $p63, $i64, $p65, $i66, $p68, $p69, $p70, $i71, $p73, $i74, $p75, $i76, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $i85, $p86, $p87, $i88, $i89, $p90, $p91, $p92, $i93, $p94, $i95, $p30, $i31, $i96, $i97);
    goto $bb19_last;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i96 := $M.7;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i97 := $ult.i32($i31, $i96);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i97 == 1;
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i31);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref($i33, 48)), $mul.ref(8, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.50, $p35);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    $p38 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i37);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i31);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref($i39, 48)), $mul.ref(12, 1));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.51, $p41);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $i43 := irq_canonicalize($i42);
    call {:si_unique_call 1587} {:cexpr "tmp"} boogie_si_record_i32($i43);
    $p44 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i31);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref($i45, 48)), $mul.ref(40, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.52, $p47);
    $p49 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i48);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i31);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref($i50, 48)), $mul.ref(4, 1));
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.53, $p52);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i54 := $mul.i32($i53, 16);
    $p55 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i31);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref($i56, 48)), $mul.ref(16, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.54, $p58);
    $p60 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i31);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref($i61, 48)), $mul.ref(20, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.55, $p63);
    $p65 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, $i64);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i31);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref($i66, 48)), $mul.ref(24, 1));
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.56, $p68);
    $p70 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p69);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i31);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref($i71, 48)), $mul.ref(21, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.57, $p73);
    $p75 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, $i74);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i31);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref($i76, 48)), $mul.ref(32, 1));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.58, $p78);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i16.i8($i79);
    $p81 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, $i80);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} set_io_from_upio($p32);
    $p82 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i29);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i85 := $or.i64($i83, $i84);
    $p86 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p86, $i85);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $p87 := $M.6;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i31, 1);
    call {:si_unique_call 1590} {:cexpr "i"} boogie_si_record_i32($i93);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p30, $mul.ref(1, 504));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i95 := $ule.i32($i93, 3);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb26;

  $bb24:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $p30, $i31 := $p94, $i93;
    goto $bb24_dummy;

  $bb21:
    assume $i89 == 1;
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p90 := $M.6;
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p30, $mul.ref(0, 504)), $mul.ref(456, 1));
    call {:si_unique_call 1589} devirtbounce.11($p90, $i31, $p91, $p92);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i29 := 128;
    goto $bb18;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb11;

  $bb11:
    call $i7, $p10, $p11, $p14, $p15, $p16, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $i26, $i6, vslice_dummy_var_71, vslice_dummy_var_72 := serial8250_isa_init_ports_loop_$bb11($p0, $i7, $p10, $p11, $p14, $p15, $p16, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $i26, $i6, vslice_dummy_var_71, vslice_dummy_var_72);
    goto $bb11_last;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    $p10 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i7, 504)), $mul.ref(0, 1)), $mul.ref(276, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i6);
    $p11 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i7, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vslice_dummy_var_71 := spinlock_check($p11);
    $p14 := $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i7, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} __raw_spin_lock_init($p15, .str.36, $p0);
    $p16 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i7, 504)), $mul.ref(312, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_72 := reg_timer_2($p16);
    $p19 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i7, 504)), $mul.ref(312, 1)), $mul.ref(32, 1));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, serial8250_timeout);
    $p20 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i7, 504)), $mul.ref(470, 1));
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $sub.i8(0, 1));
    $p21 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i7, 504)), $mul.ref(468, 1));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $sub.i8(0, 1));
    $p22 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i7, 504)), $mul.ref(469, 1));
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    $p23 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i7, 504)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, serial8250_pops);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i6, 1);
    call {:si_unique_call 1585} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i25 := $M.7;
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i24, $i25);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i24;
    goto $bb13_dummy;

  $bb5:
    assume $i3 == 1;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $M.7 := 4;
    call {:si_unique_call 1581} {:cexpr "nr_uarts"} boogie_si_record_i32(4);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6704;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6678;
}



const irq_canonicalize: ref;

axiom irq_canonicalize == $sub.ref(0, 463005);

procedure irq_canonicalize($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation irq_canonicalize($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} {:cexpr "irq_canonicalize:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 2);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i2 := 9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const choose_timer_2: ref;

axiom choose_timer_2 == $sub.ref(0, 464037);

procedure choose_timer_2($p0: ref);
  free requires assertsPassed;
  modifies $M.39, $M.2, $M.0, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.38, $M.6, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation choose_timer_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    call {:si_unique_call 1593} devirtbounce.29($p2, $i4);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1595} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(2);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 465069);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.2, $M.0, $M.4, $M.5, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, $M.45, $M.46, $M.6, $M.38, $M.39, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1597} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1598} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1599} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1600} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} ldv_stop();
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $i7 := serial8250_interrupt($i1, $p2);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    call {:si_unique_call 1603} {:cexpr "irq_retval"} boogie_si_record_i32($i7);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_481:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 466101);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_platform_driver_4: ref;

axiom ldv_initialize_platform_driver_4 == $sub.ref(0, 467133);

procedure ldv_initialize_platform_driver_4();
  free requires assertsPassed;
  modifies $M.60, $M.0, $CurrAddr;



implementation ldv_initialize_platform_driver_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $p0 := ldv_zalloc(1464);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $M.60 := $p0;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 468165);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.12, $M.30, $M.2, $M.0, $M.4, $M.5, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, $M.45, $M.46, $M.6, $M.38, $M.39, $M.19, $M.31, $M.40, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1607} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1608} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1609} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} ldv_stop();
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i18 := $M.36;
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i19 := $M.37;
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p20 := $M.43;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $M.30 := $i21;
    call {:si_unique_call 1613} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i14 := $M.34;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i15 := $M.35;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p16 := $M.42;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $M.30 := $i17;
    call {:si_unique_call 1611} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i10 := $M.32;
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i11 := $M.33;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p12 := $M.41;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $M.30 := $i13;
    call {:si_unique_call 1615} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i6 := $M.30;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i7 := $M.31;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p8 := $M.40;
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $M.30 := $i9;
    call {:si_unique_call 1617} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_493:
    assume !assertsPassed;
    return;
}



const ldv_initialize_uart_ops_5: ref;

axiom ldv_initialize_uart_ops_5 == $sub.ref(0, 469197);

procedure ldv_initialize_uart_ops_5();
  free requires assertsPassed;
  modifies $M.61, $M.0, $CurrAddr;



implementation ldv_initialize_uart_ops_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $p0 := ldv_zalloc(312);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.61 := $p0;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 470229);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.0, $M.70, $M.45, $M.71, $M.72, $M.12, $M.30, $M.73, $M.61, $M.39, $M.4, $M.5, $M.2, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.36, $M.34, $M.32, $M.81, $M.82, $M.83, $M.84, $M.85, $M.48, $M.86, $M.26, $M.28, $M.29, $M.132, $M.133, $M.134, $M.135, $M.136, $M.53, $M.50, $M.51, $M.54, $M.55, $M.57, $M.56, $M.58, $M.52, $M.44, $M.7, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.27, $M.8, $M.9, $M.1, $M.10, $M.76, $M.78, $M.77, $M.144, $M.11, $M.6, $M.35, $M.33, $M.38, $M.31, $M.60, $M.37, $M.74, $M.42, $M.43, $M.40, $M.41, $M.175, $CurrAddr, $M.75, $M.46, $M.19, $M.49, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i8;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i286: i32;
  var $i287: i1;
  var $p288: ref;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i292: i32;
  var $i293: i8;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $i297: i32;
  var $i298: i8;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $i302: i32;
  var $i303: i8;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $i316: i32;
  var $i317: i1;
  var $i319: i32;
  var $i320: i32;
  var $i321: i32;
  var $i322: i1;
  var $i324: i32;
  var $i325: i32;
  var $i326: i32;
  var $i327: i1;
  var $i329: i32;
  var $i330: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: ref;
  var vslice_dummy_var_76: ref;
  var vslice_dummy_var_77: ref;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    call {:si_unique_call 1620} $initialize();
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1621} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1623} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1624} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    call {:si_unique_call 1625} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1628} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1629} $i3 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1630} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i3);
    call {:si_unique_call 1631} {:cexpr "tmp___1"} boogie_si_record_i8($i3);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1632} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1633} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1634} {:cexpr "tmp___2"} boogie_si_record_i32($i4);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $p5 := ldv_zalloc(72);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1636} $i7 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1637} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i7);
    call {:si_unique_call 1638} {:cexpr "tmp___4"} boogie_si_record_i32($i7);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p8 := ldv_zalloc(44);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1640} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1641} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 1642} {:cexpr "tmp___6"} boogie_si_record_i32($i10);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1643} $i11 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1644} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i11);
    call {:si_unique_call 1645} {:cexpr "tmp___7"} boogie_si_record_i32($i11);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $p12 := ldv_zalloc(44);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} ldv_initialize();
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.62;
    call {:si_unique_call 1648} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p14, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.62 := cmdloc_dummy_var_7;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $M.63 := 0;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 1651} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $p55, $i57, $i58, $i59, $i60, $p61, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $i124, $i125, $p126, $i128, $i129, $p130, $i132, $i133, $p134, $i136, $i137, $p138, $i139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $p147, $i148, $i149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $i166, $i167, $p168, $i169, $i170, $p171, $i172, $i173, $p174, $i175, $i176, $p177, $i178, $i179, $p180, $i181, $i182, $p183, $i184, $i185, $p186, $i187, $i188, $p189, $i190, $i191, $p192, $i194, $i195, $p196, $i198, $i199, $p200, $i202, $i203, $p204, $i206, $i207, $p208, $i210, $i211, $p212, $i214, $i215, $p216, $i217, $i218, $p219, $i220, $i221, $p222, $i223, $i224, $p225, $i227, $i228, $p229, $i231, $i232, $p233, $i235, $i236, $p237, $i238, $i239, $p240, $i242, $i243, $p244, $i246, $i247, $p248, $i250, $i251, $p252, $i253, $i254, $p255, $i256, $i257, $p258, $i259, $i260, $p261, $i262, $i263, $p264, $i265, $i266, $p267, $i268, $i269, $p270, $i272, $i273, $p274, $i276, $i277, $p278, $i280, $i281, $p282, $i283, $i284, $p285, $i286, $i287, $p288, $i289, $i290, $p291, $i292, $i293, $i294, $i295, $p296, $i297, $i298, $i299, $i300, $p301, $i302, $i303, $i304, $i305, $p306, $i308, $i309, $p310, $i312, $i313, $p314, $i316, $i317, $i319, $i320, $i321, $i322, $i324, $i325, $i326, $i327, $i329, $i330, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98 := main_loop_$bb1($p0, $i1, $i2, $i3, $i4, $p6, $i7, $p9, $i10, $i11, $p13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $p55, $i57, $i58, $i59, $i60, $p61, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $i124, $i125, $p126, $i128, $i129, $p130, $i132, $i133, $p134, $i136, $i137, $p138, $i139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $p147, $i148, $i149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $i166, $i167, $p168, $i169, $i170, $p171, $i172, $i173, $p174, $i175, $i176, $p177, $i178, $i179, $p180, $i181, $i182, $p183, $i184, $i185, $p186, $i187, $i188, $p189, $i190, $i191, $p192, $i194, $i195, $p196, $i198, $i199, $p200, $i202, $i203, $p204, $i206, $i207, $p208, $i210, $i211, $p212, $i214, $i215, $p216, $i217, $i218, $p219, $i220, $i221, $p222, $i223, $i224, $p225, $i227, $i228, $p229, $i231, $i232, $p233, $i235, $i236, $p237, $i238, $i239, $p240, $i242, $i243, $p244, $i246, $i247, $p248, $i250, $i251, $p252, $i253, $i254, $p255, $i256, $i257, $p258, $i259, $i260, $p261, $i262, $i263, $p264, $i265, $i266, $p267, $i268, $i269, $p270, $i272, $i273, $p274, $i276, $i277, $p278, $i280, $i281, $p282, $i283, $i284, $p285, $i286, $i287, $p288, $i289, $i290, $p291, $i292, $i293, $i294, $i295, $p296, $i297, $i298, $i299, $i300, $p301, $i302, $i303, $i304, $i305, $p306, $i308, $i309, $p310, $i312, $i313, $p314, $i316, $i317, $i319, $i320, $i321, $i322, $i324, $i325, $i326, $i327, $i329, $i330, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} ldv_stop();
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb60_dummy;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i89 := $M.69;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb100:
    assume $i90 == 1;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1697} $i91 := __VERIFIER_nondet_int();
    call {:si_unique_call 1698} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i91);
    call {:si_unique_call 1699} {:cexpr "tmp___12"} boogie_si_record_i32($i91);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i91, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i91, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i91, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i91, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i91, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} ldv_stop();
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb113:
    assume $i97 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i326 := $M.69;
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i326, 1);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb331:
    assume $i327 == 1;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} vslice_dummy_var_98 := ldv_probe_5();
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1823} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i329 := $M.65;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i330 := $add.i32($i329, 1);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $M.65 := $i330;
    call {:si_unique_call 1824} {:cexpr "ref_cnt"} boogie_si_record_i32($i330);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb111:
    assume $i96 == 1;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i316 := $M.69;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 3);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $i321 := $M.69;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 2);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb328:
    assume $i322 == 1;
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} vslice_dummy_var_97 := ldv_release_5();
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i324 := $M.65;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i325 := $sub.i32($i324, 1);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $M.65 := $i325;
    call {:si_unique_call 1821} {:cexpr "ref_cnt"} boogie_si_record_i32($i325);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb325:
    assume $i317 == 1;
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} vslice_dummy_var_96 := ldv_release_5();
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1817} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i319 := $M.65;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i320 := $sub.i32($i319, 1);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $M.65 := $i320;
    call {:si_unique_call 1818} {:cexpr "ref_cnt"} boogie_si_record_i32($i320);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb109:
    assume $i95 == 1;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i304 := $M.69;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 1);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $i308 := $M.69;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 3);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    $i312 := $M.69;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 2);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb322:
    assume $i313 == 1;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p314 := $M.61;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} vslice_dummy_var_95 := serial8250_request_port($p314);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1815} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb319:
    assume $i309 == 1;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p310 := $M.61;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} vslice_dummy_var_94 := serial8250_request_port($p310);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1813} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb316:
    assume $i305 == 1;
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p306 := $M.61;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} vslice_dummy_var_93 := serial8250_request_port($p306);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1811} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb107:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i91, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i91, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i99 == 1);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i289 := $M.69;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 1);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $i294 := $M.69;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i294, 3);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $i299 := $M.69;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 2);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb313:
    assume $i300 == 1;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $p301 := $M.61;
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i302 := $zext.i8.i32($i3);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i32.i8($i302);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} serial8250_put_poll_char($p301, $i303);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1809} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    goto $bb315;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb310:
    assume $i295 == 1;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p296 := $M.61;
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i32($i3);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i32.i8($i297);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} serial8250_put_poll_char($p296, $i298);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1807} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    goto $bb312;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb307:
    assume $i290 == 1;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $p291 := $M.61;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i292 := $zext.i8.i32($i3);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i32.i8($i292);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} serial8250_put_poll_char($p291, $i293);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1805} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    goto $bb309;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb118:
    assume $i99 == 1;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i280 := $M.69;
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 1);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $i283 := $M.69;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 3);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $i286 := $M.69;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 2);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb304:
    assume $i287 == 1;
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $p288 := $M.61;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} serial8250_stop_rx($p288);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1803} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb301:
    assume $i284 == 1;
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p285 := $M.61;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} serial8250_stop_rx($p285);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1801} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb298:
    assume $i281 == 1;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p282 := $M.61;
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} serial8250_stop_rx($p282);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1799} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb116:
    assume $i98 == 1;
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i268 := $M.69;
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 1);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $i272 := $M.69;
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 3);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $i276 := $M.69;
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 2);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb295:
    assume $i277 == 1;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p278 := $M.61;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} vslice_dummy_var_92 := serial8250_get_poll_char($p278);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb297;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb292:
    assume $i273 == 1;
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $p274 := $M.61;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} vslice_dummy_var_91 := serial8250_get_poll_char($p274);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    goto $bb294;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb289:
    assume $i269 == 1;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p270 := $M.61;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} vslice_dummy_var_90 := serial8250_get_poll_char($p270);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    goto $bb291;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb105:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i91, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i91, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i91, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i102 == 1);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i259 := $M.69;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 1);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $i262 := $M.69;
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 3);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $i265 := $M.69;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 2);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb286:
    assume $i266 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $p267 := $M.61;
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} serial8250_break_ctl($p267, $i10);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb283:
    assume $i263 == 1;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p264 := $M.61;
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} serial8250_break_ctl($p264, $i10);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb280:
    assume $i260 == 1;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p261 := $M.61;
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} serial8250_break_ctl($p261, $i10);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb124:
    assume $i102 == 1;
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i250 := $M.69;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 1);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $i253 := $M.69;
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 3);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $i256 := $M.69;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 2);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb277:
    assume $i257 == 1;
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p258 := $M.61;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} serial8250_stop_tx($p258);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb274:
    assume $i254 == 1;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p255 := $M.61;
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} serial8250_stop_tx($p255);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb271:
    assume $i251 == 1;
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p252 := $M.61;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} serial8250_stop_tx($p252);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb122:
    assume $i101 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i238 := $M.69;
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 1);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $i242 := $M.69;
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 3);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $i246 := $M.69;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 2);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb268:
    assume $i247 == 1;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p248 := $M.61;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} vslice_dummy_var_89 := serial8250_verify_port($p248, $p6);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb265:
    assume $i243 == 1;
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p244 := $M.61;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} vslice_dummy_var_88 := serial8250_verify_port($p244, $p6);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb262:
    assume $i239 == 1;
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p240 := $M.61;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} vslice_dummy_var_87 := serial8250_verify_port($p240, $p6);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb120:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i91, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i103 == 1);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i235 := $M.69;
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 2);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb259:
    assume $i236 == 1;
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p237 := $M.61;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} serial8250_shutdown($p237);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    goto $bb261;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb126:
    assume $i103 == 1;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i223 := $M.69;
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 1);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i227 := $M.69;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 3);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $i231 := $M.69;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 2);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb256:
    assume $i232 == 1;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p233 := $M.61;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} vslice_dummy_var_86 := serial8250_tx_empty($p233);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    goto $bb258;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb253:
    assume $i228 == 1;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p229 := $M.61;
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} vslice_dummy_var_85 := serial8250_tx_empty($p229);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    goto $bb255;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb250:
    assume $i224 == 1;
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p225 := $M.61;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} vslice_dummy_var_84 := serial8250_tx_empty($p225);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    goto $bb252;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i91, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i91, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i91, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i91, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i107 == 1);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i214 := $M.69;
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 1);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $i217 := $M.69;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 3);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $i220 := $M.69;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 2);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb247:
    assume $i221 == 1;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p222 := $M.61;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} serial8250_enable_ms($p222);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb244:
    assume $i218 == 1;
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p219 := $M.61;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} serial8250_enable_ms($p219);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb241:
    assume $i215 == 1;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p216 := $M.61;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} serial8250_enable_ms($p216);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb134:
    assume $i107 == 1;
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i202 := $M.69;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 1);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i206 := $M.69;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 3);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $i210 := $M.69;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 2);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb238:
    assume $i211 == 1;
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p212 := $M.61;
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} vslice_dummy_var_83 := serial8250_get_mctrl($p212);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    goto $bb240;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb235:
    assume $i207 == 1;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p208 := $M.61;
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} vslice_dummy_var_82 := serial8250_get_mctrl($p208);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    goto $bb237;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb232:
    assume $i203 == 1;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p204 := $M.61;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} vslice_dummy_var_81 := serial8250_get_mctrl($p204);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    goto $bb234;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb132:
    assume $i106 == 1;
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i190 := $M.69;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 1);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i194 := $M.69;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 3);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $i198 := $M.69;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 2);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb229:
    assume $i199 == 1;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p200 := $M.61;
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} vslice_dummy_var_80 := serial8250_startup($p200);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb231;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb226:
    assume $i195 == 1;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p196 := $M.61;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} vslice_dummy_var_79 := serial8250_startup($p196);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1751} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    goto $bb228;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb223:
    assume $i191 == 1;
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $p192 := $M.61;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} vslice_dummy_var_78 := serial8250_startup($p192);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb225;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i91, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i91, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i109 == 1);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i181 := $M.69;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 1);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i184 := $M.69;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 3);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $i187 := $M.69;
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 2);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb220:
    assume $i188 == 1;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p189 := $M.61;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} serial8250_set_mctrl($p189, $i7);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb217:
    assume $i185 == 1;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p186 := $M.61;
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} serial8250_set_mctrl($p186, $i7);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb214:
    assume $i182 == 1;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p183 := $M.61;
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} serial8250_set_mctrl($p183, $i7);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb138:
    assume $i109 == 1;
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i172 := $M.69;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 1);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i175 := $M.69;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 3);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i178 := $M.69;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 2);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb211:
    assume $i179 == 1;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $p180 := $M.61;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} serial8250_config_port($p180, $i2);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    goto $bb213;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb208:
    assume $i176 == 1;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p177 := $M.61;
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} serial8250_config_port($p177, $i2);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    goto $bb210;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb205:
    assume $i173 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p174 := $M.61;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} serial8250_config_port($p174, $i2);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    goto $bb207;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb136:
    assume $i108 == 1;
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i163 := $M.69;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 1);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $i166 := $M.69;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 3);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i169 := $M.69;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 2);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb202:
    assume $i170 == 1;
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p171 := $M.61;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} serial8250_set_termios($p171, $p13, $p9);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    goto $bb204;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb199:
    assume $i167 == 1;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p168 := $M.61;
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} serial8250_set_termios($p168, $p13, $p9);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    goto $bb201;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb196:
    assume $i164 == 1;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p165 := $M.61;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} serial8250_set_termios($p165, $p13, $p9);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    goto $bb198;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb128:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i91, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i91, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i91, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i112 == 1);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i154 := $M.69;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 1);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i157 := $M.69;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 3);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i160 := $M.69;
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 2);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb193:
    assume $i161 == 1;
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p162 := $M.61;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} serial8250_start_tx($p162);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb190:
    assume $i158 == 1;
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $p159 := $M.61;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} serial8250_start_tx($p159);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    goto $bb192;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb187:
    assume $i155 == 1;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p156 := $M.61;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} serial8250_start_tx($p156);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto $bb189;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb144:
    assume $i112 == 1;
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i145 := $M.69;
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 1);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i148 := $M.69;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 3);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i151 := $M.69;
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 2);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb184:
    assume $i152 == 1;
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p153 := $M.61;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} serial8250_release_port($p153);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1723} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume $i149 == 1;
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p150 := $M.61;
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} serial8250_release_port($p150);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb178:
    assume $i146 == 1;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p147 := $M.61;
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} serial8250_release_port($p147);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1719} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb142:
    assume $i111 == 1;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i136 := $M.69;
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 1);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i139 := $M.69;
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 3);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i142 := $M.69;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 2);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb175:
    assume $i143 == 1;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $p144 := $M.61;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} serial8250_pm($p144, $i1, $i11);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb172:
    assume $i140 == 1;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p141 := $M.61;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} serial8250_pm($p141, $i1, $i11);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb169:
    assume $i137 == 1;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p138 := $M.61;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} serial8250_pm($p138, $i1, $i11);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb140:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i91, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i113 == 1);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i124 := $M.69;
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 1);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i128 := $M.69;
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 3);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $i132 := $M.69;
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 2);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb166:
    assume $i133 == 1;
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p134 := $M.61;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} vslice_dummy_var_77 := serial8250_type($p134);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb163:
    assume $i129 == 1;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p130 := $M.61;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} vslice_dummy_var_76 := serial8250_type($p130);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb160:
    assume $i125 == 1;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p126 := $M.61;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} vslice_dummy_var_75 := serial8250_type($p126);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb146:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i91, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb115;

  $bb148:
    assume $i114 == 1;
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i115 := $M.69;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 1);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i118 := $M.69;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 3);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i121 := $M.69;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 2);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb156:
    assume $i122 == 1;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p123 := $M.61;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} serial8250_set_ldisc($p123, $i4);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb153:
    assume $i119 == 1;
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p120 := $M.61;
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} serial8250_set_ldisc($p120, $i4);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb150:
    assume $i116 == 1;
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p117 := $M.61;
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} serial8250_set_ldisc($p117, $i4);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i86 := $M.68;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb97:
    assume $i87 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p88 := $M.38;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} choose_timer_2($p88);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i84 := $M.67;
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb94:
    assume $i85 == 1;
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} ldv_main_exported_3();
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i67 := $M.66;
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb64:
    assume $i68 == 1;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1680} $i69 := __VERIFIER_nondet_int();
    call {:si_unique_call 1681} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i69);
    call {:si_unique_call 1682} {:cexpr "tmp___11"} boogie_si_record_i32($i69);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} ldv_stop();
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb69:
    assume $i71 == 1;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i77 := $M.66;
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 1);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb82:
    assume $i78 == 1;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $i79 := serial8250_init();
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $M.73 := $i79;
    call {:si_unique_call 1687} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i79);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i80 := $M.73;
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i82 := $M.73;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume $i83 == 1;
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $M.66 := 2;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} ldv_check_final_state();
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb84:
    assume $i81 == 1;
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $M.66 := 3;
    call {:si_unique_call 1688} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ldv_initialize_uart_ops_5();
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_initialize_pnp_driver_3();
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb67:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i69, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb71;

  $bb72:
    assume $i72 == 1;
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i73 := $M.66;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 3);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb74:
    assume $i74 == 1;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i75 := $M.65;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb76;

  $bb77:
    assume $i76 == 1;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} serial8250_exit();
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $M.66 := 2;
    call {:si_unique_call 1684} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i65 := $M.64;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb61:
    assume $i66 == 1;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} choose_interrupt_1();
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i23 := $M.63;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1659} $i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 1660} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i25);
    call {:si_unique_call 1661} {:cexpr "tmp___10"} boogie_si_record_i32($i25);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i25, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i25, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} ldv_stop();
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i53 := $M.63;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 3);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i59 := $M.63;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 2);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb54:
    assume $i60 == 1;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p61 := $M.60;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} vslice_dummy_var_74 := serial8250_remove($p61);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i63 := $M.65;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i63, 1);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $M.65 := $i64;
    call {:si_unique_call 1677} {:cexpr "ref_cnt"} boogie_si_record_i32($i64);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i54 == 1;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p55 := $M.60;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} vslice_dummy_var_73 := serial8250_remove($p55);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i57 := $M.65;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i57, 1);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $M.65 := $i58;
    call {:si_unique_call 1674} {:cexpr "ref_cnt"} boogie_si_record_i32($i58);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i47 := $M.63;
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 3);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb45:
    assume $i48 == 1;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p49 := $M.60;
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $i50 := serial8250_resume($p49);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $M.72 := $i50;
    call {:si_unique_call 1670} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i50);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i51 := $M.72;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i52 == 1;
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i25, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i29 == 1);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i39 := $M.63;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume $i40 == 1;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p41 := $M.60;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.62, $p42);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $i44 := serial8250_suspend($p41, $i43);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.71 := $i44;
    call {:si_unique_call 1667} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i44);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i45 := $M.71;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i46 == 1;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1668} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb28:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb27;

  $bb30:
    assume $i30 == 1;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i31 := $M.63;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p33 := $M.60;
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $i34 := serial8250_probe($p33);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $M.70 := $i34;
    call {:si_unique_call 1663} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i34);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i35 := $M.70;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i36 == 1;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i37 := $M.65;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $M.65 := $i38;
    call {:si_unique_call 1665} {:cexpr "ref_cnt"} boogie_si_record_i32($i38);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb60_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1656} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 1657} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 1658} {:cexpr "tmp___9"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 471261);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_exit: ref;

axiom serial8250_exit == $sub.ref(0, 472293);

procedure serial8250_exit();
  free requires assertsPassed;
  modifies $M.11, $M.63;



implementation serial8250_exit()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p0 := $M.11;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $M.11 := $0.ref;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} ldv_platform_driver_unregister_27(serial8250_isa_driver);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} platform_device_unregister($p0);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} serial8250_pnp_exit();
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} uart_unregister_driver(serial8250_reg);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_init: ref;

axiom serial8250_init == $sub.ref(0, 473325);

procedure serial8250_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.38, $M.39, $M.11, $M.63, $M.60, $CurrAddr;



implementation serial8250_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i19: i32;
  var $p25: ref;
  var $i15: i32;
  var $i10: i32;
  var $i7: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} serial8250_isa_init_ports();
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i0 := $M.7;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i1 := $M.44;
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p3 := (if $i2 == 1 then .str.46 else .str.47);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} vslice_dummy_var_99 := printk.ref.i32.ref(.str.45, $i0, $p3);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(serial8250_reg, $mul.ref(0, 64)), $mul.ref(32, 1)), 4);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $i5 := uart_register_driver(serial8250_reg);
    call {:si_unique_call 1834} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $i8 := serial8250_pnp_init();
    call {:si_unique_call 1836} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} $p11 := platform_device_alloc(.str.44, $sub.i32(0, 1));
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $M.11 := $p11;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p12 := $M.11;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $M.11;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} $i17 := platform_device_add($p16);
    call {:si_unique_call 1841} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $M.11;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} serial8250_register_ports(serial8250_reg, $p21);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} $i22 := ldv___platform_driver_register_26(serial8250_isa_driver, __this_module);
    call {:si_unique_call 1845} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p24 := $M.11;
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} platform_device_del($p24);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p25 := $M.11;
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} platform_device_put($p25);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i15 := $i19;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} serial8250_pnp_exit();
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} uart_unregister_driver(serial8250_reg);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb3;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb15;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const ldv_initialize_pnp_driver_3: ref;

axiom ldv_initialize_pnp_driver_3 == $sub.ref(0, 474357);

procedure ldv_initialize_pnp_driver_3();
  free requires assertsPassed;
  modifies $M.74, $M.0, $CurrAddr;



implementation ldv_initialize_pnp_driver_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $p0 := ldv_zalloc(1656);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $M.74 := $p0;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 475389);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.75, $M.0, $M.76, $M.67, $M.65, $M.46, $M.77, $M.78, $CurrAddr, $M.49, $M.2, $M.45, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $p1 := ldv_zalloc(16);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.75;
    call {:si_unique_call 1850} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p3, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.75 := cmdloc_dummy_var_9;
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1851} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1852} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1853} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} ldv_stop();
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i32 := $M.67;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i37 := $M.67;
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 2);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume $i38 == 1;
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p39 := $M.74;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} serial_pnp_remove($p39);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1868} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i40 := $M.65;
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $M.65 := $i41;
    call {:si_unique_call 1869} {:cexpr "ref_cnt"} boogie_si_record_i32($i41);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i33 == 1;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p34 := $M.74;
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} serial_pnp_remove($p34);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1865} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i35 := $M.65;
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i35, 1);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $M.65 := $i36;
    call {:si_unique_call 1866} {:cexpr "ref_cnt"} boogie_si_record_i32($i36);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i26 := $M.67;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 3);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i27 == 1;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p28 := $M.74;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} $i29 := serial_pnp_resume($p28);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $M.78 := $i29;
    call {:si_unique_call 1862} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i29);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i30 := $M.78;
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i31 == 1;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i18 := $M.67;
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i19 == 1;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $p20 := $M.74;
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.75, $p21);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} $i23 := serial_pnp_suspend($p20, $i22);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $M.77 := $i23;
    call {:si_unique_call 1859} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i23);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i24 := $M.77;
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i25 == 1;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $M.67 := 3;
    call {:si_unique_call 1860} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb9:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i10 := $M.67;
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p12 := $M.74;
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} $i13 := serial_pnp_probe($p12, $p2);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $M.76 := $i13;
    call {:si_unique_call 1855} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i13);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i14 := $M.76;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1856} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i16 := $M.65;
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $M.65 := $i17;
    call {:si_unique_call 1857} {:cexpr "ref_cnt"} boogie_si_record_i32($i17);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_release_5: ref;

axiom ldv_release_5 == $sub.ref(0, 476421);

procedure ldv_release_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1871} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1872} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_5: ref;

axiom ldv_probe_5 == $sub.ref(0, 477453);

procedure ldv_probe_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1873} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1874} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 478485);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    return;
}



const uart_register_driver: ref;

axiom uart_register_driver == $sub.ref(0, 479517);

procedure uart_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1875} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1876} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const serial8250_pnp_init: ref;

axiom serial8250_pnp_init == $sub.ref(0, 480549);

procedure serial8250_pnp_init() returns ($r: i32);
  free requires assertsPassed;



implementation serial8250_pnp_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} $i0 := pnp_register_driver(serial_pnp_driver);
    call {:si_unique_call 1878} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const platform_device_alloc: ref;

axiom platform_device_alloc == $sub.ref(0, 481581);

procedure platform_device_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_device_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} {:cexpr "platform_device_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} $p2 := external_alloc();
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const platform_device_add: ref;

axiom platform_device_add == $sub.ref(0, 482613);

procedure platform_device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation platform_device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1881} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1882} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const serial8250_register_ports: ref;

axiom serial8250_register_ports == $sub.ref(0, 483645);

procedure serial8250_register_ports($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial8250_register_ports($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i4: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i2 := $M.7;
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i3 := $ult.i32(0, $i2);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i5, $p6, $p8, $p9, $i10, $i11, $p13, $p15, $i16, $i17, $i18, $p20, $i21, $p22, $i24, $i25, $i26, $i4, vslice_dummy_var_100 := serial8250_register_ports_loop_$bb4($p0, $p1, $i5, $p6, $p8, $p9, $i10, $i11, $p13, $p15, $i16, $i17, $i18, $p20, $i21, $p22, $i24, $i25, $i26, $i4, vslice_dummy_var_100);
    goto $bb4_last;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    $p6 := $add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i5, 504));
    $p8 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i5, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p13 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i5, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p1);
    $p15 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i5, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 134217728);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p22 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i5, 504)), $mul.ref(0, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} vslice_dummy_var_100 := uart_add_one_port($p0, $p22);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i4, 1);
    call {:si_unique_call 1883} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i25 := $M.7;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i24, $i25);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i24;
    goto $bb13_dummy;

  $bb10:
    assume $i18 == 1;
    $p20 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref($i5, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} serial8250_init_fixed_type_port($p6, $i21);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7724;
}



const ldv___platform_driver_register_26: ref;

axiom ldv___platform_driver_register_26 == $sub.ref(0, 484677);

procedure ldv___platform_driver_register_26($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.63, $M.60, $M.0, $CurrAddr;



implementation ldv___platform_driver_register_26($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 1887} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1888} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} ldv_initialize_platform_driver_4();
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const platform_device_del: ref;

axiom platform_device_del == $sub.ref(0, 485709);

procedure platform_device_del($p0: ref);
  free requires assertsPassed;



implementation platform_device_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    return;
}



const platform_device_put: ref;

axiom platform_device_put == $sub.ref(0, 486741);

procedure platform_device_put($p0: ref);
  free requires assertsPassed;



implementation platform_device_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    return;
}



const serial8250_pnp_exit: ref;

axiom serial8250_pnp_exit == $sub.ref(0, 487773);

procedure serial8250_pnp_exit();
  free requires assertsPassed;



implementation serial8250_pnp_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} pnp_unregister_driver(serial_pnp_driver);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    return;
}



const uart_unregister_driver: ref;

axiom uart_unregister_driver == $sub.ref(0, 488805);

procedure uart_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation uart_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    return;
}



const pnp_unregister_driver: ref;

axiom pnp_unregister_driver == $sub.ref(0, 489837);

procedure pnp_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pnp_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 490869);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1891} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1892} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pnp_register_driver: ref;

axiom pnp_register_driver == $sub.ref(0, 491901);

procedure pnp_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pnp_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1893} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1894} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_platform_driver_unregister_27: ref;

axiom ldv_platform_driver_unregister_27 == $sub.ref(0, 492933);

procedure ldv_platform_driver_unregister_27($p0: ref);
  free requires assertsPassed;
  modifies $M.63;



implementation ldv_platform_driver_unregister_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} platform_driver_unregister($p0);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $M.63 := 0;
    call {:si_unique_call 1896} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    return;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 493965);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 494997);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 496029);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1897} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 1} true;
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 497061);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 498093);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 499125);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 500157);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 501189);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 502221);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __VERIFIER_nondet_unsigned_char: ref;

axiom __VERIFIER_nondet_unsigned_char == $sub.ref(0, 503253);

procedure __VERIFIER_nondet_unsigned_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1898} $i0 := __SMACK_nondet_unsigned_char();
    call {:si_unique_call 1899} {:cexpr "smack:ext:__SMACK_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1900} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1901} __VERIFIER_assume($i6);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 1} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 255);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 504285);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 505317);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 506349);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 507381);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 508413);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 509445);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 510477);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1902} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1903} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1904} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1905} __VERIFIER_assume($i4);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 511509);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 512541);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 513573);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 514605);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1906} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1907} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1908} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1909} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1910} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1911} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1912} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1913} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1914} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1915} __VERIFIER_assume($i7);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1916} __VERIFIER_assume($i11);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 515637);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 516669);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 517701);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 518733);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 519765);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 520797);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1917} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1918} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1919} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1920} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1921} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1922} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1923} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1924} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1925} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1926} __VERIFIER_assume($i7);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1927} __VERIFIER_assume($i11);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 521829);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 522861);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 523893);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 524925);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 525957);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 526989);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 528021);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 529053);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uchar: ref;

axiom __VERIFIER_nondet_uchar == $sub.ref(0, 530085);

procedure __VERIFIER_nondet_uchar() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uchar() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1928} $i0 := __VERIFIER_nondet_unsigned_char();
    call {:si_unique_call 1929} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1930} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 531117);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1931} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1932} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1933} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 532149);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1934} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1935} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1936} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 533181);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1937} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1938} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 534213);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 535245);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1939} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1940} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 536277);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 537309);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 538341);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1941} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1942} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1943} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1944} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $p6 := malloc($i5);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 1946} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 539373);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 540405);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.36, $M.30, $M.34, $M.32, $M.39, $M.81, $M.82, $M.83, $M.84, $M.85, $M.48, $M.86, $M.26, $M.0, $M.28, $M.29, $M.132, $M.133, $M.134, $M.135, $M.136, $M.53, $M.50, $M.51, $M.54, $M.55, $M.57, $M.56, $M.58, $M.52, $M.44, $M.7, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.27, $M.8, $M.9, $M.1, $M.10, $M.76, $M.78, $M.77, $M.144, $M.73, $M.71, $M.72, $M.70, $M.11, $M.6, $M.63, $M.35, $M.64, $M.33, $M.65, $M.38, $M.31, $M.67, $M.60, $M.37, $M.74, $M.42, $M.61, $M.43, $M.68, $M.69, $M.66, $M.40, $M.41, $M.2, $M.175;



implementation __SMACK_static_init()
{

  $bb0:
    $M.36 := 0;
    call {:si_unique_call 1947} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1948} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1949} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1950} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.32 := 0;
    call {:si_unique_call 1951} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1952} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(0);
    $M.81 := $store.i8($M.81, __kstrtab_serial8250_clear_and_reinit_fifos, 115);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(1, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(2, 1)), 114);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(3, 1)), 105);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(4, 1)), 97);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(5, 1)), 108);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(6, 1)), 56);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(7, 1)), 50);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(8, 1)), 53);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(9, 1)), 48);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(10, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(11, 1)), 99);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(12, 1)), 108);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(13, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(14, 1)), 97);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(15, 1)), 114);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(16, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(17, 1)), 97);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(18, 1)), 110);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(19, 1)), 100);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(20, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(21, 1)), 114);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(22, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(23, 1)), 105);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(24, 1)), 110);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(25, 1)), 105);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(26, 1)), 116);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(27, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(28, 1)), 102);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(29, 1)), 105);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(30, 1)), 102);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(31, 1)), 111);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(32, 1)), 115);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_serial8250_clear_and_reinit_fifos, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.82 := $store.i8($M.82, __kstrtab_serial8250_release_dma, 115);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(5, 1)), 108);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(6, 1)), 56);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(7, 1)), 50);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(8, 1)), 53);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(9, 1)), 48);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(11, 1)), 114);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(13, 1)), 108);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(14, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(15, 1)), 97);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(17, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(18, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(19, 1)), 100);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(21, 1)), 97);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_serial8250_release_dma, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.83 := $store.i8($M.83, __kstrtab_serial8250_request_dma, 115);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(5, 1)), 108);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(6, 1)), 56);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(7, 1)), 50);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(8, 1)), 53);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(9, 1)), 48);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(11, 1)), 114);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(13, 1)), 113);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(14, 1)), 117);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(17, 1)), 116);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(18, 1)), 95);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(19, 1)), 100);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(21, 1)), 97);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_serial8250_request_dma, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.84 := $store.i8($M.84, __kstrtab_serial8250_rx_dma, 115);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(6, 1)), 56);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(7, 1)), 50);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(8, 1)), 53);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(9, 1)), 48);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(12, 1)), 120);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(13, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(14, 1)), 100);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(15, 1)), 109);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(16, 1)), 97);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_serial8250_rx_dma, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.85 := $store.i8($M.85, __kstrtab_serial8250_tx_dma, 115);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(6, 1)), 56);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(7, 1)), 50);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(8, 1)), 53);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(9, 1)), 48);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(12, 1)), 120);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(13, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(14, 1)), 100);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(15, 1)), 109);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(16, 1)), 97);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_serial8250_tx_dma, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.48 := $store.ref($M.48, modem_names, .str.59);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(1, 8)), .str.60);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(2, 8)), .str.61);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(3, 8)), .str.62);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(4, 8)), .str.63);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(5, 8)), .str.64);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(6, 8)), .str.65);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(7, 8)), .str.66);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(8, 8)), .str.67);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(9, 8)), .str.68);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(10, 8)), .str.69);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(11, 8)), .str.70);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(12, 8)), .str.71);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(13, 8)), .str.72);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(14, 8)), .str.73);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(15, 8)), .str.74);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(16, 8)), .str.75);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(17, 8)), .str.76);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(18, 8)), .str.77);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(19, 8)), .str.78);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(20, 8)), .str.79);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(21, 8)), .str.80);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(22, 8)), .str.81);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(23, 8)), .str.82);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(modem_names, $mul.ref(0, 200)), $mul.ref(24, 8)), $0.ref);
    $M.86 := $store.i8($M.86, pnp_dev_table, 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(0, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(1, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(2, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(2, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(2, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(2, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(2, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(2, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(2, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(2, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(2, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(3, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(3, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(3, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(3, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(3, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(3, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(3, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(3, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(3, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(4, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(4, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(4, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(4, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(4, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(4, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(4, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(4, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(4, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(5, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(5, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 75);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(5, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 89);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(5, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(5, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(5, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(5, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(5, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(5, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(6, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(6, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 90);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(6, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(6, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(6, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(6, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(6, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(6, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(6, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(7, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(7, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(7, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(7, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(7, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(7, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(7, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(7, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(7, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(8, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(8, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(8, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(8, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(8, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(8, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(8, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(8, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(8, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(9, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(9, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(9, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(9, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(9, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(9, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(9, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(9, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(9, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(10, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(10, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(10, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(10, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(10, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(10, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(10, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(10, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(10, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(11, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(11, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(11, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(11, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(11, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(11, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(11, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(11, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(11, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(12, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(12, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(12, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(12, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(12, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(12, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(12, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(12, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(12, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(13, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(13, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(13, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(13, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(13, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(13, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(13, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(13, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(13, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(14, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(14, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(14, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 76);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(14, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(14, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(14, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(14, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(14, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(14, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(15, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(15, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(15, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 76);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(15, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(15, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(15, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(15, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(15, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(15, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(16, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(16, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(16, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 86);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(16, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(16, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(16, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(16, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(16, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(16, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(17, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(17, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(17, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(17, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(17, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(17, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(17, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(17, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(17, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(18, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(18, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(18, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(18, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(18, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(18, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(18, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(18, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(18, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(19, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(19, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(19, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(19, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(19, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(19, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(19, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(19, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(19, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(20, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(20, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(20, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(20, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(20, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(20, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(20, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(20, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(20, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(21, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(21, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(21, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(21, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(21, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(21, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(21, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(21, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(21, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(22, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(22, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(22, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(22, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(22, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(22, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(22, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(22, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(22, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(23, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(23, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(23, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(23, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(23, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(23, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(23, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(23, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(23, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(24, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 71);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(24, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 86);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(24, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(24, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(24, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(24, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(24, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(24, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(24, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(25, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 71);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(25, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 86);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(25, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(25, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(25, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(25, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(25, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(25, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(25, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(26, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 72);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(26, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(26, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 89);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(26, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(26, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(26, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(26, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(26, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(26, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(27, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 72);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(27, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(27, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 89);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(27, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(27, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(27, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(27, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(27, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(27, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(28, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 72);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(28, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(28, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 89);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(28, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(28, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(28, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(28, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(28, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(28, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(29, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 72);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(29, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(29, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 89);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(29, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(29, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(29, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(29, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(29, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(29, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(30, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 72);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(30, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(30, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 89);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(30, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(30, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(30, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(30, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(30, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(30, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(31, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 72);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(31, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(31, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 89);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(31, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(31, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(31, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(31, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(31, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(31, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(32, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 72);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(32, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(32, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 89);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(32, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(32, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(32, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(32, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(32, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(32, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(33, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 72);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(33, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(33, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 89);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(33, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(33, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(33, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(33, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(33, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(33, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(34, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(34, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(34, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(34, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(34, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(34, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(34, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(34, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(34, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(35, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(35, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(35, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(35, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(35, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(35, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(35, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(35, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(35, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(36, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(36, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(36, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(36, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(36, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(36, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(36, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(36, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(36, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(37, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(37, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(37, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(37, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(37, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(37, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(37, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(37, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(37, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(38, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(38, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(38, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(38, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(38, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(38, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(38, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(38, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(38, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(39, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(39, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(39, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(39, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(39, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(39, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(39, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(39, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(39, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(40, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(40, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(40, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(40, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(40, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(40, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(40, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(40, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(40, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(41, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(41, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(41, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(41, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(41, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(41, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(41, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(41, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(41, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(42, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(42, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(42, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(42, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(42, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(42, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(42, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(42, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(42, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(43, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 75);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(43, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(43, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(43, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(43, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(43, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(43, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(43, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(43, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(44, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 75);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(44, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(44, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(44, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(44, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(44, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(44, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(44, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(44, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(45, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 76);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(45, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(45, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(45, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(45, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(45, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(45, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(45, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(45, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(46, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 76);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(46, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(46, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(46, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(46, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(46, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(46, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(46, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(46, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(47, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 76);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(47, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(47, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(47, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(47, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(47, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(47, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(47, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(47, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(48, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(48, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(48, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(48, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(48, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(48, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(48, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(48, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(48, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(49, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(49, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(49, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(49, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(49, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(49, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(49, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(49, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(49, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(50, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(50, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(50, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(50, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(50, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(50, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(50, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(50, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(50, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(51, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(51, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(51, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(51, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(51, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(51, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(51, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(51, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(51, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(52, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(52, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(52, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(52, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(52, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(52, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(52, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(52, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(52, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(53, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(53, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(53, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(53, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(53, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(53, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(53, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(53, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(53, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(54, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(54, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(54, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(54, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(54, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(54, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(54, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(54, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(54, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(55, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(55, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(55, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(55, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(55, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(55, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(55, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(55, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(55, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(56, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(56, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(56, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(56, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(56, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(56, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(56, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(56, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(56, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(57, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(57, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(57, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(57, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(57, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(57, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(57, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(57, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(57, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(58, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(58, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(58, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(58, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(58, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(58, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(58, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(58, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(58, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(59, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(59, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(59, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(59, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(59, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(59, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(59, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(59, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(59, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(60, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(60, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(60, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(60, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(60, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(60, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(60, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(60, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(60, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(61, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(61, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(61, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(61, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(61, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(61, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(61, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(61, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(61, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(62, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(62, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(62, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(62, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(62, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(62, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(62, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(62, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(62, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(63, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(63, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(63, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(63, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(63, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(63, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(63, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(63, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(63, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(64, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(64, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(64, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(64, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(64, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(64, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(64, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(64, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(64, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(65, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(65, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(65, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(65, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(65, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(65, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(65, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(65, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(65, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(66, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(66, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(66, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(66, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(66, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(66, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(66, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(66, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(66, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(67, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(67, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(67, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(67, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(67, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(67, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(67, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(67, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(67, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(68, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(68, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(68, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(68, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(68, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(68, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(68, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(68, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(68, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(69, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(69, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(69, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(69, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(69, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(69, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(69, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(69, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(69, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(70, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(70, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(70, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(70, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(70, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(70, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(70, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(70, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(70, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(71, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(71, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(71, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(71, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(71, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(71, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(71, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(71, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(71, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(72, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(72, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 86);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(72, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(72, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(72, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(72, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(72, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(72, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(72, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(73, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(73, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 86);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(73, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(73, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(73, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(73, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(73, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(73, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(73, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(74, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 110);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(74, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(74, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(74, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(74, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(74, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(74, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(74, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(74, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(75, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(75, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 77);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(75, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(75, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(75, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(75, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(75, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(75, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(75, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(76, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(76, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(76, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(76, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(76, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(76, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(76, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(76, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(76, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(77, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(77, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(77, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(77, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(77, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(77, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(77, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(77, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(77, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(78, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(78, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(78, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(78, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(78, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(78, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(78, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(78, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(78, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(79, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(79, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(79, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(79, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(79, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(79, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(79, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(79, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(79, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(80, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(80, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(80, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(80, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(80, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(80, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(80, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(80, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(80, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(81, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(81, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(81, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(81, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(81, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(81, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(81, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(81, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(81, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(82, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(82, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(82, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(82, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(82, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(82, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(82, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(82, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(82, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(83, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(83, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(83, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(83, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(83, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(83, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(83, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(83, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(83, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(84, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(84, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(84, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(84, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(84, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(84, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(84, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(84, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(84, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(85, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(85, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(85, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(85, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(85, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(85, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(85, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(85, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(85, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(86, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(86, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(86, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(86, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(86, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(86, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(86, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(86, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(86, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(87, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(87, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(87, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(87, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(87, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(87, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(87, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(87, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(87, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(88, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(88, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(88, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(88, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(88, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(88, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(88, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(88, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(88, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(89, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(89, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(89, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(89, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(89, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(89, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(89, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(89, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(89, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(90, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(90, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(90, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(90, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(90, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(90, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(90, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(90, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(90, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(91, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(91, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(91, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(91, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(91, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(91, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(91, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(91, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(91, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(92, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(92, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(92, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(92, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(92, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(92, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(92, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(92, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(92, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(93, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(93, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(93, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(93, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(93, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(93, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(93, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(93, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(93, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(94, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(94, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(94, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(94, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(94, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(94, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(94, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(94, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(94, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(95, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(95, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(95, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(95, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(95, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(95, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(95, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(95, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(95, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(96, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(96, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(96, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(96, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(96, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(96, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(96, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(96, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(96, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(97, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(97, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(97, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(97, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(97, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(97, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(97, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(97, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(97, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(98, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(98, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(98, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(98, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(98, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(98, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(98, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(98, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(98, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(99, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(99, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(99, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 75);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(99, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(99, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(99, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(99, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(99, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(99, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(100, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(100, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(100, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 75);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(100, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(100, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(100, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(100, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(100, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(100, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(101, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(101, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(101, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 75);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(101, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(101, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(101, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(101, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(101, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(101, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(102, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(102, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 79);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(102, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 75);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(102, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(102, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(102, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(102, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(102, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(102, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(103, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(103, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(103, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(103, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(103, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(103, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(103, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(103, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(103, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(104, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(104, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(104, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(104, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(104, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(104, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(104, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(104, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(104, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(105, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(105, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(105, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(105, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(105, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(105, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(105, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(105, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(105, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(106, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(106, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(106, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(106, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(106, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(106, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(106, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(106, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(106, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(107, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(107, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(107, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(107, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(107, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(107, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(107, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(107, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(107, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(108, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(108, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(108, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(108, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(108, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(108, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(108, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(108, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(108, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(109, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(109, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(109, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(109, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(109, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(109, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(109, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(109, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(109, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(110, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(110, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(110, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(110, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(110, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(110, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(110, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(110, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(110, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(111, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(111, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(111, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(111, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(111, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(111, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(111, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(111, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(111, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(112, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(112, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(112, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(112, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(112, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(112, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(112, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(112, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(112, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(113, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(113, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(113, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(113, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(113, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(113, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(113, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(113, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(113, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(114, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(114, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(114, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(114, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(114, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(114, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(114, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(114, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(114, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(115, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(115, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(115, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(115, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(115, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(115, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(115, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(115, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(115, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(116, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(116, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(116, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(116, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(116, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(116, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(116, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(116, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(116, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(117, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(117, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(117, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(117, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(117, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(117, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(117, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(117, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(117, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(118, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(118, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(118, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(118, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(118, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(118, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(118, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(118, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(118, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(119, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(119, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(119, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(119, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(119, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(119, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(119, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(119, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(119, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(120, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(120, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(120, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(120, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(120, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(120, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(120, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(120, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(120, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(121, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(121, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(121, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(121, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(121, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(121, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(121, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(121, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(121, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(122, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(122, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(122, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(122, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(122, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(122, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(122, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(122, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(122, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(123, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(123, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(123, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(123, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(123, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(123, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(123, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(123, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(123, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(124, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(124, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(124, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(124, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(124, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(124, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(124, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(124, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(124, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(125, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(125, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(125, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(125, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(125, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(125, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(125, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(125, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(125, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(126, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(126, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(126, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(126, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(126, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(126, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(126, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(126, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(126, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(127, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(127, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(127, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(127, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(127, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(127, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(127, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(127, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(127, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(128, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(128, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(128, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(128, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(128, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(128, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(128, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(128, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(128, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(129, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(129, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(129, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(129, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(129, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(129, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(129, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(129, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(129, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(130, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(130, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(130, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(130, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(130, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(130, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(130, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(130, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(130, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(131, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(131, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(131, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(131, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(131, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(131, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(131, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(131, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(131, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(132, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(132, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(132, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(132, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(132, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(132, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(132, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(132, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(132, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(133, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(133, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(133, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 82);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(133, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(133, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(133, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(133, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(133, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(133, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(134, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 87);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(134, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 65);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(134, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(134, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(134, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(134, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(134, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(134, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(134, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(135, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(135, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(135, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(135, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(135, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(135, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(135, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(135, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(135, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(136, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(136, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(136, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(136, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(136, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(136, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(136, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(136, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(136, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(137, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(137, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(137, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(137, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(137, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(137, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(137, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(137, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(137, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(138, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(138, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(138, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(138, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(138, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(138, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(138, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 52);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(138, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(138, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(139, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(139, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(139, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(139, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(139, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(139, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(139, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(139, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(139, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(140, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(140, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(140, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(140, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(140, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(140, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(140, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(140, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(140, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(141, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(141, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(141, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(141, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(141, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(141, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(141, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 56);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(141, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(141, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(142, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(142, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(142, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(142, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(142, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(142, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(142, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(142, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(142, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(143, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(143, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(143, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(143, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(143, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(143, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 66);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(143, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(143, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(143, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(144, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(144, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(144, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(144, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(144, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(144, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(144, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 53);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(144, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(144, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(145, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(145, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(145, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(145, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(145, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(145, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(145, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 54);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(145, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(145, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(146, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(146, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(146, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(146, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(146, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(146, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(146, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 55);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(146, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(146, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(147, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 70);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(147, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 85);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(147, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 74);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(147, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(147, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(147, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(147, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 57);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(147, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(147, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(148, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 76);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(148, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 84);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(148, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 83);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(148, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(148, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(148, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(148, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(148, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(148, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(149, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 87);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(149, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(149, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 73);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(149, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(149, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(149, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(149, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 51);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(149, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(149, 16)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(150, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(150, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(150, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(150, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(150, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(150, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(150, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(150, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(150, 16)), $mul.ref(8, 1)), 12288);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(151, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(151, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(151, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(151, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 68);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(151, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(151, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(151, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 88);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(151, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(151, 16)), $mul.ref(8, 1)), 12288);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(152, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 87);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(152, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 69);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(152, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(152, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 49);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(152, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(152, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(152, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 50);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(152, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(152, 16)), $mul.ref(8, 1)), 2048);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(153, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(153, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(153, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(153, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(153, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(153, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(153, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(153, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 2464)), $mul.ref(153, 16)), $mul.ref(8, 1)), 0);
    $M.26 := 0;
    call {:si_unique_call 1953} {:cexpr "skip_txen_test"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, irq_lists, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(1, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(2, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(3, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(4, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(5, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(6, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(7, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(8, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(9, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(10, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(11, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(12, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(13, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(14, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(15, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(16, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(17, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(18, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(19, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(20, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(21, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(22, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(23, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(24, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(25, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(26, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(27, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(28, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(29, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(30, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(irq_lists, $mul.ref(0, 256)), $mul.ref(31, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, hash_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.57);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(hash_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(hash_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), hash_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.58);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hash_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.28 := 0;
    call {:si_unique_call 1954} {:cexpr "probe_rsa_count"} boogie_si_record_i32(0);
    $M.29 := $store.i64($M.29, probe_rsa, 0);
    $M.29 := $store.i64($M.29, $add.ref($add.ref(probe_rsa, $mul.ref(0, 32)), $mul.ref(1, 8)), 0);
    $M.29 := $store.i64($M.29, $add.ref($add.ref(probe_rsa, $mul.ref(0, 32)), $mul.ref(2, 8)), 0);
    $M.29 := $store.i64($M.29, $add.ref($add.ref(probe_rsa, $mul.ref(0, 32)), $mul.ref(3, 8)), 0);
    $M.132 := $store.i8($M.132, __kstrtab_serial8250_resume_port, 115);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(5, 1)), 108);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(6, 1)), 56);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(7, 1)), 50);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(8, 1)), 53);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(9, 1)), 48);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(11, 1)), 114);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(14, 1)), 117);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(15, 1)), 109);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(16, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(18, 1)), 112);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(19, 1)), 111);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_serial8250_resume_port, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.133 := $store.i8($M.133, __kstrtab_serial8250_suspend_port, 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(1, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(2, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(3, 1)), 105);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(4, 1)), 97);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(5, 1)), 108);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(6, 1)), 56);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(7, 1)), 50);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(8, 1)), 53);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(9, 1)), 48);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(11, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(12, 1)), 117);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(13, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(14, 1)), 112);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(15, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(16, 1)), 110);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(17, 1)), 100);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(18, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(19, 1)), 112);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(20, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(21, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_serial8250_suspend_port, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.134 := $store.i8($M.134, __kstrtab_serial8250_unregister_port, 115);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(1, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(2, 1)), 114);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(3, 1)), 105);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(4, 1)), 97);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(5, 1)), 108);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(6, 1)), 56);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(7, 1)), 50);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(8, 1)), 53);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(9, 1)), 48);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(10, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(11, 1)), 117);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(12, 1)), 110);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(13, 1)), 114);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(14, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(15, 1)), 103);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(16, 1)), 105);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(17, 1)), 115);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(18, 1)), 116);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(19, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(20, 1)), 114);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(21, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(22, 1)), 112);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(23, 1)), 111);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(24, 1)), 114);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(25, 1)), 116);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_serial8250_unregister_port, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.135 := $store.i8($M.135, __kstrtab_serial8250_register_8250_port, 115);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(1, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(2, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(3, 1)), 105);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(4, 1)), 97);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(5, 1)), 108);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(6, 1)), 56);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(7, 1)), 50);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(8, 1)), 53);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(9, 1)), 48);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(11, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(12, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(13, 1)), 103);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(14, 1)), 105);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(15, 1)), 115);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(16, 1)), 116);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(17, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(18, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(19, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(20, 1)), 56);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(21, 1)), 50);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(22, 1)), 53);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(23, 1)), 48);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(24, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(25, 1)), 112);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(26, 1)), 111);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(27, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(28, 1)), 116);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_serial8250_register_8250_port, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i32($M.0, serial_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.39);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(serial_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(serial_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), serial_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.40);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(serial_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, serial8250_reg, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_reg, $mul.ref(0, 64)), $mul.ref(8, 1)), .str.37);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_reg, $mul.ref(0, 64)), $mul.ref(16, 1)), .str.38);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(serial8250_reg, $mul.ref(0, 64)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(serial8250_reg, $mul.ref(0, 64)), $mul.ref(28, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(serial8250_reg, $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_reg, $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_reg, $mul.ref(0, 64)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_reg, $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.136 := $store.i32($M.136, old_serial_port, 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(0, 48)), $mul.ref(4, 1)), 115200);
    $M.50 := $store.i32($M.50, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(0, 48)), $mul.ref(8, 1)), 1016);
    $M.51 := $store.i32($M.51, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(0, 48)), $mul.ref(12, 1)), 4);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(0, 48)), $mul.ref(16, 1)), 268435648);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(0, 48)), $mul.ref(20, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(0, 48)), $mul.ref(21, 1)), 0);
    $M.56 := $store.ref($M.56, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(0, 48)), $mul.ref(32, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(0, 48)), $mul.ref(40, 1)), 0);
    $M.136 := $store.i32($M.136, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(1, 48)), $mul.ref(0, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(1, 48)), $mul.ref(4, 1)), 115200);
    $M.50 := $store.i32($M.50, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(1, 48)), $mul.ref(8, 1)), 760);
    $M.51 := $store.i32($M.51, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(1, 48)), $mul.ref(12, 1)), 3);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(1, 48)), $mul.ref(16, 1)), 268435648);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(1, 48)), $mul.ref(20, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(1, 48)), $mul.ref(21, 1)), 0);
    $M.56 := $store.ref($M.56, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(1, 48)), $mul.ref(24, 1)), $0.ref);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(1, 48)), $mul.ref(32, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(1, 48)), $mul.ref(40, 1)), 0);
    $M.136 := $store.i32($M.136, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(2, 48)), $mul.ref(0, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(2, 48)), $mul.ref(4, 1)), 115200);
    $M.50 := $store.i32($M.50, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(2, 48)), $mul.ref(8, 1)), 1000);
    $M.51 := $store.i32($M.51, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(2, 48)), $mul.ref(12, 1)), 4);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(2, 48)), $mul.ref(16, 1)), 268435648);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(2, 48)), $mul.ref(20, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(2, 48)), $mul.ref(21, 1)), 0);
    $M.56 := $store.ref($M.56, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(2, 48)), $mul.ref(24, 1)), $0.ref);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(2, 48)), $mul.ref(32, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(2, 48)), $mul.ref(40, 1)), 0);
    $M.136 := $store.i32($M.136, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(3, 48)), $mul.ref(0, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(3, 48)), $mul.ref(4, 1)), 115200);
    $M.50 := $store.i32($M.50, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(3, 48)), $mul.ref(8, 1)), 744);
    $M.51 := $store.i32($M.51, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(3, 48)), $mul.ref(12, 1)), 3);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(3, 48)), $mul.ref(16, 1)), 268435584);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(3, 48)), $mul.ref(20, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(3, 48)), $mul.ref(21, 1)), 0);
    $M.56 := $store.ref($M.56, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(3, 48)), $mul.ref(24, 1)), $0.ref);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(3, 48)), $mul.ref(32, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(3, 48)), $mul.ref(40, 1)), 0);
    $M.44 := 1;
    call {:si_unique_call 1955} {:cexpr "share_irqs"} boogie_si_record_i32(1);
    $M.0 := $store.ref($M.0, serial8250_pops, serial8250_tx_empty);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(8, 1)), serial8250_set_mctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(16, 1)), serial8250_get_mctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(24, 1)), serial8250_stop_tx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(32, 1)), serial8250_start_tx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(64, 1)), serial8250_stop_rx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(72, 1)), serial8250_enable_ms);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(80, 1)), serial8250_break_ctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(88, 1)), serial8250_startup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(96, 1)), serial8250_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(112, 1)), serial8250_set_termios);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(120, 1)), serial8250_set_ldisc);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(128, 1)), serial8250_pm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(136, 1)), serial8250_type);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(144, 1)), serial8250_release_port);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(152, 1)), serial8250_request_port);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(160, 1)), serial8250_config_port);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(168, 1)), serial8250_verify_port);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(192, 1)), serial8250_put_poll_char);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial8250_pops, $mul.ref(0, 208)), $mul.ref(200, 1)), serial8250_get_poll_char);
    $M.7 := 4;
    call {:si_unique_call 1956} {:cexpr "nr_uarts"} boogie_si_record_i32(4);
    $M.137 := $store.i8($M.137, __kstrtab_serial8250_set_isa_configurator, 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(1, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(2, 1)), 114);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(3, 1)), 105);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(4, 1)), 97);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(5, 1)), 108);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(6, 1)), 56);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(7, 1)), 50);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(8, 1)), 53);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(9, 1)), 48);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(10, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(11, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(12, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(13, 1)), 116);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(14, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(15, 1)), 105);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(16, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(17, 1)), 97);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(18, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(19, 1)), 99);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(20, 1)), 111);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(21, 1)), 110);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(22, 1)), 102);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(23, 1)), 105);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(24, 1)), 103);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(25, 1)), 117);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(26, 1)), 114);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(27, 1)), 97);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(28, 1)), 116);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(29, 1)), 111);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(30, 1)), 114);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_serial8250_set_isa_configurator, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.138 := $store.i8($M.138, __kstrtab_serial8250_do_pm, 115);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(1, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(2, 1)), 114);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(5, 1)), 108);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(6, 1)), 56);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(7, 1)), 50);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(8, 1)), 53);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(9, 1)), 48);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(11, 1)), 100);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(12, 1)), 111);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(13, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(14, 1)), 112);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(15, 1)), 109);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_serial8250_do_pm, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.139 := $store.i8($M.139, __kstrtab_serial8250_do_set_termios, 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(1, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(2, 1)), 114);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(3, 1)), 105);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(4, 1)), 97);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(5, 1)), 108);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(6, 1)), 56);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(7, 1)), 50);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(8, 1)), 53);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(9, 1)), 48);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(10, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(11, 1)), 100);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(12, 1)), 111);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(13, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(14, 1)), 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(15, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(16, 1)), 116);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(17, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(18, 1)), 116);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(20, 1)), 114);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(21, 1)), 109);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(22, 1)), 105);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(23, 1)), 111);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(24, 1)), 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_serial8250_do_set_termios, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.140 := $store.i8($M.140, __kstrtab_serial8250_handle_irq, 115);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(1, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(2, 1)), 114);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(4, 1)), 97);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(5, 1)), 108);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(6, 1)), 56);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(7, 1)), 50);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(8, 1)), 53);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(9, 1)), 48);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(11, 1)), 104);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(12, 1)), 97);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(13, 1)), 110);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(14, 1)), 100);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(15, 1)), 108);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(19, 1)), 114);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(20, 1)), 113);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_serial8250_handle_irq, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.141 := $store.i8($M.141, __kstrtab_serial8250_modem_status, 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(1, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(2, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(3, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(4, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(5, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(6, 1)), 56);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(7, 1)), 50);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(8, 1)), 53);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(9, 1)), 48);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(11, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(12, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(13, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(15, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(17, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(18, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(19, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(20, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(21, 1)), 117);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(22, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_serial8250_modem_status, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.142 := $store.i8($M.142, __kstrtab_serial8250_tx_chars, 115);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(2, 1)), 114);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(5, 1)), 108);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(6, 1)), 56);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(7, 1)), 50);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(8, 1)), 53);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(9, 1)), 48);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(11, 1)), 116);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(12, 1)), 120);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(14, 1)), 99);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(15, 1)), 104);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(17, 1)), 114);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_serial8250_tx_chars, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.143 := $store.i8($M.143, __kstrtab_serial8250_rx_chars, 115);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(2, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(5, 1)), 108);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(6, 1)), 56);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(7, 1)), 50);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(8, 1)), 53);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(9, 1)), 48);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(11, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(12, 1)), 120);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(14, 1)), 99);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(15, 1)), 104);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(17, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_serial8250_rx_chars, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.27 := $store.ref($M.27, uart_config, .str.9);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(0, 24)), $mul.ref(8, 1)), 1);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(0, 24)), $mul.ref(10, 1)), 1);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(0, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(1, 24)), $mul.ref(0, 1)), .str.3);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(1, 24)), $mul.ref(8, 1)), 1);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(1, 24)), $mul.ref(10, 1)), 1);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(1, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(2, 24)), $mul.ref(0, 1)), .str.10);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(2, 24)), $mul.ref(8, 1)), 1);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(2, 24)), $mul.ref(10, 1)), 1);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(2, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(3, 24)), $mul.ref(0, 1)), .str.11);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(3, 24)), $mul.ref(8, 1)), 1);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(3, 24)), $mul.ref(10, 1)), 1);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(3, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(3, 24)), $mul.ref(16, 1)), 0);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(4, 24)), $mul.ref(0, 1)), .str.12);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(4, 24)), $mul.ref(8, 1)), 16);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(4, 24)), $mul.ref(10, 1)), 16);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(4, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(4, 24)), $mul.ref(16, 1)), 256);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(5, 24)), $mul.ref(0, 1)), .str.13);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(5, 24)), $mul.ref(8, 1)), 1);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(5, 24)), $mul.ref(10, 1)), 1);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(5, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(5, 24)), $mul.ref(16, 1)), 0);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(6, 24)), $mul.ref(0, 1)), .str.14);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(6, 24)), $mul.ref(8, 1)), 1);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(6, 24)), $mul.ref(10, 1)), 1);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(6, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(6, 24)), $mul.ref(16, 1)), 1792);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(7, 24)), $mul.ref(0, 1)), .str.15);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(7, 24)), $mul.ref(8, 1)), 32);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(7, 24)), $mul.ref(10, 1)), 16);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(7, 24)), $mul.ref(12, 1)), 65);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(7, 24)), $mul.ref(16, 1)), 1792);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(8, 24)), $mul.ref(0, 1)), .str.16);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(8, 24)), $mul.ref(8, 1)), 64);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(8, 24)), $mul.ref(10, 1)), 64);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(8, 24)), $mul.ref(12, 1)), $sub.i8(0, 95));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(8, 24)), $mul.ref(16, 1)), 3328);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(9, 24)), $mul.ref(0, 1)), .str.17);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(9, 24)), $mul.ref(8, 1)), 1);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(9, 24)), $mul.ref(10, 1)), 1);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(9, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(9, 24)), $mul.ref(16, 1)), 0);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(10, 24)), $mul.ref(0, 1)), .str.18);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(10, 24)), $mul.ref(8, 1)), 128);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(10, 24)), $mul.ref(10, 1)), 128);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(10, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(10, 24)), $mul.ref(16, 1)), 1280);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(11, 24)), $mul.ref(0, 1)), .str.19);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(11, 24)), $mul.ref(8, 1)), 64);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(11, 24)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(11, 24)), $mul.ref(12, 1)), 97);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(11, 24)), $mul.ref(16, 1)), 1792);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(12, 24)), $mul.ref(0, 1)), .str.20);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(12, 24)), $mul.ref(8, 1)), 128);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(12, 24)), $mul.ref(10, 1)), 128);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(12, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(12, 24)), $mul.ref(16, 1)), 1792);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(13, 24)), $mul.ref(0, 1)), .str.21);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(13, 24)), $mul.ref(8, 1)), 2048);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(13, 24)), $mul.ref(10, 1)), 2048);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(13, 24)), $mul.ref(12, 1)), $sub.i8(0, 63));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(13, 24)), $mul.ref(16, 1)), 256);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(14, 24)), $mul.ref(0, 1)), .str.22);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(14, 24)), $mul.ref(8, 1)), 16);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(14, 24)), $mul.ref(10, 1)), 16);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(14, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(14, 24)), $mul.ref(16, 1)), 264);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(15, 24)), $mul.ref(0, 1)), .str.23);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(15, 24)), $mul.ref(8, 1)), 32);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(15, 24)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(15, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(15, 24)), $mul.ref(16, 1)), 12544);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(16, 24)), $mul.ref(0, 1)), $0.ref);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(16, 24)), $mul.ref(8, 1)), 0);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(16, 24)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(16, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(16, 24)), $mul.ref(16, 1)), 0);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(17, 24)), $mul.ref(0, 1)), .str.24);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(17, 24)), $mul.ref(8, 1)), 64);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(17, 24)), $mul.ref(10, 1)), 64);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(17, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(17, 24)), $mul.ref(16, 1)), 256);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(18, 24)), $mul.ref(0, 1)), .str.25);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(18, 24)), $mul.ref(8, 1)), 16);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(18, 24)), $mul.ref(10, 1)), 16);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(18, 24)), $mul.ref(12, 1)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(18, 24)), $mul.ref(16, 1)), 2304);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(19, 24)), $mul.ref(0, 1)), .str.26);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(19, 24)), $mul.ref(8, 1)), 64);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(19, 24)), $mul.ref(10, 1)), 64);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(19, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(19, 24)), $mul.ref(16, 1)), 2304);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(20, 24)), $mul.ref(0, 1)), .str.27);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(20, 24)), $mul.ref(8, 1)), 32);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(20, 24)), $mul.ref(10, 1)), 8);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(20, 24)), $mul.ref(12, 1)), 81);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(20, 24)), $mul.ref(16, 1)), 8448);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(21, 24)), $mul.ref(0, 1)), .str.28);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(21, 24)), $mul.ref(8, 1)), 64);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(21, 24)), $mul.ref(10, 1)), 64);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(21, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(21, 24)), $mul.ref(16, 1)), 3840);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(22, 24)), $mul.ref(0, 1)), .str.29);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(22, 24)), $mul.ref(8, 1)), 64);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(22, 24)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(22, 24)), $mul.ref(12, 1)), 9);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(22, 24)), $mul.ref(16, 1)), 256);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(23, 24)), $mul.ref(0, 1)), .str.30);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(23, 24)), $mul.ref(8, 1)), 0);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(23, 24)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(23, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(23, 24)), $mul.ref(16, 1)), 0);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(24, 24)), $mul.ref(0, 1)), .str.31);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(24, 24)), $mul.ref(8, 1)), 256);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(24, 24)), $mul.ref(10, 1)), 256);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(24, 24)), $mul.ref(12, 1)), $sub.i8(0, 15));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(24, 24)), $mul.ref(16, 1)), 3840);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(25, 24)), $mul.ref(0, 1)), .str.32);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(25, 24)), $mul.ref(8, 1)), 1);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(25, 24)), $mul.ref(10, 1)), 1024);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(25, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(25, 24)), $mul.ref(16, 1)), 16384);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(26, 24)), $mul.ref(0, 1)), .str.33);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(26, 24)), $mul.ref(8, 1)), 32);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(26, 24)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(26, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(26, 24)), $mul.ref(16, 1)), 2304);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(27, 24)), $mul.ref(0, 1)), .str.34);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(27, 24)), $mul.ref(8, 1)), 64);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(27, 24)), $mul.ref(10, 1)), 64);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(27, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(27, 24)), $mul.ref(16, 1)), 2304);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(28, 24)), $mul.ref(0, 1)), .str.35);
    $M.8 := $store.i16($M.8, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(28, 24)), $mul.ref(8, 1)), 128);
    $M.9 := $store.i16($M.9, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(28, 24)), $mul.ref(10, 1)), 128);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(28, 24)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(uart_config, $mul.ref(0, 696)), $mul.ref(28, 24)), $mul.ref(16, 1)), 2304);
    $M.76 := 0;
    call {:si_unique_call 1957} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1958} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1959} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.144 := $store.i8($M.144, __mod_pnp__pnp_dev_table_device_table, 0);
    $M.144 := $store.i8($M.144, $add.ref($add.ref($add.ref(__mod_pnp__pnp_dev_table_device_table, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.144 := $store.i8($M.144, $add.ref($add.ref($add.ref(__mod_pnp__pnp_dev_table_device_table, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.144 := $store.i8($M.144, $add.ref($add.ref($add.ref(__mod_pnp__pnp_dev_table_device_table, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.144 := $store.i8($M.144, $add.ref($add.ref($add.ref(__mod_pnp__pnp_dev_table_device_table, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.144 := $store.i8($M.144, $add.ref($add.ref($add.ref(__mod_pnp__pnp_dev_table_device_table, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.144 := $store.i8($M.144, $add.ref($add.ref($add.ref(__mod_pnp__pnp_dev_table_device_table, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.144 := $store.i8($M.144, $add.ref($add.ref($add.ref(__mod_pnp__pnp_dev_table_device_table, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.144 := $store.i64($M.144, $add.ref($add.ref(__mod_pnp__pnp_dev_table_device_table, $mul.ref(0, 16)), $mul.ref(8, 1)), 0);
    $M.73 := 0;
    call {:si_unique_call 1960} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1961} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1962} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1963} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.11 := $0.ref;
    $M.6 := $0.ref;
    $M.0 := $store.i32($M.0, serial8250_ports, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(156, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(160, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(163, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(164, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(168, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(240, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(252, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(256, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(272, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(276, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(296, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(297, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(298, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(299, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(299, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(440, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(440, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(456, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(458, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(460, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(464, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(465, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(466, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(467, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(468, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(469, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(470, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(471, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(472, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(0, 504)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(136, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(152, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(156, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(160, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(161, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(162, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(163, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(164, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(168, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(240, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(248, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(252, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(256, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(272, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(276, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(280, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(296, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(297, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(298, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(299, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(299, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(0, 1)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(440, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(440, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(456, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(458, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(460, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(464, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(465, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(466, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(467, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(468, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(469, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(470, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(471, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(472, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(1, 504)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(136, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(152, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(156, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(160, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(161, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(162, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(163, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(164, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(168, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(240, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(248, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(252, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(256, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(272, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(276, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(280, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(296, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(297, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(298, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(299, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(299, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(0, 1)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(440, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(440, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(456, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(458, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(460, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(464, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(465, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(466, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(467, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(468, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(469, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(470, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(471, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(472, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(2, 504)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(136, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(152, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(156, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(160, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(161, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(162, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(163, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(164, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(168, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(240, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(248, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(252, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(256, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(260, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(272, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(276, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(280, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(296, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(297, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(298, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(299, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(299, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(0, 1)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(312, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(440, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(440, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(456, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(458, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(460, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(464, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(465, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(466, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(467, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(468, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(469, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(470, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(471, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(472, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(3, 504)), $mul.ref(496, 1)), $0.ref);
    $M.63 := 0;
    call {:si_unique_call 1964} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1965} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 1966} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1967} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 1968} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.38 := $0.ref;
    $M.31 := 0;
    call {:si_unique_call 1969} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 1970} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.60 := $0.ref;
    $M.37 := 0;
    call {:si_unique_call 1971} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.74 := $0.ref;
    $M.42 := $0.ref;
    $M.61 := $0.ref;
    $M.43 := $0.ref;
    $M.68 := 0;
    call {:si_unique_call 1972} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1973} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1974} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.40 := $0.ref;
    $M.41 := $0.ref;
    $M.2 := 0;
    call {:si_unique_call 1975} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.3, 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(2, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.9, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 8)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 8)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.10, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(1, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(2, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(4, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 6)), $mul.ref(1, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 6)), $mul.ref(2, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 6)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 6)), $mul.ref(4, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.12, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 7)), $mul.ref(1, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 7)), $mul.ref(2, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 7)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 7)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.13, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 7)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 7)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 7)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 7)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(7, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.16, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(1, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.17, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 9)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 9)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 9)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 9)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 9)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 9)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 9)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.18, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(1, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(3, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(6, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(7, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(8, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(9, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.19, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(6, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 8)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 8)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 8)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 8)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 4)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 4)), $mul.ref(2, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(7, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.23, 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.24, 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 7)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 7)), $mul.ref(2, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 7)), $mul.ref(3, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 7)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 7)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.25, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 4)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 4)), $mul.ref(2, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.26, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(1, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(6, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(7, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(8, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.27, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 6)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 6)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 6)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 6)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.28, 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 9)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 9)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 9)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 9)), $mul.ref(4, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 9)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 9)), $mul.ref(6, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 9)), $mul.ref(7, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(1, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(3, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(5, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 9)), $mul.ref(1, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 9)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 9)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 9)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 9)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 9)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 9)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(4, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(5, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(6, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(7, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(3, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(7, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(8, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(9, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(10, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(11, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(13, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(14, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(15, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(16, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(17, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(18, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.34, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(7, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(8, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(9, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(10, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(11, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(13, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(14, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(15, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(16, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(17, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(18, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.35, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(7, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(8, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(9, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(10, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(11, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(13, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(14, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(15, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(16, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(17, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(18, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(19, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.175 := $store.i8($M.175, .str.59, 77);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.59, $mul.ref(0, 6)), $mul.ref(1, 1)), 79);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.59, $mul.ref(0, 6)), $mul.ref(2, 1)), 68);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.59, $mul.ref(0, 6)), $mul.ref(3, 1)), 69);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.59, $mul.ref(0, 6)), $mul.ref(4, 1)), 77);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.59, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.175 := $store.i8($M.175, .str.60, 77);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.60, $mul.ref(0, 6)), $mul.ref(1, 1)), 111);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.60, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.60, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.60, $mul.ref(0, 6)), $mul.ref(4, 1)), 109);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.60, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.175 := $store.i8($M.175, .str.61, 109);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.61, $mul.ref(0, 6)), $mul.ref(1, 1)), 111);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.61, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.61, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.61, $mul.ref(0, 6)), $mul.ref(4, 1)), 109);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.61, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.175 := $store.i8($M.175, .str.62, 70);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.62, $mul.ref(0, 4)), $mul.ref(1, 1)), 65);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.62, $mul.ref(0, 4)), $mul.ref(2, 1)), 88);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.62, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.175 := $store.i8($M.175, .str.63, 70);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.63, $mul.ref(0, 4)), $mul.ref(1, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.63, $mul.ref(0, 4)), $mul.ref(2, 1)), 120);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.63, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.175 := $store.i8($M.175, .str.64, 102);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.64, $mul.ref(0, 4)), $mul.ref(1, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.64, $mul.ref(0, 4)), $mul.ref(2, 1)), 120);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.64, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.175 := $store.i8($M.175, .str.65, 53);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.65, $mul.ref(0, 4)), $mul.ref(1, 1)), 54);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.65, $mul.ref(0, 4)), $mul.ref(2, 1)), 75);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.65, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.175 := $store.i8($M.175, .str.66, 53);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.66, $mul.ref(0, 4)), $mul.ref(1, 1)), 54);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.66, $mul.ref(0, 4)), $mul.ref(2, 1)), 107);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.66, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.175 := $store.i8($M.175, .str.67, 75);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.67, $mul.ref(0, 4)), $mul.ref(1, 1)), 53);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.67, $mul.ref(0, 4)), $mul.ref(2, 1)), 54);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.67, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.175 := $store.i8($M.175, .str.68, 51);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.68, $mul.ref(0, 5)), $mul.ref(1, 1)), 51);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.68, $mul.ref(0, 5)), $mul.ref(2, 1)), 46);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.68, $mul.ref(0, 5)), $mul.ref(3, 1)), 54);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.68, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.175 := $store.i8($M.175, .str.69, 50);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.69, $mul.ref(0, 5)), $mul.ref(1, 1)), 56);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.69, $mul.ref(0, 5)), $mul.ref(2, 1)), 46);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.69, $mul.ref(0, 5)), $mul.ref(3, 1)), 56);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.69, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.175 := $store.i8($M.175, .str.70, 49);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.70, $mul.ref(0, 5)), $mul.ref(1, 1)), 52);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.70, $mul.ref(0, 5)), $mul.ref(2, 1)), 46);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.70, $mul.ref(0, 5)), $mul.ref(3, 1)), 52);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.70, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.175 := $store.i8($M.175, .str.71, 51);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(1, 1)), 51);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(2, 1)), 44);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(3, 1)), 54);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(5, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.175 := $store.i8($M.175, .str.72, 50);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(1, 1)), 56);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(2, 1)), 44);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(3, 1)), 56);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(5, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.175 := $store.i8($M.175, .str.73, 49);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.73, $mul.ref(0, 7)), $mul.ref(1, 1)), 52);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.73, $mul.ref(0, 7)), $mul.ref(2, 1)), 44);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.73, $mul.ref(0, 7)), $mul.ref(3, 1)), 52);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.73, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.73, $mul.ref(0, 7)), $mul.ref(5, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.73, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.175 := $store.i8($M.175, .str.74, 51);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.74, $mul.ref(0, 7)), $mul.ref(1, 1)), 51);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.74, $mul.ref(0, 7)), $mul.ref(2, 1)), 46);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.74, $mul.ref(0, 7)), $mul.ref(3, 1)), 54);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.74, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.74, $mul.ref(0, 7)), $mul.ref(5, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.74, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.175 := $store.i8($M.175, .str.75, 50);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(1, 1)), 56);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(2, 1)), 46);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(3, 1)), 56);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(5, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.175 := $store.i8($M.175, .str.76, 49);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.76, $mul.ref(0, 7)), $mul.ref(1, 1)), 52);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.76, $mul.ref(0, 7)), $mul.ref(2, 1)), 46);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.76, $mul.ref(0, 7)), $mul.ref(3, 1)), 52);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.76, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.76, $mul.ref(0, 7)), $mul.ref(5, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.76, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.175 := $store.i8($M.175, .str.77, 51);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.77, $mul.ref(0, 6)), $mul.ref(1, 1)), 51);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.77, $mul.ref(0, 6)), $mul.ref(2, 1)), 54);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.77, $mul.ref(0, 6)), $mul.ref(3, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.77, $mul.ref(0, 6)), $mul.ref(4, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.77, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.175 := $store.i8($M.175, .str.78, 50);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.78, $mul.ref(0, 6)), $mul.ref(1, 1)), 56);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.78, $mul.ref(0, 6)), $mul.ref(2, 1)), 56);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.78, $mul.ref(0, 6)), $mul.ref(3, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.78, $mul.ref(0, 6)), $mul.ref(4, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.78, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.175 := $store.i8($M.175, .str.79, 49);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.79, $mul.ref(0, 6)), $mul.ref(1, 1)), 52);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.79, $mul.ref(0, 6)), $mul.ref(2, 1)), 52);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.79, $mul.ref(0, 6)), $mul.ref(3, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.79, $mul.ref(0, 6)), $mul.ref(4, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.79, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.175 := $store.i8($M.175, .str.80, 86);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.80, $mul.ref(0, 5)), $mul.ref(1, 1)), 46);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.80, $mul.ref(0, 5)), $mul.ref(2, 1)), 57);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.80, $mul.ref(0, 5)), $mul.ref(3, 1)), 48);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.80, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.175 := $store.i8($M.175, .str.81, 86);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.81, $mul.ref(0, 5)), $mul.ref(1, 1)), 46);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.81, $mul.ref(0, 5)), $mul.ref(2, 1)), 51);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.81, $mul.ref(0, 5)), $mul.ref(3, 1)), 52);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.81, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.175 := $store.i8($M.175, .str.82, 86);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.82, $mul.ref(0, 5)), $mul.ref(1, 1)), 46);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.82, $mul.ref(0, 5)), $mul.ref(2, 1)), 51);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.82, $mul.ref(0, 5)), $mul.ref(3, 1)), 50);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.82, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    call {:si_unique_call 1976} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 541437);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i32)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(serial8250_pm, $p0);
    assume {:branchcond $i6} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i6 == 1);
    $i5 := $eq.ref(io_serial_out, $p0);
    assume {:branchcond $i5} true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i5 == 1);
    $i4 := $eq.ref(mem32_serial_out, $p0);
    assume {:branchcond $i4} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i4 == 1);
    $i3 := $eq.ref(mem_serial_out, $p0);
    assume {:branchcond $i3} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i3 == 1);
    $i2 := $eq.ref(hub6_serial_out, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i2 == 1);
    $i1 := $eq.ref(serial8250_do_pm, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1977} serial8250_do_pm(arg, arg1, arg2);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 1978} hub6_serial_out(arg, arg1, arg2);
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 1979} mem_serial_out(arg, arg1, arg2);
    return;

  $bb5:
    assume $i4 == 1;
    call {:si_unique_call 1980} mem32_serial_out(arg, arg1, arg2);
    return;

  $bb6:
    assume $i5 == 1;
    call {:si_unique_call 1981} io_serial_out(arg, arg1, arg2);
    return;

  $bb7:
    assume $i6 == 1;
    call {:si_unique_call 1982} serial8250_pm(arg, arg1, arg2);
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 542469);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(serial_pnp_suspend, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i19 == 1);
    $i18 := $eq.ref(serial8250_suspend, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i18 == 1);
    $i17 := $eq.ref(io_serial_in, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i17 == 1);
    $i16 := $eq.ref(mem32_serial_in, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i16 == 1);
    $i15 := $eq.ref(mem_serial_in, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i15 == 1);
    $i14 := $eq.ref(hub6_serial_in, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i14 == 1);
    $i13 := $eq.ref(serial8250_rx_dma, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i13 == 1);
    $i12 := $eq.ref(serial8250_handle_irq, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    call {:si_unique_call 1983} $i1 := serial8250_handle_irq(arg, arg1);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    $r := $i1;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1984} $i3 := serial8250_rx_dma($p2, arg1);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    $r := $i3;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    call {:si_unique_call 1985} $i4 := hub6_serial_in(arg, arg1);
    $r := $i4;
    return;

  $bb5:
    assume $i15 == 1;
    call {:si_unique_call 1986} $i5 := mem_serial_in(arg, arg1);
    $r := $i5;
    return;

  $bb6:
    assume $i16 == 1;
    call {:si_unique_call 1987} $i6 := mem32_serial_in(arg, arg1);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    $r := $i6;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    call {:si_unique_call 1988} $i7 := io_serial_in(arg, arg1);
    $r := $i7;
    return;

  $bb8:
    assume $i18 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1989} $i9 := serial8250_suspend($p8, arg1);
    $r := $i9;
    return;

  $bb9:
    assume $i19 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1990} $i11 := serial_pnp_suspend($p10, arg1);
    $r := $i11;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 543501);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $CurrAddr, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(serial_pnp_remove, $p0);
    assume true;
    goto $bb14, $bb27;

  $bb27:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial8250_release_port, $p0);
    assume true;
    goto $bb13, $bb26;

  $bb26:
    assume !($i19 == 1);
    $i18 := $eq.ref(serial8250_shutdown, $p0);
    assume true;
    goto $bb12, $bb25;

  $bb25:
    assume !($i18 == 1);
    $i17 := $eq.ref(serial8250_enable_ms, $p0);
    assume true;
    goto $bb11, $bb24;

  $bb24:
    assume !($i17 == 1);
    $i16 := $eq.ref(serial8250_stop_rx, $p0);
    assume true;
    goto $bb10, $bb23;

  $bb23:
    assume !($i16 == 1);
    $i15 := $eq.ref(serial8250_start_tx, $p0);
    assume true;
    goto $bb9, $bb22;

  $bb22:
    assume !($i15 == 1);
    $i14 := $eq.ref(serial8250_release_dma, $p0);
    assume true;
    goto $bb8, $bb21;

  $bb21:
    assume !($i14 == 1);
    $i13 := $eq.ref(__dma_tx_complete, $p0);
    assume true;
    goto $bb7, $bb20;

  $bb20:
    assume !($i13 == 1);
    $i12 := $eq.ref(serial8250_set_isa_configurator, $p0);
    assume true;
    goto $bb6, $bb19;

  $bb19:
    assume !($i12 == 1);
    $i11 := $eq.ref(__dma_rx_complete, $p0);
    assume true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i11 == 1);
    $i10 := $eq.ref(serial8250_stop_tx, $p0);
    assume {:branchcond $i10} true;
    goto $bb4, $bb17;

  $bb17:
    assume !($i10 == 1);
    $i9 := $eq.ref(serial8250_tx_chars, $p0);
    assume {:branchcond $i9} true;
    goto $bb3, $bb16;

  $bb16:
    assume !($i9 == 1);
    $i8 := $eq.ref(serial8250_clear_and_reinit_fifos, $p0);
    assume true;
    goto $bb2, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1991} serial8250_clear_and_reinit_fifos($p1);
    return;

  $bb3:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1992} serial8250_tx_chars($p2);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 1993} serial8250_stop_tx(arg);
    return;

  $bb5:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1994} __dma_rx_complete($p3);
    return;

  $bb6:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1995} serial8250_set_isa_configurator($p4);
    return;

  $bb7:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1996} __dma_tx_complete($p5);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1997} serial8250_release_dma($p6);
    return;

  $bb9:
    assume $i15 == 1;
    call {:si_unique_call 1998} serial8250_start_tx(arg);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i16 == 1;
    call {:si_unique_call 1999} serial8250_stop_rx(arg);
    return;

  $bb11:
    assume $i17 == 1;
    call {:si_unique_call 2000} serial8250_enable_ms(arg);
    return;

  $bb12:
    assume $i18 == 1;
    call {:si_unique_call 2001} serial8250_shutdown(arg);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i19 == 1;
    call {:si_unique_call 2002} serial8250_release_port(arg);
    return;

  $bb14:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2003} serial_pnp_remove($p7);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 544533);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 545565);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i64, arg5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i64, arg5: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 546597);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i48 := $eq.ref(serial_pnp_resume, $p0);
    assume true;
    goto $bb17, $bb33;

  $bb33:
    assume !($i48 == 1);
    $i47 := $eq.ref(serial8250_resume, $p0);
    assume {:branchcond $i47} true;
    goto $bb16, $bb32;

  $bb32:
    assume !($i47 == 1);
    $i46 := $eq.ref(serial8250_remove, $p0);
    assume true;
    goto $bb15, $bb31;

  $bb31:
    assume !($i46 == 1);
    $i45 := $eq.ref(serial8250_probe, $p0);
    assume true;
    goto $bb14, $bb30;

  $bb30:
    assume !($i45 == 1);
    $i44 := $eq.ref(exar_handle_irq, $p0);
    assume true;
    goto $bb13, $bb29;

  $bb29:
    assume !($i44 == 1);
    $i43 := $eq.ref(serial8250_get_poll_char, $p0);
    assume {:branchcond $i43} true;
    goto $bb12, $bb28;

  $bb28:
    assume !($i43 == 1);
    $i42 := $eq.ref(serial8250_request_port, $p0);
    assume {:branchcond $i42} true;
    goto $bb11, $bb27;

  $bb27:
    assume !($i42 == 1);
    $i41 := $eq.ref(serial8250_startup, $p0);
    assume {:branchcond $i41} true;
    goto $bb10, $bb26;

  $bb26:
    assume !($i41 == 1);
    $i40 := $eq.ref(serial8250_get_mctrl, $p0);
    assume true;
    goto $bb9, $bb25;

  $bb25:
    assume !($i40 == 1);
    $i39 := $eq.ref(serial8250_tx_empty, $p0);
    assume {:branchcond $i39} true;
    goto $bb8, $bb24;

  $bb24:
    assume !($i39 == 1);
    $i38 := $eq.ref(serial8250_request_dma, $p0);
    assume {:branchcond $i38} true;
    goto $bb7, $bb23;

  $bb23:
    assume !($i38 == 1);
    $i37 := $eq.ref(serial8250_tx_dma, $p0);
    assume {:branchcond $i37} true;
    goto $bb6, $bb22;

  $bb22:
    assume !($i37 == 1);
    $i36 := $eq.ref(serial8250_default_handle_irq, $p0);
    assume true;
    goto $bb5, $bb21;

  $bb21:
    assume !($i36 == 1);
    $i35 := $eq.ref(default_serial_dl_read, $p0);
    assume true;
    goto $bb4, $bb20;

  $bb20:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial8250_register_8250_port, $p0);
    assume true;
    goto $bb3, $bb19;

  $bb19:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial8250_modem_status, $p0);
    assume {:branchcond $i33} true;
    goto $bb2, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume false;
    return;

  $bb2:
    assume $i33 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2004} $i2 := serial8250_modem_status($p1);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    $r := $i2;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i34 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2005} $i4 := serial8250_register_8250_port($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i35 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2006} $i6 := default_serial_dl_read($p5);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    $r := $i6;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i36 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2007} $i8 := serial8250_default_handle_irq($p7);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    $r := $i8;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i37 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2008} $i10 := serial8250_tx_dma($p9);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    $r := $i10;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i38 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2009} $i12 := serial8250_request_dma($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i39 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2010} $i14 := serial8250_tx_empty($p13);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    $r := $i14;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2011} $i16 := serial8250_get_mctrl($p15);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    $r := $i16;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i41 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2012} $i18 := serial8250_startup($p17);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    $r := $i18;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i42 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2013} $i20 := serial8250_request_port($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i43 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2014} $i22 := serial8250_get_poll_char($p21);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    $r := $i22;
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i44 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2015} $i24 := exar_handle_irq($p23);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    $r := $i24;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i45 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2016} $i26 := serial8250_probe($p25);
    $r := $i26;
    return;

  $bb15:
    assume $i46 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2017} $i28 := serial8250_remove($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i47 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2018} $i30 := serial8250_resume($p29);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    $r := $i30;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i48 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2019} $i32 := serial_pnp_resume($p31);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    $r := $i32;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 547629);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 548661);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 549693);

procedure devirtbounce.8(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $CurrAddr, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i26 := $eq.ref(serial_pnp_remove, $p0);
    assume true;
    goto $bb14, $bb27;

  $bb27:
    assume !($i26 == 1);
    $i25 := $eq.ref(serial8250_release_port, $p0);
    assume {:branchcond $i25} true;
    goto $bb13, $bb26;

  $bb26:
    assume !($i25 == 1);
    $i24 := $eq.ref(serial8250_shutdown, $p0);
    assume true;
    goto $bb12, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(serial8250_enable_ms, $p0);
    assume {:branchcond $i23} true;
    goto $bb11, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(serial8250_stop_rx, $p0);
    assume true;
    goto $bb10, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(serial8250_start_tx, $p0);
    assume true;
    goto $bb9, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(serial8250_release_dma, $p0);
    assume true;
    goto $bb8, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(__dma_tx_complete, $p0);
    assume true;
    goto $bb7, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(serial8250_set_isa_configurator, $p0);
    assume true;
    goto $bb6, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(__dma_rx_complete, $p0);
    assume true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(serial8250_stop_tx, $p0);
    assume true;
    goto $bb4, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(serial8250_tx_chars, $p0);
    assume true;
    goto $bb3, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(serial8250_clear_and_reinit_fifos, $p0);
    assume true;
    goto $bb2, $bb15;

  $bb15:
    assume !($i14 == 1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2020} serial8250_clear_and_reinit_fifos($p1);
    return;

  $bb3:
    assume $i15 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2021} serial8250_tx_chars($p2);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i16 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2022} serial8250_stop_tx($p3);
    return;

  $bb5:
    assume $i17 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2023} __dma_rx_complete($p4);
    return;

  $bb6:
    assume $i18 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2024} serial8250_set_isa_configurator($p5);
    return;

  $bb7:
    assume $i19 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2025} __dma_tx_complete($p6);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2026} serial8250_release_dma($p7);
    return;

  $bb9:
    assume $i21 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2027} serial8250_start_tx($p8);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i22 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2028} serial8250_stop_rx($p9);
    return;

  $bb11:
    assume $i23 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2029} serial8250_enable_ms($p10);
    return;

  $bb12:
    assume $i24 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2030} serial8250_shutdown($p11);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i25 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2031} serial8250_release_port($p12);
    return;

  $bb14:
    assume $i26 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2032} serial_pnp_remove($p13);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 550725);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 551757);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(serial8250_config_port, $p0);
    assume {:branchcond $i9} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i9 == 1);
    $i8 := $eq.ref(serial8250_set_ldisc, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i8 == 1);
    $i7 := $eq.ref(serial8250_break_ctl, $p0);
    assume {:branchcond $i7} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i7 == 1);
    $i6 := $eq.ref(default_serial_dl_write, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i6 == 1);
    $i5 := $eq.ref(serial8250_set_mctrl, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2033} serial8250_set_mctrl($p1, arg1);
    return;

  $bb3:
    assume $i6 == 1;
    call {:si_unique_call 2034} default_serial_dl_write(arg, arg1);
    return;

  $bb4:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2035} serial8250_break_ctl($p2, arg1);
    return;

  $bb5:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2036} serial8250_set_ldisc($p3, arg1);
    return;

  $bb6:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2037} serial8250_config_port($p4, arg1);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 552789);

procedure devirtbounce.11(funcPtr: ref, arg: i32, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: i32, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 553821);

procedure devirtbounce.12(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 554853);

procedure devirtbounce.13(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 555885);

procedure devirtbounce.14(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 556917);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i48 := $eq.ref(serial_pnp_resume, $p0);
    assume true;
    goto $bb17, $bb33;

  $bb33:
    assume !($i48 == 1);
    $i47 := $eq.ref(serial8250_resume, $p0);
    assume {:branchcond $i47} true;
    goto $bb16, $bb32;

  $bb32:
    assume !($i47 == 1);
    $i46 := $eq.ref(serial8250_remove, $p0);
    assume true;
    goto $bb15, $bb31;

  $bb31:
    assume !($i46 == 1);
    $i45 := $eq.ref(serial8250_probe, $p0);
    assume true;
    goto $bb14, $bb30;

  $bb30:
    assume !($i45 == 1);
    $i44 := $eq.ref(exar_handle_irq, $p0);
    assume true;
    goto $bb13, $bb29;

  $bb29:
    assume !($i44 == 1);
    $i43 := $eq.ref(serial8250_get_poll_char, $p0);
    assume {:branchcond $i43} true;
    goto $bb12, $bb28;

  $bb28:
    assume !($i43 == 1);
    $i42 := $eq.ref(serial8250_request_port, $p0);
    assume {:branchcond $i42} true;
    goto $bb11, $bb27;

  $bb27:
    assume !($i42 == 1);
    $i41 := $eq.ref(serial8250_startup, $p0);
    assume {:branchcond $i41} true;
    goto $bb10, $bb26;

  $bb26:
    assume !($i41 == 1);
    $i40 := $eq.ref(serial8250_get_mctrl, $p0);
    assume true;
    goto $bb9, $bb25;

  $bb25:
    assume !($i40 == 1);
    $i39 := $eq.ref(serial8250_tx_empty, $p0);
    assume {:branchcond $i39} true;
    goto $bb8, $bb24;

  $bb24:
    assume !($i39 == 1);
    $i38 := $eq.ref(serial8250_request_dma, $p0);
    assume {:branchcond $i38} true;
    goto $bb7, $bb23;

  $bb23:
    assume !($i38 == 1);
    $i37 := $eq.ref(serial8250_tx_dma, $p0);
    assume {:branchcond $i37} true;
    goto $bb6, $bb22;

  $bb22:
    assume !($i37 == 1);
    $i36 := $eq.ref(serial8250_default_handle_irq, $p0);
    assume true;
    goto $bb5, $bb21;

  $bb21:
    assume !($i36 == 1);
    $i35 := $eq.ref(default_serial_dl_read, $p0);
    assume true;
    goto $bb4, $bb20;

  $bb20:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial8250_register_8250_port, $p0);
    assume true;
    goto $bb3, $bb19;

  $bb19:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial8250_modem_status, $p0);
    assume {:branchcond $i33} true;
    goto $bb2, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume false;
    return;

  $bb2:
    assume $i33 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2038} $i2 := serial8250_modem_status($p1);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    $r := $i2;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i34 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2039} $i4 := serial8250_register_8250_port($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i35 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2040} $i6 := default_serial_dl_read($p5);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    $r := $i6;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i36 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2041} $i8 := serial8250_default_handle_irq($p7);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    $r := $i8;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i37 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2042} $i10 := serial8250_tx_dma($p9);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    $r := $i10;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i38 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2043} $i12 := serial8250_request_dma($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i39 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2044} $i14 := serial8250_tx_empty($p13);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    $r := $i14;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2045} $i16 := serial8250_get_mctrl($p15);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    $r := $i16;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i41 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2046} $i18 := serial8250_startup($p17);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    $r := $i18;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i42 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2047} $i20 := serial8250_request_port($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i43 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2048} $i22 := serial8250_get_poll_char($p21);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    $r := $i22;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i44 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2049} $i24 := exar_handle_irq($p23);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    $r := $i24;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i45 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2050} $i26 := serial8250_probe($p25);
    $r := $i26;
    return;

  $bb15:
    assume $i46 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2051} $i28 := serial8250_remove($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i47 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2052} $i30 := serial8250_resume($p29);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    $r := $i30;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i48 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2053} $i32 := serial_pnp_resume($p31);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    $r := $i32;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 557949);

procedure devirtbounce.16(funcPtr: ref, arg: i8, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: i8, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 558981);

procedure devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 560013);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 561045);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 562077);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 563109);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 564141);

procedure devirtbounce.22(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 565173);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 566205);

procedure devirtbounce.24(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 567237);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(serial8250_set_termios, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(serial8250_do_set_termios, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2054} serial8250_do_set_termios(arg, arg1, arg2);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 2055} serial8250_set_termios(arg, arg1, arg2);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;
}



const devirtbounce.26: ref;

axiom devirtbounce.26 == $sub.ref(0, 568269);

procedure devirtbounce.26(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.26(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.27: ref;

axiom devirtbounce.27 == $sub.ref(0, 569301);

procedure devirtbounce.27(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation devirtbounce.27(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i43 := $eq.ref(serial_pnp_resume, $p0);
    assume {:branchcond $i43} true;
    goto $bb17, $bb33;

  $bb33:
    assume !($i43 == 1);
    $i42 := $eq.ref(serial8250_resume, $p0);
    assume {:branchcond $i42} true;
    goto $bb16, $bb32;

  $bb32:
    assume !($i42 == 1);
    $i41 := $eq.ref(serial8250_remove, $p0);
    assume {:branchcond $i41} true;
    goto $bb15, $bb31;

  $bb31:
    assume !($i41 == 1);
    $i40 := $eq.ref(serial8250_probe, $p0);
    assume true;
    goto $bb14, $bb30;

  $bb30:
    assume !($i40 == 1);
    $i39 := $eq.ref(exar_handle_irq, $p0);
    assume {:branchcond $i39} true;
    goto $bb13, $bb29;

  $bb29:
    assume !($i39 == 1);
    $i38 := $eq.ref(serial8250_get_poll_char, $p0);
    assume {:branchcond $i38} true;
    goto $bb12, $bb28;

  $bb28:
    assume !($i38 == 1);
    $i37 := $eq.ref(serial8250_request_port, $p0);
    assume {:branchcond $i37} true;
    goto $bb11, $bb27;

  $bb27:
    assume !($i37 == 1);
    $i36 := $eq.ref(serial8250_startup, $p0);
    assume true;
    goto $bb10, $bb26;

  $bb26:
    assume !($i36 == 1);
    $i35 := $eq.ref(serial8250_get_mctrl, $p0);
    assume true;
    goto $bb9, $bb25;

  $bb25:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial8250_tx_empty, $p0);
    assume true;
    goto $bb8, $bb24;

  $bb24:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial8250_request_dma, $p0);
    assume {:branchcond $i33} true;
    goto $bb7, $bb23;

  $bb23:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial8250_tx_dma, $p0);
    assume true;
    goto $bb6, $bb22;

  $bb22:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial8250_default_handle_irq, $p0);
    assume true;
    goto $bb5, $bb21;

  $bb21:
    assume !($i31 == 1);
    $i30 := $eq.ref(default_serial_dl_read, $p0);
    assume true;
    goto $bb4, $bb20;

  $bb20:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial8250_register_8250_port, $p0);
    assume true;
    goto $bb3, $bb19;

  $bb19:
    assume !($i29 == 1);
    $i28 := $eq.ref(serial8250_modem_status, $p0);
    assume true;
    goto $bb2, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume false;
    return;

  $bb2:
    assume $i28 == 1;
    call {:si_unique_call 2056} $i1 := serial8250_modem_status(arg);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    $r := $i1;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i29 == 1;
    call {:si_unique_call 2057} $i2 := serial8250_register_8250_port(arg);
    $r := $i2;
    return;

  $bb4:
    assume $i30 == 1;
    call {:si_unique_call 2058} $i3 := default_serial_dl_read(arg);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    $r := $i3;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i31 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2059} $i5 := serial8250_default_handle_irq($p4);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    $r := $i5;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i32 == 1;
    call {:si_unique_call 2060} $i6 := serial8250_tx_dma(arg);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    $r := $i6;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i33 == 1;
    call {:si_unique_call 2061} $i7 := serial8250_request_dma(arg);
    $r := $i7;
    return;

  $bb8:
    assume $i34 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2062} $i9 := serial8250_tx_empty($p8);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    $r := $i9;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i35 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2063} $i11 := serial8250_get_mctrl($p10);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    $r := $i11;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i36 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2064} $i13 := serial8250_startup($p12);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    $r := $i13;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i37 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2065} $i15 := serial8250_request_port($p14);
    $r := $i15;
    return;

  $bb12:
    assume $i38 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2066} $i17 := serial8250_get_poll_char($p16);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    $r := $i17;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i39 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2067} $i19 := exar_handle_irq($p18);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    $r := $i19;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i40 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2068} $i21 := serial8250_probe($p20);
    $r := $i21;
    return;

  $bb15:
    assume $i41 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2069} $i23 := serial8250_remove($p22);
    $r := $i23;
    return;

  $bb16:
    assume $i42 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2070} $i25 := serial8250_resume($p24);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    $r := $i25;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i43 == 1;
    $p26 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2071} $i27 := serial_pnp_resume($p26);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    $r := $i27;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;
}



const devirtbounce.28: ref;

axiom devirtbounce.28 == $sub.ref(0, 570333);

procedure devirtbounce.28(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation devirtbounce.28(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i41 := $eq.ref(serial_pnp_resume, $p0);
    assume {:branchcond $i41} true;
    goto $bb17, $bb33;

  $bb33:
    assume !($i41 == 1);
    $i40 := $eq.ref(serial8250_resume, $p0);
    assume true;
    goto $bb16, $bb32;

  $bb32:
    assume !($i40 == 1);
    $i39 := $eq.ref(serial8250_remove, $p0);
    assume {:branchcond $i39} true;
    goto $bb15, $bb31;

  $bb31:
    assume !($i39 == 1);
    $i38 := $eq.ref(serial8250_probe, $p0);
    assume {:branchcond $i38} true;
    goto $bb14, $bb30;

  $bb30:
    assume !($i38 == 1);
    $i37 := $eq.ref(exar_handle_irq, $p0);
    assume {:branchcond $i37} true;
    goto $bb13, $bb29;

  $bb29:
    assume !($i37 == 1);
    $i36 := $eq.ref(serial8250_get_poll_char, $p0);
    assume true;
    goto $bb12, $bb28;

  $bb28:
    assume !($i36 == 1);
    $i35 := $eq.ref(serial8250_request_port, $p0);
    assume true;
    goto $bb11, $bb27;

  $bb27:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial8250_startup, $p0);
    assume true;
    goto $bb10, $bb26;

  $bb26:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial8250_get_mctrl, $p0);
    assume {:branchcond $i33} true;
    goto $bb9, $bb25;

  $bb25:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial8250_tx_empty, $p0);
    assume true;
    goto $bb8, $bb24;

  $bb24:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial8250_request_dma, $p0);
    assume true;
    goto $bb7, $bb23;

  $bb23:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial8250_tx_dma, $p0);
    assume true;
    goto $bb6, $bb22;

  $bb22:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial8250_default_handle_irq, $p0);
    assume true;
    goto $bb5, $bb21;

  $bb21:
    assume !($i29 == 1);
    $i28 := $eq.ref(default_serial_dl_read, $p0);
    assume true;
    goto $bb4, $bb20;

  $bb20:
    assume !($i28 == 1);
    $i27 := $eq.ref(serial8250_register_8250_port, $p0);
    assume true;
    goto $bb3, $bb19;

  $bb19:
    assume !($i27 == 1);
    $i26 := $eq.ref(serial8250_modem_status, $p0);
    assume true;
    goto $bb2, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume false;
    return;

  $bb2:
    assume $i26 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2072} $i2 := serial8250_modem_status($p1);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    $r := $i2;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i27 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2073} $i4 := serial8250_register_8250_port($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i28 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2074} $i6 := default_serial_dl_read($p5);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    $r := $i6;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i29 == 1;
    call {:si_unique_call 2075} $i7 := serial8250_default_handle_irq(arg);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    $r := $i7;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i30 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2076} $i9 := serial8250_tx_dma($p8);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    $r := $i9;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i31 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2077} $i11 := serial8250_request_dma($p10);
    $r := $i11;
    return;

  $bb8:
    assume $i32 == 1;
    call {:si_unique_call 2078} $i12 := serial8250_tx_empty(arg);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    $r := $i12;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i33 == 1;
    call {:si_unique_call 2079} $i13 := serial8250_get_mctrl(arg);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    $r := $i13;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i34 == 1;
    call {:si_unique_call 2080} $i14 := serial8250_startup(arg);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    $r := $i14;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i35 == 1;
    call {:si_unique_call 2081} $i15 := serial8250_request_port(arg);
    $r := $i15;
    return;

  $bb12:
    assume $i36 == 1;
    call {:si_unique_call 2082} $i16 := serial8250_get_poll_char(arg);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    $r := $i16;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i37 == 1;
    call {:si_unique_call 2083} $i17 := exar_handle_irq(arg);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    $r := $i17;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i38 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2084} $i19 := serial8250_probe($p18);
    $r := $i19;
    return;

  $bb15:
    assume $i39 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2085} $i21 := serial8250_remove($p20);
    $r := $i21;
    return;

  $bb16:
    assume $i40 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2086} $i23 := serial8250_resume($p22);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    $r := $i23;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i41 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2087} $i25 := serial_pnp_resume($p24);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    $r := $i25;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;
}



const devirtbounce.29: ref;

axiom devirtbounce.29 == $sub.ref(0, 571365);

procedure devirtbounce.29(funcPtr: ref, arg: i64);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.38, $M.39, $M.6, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation devirtbounce.29(funcPtr: ref, arg: i64)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(serial8250_backup_timeout, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(serial8250_timeout, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2088} serial8250_timeout(arg);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 2089} serial8250_backup_timeout(arg);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.36, $M.30, $M.34, $M.32, $M.39, $M.81, $M.82, $M.83, $M.84, $M.85, $M.48, $M.86, $M.26, $M.0, $M.28, $M.29, $M.132, $M.133, $M.134, $M.135, $M.136, $M.53, $M.50, $M.51, $M.54, $M.55, $M.57, $M.56, $M.58, $M.52, $M.44, $M.7, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.27, $M.8, $M.9, $M.1, $M.10, $M.76, $M.78, $M.77, $M.144, $M.73, $M.71, $M.72, $M.70, $M.11, $M.6, $M.63, $M.35, $M.64, $M.33, $M.65, $M.38, $M.31, $M.67, $M.60, $M.37, $M.74, $M.42, $M.61, $M.43, $M.68, $M.69, $M.66, $M.40, $M.41, $M.2, $M.175, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2090} __SMACK_static_init();
    call {:si_unique_call 2091} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.0, $M.70, $M.45, $M.71, $M.72, $M.12, $M.30, $M.73, $M.61, $M.39, $M.4, $M.5, $M.2, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.36, $M.34, $M.32, $M.81, $M.82, $M.83, $M.84, $M.85, $M.48, $M.86, $M.26, $M.28, $M.29, $M.132, $M.133, $M.134, $M.135, $M.136, $M.53, $M.50, $M.51, $M.54, $M.55, $M.57, $M.56, $M.58, $M.52, $M.44, $M.7, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.27, $M.8, $M.9, $M.1, $M.10, $M.76, $M.78, $M.77, $M.144, $M.11, $M.6, $M.35, $M.33, $M.38, $M.31, $M.60, $M.37, $M.74, $M.42, $M.43, $M.40, $M.41, $M.175, $CurrAddr, $M.75, $M.46, $M.19, $M.49;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation serial8250_rx_chars_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$i4: i8, in_$i5: i64, in_$i6: i64, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i8, in_$i11: i8, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$p17: ref, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i8, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i8, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p64: ref, in_$i46: i8, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i8, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i80: i8, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i8, in_$i88: i8, in_$i84: i8, in_$i93: i8, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i8, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i104: i32, in_$i105: i1, in_$i106: i8, in_$i103: i8) returns (out_$i3: i32, out_$i4: i8, out_$i5: i64, out_$i6: i64, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i8, out_$i11: i8, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$p17: ref, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i8, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i8, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p64: ref, out_$i46: i8, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i8, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i80: i8, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i8, out_$i88: i8, out_$i84: i8, out_$i93: i8, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i8, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i104: i32, out_$i105: i1, out_$i106: i8, out_$i103: i8)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p13, out_$i14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p64, out_$i46, out_$i65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i88, out_$i84, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i103 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$p13, in_$i14, in_$i15, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p39, in_$i40, in_$i41, in_$p43, in_$i44, in_$i45, in_$i47, in_$i48, in_$i49, in_$p51, in_$i52, in_$i53, in_$p55, in_$i56, in_$i57, in_$i58, in_$p60, in_$i61, in_$i62, in_$p64, in_$i46, in_$i65, in_$i66, in_$i67, in_$p69, in_$i70, in_$i71, in_$p73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i85, in_$i86, in_$i87, in_$i89, in_$i90, in_$i91, in_$i92, in_$i88, in_$i84, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i104, in_$i105, in_$i106, in_$i103;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_31;

  $bb35:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i3, out_$i4 := out_$i104, out_$i99;
    goto $bb35_dummy;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i99;
    assume true;
    goto $bb35;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$i105 := $sgt.i32(out_$i3, 0);
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i104 := $sub.i32(out_$i3, 1);
    call {:si_unique_call 26} {:cexpr "max_count"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_150;

  $bb33:
    assume out_$i102 == 1;
    goto corral_source_split_149;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i99;
    assume true;
    goto $bb33;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i32(out_$i100, 17);
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i99);
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i32.i8(out_$i98);
    call {:si_unique_call 23} {:cexpr "lsr"} boogie_si_record_i8(out_$i99);
    goto corral_source_split_84;

  SeqInstr_9:
    call {:si_unique_call 22} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_83;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} out_$i98 := serial_in(in_$p0, 5);
    goto SeqInstr_8;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume out_$i45 == 1;
    goto corral_source_split_81;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_74;

  SeqInstr_6:
    call {:si_unique_call 20} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_73;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} out_$i44 := uart_handle_break(in_$p2);
    goto SeqInstr_5;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, out_$i41);
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i40, 1);
    out_$p43 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(36, 1));
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i8(out_$i36);
    call {:si_unique_call 18} {:cexpr "lsr"} boogie_si_record_i8(out_$i37);
    out_$p39 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(36, 1));
    goto corral_source_split_69;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 243);
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i23);
    goto corral_source_split_67;

  $bb7:
    assume out_$i34 == 1;
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i32, 16);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i23);
    goto corral_source_split_62;

  $bb5:
    assume out_$i31 == 1;
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_59;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} out_$i30 := ldv__builtin_expect(out_$i29, 0);
    call {:si_unique_call 17} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_58;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i28);
    goto corral_source_split_57;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    goto corral_source_split_56;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_55;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 30);
    goto corral_source_split_54;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i23);
    goto corral_source_split_53;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p24, 0);
    goto corral_source_split_52;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_51;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i32.i8(out_$i22);
    call {:si_unique_call 15} {:cexpr "lsr"} boogie_si_record_i8(out_$i23);
    goto corral_source_split_50;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    out_$i22 := $or.i32(out_$i20, out_$i21);
    goto corral_source_split_49;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i4);
    goto corral_source_split_48;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_47;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.0, out_$p18);
    goto corral_source_split_46;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(471, 1));
    goto corral_source_split_45;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p17, out_$i15);
    goto corral_source_split_44;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i14, 1);
    out_$p17 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(16, 1));
    goto corral_source_split_43;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_42;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(16, 1));
    goto corral_source_split_41;

  $bb3:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := 0;
    goto $bb4;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i10;
    goto $bb4;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i32.i8(out_$i9);
    call {:si_unique_call 14} {:cexpr "ch"} boogie_si_record_i8(out_$i10);
    goto corral_source_split_39;

  SeqInstr_3:
    call {:si_unique_call 13} {:cexpr "tmp"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_38;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} out_$i9 := serial_in(in_$p0, 0);
    goto SeqInstr_2;

  $bb2:
    assume out_$i8 == 1;
    goto corral_source_split_37;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_35;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} out_$i7 := ldv__builtin_expect(out_$i6, 1);
    call {:si_unique_call 11} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i7);
    goto corral_source_split_34;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    out_$i6 := $and.i64(out_$i5, 1);
    goto corral_source_split_33;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$i5 := $zext.i8.i64(out_$i4);
    goto corral_source_split_32;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} uart_insert_char(in_$p2, out_$i95, 2, out_$i96, out_$i97);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i8.i32(out_$i94);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i32(out_$i11);
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i93);
    goto corral_source_split_144;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_143;

  $bb6:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i93, out_$i94 := out_$i23, 0;
    goto $bb32;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$i93, out_$i94 := out_$i80, out_$i84;
    goto $bb32;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i84 := out_$i88;
    goto $bb25;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    out_$i84 := 1;
    goto $bb25;

  $bb23:
    assume out_$i83 == 1;
    goto corral_source_split_125;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$i82 := $and.i32(out_$i81, 16);
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i80);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    out_$i80 := $trunc.i32.i8(out_$i79);
    call {:si_unique_call 24} {:cexpr "lsr"} boogie_si_record_i8(out_$i80);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$i79 := $and.i32(out_$i77, out_$i78);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i46);
    goto corral_source_split_118;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i76);
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i32.i8(out_$i75);
    goto corral_source_split_116;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, out_$p74);
    goto corral_source_split_115;

  $bb22:
    out_$p74 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(164, 1));
    goto corral_source_split_114;

  $bb21:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p73, out_$i71);
    goto corral_source_split_112;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i70, 1);
    out_$p73 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(28, 1));
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    goto corral_source_split_110;

  $bb20:
    assume out_$i67 == 1;
    out_$p69 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(28, 1));
    goto corral_source_split_109;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i65, 2);
    goto corral_source_split_91;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i46);
    goto corral_source_split_90;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_89;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i23;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i37;
    goto $bb13;

  $bb10:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, out_$i53);
    goto corral_source_split_97;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i52, 1);
    out_$p55 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(32, 1));
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_95;

  $bb14:
    assume out_$i49 == 1;
    out_$p51 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(32, 1));
    goto corral_source_split_94;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$i48 := $and.i32(out_$i47, 4);
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i23);
    goto corral_source_split_77;

  $bb8:
    assume !(out_$i34 == 1);
    goto corral_source_split_76;

  $bb18:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, out_$i62);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i61, 1);
    out_$p64 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(24, 1));
    goto corral_source_split_106;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_105;

  $bb17:
    assume out_$i58 == 1;
    out_$p60 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(24, 1));
    goto corral_source_split_104;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i56, 8);
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i23);
    goto corral_source_split_100;

  $bb15:
    assume !(out_$i49 == 1);
    goto corral_source_split_99;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i88 := out_$i92;
    goto $bb28;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$i88 := 3;
    goto $bb28;

  $bb26:
    assume out_$i87 == 1;
    goto corral_source_split_134;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$i86 := $and.i32(out_$i85, 4);
    goto corral_source_split_129;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i8.i32(out_$i80);
    goto corral_source_split_128;

  $bb24:
    assume !(out_$i83 == 1);
    goto corral_source_split_127;

  $bb30:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i92 := 0;
    goto $bb31;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$i92 := 2;
    goto $bb31;

  $bb29:
    assume out_$i91 == 1;
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_139;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    out_$i90 := $and.i32(out_$i89, 8);
    goto corral_source_split_138;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i8.i32(out_$i80);
    goto corral_source_split_137;

  $bb27:
    assume !(out_$i87 == 1);
    goto corral_source_split_136;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p13, out_$i14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p64, out_$i46, out_$i65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i88, out_$i84, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i103 := serial8250_rx_chars_loop_$bb1(in_$p0, in_$p2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p13, out_$i14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p64, out_$i46, out_$i65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i88, out_$i84, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i103);
    return;

  exit:
    return;
}



procedure serial8250_rx_chars_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$i4: i8, in_$i5: i64, in_$i6: i64, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i8, in_$i11: i8, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$p17: ref, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i8, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i8, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p64: ref, in_$i46: i8, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i8, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i80: i8, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i8, in_$i88: i8, in_$i84: i8, in_$i93: i8, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i8, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i104: i32, in_$i105: i1, in_$i106: i8, in_$i103: i8) returns (out_$i3: i32, out_$i4: i8, out_$i5: i64, out_$i6: i64, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i8, out_$i11: i8, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$p17: ref, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i8, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i8, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p64: ref, out_$i46: i8, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i8, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i80: i8, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i8, out_$i88: i8, out_$i84: i8, out_$i93: i8, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i8, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i104: i32, out_$i105: i1, out_$i106: i8, out_$i103: i8);
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial8250_tx_chars_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1) returns (out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1)
{

  entry:
    out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62 := in_$i28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p43, in_$i44, in_$i45, in_$p47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(0, 1));
    goto corral_source_split_259;

  $bb22:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i61;
    goto $bb22_dummy;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i61, 0);
    goto corral_source_split_302;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i28, 1);
    call {:si_unique_call 58} {:cexpr "count"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_301;

  $bb17:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 96);
    goto corral_source_split_297;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i58, 96);
    goto corral_source_split_296;

  SeqInstr_18:
    call {:si_unique_call 57} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_295;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} out_$i58 := serial_port_in(in_$p1, 5);
    goto SeqInstr_17;

  $bb16:
    assume out_$i57 == 1;
    goto corral_source_split_294;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_292;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i32(out_$i55, 16384);
    goto corral_source_split_291;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i16.i32(out_$i54);
    goto corral_source_split_290;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i16($M.0, out_$p53);
    goto corral_source_split_289;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_288;

  $bb13:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i49, out_$i51);
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    out_$p50 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_274;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p47, out_$i45);
    out_$p48 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(8, 1));
    goto corral_source_split_273;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i44, 1);
    out_$p47 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1));
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_271;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p41, out_$i40);
    out_$p43 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(20, 1));
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i39, 4095);
    out_$p41 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_269;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i38, 1);
    goto corral_source_split_268;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_267;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} serial_out(in_$p0, 0, out_$i36);
    out_$p37 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_266;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i8.i32(out_$i35);
    goto corral_source_split_265;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p34);
    goto corral_source_split_264;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p30, $mul.ref(out_$i33, 1));
    goto corral_source_split_263;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i32);
    goto corral_source_split_262;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_261;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    out_$p31 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1096)), $mul.ref(1072, 1)), $mul.ref(12, 1));
    goto corral_source_split_260;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62 := serial8250_tx_chars_loop_$bb11(in_$p0, in_$p1, in_$p3, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62);
    return;

  exit:
    return;
}



procedure serial8250_tx_chars_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1) returns (out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1);
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation dma_sync_single_for_device_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_sync_single_for_device_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_sync_single_for_device_loop_$bb3();



implementation dma_sync_single_for_cpu_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_sync_single_for_cpu_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_sync_single_for_cpu_loop_$bb3();



implementation serial8250_find_match_or_unused_loop_$bb30(in_$i40: i64, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i39: i32) returns (out_$i40: i64, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i39: i32)
{

  entry:
    out_$i40, out_$p43, out_$i44, out_$i45, out_$i46, out_$i49, out_$i50, out_$i51, out_$i39 := in_$i40, in_$p43, in_$i44, in_$i45, in_$i46, in_$i49, in_$i50, in_$i51, in_$i39;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1670;

  $bb35:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i49;
    goto $bb35_dummy;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i32(out_$i49, out_$i50);
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i50 := $M.7;
    goto corral_source_split_1681;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i39, 1);
    call {:si_unique_call 272} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_1680;

  $bb33:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i39;
    assume true;
    goto $bb33;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_1674;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i40, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1673;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i39);
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i40, out_$p43, out_$i44, out_$i45, out_$i46, out_$i49, out_$i50, out_$i51, out_$i39 := serial8250_find_match_or_unused_loop_$bb30(out_$i40, out_$p43, out_$i44, out_$i45, out_$i46, out_$i49, out_$i50, out_$i51, out_$i39);
    return;

  exit:
    return;
}



procedure serial8250_find_match_or_unused_loop_$bb30(in_$i40: i64, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i39: i32) returns (out_$i40: i64, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i39: i32);



implementation serial8250_find_match_or_unused_loop_$bb16(in_$i19: i64, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i64, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$i31: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i18: i32) returns (out_$i19: i64, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i64, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$i31: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i18: i32)
{

  entry:
    out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$i34, out_$i35, out_$i36, out_$i18 := in_$i19, in_$p22, in_$i23, in_$i24, in_$i25, in_$p28, in_$i29, in_$i30, in_$i31, in_$i34, in_$i35, in_$i36, in_$i18;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1643;

  $bb24:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i34;
    goto $bb24_dummy;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    out_$i36 := $ult.i32(out_$i34, out_$i35);
    goto corral_source_split_1661;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$i35 := $M.7;
    goto corral_source_split_1660;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i18, 1);
    call {:si_unique_call 271} {:cexpr "i"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_1659;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb20;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb20;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i18;
    assume true;
    goto $bb22;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i64(out_$i29, 0);
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.0, out_$p28);
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i25, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i18);
    goto corral_source_split_1651;

  $bb18:
    assume out_$i24 == 1;
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 0);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i19, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_1646;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_1645;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$i34, out_$i35, out_$i36, out_$i18 := serial8250_find_match_or_unused_loop_$bb16(out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$i34, out_$i35, out_$i36, out_$i18);
    return;

  exit:
    return;
}



procedure serial8250_find_match_or_unused_loop_$bb16(in_$i19: i64, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i64, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$i31: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i18: i32) returns (out_$i19: i64, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i64, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$i31: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i18: i32);



implementation serial8250_find_match_or_unused_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i3: i32) returns (out_$i4: i64, out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i3: i32)
{

  entry:
    out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i13, out_$i14, out_$i15, out_$i3 := in_$i4, in_$p6, in_$i7, in_$i8, in_$i9, in_$i13, in_$i14, in_$i15, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1620;

  $bb10:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i13;
    goto $bb10_dummy;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$i15 := $ult.i32(out_$i13, out_$i14);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i14 := $M.7;
    goto corral_source_split_1633;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i3, 1);
    call {:si_unique_call 270} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1632;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i3;
    assume true;
    goto $bb7;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} out_$i7 := uart_match_port(out_$p6, in_$p0);
    call {:si_unique_call 269} {:cexpr "tmp"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i4, 504)), $mul.ref(0, 1));
    goto corral_source_split_1623;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i3);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i13, out_$i14, out_$i15, out_$i3 := serial8250_find_match_or_unused_loop_$bb4(in_$p0, out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i13, out_$i14, out_$i15, out_$i3);
    return;

  exit:
    return;
}



procedure serial8250_find_match_or_unused_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i3: i32) returns (out_$i4: i64, out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i3: i32);



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation wait_for_xmitr_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$p11: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i8, in_$i19: i32, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i1) returns (out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i8, out_$i19: i32, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i1)
{

  entry:
    out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26 := in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := out_$i15;
    goto $bb11_dummy;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, in_$i1);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i32(out_$i17, in_$i1);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, in_$p11, out_$i24);
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i8(out_$i23);
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$i23 := $or.i32(out_$i19, out_$i22);
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i21, 30);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i8(out_$i17);
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.0, in_$p3);
    goto corral_source_split_3770;

  SeqInstr_207:
    call {:si_unique_call 702} {:cexpr "tmp"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3769;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} out_$i17 := serial_in(in_$p0, 5);
    goto SeqInstr_206;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} __const_udelay(4295);
    goto corral_source_split_3768;

  $bb9:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 0);
    goto corral_source_split_3764;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i14, 1);
    call {:si_unique_call 699} {:cexpr "tmout"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3763;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26 := wait_for_xmitr_loop_$bb4(in_$p0, in_$i1, in_$p3, in_$p11, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26);
    return;

  exit:
    return;
}



procedure wait_for_xmitr_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$p11: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i8, in_$i19: i32, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i1) returns (out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i8, out_$i19: i32, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i1);
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation wait_for_xmitr_loop_$bb14(in_$p0: ref, in_$i33: i32, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i8, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i8, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i32: i32) returns (out_$i33: i32, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i8, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i8, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i32: i32)
{

  entry:
    out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i32 := in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i32;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  $bb20:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := out_$i45;
    goto $bb20_dummy;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i45 := $sub.i32(out_$i32, 1);
    call {:si_unique_call 707} {:cexpr "tmout___0"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3803;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} touch_nmi_watchdog();
    goto corral_source_split_3802;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __const_udelay(4295);
    goto corral_source_split_3801;

  $bb17:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i33, 16);
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p42, out_$i41);
    goto corral_source_split_3795;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(472, 1));
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i32.i8(out_$i40);
    goto corral_source_split_3793;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    out_$i40 := $or.i32(out_$i36, out_$i39);
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i32(out_$i38, 15);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i8(out_$i33);
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_3788;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p34);
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(472, 1));
    goto corral_source_split_3786;

  SeqInstr_210:
    call {:si_unique_call 704} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_3785;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} out_$i33 := serial_in(in_$p0, 6);
    goto SeqInstr_209;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i32 := wait_for_xmitr_loop_$bb14(in_$p0, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i32);
    return;

  exit:
    return;
}



procedure wait_for_xmitr_loop_$bb14(in_$p0: ref, in_$i33: i32, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i8, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i8, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i32: i32) returns (out_$i33: i32, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i8, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i8, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i32: i32);
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation autoconfig_loop_$bb48(in_$p0: ref, in_$i73: i64, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i72: i32) returns (out_$i73: i64, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i72: i32)
{

  entry:
    out_$i73, out_$p74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i82, out_$i83, out_$i84, out_$i72 := in_$i73, in_$p74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i82, in_$i83, in_$i84, in_$i72;
    goto $bb48, exit;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_4007;

  $bb57:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := out_$i82;
    goto $bb57_dummy;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    out_$i84 := $ult.i32(out_$i82, out_$i83);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$i83 := $M.28;
    goto corral_source_split_4023;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i82 := $add.i32(out_$i72, 1);
    call {:si_unique_call 757} {:cexpr "i"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_4022;

  $bb51:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_4017;

  SeqInstr_240:
    call {:si_unique_call 756} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_4016;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} out_$i79 := __enable_rsa(in_$p0);
    goto SeqInstr_239;

  $bb50:
    assume out_$i78 == 1;
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i64(out_$i75, out_$i77);
    goto corral_source_split_4013;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i64($M.0, out_$p76);
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i64($M.29, out_$p74);
    out_$p76 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(probe_rsa, $mul.ref(0, 32)), $mul.ref(out_$i73, 8));
    goto corral_source_split_4010;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i72);
    goto corral_source_split_4009;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb57_dummy:
    call {:si_unique_call 1} out_$i73, out_$p74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i82, out_$i83, out_$i84, out_$i72 := autoconfig_loop_$bb48(in_$p0, out_$i73, out_$p74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i82, out_$i83, out_$i84, out_$i72);
    return;

  exit:
    return;
}



procedure autoconfig_loop_$bb48(in_$p0: ref, in_$i73: i64, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i72: i32) returns (out_$i73: i64, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i72: i32);
  modifies $M.0, $M.2, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation size_fifo_loop_$bb12(in_$p0: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i13: i32, in_$i21: i32, in_vslice_dummy_var_57: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i13: i32, out_$i21: i32, out_vslice_dummy_var_57: i32)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i13, out_$i21, out_vslice_dummy_var_57 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i13, in_$i21, in_vslice_dummy_var_57;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4678;

  $bb14:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i15;
    goto $bb14_dummy;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i15;
    assume true;
    goto $bb14;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    out_$i20 := $and.i1(out_$i18, out_$i19);
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    out_$i19 := $sle.i32(out_$i15, 255);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_4684;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i32(out_$i16, 1);
    goto corral_source_split_4683;

  SeqInstr_399:
    call {:si_unique_call 982} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4682;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} out_$i16 := serial_in(in_$p0, 5);
    goto SeqInstr_398;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i13, 1);
    call {:si_unique_call 980} {:cexpr "count"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_4681;

  SeqInstr_396:
    goto corral_source_split_4680;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} out_vslice_dummy_var_57 := serial_in(in_$p0, 0);
    goto SeqInstr_395;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i13, out_$i21, out_vslice_dummy_var_57 := size_fifo_loop_$bb12(in_$p0, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i13, out_$i21, out_vslice_dummy_var_57);
    return;

  exit:
    return;
}



procedure size_fifo_loop_$bb12(in_$p0: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i13: i32, in_$i21: i32, in_vslice_dummy_var_57: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i13: i32, out_$i21: i32, out_vslice_dummy_var_57: i32);
  modifies $M.2, $M.0, $M.45, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed;



implementation serial_unlink_irq_chain_loop_$bb19()
{

  entry:
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb19_dummy:
    call {:si_unique_call 1} serial_unlink_irq_chain_loop_$bb19();
    return;

  exit:
    return;
}



procedure serial_unlink_irq_chain_loop_$bb19();



implementation serial_unlink_irq_chain_loop_$bb15()
{

  entry:
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb15_dummy:
    call {:si_unique_call 1} serial_unlink_irq_chain_loop_$bb15();
    return;

  exit:
    return;
}



procedure serial_unlink_irq_chain_loop_$bb15();



implementation serial_unlink_irq_chain_loop_$bb4(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p13: ref, in_$p29: ref, in_$p30: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p13: ref, out_$p29: ref, out_$p30: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p25, out_$p26, out_$i27, out_$i28, out_$p13, out_$p29, out_$p30 := in_$p14, in_$p15, in_$i16, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$p25, in_$p26, in_$i27, in_$i28, in_$p13, in_$p29, in_$p30;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5352;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p26;
    goto $bb10_dummy;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    out_$p29, out_$p30 := out_$p13, out_$p26;
    assume true;
    goto $bb10;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_5374;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_5372;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5371;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$p21, out_$p22 := out_$p13, out_$p13;
    assume true;
    goto $bb7;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i16, out_$i19);
    goto corral_source_split_5359;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_5358;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5357;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_5356;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5355;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_5354;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p25, out_$p26, out_$i27, out_$i28, out_$p13, out_$p29, out_$p30 := serial_unlink_irq_chain_loop_$bb4(in_$p0, out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p25, out_$p26, out_$i27, out_$i28, out_$p13, out_$p29, out_$p30);
    return;

  exit:
    return;
}



procedure serial_unlink_irq_chain_loop_$bb4(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p13: ref, in_$p29: ref, in_$p30: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p13: ref, out_$p29: ref, out_$p30: ref);



implementation serial_do_unlink_loop_$bb9()
{

  entry:
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;

  $bb9_dummy:
    call {:si_unique_call 1} serial_do_unlink_loop_$bb9();
    return;

  exit:
    return;
}



procedure serial_do_unlink_loop_$bb9();



implementation serial_link_irq_chain_loop_$bb4(in_$p0: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p20: ref, in_$p36: ref, in_$p37: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p20: ref, out_$p36: ref, out_$p37: ref)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$p32, out_$p33, out_$i34, out_$i35, out_$p20, out_$p36, out_$p37 := in_$p21, in_$p22, in_$i23, in_$p25, in_$i26, in_$i27, in_$p28, in_$p29, in_$p32, in_$p33, in_$i34, in_$i35, in_$p20, in_$p36, in_$p37;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5776;

  $bb10:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p20 := out_$p33;
    goto $bb10_dummy;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$p36, out_$p37 := out_$p20, out_$p33;
    assume true;
    goto $bb10;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_5794;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_5793;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_5792;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p20, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5791;

  $bb7:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    out_$p28, out_$p29 := out_$p20, out_$p20;
    assume true;
    goto $bb7;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i23, out_$i26);
    goto corral_source_split_5783;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_5782;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5781;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_5780;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5779;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_5778;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$p32, out_$p33, out_$i34, out_$i35, out_$p20, out_$p36, out_$p37 := serial_link_irq_chain_loop_$bb4(in_$p0, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$p32, out_$p33, out_$i34, out_$i35, out_$p20, out_$p36, out_$p37);
    return;

  exit:
    return;
}



procedure serial_link_irq_chain_loop_$bb4(in_$p0: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p20: ref, in_$p36: ref, in_$p37: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p20: ref, out_$p36: ref, out_$p37: ref);



implementation serial8250_interrupt_loop_$bb1(in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$p18: ref, in_$i19: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i72: i32, in_$i73: i64, in_$i74: i64, in_$i75: i1, in_$i76: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$p18: ref, out_$i19: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i72: i32, out_$i73: i64, out_$i74: i64, out_$i75: i1, out_$i76: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i20, out_$i21, out_$p22, out_$p18, out_$i19, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76 := in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$i20, in_$i21, in_$p22, in_$p18, in_$i19, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5908;

  $bb18:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$p7, out_$p8, out_$i9, out_$i10 := out_$p24, out_$p18, out_$i72, out_$i19;
    goto $bb18_dummy;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i19;
    assume true;
    goto $bb18;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i64(out_$i73, out_$i74);
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$i74 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_5981;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5980;

  $bb9:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := out_$i9;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i30;
    goto $bb17;

  $bb11:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i19;
    assume true;
    goto $bb11;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i9, 512);
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i9, 1);
    call {:si_unique_call 1433} {:cexpr "pass_counter"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_5933;

  $bb8:
    assume out_$i29 == 1;
    goto corral_source_split_5932;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i27, out_$i28);
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_5925;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p3, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_5923;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5922;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5921;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p18, out_$i19 := out_$p22, out_$i10;
    goto $bb4;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    out_$p18, out_$i19 := $0.ref, 1;
    goto $bb4;

  $bb2:
    assume out_$i17 == 1;
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_5913;

  SeqInstr_456:
    call {:si_unique_call 1432} {:cexpr "tmp"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_5912;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    call {:si_unique_call 1431} out_$i16 := devirtbounce.28(out_$p15, out_$p13);
    goto SeqInstr_455;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p11, $mul.ref($sub.ref(0, 440), 504)), $mul.ref(0, 1));
    out_$p14 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref($sub.ref(0, 440), 504)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_5911;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    goto corral_source_split_5910;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_5909;

  $bb6:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$p22 := out_$p8;
    goto $bb7;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p7;
    goto $bb7;

  $bb5:
    assume out_$i21 == 1;
    goto corral_source_split_5930;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_5919;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_5918;

  $bb3:
    assume !(out_$i17 == 1);
    goto corral_source_split_5917;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i20, out_$i21, out_$p22, out_$p18, out_$i19, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76 := serial8250_interrupt_loop_$bb1(in_$p3, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i20, out_$i21, out_$p22, out_$p18, out_$i19, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76);
    return;

  exit:
    return;
}



procedure serial8250_interrupt_loop_$bb1(in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$p18: ref, in_$i19: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i72: i32, in_$i73: i64, in_$i74: i64, in_$i75: i1, in_$i76: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$p18: ref, out_$i19: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i72: i32, out_$i73: i64, out_$i74: i64, out_$i75: i1, out_$i76: i32);
  modifies $M.0, $M.2, $M.4, $M.5, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.45, $M.46, $M.6, $M.38, $M.39, $CurrAddr, $M.19, $M.31, $M.40, $M.30, $M.33, $M.41, $M.32, $M.35, $M.42, $M.34, $M.37, $M.43, $M.36, assertsPassed;



implementation serial8250_probe_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i8: i32, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$p36: ref, in_$p37: ref, in_$i38: i8, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$i50: i8, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$p89: ref, in_$i90: i64, in_$i91: i64, in_$i92: i64, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p100: ref, in_$i101: i64, in_$p102: ref, in_$i103: i32, in_$p105: ref, in_$i106: i32, in_$i107: i64, in_$i108: i1, in_$p11: ref, in_$i12: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_vslice_dummy_var_66: i32) returns (out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$p36: ref, out_$p37: ref, out_$i38: i8, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$i50: i8, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$p85: ref, out_$p87: ref, out_$p89: ref, out_$i90: i64, out_$i91: i64, out_$i92: i64, out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p100: ref, out_$i101: i64, out_$p102: ref, out_$i103: i32, out_$p105: ref, out_$i106: i32, out_$i107: i64, out_$i108: i1, out_$p11: ref, out_$i12: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_vslice_dummy_var_66: i32)
{

  entry:
    out_$p13, out_$i14, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$i30, out_$p32, out_$p33, out_$i34, out_$p36, out_$p37, out_$i38, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$i50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p57, out_$i58, out_$p60, out_$p61, out_$p62, out_$p64, out_$p65, out_$p66, out_$p68, out_$p69, out_$p70, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$p80, out_$p81, out_$p82, out_$p84, out_$p85, out_$p87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$p102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$p11, out_$i12, out_$p109, out_$i110, out_$i111, out_vslice_dummy_var_66 := in_$p13, in_$i14, in_$p16, in_$p17, in_$p18, in_$p20, in_$p21, in_$i22, in_$p24, in_$p25, in_$i26, in_$p28, in_$p29, in_$i30, in_$p32, in_$p33, in_$i34, in_$p36, in_$p37, in_$i38, in_$p40, in_$p41, in_$i42, in_$p44, in_$p45, in_$i46, in_$p48, in_$p49, in_$i50, in_$p52, in_$p53, in_$p54, in_$p56, in_$p57, in_$i58, in_$p60, in_$p61, in_$p62, in_$p64, in_$p65, in_$p66, in_$p68, in_$p69, in_$p70, in_$p72, in_$p73, in_$p74, in_$p76, in_$p77, in_$p78, in_$p80, in_$p81, in_$p82, in_$p84, in_$p85, in_$p87, in_$p89, in_$i90, in_$i91, in_$i92, in_$p94, in_$i95, in_$i96, in_$p97, in_$p98, in_$i99, in_$p100, in_$i101, in_$p102, in_$i103, in_$p105, in_$i106, in_$i107, in_$i108, in_$p11, in_$i12, in_$p109, in_$i110, in_$i111, in_vslice_dummy_var_66;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6080;

  $bb12:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$i12 := out_$p105, out_$i106;
    goto $bb12_dummy;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, 0);
    goto corral_source_split_6182;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_6181;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(out_$i12, 1);
    call {:si_unique_call 1475} {:cexpr "i"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_6180;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref(out_$p11, $mul.ref(1, 120));
    goto corral_source_split_6179;

  $bb10:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} out_vslice_dummy_var_66 := dev_err.ref.ref.i32.i64.i64.i32.i32(out_$p97, .str.43, out_$i12, out_$i99, out_$i101, out_$i103, out_$i95);
    goto corral_source_split_6177;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i32($M.0, out_$p102);
    goto corral_source_split_6176;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_6175;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i64($M.0, out_$p100);
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i64($M.0, out_$p98);
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6170;

  $bb9:
    assume out_$i96 == 1;
    goto corral_source_split_6169;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i95, 0);
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} out_$i95 := serial8250_register_8250_port(in_$p1);
    call {:si_unique_call 1473} {:cexpr "ret"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p94, out_$i92);
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$i92 := $or.i64(out_$i90, out_$i91);
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6162;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.0, out_$p89);
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6160;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p87, out_$p85);
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p84, out_$p82);
    goto corral_source_split_6156;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p80, out_$p78);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p76, out_$p74);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p72, out_$p70);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p68, out_$p66);
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(80, 1));
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p64, out_$p62);
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p60, out_$i58);
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_6130;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(64, 1));
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p56, out_$p54);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(304, 1));
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(48, 1));
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p52, out_$i50);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i8($M.0, out_$p49);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(58, 1));
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p48, out_$i46);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.0, out_$p45);
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p44, out_$i42);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(60, 1));
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p40, out_$i38);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.0, out_$p37);
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(57, 1));
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p36, out_$i34);
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(56, 1));
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, out_$i30);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p28, out_$i26);
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    goto corral_source_split_6098;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_6097;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p24, out_$i22);
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_6095;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p20, out_$p18);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_6091;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_6090;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_6089;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p16, out_$i14);
    goto corral_source_split_6088;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.0, out_$p13);
    goto corral_source_split_6086;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6085;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14:
    assume out_$i111 == 1;
    goto corral_source_split_6186;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i32(out_$i110, 0);
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(60, 1));
    goto corral_source_split_6081;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$i30, out_$p32, out_$p33, out_$i34, out_$p36, out_$p37, out_$i38, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$i50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p57, out_$i58, out_$p60, out_$p61, out_$p62, out_$p64, out_$p65, out_$p66, out_$p68, out_$p69, out_$p70, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$p80, out_$p81, out_$p82, out_$p84, out_$p85, out_$p87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$p102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$p11, out_$i12, out_$p109, out_$i110, out_$i111, out_vslice_dummy_var_66 := serial8250_probe_loop_$bb7(in_$p0, in_$p1, in_$i8, out_$p13, out_$i14, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$i30, out_$p32, out_$p33, out_$i34, out_$p36, out_$p37, out_$i38, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$i50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p57, out_$i58, out_$p60, out_$p61, out_$p62, out_$p64, out_$p65, out_$p66, out_$p68, out_$p69, out_$p70, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$p80, out_$p81, out_$p82, out_$p84, out_$p85, out_$p87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$p102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$p11, out_$i12, out_$p109, out_$i110, out_$i111, out_vslice_dummy_var_66);
    return;

  exit:
    return;
}



procedure serial8250_probe_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i8: i32, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$p36: ref, in_$p37: ref, in_$i38: i8, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$i50: i8, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$p89: ref, in_$i90: i64, in_$i91: i64, in_$i92: i64, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p100: ref, in_$i101: i64, in_$p102: ref, in_$i103: i32, in_$p105: ref, in_$i106: i32, in_$i107: i64, in_$i108: i1, in_$p11: ref, in_$i12: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_vslice_dummy_var_66: i32) returns (out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$p36: ref, out_$p37: ref, out_$i38: i8, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$i50: i8, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$p85: ref, out_$p87: ref, out_$p89: ref, out_$i90: i64, out_$i91: i64, out_$i92: i64, out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p100: ref, out_$i101: i64, out_$p102: ref, out_$i103: i32, out_$p105: ref, out_$i106: i32, out_$i107: i64, out_$i108: i1, out_$p11: ref, out_$i12: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_vslice_dummy_var_66: i32);
  modifies $M.0;



implementation serial8250_remove_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i3: i32) returns (out_$i4: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i3: i32)
{

  entry:
    out_$i4, out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i3 := in_$i4, in_$p7, in_$p8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6196;

  $bb9:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i13;
    goto $bb9_dummy;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    out_$i15 := $ult.i32(out_$i13, out_$i14);
    goto corral_source_split_6210;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    out_$i14 := $M.7;
    goto corral_source_split_6209;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i3, 1);
    call {:si_unique_call 1477} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_6208;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} serial8250_unregister_port(out_$i3);
    goto corral_source_split_6206;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_6205;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i64(out_$i9, out_$i11);
    goto corral_source_split_6203;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6201;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_6200;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_6199;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i3);
    out_$p7 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i4, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i4, out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i3 := serial8250_remove_loop_$bb4(in_$p0, out_$i4, out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i3);
    return;

  exit:
    return;
}



procedure serial8250_remove_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i3: i32) returns (out_$i4: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i3: i32);
  modifies $M.0;



implementation check_name_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p4: ref)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p4 := in_$p5, in_$p6, in_$i7, in_$i8, in_$p10, in_$p11, in_$i12, in_$i13, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6601;

  $bb10:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p10;
    goto $bb10_dummy;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, 0);
    goto corral_source_split_6615;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_6614;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.48, out_$p10);
    goto corral_source_split_6613;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p4, $mul.ref(1, 8));
    goto corral_source_split_6612;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_6606;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} out_$p6 := strstr(in_$p0, out_$p5);
    assume $isExternal(out_$p6);
    goto corral_source_split_6604;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.48, out_$p4);
    goto corral_source_split_6603;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p4 := check_name_loop_$bb4(in_$p0, out_$p5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p4);
    return;

  exit:
    return;
}



procedure check_name_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p4: ref);



implementation check_resources_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i7: i64, in_$p8: ref, in_$i9: i64, in_$i10: i32, in_$i11: i1, in_$i13: i32, in_$i14: i1, in_$i6: i32) returns (out_$i7: i64, out_$p8: ref, out_$i9: i64, out_$i10: i32, out_$i11: i1, out_$i13: i32, out_$i14: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i6 := in_$i7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i13, in_$i14, in_$i6;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_6629;

  $bb7:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i13;
    goto $bb7_dummy;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    out_$i14 := $ule.i32(out_$i13, 3);
    goto corral_source_split_6642;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1567} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_6641;

  $bb4:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_6635;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} out_$i10 := pnp_possible_config(in_$p0, 256, out_$i9, 8);
    call {:si_unique_call 1566} {:cexpr "tmp"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i64($M.49, out_$p8);
    goto corral_source_split_6633;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(out_$i7, 8));
    goto corral_source_split_6632;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_6631;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i6 := check_resources_loop_$bb1(in_$p0, in_$p1, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i6);
    return;

  exit:
    return;
}



procedure check_resources_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i7: i64, in_$p8: ref, in_$i9: i64, in_$i10: i32, in_$i11: i1, in_$i13: i32, in_$i14: i1, in_$i6: i32) returns (out_$i7: i64, out_$p8: ref, out_$i9: i64, out_$i10: i32, out_$i11: i1, out_$i13: i32, out_$i14: i1, out_$i6: i32);



implementation serial8250_isa_init_ports_loop_$bb19(in_$i29: i32, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$i39: i64, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i64, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$i64: i8, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$i74: i8, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$i79: i16, in_$i80: i8, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$p94: ref, in_$i95: i1, in_$p30: ref, in_$i31: i32, in_$i96: i32, in_$i97: i1) returns (out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$i39: i64, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$i45: i64, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$i64: i8, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$i74: i8, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$i79: i16, out_$i80: i8, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$p94: ref, out_$i95: i1, out_$p30: ref, out_$i31: i32, out_$i96: i32, out_$i97: i1)
{

  entry:
    out_$p32, out_$i33, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$p58, out_$i59, out_$p60, out_$i61, out_$p63, out_$i64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$i71, out_$p73, out_$i74, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$p94, out_$i95, out_$p30, out_$i31, out_$i96, out_$i97 := in_$p32, in_$i33, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$p41, in_$i42, in_$i43, in_$p44, in_$i45, in_$p47, in_$i48, in_$p49, in_$i50, in_$p52, in_$i53, in_$i54, in_$p55, in_$i56, in_$p58, in_$i59, in_$p60, in_$i61, in_$p63, in_$i64, in_$p65, in_$i66, in_$p68, in_$p69, in_$p70, in_$i71, in_$p73, in_$i74, in_$p75, in_$i76, in_$p78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$p86, in_$p87, in_$i88, in_$i89, in_$p90, in_$p91, in_$p92, in_$i93, in_$p94, in_$i95, in_$p30, in_$i31, in_$i96, in_$i97;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6704;

  $bb24:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$p30, out_$i31 := out_$p94, out_$i93;
    goto $bb24_dummy;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i95 := $ule.i32(out_$i93, 3);
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(out_$p30, $mul.ref(1, 504));
    goto corral_source_split_6764;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i31, 1);
    call {:si_unique_call 1590} {:cexpr "i"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_6763;

  $bb22:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(456, 1));
    call {:si_unique_call 1589} devirtbounce.11(out_$p90, out_$i31, out_$p91, out_$p92);
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    out_$p90 := $M.6;
    goto corral_source_split_6759;

  $bb21:
    assume out_$i89 == 1;
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i64(out_$i88, 0);
    goto corral_source_split_6756;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    out_$i88 := $p2i.ref.i64(out_$p87);
    goto corral_source_split_6755;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    out_$p87 := $M.6;
    goto corral_source_split_6754;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p86, out_$i85);
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    out_$i85 := $or.i64(out_$i83, out_$i84);
    out_$p86 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(in_$i29);
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.0, out_$p82);
    goto corral_source_split_6750;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} set_io_from_upio(out_$p32);
    out_$p82 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p81, out_$i80);
    goto corral_source_split_6748;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    out_$i80 := $trunc.i16.i8(out_$i79);
    out_$p81 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(161, 1));
    goto corral_source_split_6747;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i16($M.58, out_$p78);
    goto corral_source_split_6746;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(out_$i76, 48)), $mul.ref(32, 1));
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i31);
    goto corral_source_split_6744;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p75, out_$i74);
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.57, out_$p73);
    out_$p75 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(162, 1));
    goto corral_source_split_6742;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(out_$i71, 48)), $mul.ref(21, 1));
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i31);
    goto corral_source_split_6740;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p70, out_$p69);
    goto corral_source_split_6739;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.56, out_$p68);
    out_$p70 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_6738;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(out_$i66, 48)), $mul.ref(24, 1));
    goto corral_source_split_6737;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i31);
    goto corral_source_split_6736;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p65, out_$i64);
    goto corral_source_split_6735;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.55, out_$p63);
    out_$p65 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(out_$i61, 48)), $mul.ref(20, 1));
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i31);
    goto corral_source_split_6732;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p60, out_$i59);
    goto corral_source_split_6731;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.54, out_$p58);
    out_$p60 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_6730;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(out_$i56, 48)), $mul.ref(16, 1));
    goto corral_source_split_6729;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i31);
    goto corral_source_split_6728;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, out_$i54);
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    out_$i54 := $mul.i32(out_$i53, 16);
    out_$p55 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_6726;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.53, out_$p52);
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(out_$i50, 48)), $mul.ref(4, 1));
    goto corral_source_split_6724;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i31);
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p49, out_$i48);
    goto corral_source_split_6722;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.52, out_$p47);
    out_$p49 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_6721;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(out_$i45, 48)), $mul.ref(40, 1));
    goto corral_source_split_6720;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i31);
    goto corral_source_split_6719;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p44, out_$i43);
    goto corral_source_split_6718;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} out_$i43 := irq_canonicalize(out_$i42);
    call {:si_unique_call 1587} {:cexpr "tmp"} boogie_si_record_i32(out_$i43);
    out_$p44 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_6717;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.51, out_$p41);
    goto corral_source_split_6716;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(out_$i39, 48)), $mul.ref(12, 1));
    goto corral_source_split_6715;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i31);
    goto corral_source_split_6714;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p38, out_$i37);
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i32.i64(out_$i36);
    out_$p38 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_6712;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.50, out_$p35);
    goto corral_source_split_6711;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(old_serial_port, $mul.ref(0, 192)), $mul.ref(out_$i33, 48)), $mul.ref(8, 1));
    goto corral_source_split_6710;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i31);
    goto corral_source_split_6709;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p30, $mul.ref(0, 504)), $mul.ref(0, 1));
    goto corral_source_split_6708;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb27:
    assume out_$i97 == 1;
    goto corral_source_split_6767;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    out_$i97 := $ult.i32(out_$i31, out_$i96);
    goto corral_source_split_6706;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    out_$i96 := $M.7;
    goto corral_source_split_6705;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p32, out_$i33, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$p58, out_$i59, out_$p60, out_$i61, out_$p63, out_$i64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$i71, out_$p73, out_$i74, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$p94, out_$i95, out_$p30, out_$i31, out_$i96, out_$i97 := serial8250_isa_init_ports_loop_$bb19(in_$i29, out_$p32, out_$i33, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$p58, out_$i59, out_$p60, out_$i61, out_$p63, out_$i64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$i71, out_$p73, out_$i74, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$p94, out_$i95, out_$p30, out_$i31, out_$i96, out_$i97);
    return;

  exit:
    return;
}



procedure serial8250_isa_init_ports_loop_$bb19(in_$i29: i32, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$i39: i64, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i64, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$i64: i8, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$i74: i8, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$i79: i16, in_$i80: i8, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$p94: ref, in_$i95: i1, in_$p30: ref, in_$i31: i32, in_$i96: i32, in_$i97: i1) returns (out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$i39: i64, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$i45: i64, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$i64: i8, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$i74: i8, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$i79: i16, out_$i80: i8, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$p94: ref, out_$i95: i1, out_$p30: ref, out_$i31: i32, out_$i96: i32, out_$i97: i1);
  modifies $M.0;



implementation serial8250_isa_init_ports_loop_$bb11(in_$p0: ref, in_$i7: i64, in_$p10: ref, in_$p11: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i6: i32, in_vslice_dummy_var_71: ref, in_vslice_dummy_var_72: i32) returns (out_$i7: i64, out_$p10: ref, out_$p11: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i6: i32, out_vslice_dummy_var_71: ref, out_vslice_dummy_var_72: i32)
{

  entry:
    out_$i7, out_$p10, out_$p11, out_$p14, out_$p15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i6, out_vslice_dummy_var_71, out_vslice_dummy_var_72 := in_$i7, in_$p10, in_$p11, in_$p14, in_$p15, in_$p16, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i6, in_vslice_dummy_var_71, in_vslice_dummy_var_72;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6678;

  $bb13:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i24;
    goto $bb13_dummy;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i32(out_$i24, out_$i25);
    goto corral_source_split_6693;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    out_$i25 := $M.7;
    goto corral_source_split_6692;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1585} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p23, serial8250_pops);
    goto corral_source_split_6690;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p22, 0);
    out_$p23 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i7, 504)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_6689;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p21, $sub.i8(0, 1));
    out_$p22 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i7, 504)), $mul.ref(469, 1));
    goto corral_source_split_6688;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p20, $sub.i8(0, 1));
    out_$p21 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i7, 504)), $mul.ref(468, 1));
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p19, serial8250_timeout);
    out_$p20 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i7, 504)), $mul.ref(470, 1));
    goto corral_source_split_6686;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} out_vslice_dummy_var_72 := reg_timer_2(out_$p16);
    out_$p19 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i7, 504)), $mul.ref(312, 1)), $mul.ref(32, 1));
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} __raw_spin_lock_init(out_$p15, .str.36, in_$p0);
    out_$p16 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i7, 504)), $mul.ref(312, 1));
    goto corral_source_split_6684;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} out_vslice_dummy_var_71 := spinlock_check(out_$p11);
    out_$p14 := $add.ref($add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i7, 504)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6682;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p10, out_$i6);
    out_$p11 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i7, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6681;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    out_$p10 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i7, 504)), $mul.ref(0, 1)), $mul.ref(276, 1));
    goto corral_source_split_6680;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i7, out_$p10, out_$p11, out_$p14, out_$p15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i6, out_vslice_dummy_var_71, out_vslice_dummy_var_72 := serial8250_isa_init_ports_loop_$bb11(in_$p0, out_$i7, out_$p10, out_$p11, out_$p14, out_$p15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i6, out_vslice_dummy_var_71, out_vslice_dummy_var_72);
    return;

  exit:
    return;
}



procedure serial8250_isa_init_ports_loop_$bb11(in_$p0: ref, in_$i7: i64, in_$p10: ref, in_$p11: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i6: i32, in_vslice_dummy_var_71: ref, in_vslice_dummy_var_72: i32) returns (out_$i7: i64, out_$p10: ref, out_$p11: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i6: i32, out_vslice_dummy_var_71: ref, out_vslice_dummy_var_72: i32);
  modifies $M.0, $M.38, $M.39;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i8, in_$i4: i32, in_$p6: ref, in_$i7: i32, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p13: ref, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i286: i32, in_$i287: i1, in_$p288: ref, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i32, in_$i293: i8, in_$i294: i32, in_$i295: i1, in_$p296: ref, in_$i297: i32, in_$i298: i8, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$i303: i8, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i316: i32, in_$i317: i1, in_$i319: i32, in_$i320: i32, in_$i321: i32, in_$i322: i1, in_$i324: i32, in_$i325: i32, in_$i326: i32, in_$i327: i1, in_$i329: i32, in_$i330: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: ref, in_vslice_dummy_var_76: ref, in_vslice_dummy_var_77: ref, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32) returns (out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i286: i32, out_$i287: i1, out_$p288: ref, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i32, out_$i293: i8, out_$i294: i32, out_$i295: i1, out_$p296: ref, out_$i297: i32, out_$i298: i8, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$i303: i8, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i316: i32, out_$i317: i1, out_$i319: i32, out_$i320: i32, out_$i321: i32, out_$i322: i1, out_$i324: i32, out_$i325: i32, out_$i326: i32, out_$i327: i1, out_$i329: i32, out_$i330: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: ref, out_vslice_dummy_var_76: ref, out_vslice_dummy_var_77: ref, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$p225, out_$i227, out_$i228, out_$p229, out_$i231, out_$i232, out_$p233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$i272, out_$i273, out_$p274, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$p285, out_$i286, out_$i287, out_$p288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$p296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$i319, out_$i320, out_$i321, out_$i322, out_$i324, out_$i325, out_$i326, out_$i327, out_$i329, out_$i330, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$p117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$p126, in_$i128, in_$i129, in_$p130, in_$i132, in_$i133, in_$p134, in_$i136, in_$i137, in_$p138, in_$i139, in_$i140, in_$p141, in_$i142, in_$i143, in_$p144, in_$i145, in_$i146, in_$p147, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$p153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$p168, in_$i169, in_$i170, in_$p171, in_$i172, in_$i173, in_$p174, in_$i175, in_$i176, in_$p177, in_$i178, in_$i179, in_$p180, in_$i181, in_$i182, in_$p183, in_$i184, in_$i185, in_$p186, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$p192, in_$i194, in_$i195, in_$p196, in_$i198, in_$i199, in_$p200, in_$i202, in_$i203, in_$p204, in_$i206, in_$i207, in_$p208, in_$i210, in_$i211, in_$p212, in_$i214, in_$i215, in_$p216, in_$i217, in_$i218, in_$p219, in_$i220, in_$i221, in_$p222, in_$i223, in_$i224, in_$p225, in_$i227, in_$i228, in_$p229, in_$i231, in_$i232, in_$p233, in_$i235, in_$i236, in_$p237, in_$i238, in_$i239, in_$p240, in_$i242, in_$i243, in_$p244, in_$i246, in_$i247, in_$p248, in_$i250, in_$i251, in_$p252, in_$i253, in_$i254, in_$p255, in_$i256, in_$i257, in_$p258, in_$i259, in_$i260, in_$p261, in_$i262, in_$i263, in_$p264, in_$i265, in_$i266, in_$p267, in_$i268, in_$i269, in_$p270, in_$i272, in_$i273, in_$p274, in_$i276, in_$i277, in_$p278, in_$i280, in_$i281, in_$p282, in_$i283, in_$i284, in_$p285, in_$i286, in_$i287, in_$p288, in_$i289, in_$i290, in_$p291, in_$i292, in_$i293, in_$i294, in_$i295, in_$p296, in_$i297, in_$i298, in_$i299, in_$i300, in_$p301, in_$i302, in_$i303, in_$i304, in_$i305, in_$p306, in_$i308, in_$i309, in_$p310, in_$i312, in_$i313, in_$p314, in_$i316, in_$i317, in_$i319, in_$i320, in_$i321, in_$i322, in_$i324, in_$i325, in_$i326, in_$i327, in_$i329, in_$i330, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1656} out_$i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 1657} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i15);
    call {:si_unique_call 1658} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i15);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb60_dummy;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb19:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $M.65 := out_$i38;
    call {:si_unique_call 1665} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i37, 1);
    goto corral_source_split_6924;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    out_$i37 := $M.65;
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6922;

  $bb34:
    assume out_$i36 == 1;
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_6919;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    out_$i35 := $M.70;
    goto corral_source_split_6918;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $M.70 := out_$i34;
    call {:si_unique_call 1663} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_6917;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} out_$i34 := serial8250_probe(out_$p33);
    goto corral_source_split_6916;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    out_$p33 := $M.60;
    goto corral_source_split_6915;

  $bb32:
    assume out_$i32 == 1;
    goto corral_source_split_6914;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_6912;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$i31 := $M.63;
    goto corral_source_split_6911;

  $bb30:
    assume out_$i30 == 1;
    goto corral_source_split_6910;

  $bb28:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb21:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i25, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i25, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_6896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1659} out_$i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 1660} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i25);
    call {:si_unique_call 1661} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i25);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i24 == 1;
    goto corral_source_split_6896;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_6894;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    out_$i23 := $M.63;
    goto corral_source_split_6893;

  $bb16:
    assume out_$i22 == 1;
    goto corral_source_split_6892;

  $bb12:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb3:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb40:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1668} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6937;

  $bb41:
    assume out_$i46 == 1;
    goto corral_source_split_6936;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 0);
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i45 := $M.71;
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.71 := out_$i44;
    call {:si_unique_call 1667} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} out_$i44 := serial8250_suspend(out_$p41, out_$i43);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.62, out_$p42);
    goto corral_source_split_6930;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    out_$p41 := $M.60;
    goto corral_source_split_6928;

  $bb39:
    assume out_$i40 == 1;
    goto corral_source_split_6927;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 2);
    goto corral_source_split_6908;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    out_$i39 := $M.63;
    goto corral_source_split_6907;

  $bb29:
    assume !(out_$i29 == 1);
    goto corral_source_split_6906;

  $bb46:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6947;

  $bb47:
    assume out_$i52 == 1;
    goto corral_source_split_6946;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 0);
    goto corral_source_split_6944;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    out_$i51 := $M.72;
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $M.72 := out_$i50;
    call {:si_unique_call 1670} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_6942;

  SeqInstr_498:
    goto corral_source_split_6941;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} out_$i50 := serial8250_resume(out_$p49);
    goto SeqInstr_497;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    out_$p49 := $M.60;
    goto corral_source_split_6940;

  $bb45:
    assume out_$i48 == 1;
    goto corral_source_split_6939;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 3);
    goto corral_source_split_6900;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    out_$i47 := $M.63;
    goto corral_source_split_6899;

  $bb23:
    assume out_$i27 == 1;
    goto corral_source_split_6898;

  $bb22:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i25, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb55:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $M.65 := out_$i64;
    call {:si_unique_call 1677} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_6966;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    out_$i64 := $sub.i32(out_$i63, 1);
    goto corral_source_split_6965;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    out_$i63 := $M.65;
    goto corral_source_split_6964;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6963;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} out_vslice_dummy_var_74 := serial8250_remove(out_$p61);
    goto corral_source_split_6962;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    out_$p61 := $M.60;
    goto corral_source_split_6961;

  $bb54:
    assume out_$i60 == 1;
    goto corral_source_split_6960;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 2);
    goto corral_source_split_6958;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i59 := $M.63;
    goto corral_source_split_6957;

  $bb52:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $M.65 := out_$i58;
    call {:si_unique_call 1674} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_6955;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    out_$i58 := $sub.i32(out_$i57, 1);
    goto corral_source_split_6954;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    out_$i57 := $M.65;
    goto corral_source_split_6953;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} out_vslice_dummy_var_73 := serial8250_remove(out_$p55);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    out_$p55 := $M.60;
    goto corral_source_split_6950;

  $bb51:
    assume out_$i54 == 1;
    goto corral_source_split_6949;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 3);
    goto corral_source_split_6904;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    out_$i53 := $M.63;
    goto corral_source_split_6903;

  $bb25:
    assume out_$i28 == 1;
    goto corral_source_split_6902;

  $bb24:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i25, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} ldv_stop();
    goto corral_source_split_6968;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb27;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb27;

  $bb62:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_501:
    goto corral_source_split_6971;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} choose_interrupt_1();
    goto SeqInstr_500;

  $bb61:
    assume out_$i66 == 1;
    goto corral_source_split_6970;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_6886;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$i65 := $M.64;
    goto corral_source_split_6885;

  $bb14:
    assume out_$i21 == 1;
    goto corral_source_split_6884;

  $bb13:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb65:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb76;

  $bb78:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb76;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 0);
    goto corral_source_split_6985;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    out_$i75 := $M.65;
    goto corral_source_split_6984;

  $bb74:
    assume out_$i74 == 1;
    goto corral_source_split_6983;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 3);
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    out_$i73 := $M.66;
    goto corral_source_split_6980;

  $bb72:
    assume out_$i72 == 1;
    goto corral_source_split_6979;

  $bb67:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i69, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_6973:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1680} out_$i69 := __VERIFIER_nondet_int();
    call {:si_unique_call 1681} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i69);
    call {:si_unique_call 1682} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i69);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i68 == 1;
    goto corral_source_split_6973;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_6890;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    out_$i67 := $M.66;
    goto corral_source_split_6889;

  $bb15:
    assume !(out_$i21 == 1);
    goto corral_source_split_6888;

  $bb83:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_7007;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i82 := $M.73;
    goto corral_source_split_7006;

  $bb85:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_initialize_pnp_driver_3();
    goto corral_source_split_7004;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7003;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ldv_initialize_uart_ops_5();
    goto corral_source_split_7002;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7001;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $M.66 := 3;
    call {:si_unique_call 1688} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7000;

  $bb84:
    assume out_$i81 == 1;
    goto corral_source_split_6999;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 0);
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    out_$i80 := $M.73;
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $M.73 := out_$i79;
    call {:si_unique_call 1687} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_6995;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} out_$i79 := serial8250_init();
    goto corral_source_split_6994;

  $bb82:
    assume out_$i78 == 1;
    goto corral_source_split_6993;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 1);
    goto corral_source_split_6977;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    out_$i77 := $M.66;
    goto corral_source_split_6976;

  $bb69:
    assume out_$i71 == 1;
    goto corral_source_split_6975;

  $bb68:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} ldv_stop();
    goto corral_source_split_7012;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb70:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb71;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb71;

  $bb95:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_504:
    goto corral_source_split_7015;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} ldv_main_exported_3();
    goto SeqInstr_503;

  $bb94:
    assume out_$i85 == 1;
    goto corral_source_split_7014;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_6874;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i84 := $M.67;
    goto corral_source_split_6873;

  $bb5:
    assume out_$i17 == 1;
    goto corral_source_split_6872;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb98:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_507:
    goto corral_source_split_7019;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} choose_timer_2(out_$p88);
    goto SeqInstr_506;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    out_$p88 := $M.38;
    goto corral_source_split_7018;

  $bb97:
    assume out_$i87 == 1;
    goto corral_source_split_7017;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_6878;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$i86 := $M.68;
    goto corral_source_split_6877;

  $bb7:
    assume out_$i18 == 1;
    goto corral_source_split_6876;

  $bb6:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb101:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb157:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7130;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} serial8250_set_ldisc(out_$p123, in_$i4);
    goto corral_source_split_7129;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    out_$p123 := $M.61;
    goto corral_source_split_7128;

  $bb156:
    assume out_$i122 == 1;
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 2);
    goto corral_source_split_7125;

  $bb155:
    assume {:verifier.code 0} true;
    out_$i121 := $M.69;
    goto corral_source_split_7124;

  $bb154:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7122;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} serial8250_set_ldisc(out_$p120, in_$i4);
    goto corral_source_split_7121;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    out_$p120 := $M.61;
    goto corral_source_split_7120;

  $bb153:
    assume out_$i119 == 1;
    goto corral_source_split_7119;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 3);
    goto corral_source_split_7117;

  $bb152:
    assume {:verifier.code 0} true;
    out_$i118 := $M.69;
    goto corral_source_split_7116;

  $bb151:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7114;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} serial8250_set_ldisc(out_$p117, in_$i4);
    goto corral_source_split_7113;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    out_$p117 := $M.61;
    goto corral_source_split_7112;

  $bb150:
    assume out_$i116 == 1;
    goto corral_source_split_7111;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 1);
    goto corral_source_split_7109;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    out_$i115 := $M.69;
    goto corral_source_split_7108;

  $bb148:
    assume out_$i114 == 1;
    goto corral_source_split_7107;

  $bb146:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i91, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb140:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i91, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb128:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i91, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb103:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i91, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i91, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_7021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1697} out_$i91 := __VERIFIER_nondet_int();
    call {:si_unique_call 1698} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i91);
    call {:si_unique_call 1699} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i91);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume out_$i90 == 1;
    goto corral_source_split_7021;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 0);
    goto corral_source_split_6882;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i89 := $M.69;
    goto corral_source_split_6881;

  $bb9:
    assume out_$i19 == 1;
    goto corral_source_split_6880;

  $bb8:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb167:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7151;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} out_vslice_dummy_var_77 := serial8250_type(out_$p134);
    goto corral_source_split_7150;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    out_$p134 := $M.61;
    goto corral_source_split_7149;

  $bb166:
    assume out_$i133 == 1;
    goto corral_source_split_7148;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 2);
    goto corral_source_split_7146;

  $bb165:
    assume {:verifier.code 0} true;
    out_$i132 := $M.69;
    goto corral_source_split_7145;

  $bb164:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} out_vslice_dummy_var_76 := serial8250_type(out_$p130);
    goto corral_source_split_7142;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    out_$p130 := $M.61;
    goto corral_source_split_7141;

  $bb163:
    assume out_$i129 == 1;
    goto corral_source_split_7140;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 3);
    goto corral_source_split_7138;

  $bb162:
    assume {:verifier.code 0} true;
    out_$i128 := $M.69;
    goto corral_source_split_7137;

  $bb161:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7135;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} out_vslice_dummy_var_75 := serial8250_type(out_$p126);
    goto corral_source_split_7134;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    out_$p126 := $M.61;
    goto corral_source_split_7133;

  $bb160:
    assume out_$i125 == 1;
    goto corral_source_split_7132;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 1);
    goto corral_source_split_7105;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    out_$i124 := $M.69;
    goto corral_source_split_7104;

  $bb147:
    assume !(out_$i113 == 1);
    goto corral_source_split_7103;

  $bb176:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7172;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} serial8250_pm(out_$p144, in_$i1, in_$i11);
    goto corral_source_split_7171;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    out_$p144 := $M.61;
    goto corral_source_split_7170;

  $bb175:
    assume out_$i143 == 1;
    goto corral_source_split_7169;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 2);
    goto corral_source_split_7167;

  $bb174:
    assume {:verifier.code 0} true;
    out_$i142 := $M.69;
    goto corral_source_split_7166;

  $bb173:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7164;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} serial8250_pm(out_$p141, in_$i1, in_$i11);
    goto corral_source_split_7163;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    out_$p141 := $M.61;
    goto corral_source_split_7162;

  $bb172:
    assume out_$i140 == 1;
    goto corral_source_split_7161;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 3);
    goto corral_source_split_7159;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i139 := $M.69;
    goto corral_source_split_7158;

  $bb170:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7156;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} serial8250_pm(out_$p138, in_$i1, in_$i11);
    goto corral_source_split_7155;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    out_$p138 := $M.61;
    goto corral_source_split_7154;

  $bb169:
    assume out_$i137 == 1;
    goto corral_source_split_7153;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 1);
    goto corral_source_split_7093;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    out_$i136 := $M.69;
    goto corral_source_split_7092;

  $bb142:
    assume out_$i111 == 1;
    goto corral_source_split_7091;

  $bb141:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i91, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb185:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1723} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7193;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} serial8250_release_port(out_$p153);
    goto corral_source_split_7192;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    out_$p153 := $M.61;
    goto corral_source_split_7191;

  $bb184:
    assume out_$i152 == 1;
    goto corral_source_split_7190;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 2);
    goto corral_source_split_7188;

  $bb183:
    assume {:verifier.code 0} true;
    out_$i151 := $M.69;
    goto corral_source_split_7187;

  $bb182:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7185;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} serial8250_release_port(out_$p150);
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    out_$p150 := $M.61;
    goto corral_source_split_7183;

  $bb181:
    assume out_$i149 == 1;
    goto corral_source_split_7182;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 3);
    goto corral_source_split_7180;

  $bb180:
    assume {:verifier.code 0} true;
    out_$i148 := $M.69;
    goto corral_source_split_7179;

  $bb179:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1719} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7177;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} serial8250_release_port(out_$p147);
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    out_$p147 := $M.61;
    goto corral_source_split_7175;

  $bb178:
    assume out_$i146 == 1;
    goto corral_source_split_7174;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 1);
    goto corral_source_split_7097;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    out_$i145 := $M.69;
    goto corral_source_split_7096;

  $bb144:
    assume out_$i112 == 1;
    goto corral_source_split_7095;

  $bb143:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i91, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb194:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7214;

  SeqInstr_516:
    goto corral_source_split_7213;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} serial8250_start_tx(out_$p162);
    goto SeqInstr_515;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    out_$p162 := $M.61;
    goto corral_source_split_7212;

  $bb193:
    assume out_$i161 == 1;
    goto corral_source_split_7211;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 2);
    goto corral_source_split_7209;

  $bb192:
    assume {:verifier.code 0} true;
    out_$i160 := $M.69;
    goto corral_source_split_7208;

  $bb191:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7206;

  SeqInstr_513:
    goto corral_source_split_7205;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} serial8250_start_tx(out_$p159);
    goto SeqInstr_512;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    out_$p159 := $M.61;
    goto corral_source_split_7204;

  $bb190:
    assume out_$i158 == 1;
    goto corral_source_split_7203;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 3);
    goto corral_source_split_7201;

  $bb189:
    assume {:verifier.code 0} true;
    out_$i157 := $M.69;
    goto corral_source_split_7200;

  $bb188:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7198;

  SeqInstr_510:
    goto corral_source_split_7197;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} serial8250_start_tx(out_$p156);
    goto SeqInstr_509;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    out_$p156 := $M.61;
    goto corral_source_split_7196;

  $bb187:
    assume out_$i155 == 1;
    goto corral_source_split_7195;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 1);
    goto corral_source_split_7101;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    out_$i154 := $M.69;
    goto corral_source_split_7100;

  $bb145:
    assume !(out_$i112 == 1);
    goto corral_source_split_7099;

  $bb203:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7235;

  SeqInstr_525:
    goto corral_source_split_7234;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} serial8250_set_termios(out_$p171, in_$p13, in_$p9);
    goto SeqInstr_524;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    out_$p171 := $M.61;
    goto corral_source_split_7233;

  $bb202:
    assume out_$i170 == 1;
    goto corral_source_split_7232;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 2);
    goto corral_source_split_7230;

  $bb201:
    assume {:verifier.code 0} true;
    out_$i169 := $M.69;
    goto corral_source_split_7229;

  $bb200:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7227;

  SeqInstr_522:
    goto corral_source_split_7226;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} serial8250_set_termios(out_$p168, in_$p13, in_$p9);
    goto SeqInstr_521;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    out_$p168 := $M.61;
    goto corral_source_split_7225;

  $bb199:
    assume out_$i167 == 1;
    goto corral_source_split_7224;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 3);
    goto corral_source_split_7222;

  $bb198:
    assume {:verifier.code 0} true;
    out_$i166 := $M.69;
    goto corral_source_split_7221;

  $bb197:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7219;

  SeqInstr_519:
    goto corral_source_split_7218;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} serial8250_set_termios(out_$p165, in_$p13, in_$p9);
    goto SeqInstr_518;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    out_$p165 := $M.61;
    goto corral_source_split_7217;

  $bb196:
    assume out_$i164 == 1;
    goto corral_source_split_7216;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 1);
    goto corral_source_split_7081;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    out_$i163 := $M.69;
    goto corral_source_split_7080;

  $bb136:
    assume out_$i108 == 1;
    goto corral_source_split_7079;

  $bb130:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i91, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb129:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i91, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb212:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7256;

  SeqInstr_534:
    goto corral_source_split_7255;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} serial8250_config_port(out_$p180, in_$i2);
    goto SeqInstr_533;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    out_$p180 := $M.61;
    goto corral_source_split_7254;

  $bb211:
    assume out_$i179 == 1;
    goto corral_source_split_7253;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 2);
    goto corral_source_split_7251;

  $bb210:
    assume {:verifier.code 0} true;
    out_$i178 := $M.69;
    goto corral_source_split_7250;

  $bb209:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7248;

  SeqInstr_531:
    goto corral_source_split_7247;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} serial8250_config_port(out_$p177, in_$i2);
    goto SeqInstr_530;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    out_$p177 := $M.61;
    goto corral_source_split_7246;

  $bb208:
    assume out_$i176 == 1;
    goto corral_source_split_7245;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 3);
    goto corral_source_split_7243;

  $bb207:
    assume {:verifier.code 0} true;
    out_$i175 := $M.69;
    goto corral_source_split_7242;

  $bb206:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7240;

  SeqInstr_528:
    goto corral_source_split_7239;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} serial8250_config_port(out_$p174, in_$i2);
    goto SeqInstr_527;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    out_$p174 := $M.61;
    goto corral_source_split_7238;

  $bb205:
    assume out_$i173 == 1;
    goto corral_source_split_7237;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 1);
    goto corral_source_split_7085;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    out_$i172 := $M.69;
    goto corral_source_split_7084;

  $bb138:
    assume out_$i109 == 1;
    goto corral_source_split_7083;

  $bb137:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i91, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb221:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7277;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} serial8250_set_mctrl(out_$p189, in_$i7);
    goto corral_source_split_7276;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    out_$p189 := $M.61;
    goto corral_source_split_7275;

  $bb220:
    assume out_$i188 == 1;
    goto corral_source_split_7274;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 2);
    goto corral_source_split_7272;

  $bb219:
    assume {:verifier.code 0} true;
    out_$i187 := $M.69;
    goto corral_source_split_7271;

  $bb218:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7269;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} serial8250_set_mctrl(out_$p186, in_$i7);
    goto corral_source_split_7268;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    out_$p186 := $M.61;
    goto corral_source_split_7267;

  $bb217:
    assume out_$i185 == 1;
    goto corral_source_split_7266;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 3);
    goto corral_source_split_7264;

  $bb216:
    assume {:verifier.code 0} true;
    out_$i184 := $M.69;
    goto corral_source_split_7263;

  $bb215:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7261;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} serial8250_set_mctrl(out_$p183, in_$i7);
    goto corral_source_split_7260;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$p183 := $M.61;
    goto corral_source_split_7259;

  $bb214:
    assume out_$i182 == 1;
    goto corral_source_split_7258;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 1);
    goto corral_source_split_7089;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    out_$i181 := $M.69;
    goto corral_source_split_7088;

  $bb139:
    assume !(out_$i109 == 1);
    goto corral_source_split_7087;

  $bb230:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7298;

  SeqInstr_543:
    goto corral_source_split_7297;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} out_vslice_dummy_var_80 := serial8250_startup(out_$p200);
    goto SeqInstr_542;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    out_$p200 := $M.61;
    goto corral_source_split_7296;

  $bb229:
    assume out_$i199 == 1;
    goto corral_source_split_7295;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 2);
    goto corral_source_split_7293;

  $bb228:
    assume {:verifier.code 0} true;
    out_$i198 := $M.69;
    goto corral_source_split_7292;

  $bb227:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1751} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7290;

  SeqInstr_540:
    goto corral_source_split_7289;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} out_vslice_dummy_var_79 := serial8250_startup(out_$p196);
    goto SeqInstr_539;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    out_$p196 := $M.61;
    goto corral_source_split_7288;

  $bb226:
    assume out_$i195 == 1;
    goto corral_source_split_7287;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 3);
    goto corral_source_split_7285;

  $bb225:
    assume {:verifier.code 0} true;
    out_$i194 := $M.69;
    goto corral_source_split_7284;

  $bb224:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7282;

  SeqInstr_537:
    goto corral_source_split_7281;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} out_vslice_dummy_var_78 := serial8250_startup(out_$p192);
    goto SeqInstr_536;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    out_$p192 := $M.61;
    goto corral_source_split_7280;

  $bb223:
    assume out_$i191 == 1;
    goto corral_source_split_7279;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 1);
    goto corral_source_split_7069;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    out_$i190 := $M.69;
    goto corral_source_split_7068;

  $bb132:
    assume out_$i106 == 1;
    goto corral_source_split_7067;

  $bb131:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i91, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb239:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7319;

  SeqInstr_552:
    goto corral_source_split_7318;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} out_vslice_dummy_var_83 := serial8250_get_mctrl(out_$p212);
    goto SeqInstr_551;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$p212 := $M.61;
    goto corral_source_split_7317;

  $bb238:
    assume out_$i211 == 1;
    goto corral_source_split_7316;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 2);
    goto corral_source_split_7314;

  $bb237:
    assume {:verifier.code 0} true;
    out_$i210 := $M.69;
    goto corral_source_split_7313;

  $bb236:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7311;

  SeqInstr_549:
    goto corral_source_split_7310;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} out_vslice_dummy_var_82 := serial8250_get_mctrl(out_$p208);
    goto SeqInstr_548;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    out_$p208 := $M.61;
    goto corral_source_split_7309;

  $bb235:
    assume out_$i207 == 1;
    goto corral_source_split_7308;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 3);
    goto corral_source_split_7306;

  $bb234:
    assume {:verifier.code 0} true;
    out_$i206 := $M.69;
    goto corral_source_split_7305;

  $bb233:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7303;

  SeqInstr_546:
    goto corral_source_split_7302;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} out_vslice_dummy_var_81 := serial8250_get_mctrl(out_$p204);
    goto SeqInstr_545;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    out_$p204 := $M.61;
    goto corral_source_split_7301;

  $bb232:
    assume out_$i203 == 1;
    goto corral_source_split_7300;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 1);
    goto corral_source_split_7073;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    out_$i202 := $M.69;
    goto corral_source_split_7072;

  $bb134:
    assume out_$i107 == 1;
    goto corral_source_split_7071;

  $bb133:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i91, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb248:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7340;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} serial8250_enable_ms(out_$p222);
    goto corral_source_split_7339;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    out_$p222 := $M.61;
    goto corral_source_split_7338;

  $bb247:
    assume out_$i221 == 1;
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 2);
    goto corral_source_split_7335;

  $bb246:
    assume {:verifier.code 0} true;
    out_$i220 := $M.69;
    goto corral_source_split_7334;

  $bb245:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7332;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} serial8250_enable_ms(out_$p219);
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$p219 := $M.61;
    goto corral_source_split_7330;

  $bb244:
    assume out_$i218 == 1;
    goto corral_source_split_7329;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 3);
    goto corral_source_split_7327;

  $bb243:
    assume {:verifier.code 0} true;
    out_$i217 := $M.69;
    goto corral_source_split_7326;

  $bb242:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} serial8250_enable_ms(out_$p216);
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$p216 := $M.61;
    goto corral_source_split_7322;

  $bb241:
    assume out_$i215 == 1;
    goto corral_source_split_7321;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 1);
    goto corral_source_split_7077;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    out_$i214 := $M.69;
    goto corral_source_split_7076;

  $bb135:
    assume !(out_$i107 == 1);
    goto corral_source_split_7075;

  $bb257:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7361;

  SeqInstr_561:
    goto corral_source_split_7360;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} out_vslice_dummy_var_86 := serial8250_tx_empty(out_$p233);
    goto SeqInstr_560;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    out_$p233 := $M.61;
    goto corral_source_split_7359;

  $bb256:
    assume out_$i232 == 1;
    goto corral_source_split_7358;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 2);
    goto corral_source_split_7356;

  $bb255:
    assume {:verifier.code 0} true;
    out_$i231 := $M.69;
    goto corral_source_split_7355;

  $bb254:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7353;

  SeqInstr_558:
    goto corral_source_split_7352;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} out_vslice_dummy_var_85 := serial8250_tx_empty(out_$p229);
    goto SeqInstr_557;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    out_$p229 := $M.61;
    goto corral_source_split_7351;

  $bb253:
    assume out_$i228 == 1;
    goto corral_source_split_7350;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 3);
    goto corral_source_split_7348;

  $bb252:
    assume {:verifier.code 0} true;
    out_$i227 := $M.69;
    goto corral_source_split_7347;

  $bb251:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7345;

  SeqInstr_555:
    goto corral_source_split_7344;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} out_vslice_dummy_var_84 := serial8250_tx_empty(out_$p225);
    goto SeqInstr_554;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    out_$p225 := $M.61;
    goto corral_source_split_7343;

  $bb250:
    assume out_$i224 == 1;
    goto corral_source_split_7342;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 1);
    goto corral_source_split_7061;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    out_$i223 := $M.69;
    goto corral_source_split_7060;

  $bb126:
    assume out_$i103 == 1;
    goto corral_source_split_7059;

  $bb120:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i91, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb105:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i91, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb104:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i91, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb260:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7366;

  SeqInstr_564:
    goto corral_source_split_7365;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} serial8250_shutdown(out_$p237);
    goto SeqInstr_563;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    out_$p237 := $M.61;
    goto corral_source_split_7364;

  $bb259:
    assume out_$i236 == 1;
    goto corral_source_split_7363;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i235, 2);
    goto corral_source_split_7065;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    out_$i235 := $M.69;
    goto corral_source_split_7064;

  $bb127:
    assume !(out_$i103 == 1);
    goto corral_source_split_7063;

  $bb269:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7387;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} out_vslice_dummy_var_89 := serial8250_verify_port(out_$p248, in_$p6);
    goto corral_source_split_7386;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    out_$p248 := $M.61;
    goto corral_source_split_7385;

  $bb268:
    assume out_$i247 == 1;
    goto corral_source_split_7384;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 2);
    goto corral_source_split_7382;

  $bb267:
    assume {:verifier.code 0} true;
    out_$i246 := $M.69;
    goto corral_source_split_7381;

  $bb266:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7379;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} out_vslice_dummy_var_88 := serial8250_verify_port(out_$p244, in_$p6);
    goto corral_source_split_7378;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    out_$p244 := $M.61;
    goto corral_source_split_7377;

  $bb265:
    assume out_$i243 == 1;
    goto corral_source_split_7376;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 3);
    goto corral_source_split_7374;

  $bb264:
    assume {:verifier.code 0} true;
    out_$i242 := $M.69;
    goto corral_source_split_7373;

  $bb263:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7371;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} out_vslice_dummy_var_87 := serial8250_verify_port(out_$p240, in_$p6);
    goto corral_source_split_7370;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    out_$p240 := $M.61;
    goto corral_source_split_7369;

  $bb262:
    assume out_$i239 == 1;
    goto corral_source_split_7368;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 1);
    goto corral_source_split_7049;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    out_$i238 := $M.69;
    goto corral_source_split_7048;

  $bb122:
    assume out_$i101 == 1;
    goto corral_source_split_7047;

  $bb121:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i91, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb278:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} serial8250_stop_tx(out_$p258);
    goto corral_source_split_7407;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$p258 := $M.61;
    goto corral_source_split_7406;

  $bb277:
    assume out_$i257 == 1;
    goto corral_source_split_7405;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 2);
    goto corral_source_split_7403;

  $bb276:
    assume {:verifier.code 0} true;
    out_$i256 := $M.69;
    goto corral_source_split_7402;

  $bb275:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7400;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} serial8250_stop_tx(out_$p255);
    goto corral_source_split_7399;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    out_$p255 := $M.61;
    goto corral_source_split_7398;

  $bb274:
    assume out_$i254 == 1;
    goto corral_source_split_7397;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 3);
    goto corral_source_split_7395;

  $bb273:
    assume {:verifier.code 0} true;
    out_$i253 := $M.69;
    goto corral_source_split_7394;

  $bb272:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7392;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} serial8250_stop_tx(out_$p252);
    goto corral_source_split_7391;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    out_$p252 := $M.61;
    goto corral_source_split_7390;

  $bb271:
    assume out_$i251 == 1;
    goto corral_source_split_7389;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 1);
    goto corral_source_split_7053;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    out_$i250 := $M.69;
    goto corral_source_split_7052;

  $bb124:
    assume out_$i102 == 1;
    goto corral_source_split_7051;

  $bb123:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i91, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb287:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7429;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} serial8250_break_ctl(out_$p267, in_$i10);
    goto corral_source_split_7428;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    out_$p267 := $M.61;
    goto corral_source_split_7427;

  $bb286:
    assume out_$i266 == 1;
    goto corral_source_split_7426;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 2);
    goto corral_source_split_7424;

  $bb285:
    assume {:verifier.code 0} true;
    out_$i265 := $M.69;
    goto corral_source_split_7423;

  $bb284:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7421;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} serial8250_break_ctl(out_$p264, in_$i10);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$p264 := $M.61;
    goto corral_source_split_7419;

  $bb283:
    assume out_$i263 == 1;
    goto corral_source_split_7418;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 3);
    goto corral_source_split_7416;

  $bb282:
    assume {:verifier.code 0} true;
    out_$i262 := $M.69;
    goto corral_source_split_7415;

  $bb281:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7413;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} serial8250_break_ctl(out_$p261, in_$i10);
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$p261 := $M.61;
    goto corral_source_split_7411;

  $bb280:
    assume out_$i260 == 1;
    goto corral_source_split_7410;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 1);
    goto corral_source_split_7057;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    out_$i259 := $M.69;
    goto corral_source_split_7056;

  $bb125:
    assume !(out_$i102 == 1);
    goto corral_source_split_7055;

  $bb296:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7450;

  SeqInstr_573:
    goto corral_source_split_7449;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} out_vslice_dummy_var_92 := serial8250_get_poll_char(out_$p278);
    goto SeqInstr_572;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    out_$p278 := $M.61;
    goto corral_source_split_7448;

  $bb295:
    assume out_$i277 == 1;
    goto corral_source_split_7447;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i276, 2);
    goto corral_source_split_7445;

  $bb294:
    assume {:verifier.code 0} true;
    out_$i276 := $M.69;
    goto corral_source_split_7444;

  $bb293:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7442;

  SeqInstr_570:
    goto corral_source_split_7441;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} out_vslice_dummy_var_91 := serial8250_get_poll_char(out_$p274);
    goto SeqInstr_569;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    out_$p274 := $M.61;
    goto corral_source_split_7440;

  $bb292:
    assume out_$i273 == 1;
    goto corral_source_split_7439;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    out_$i273 := $eq.i32(out_$i272, 3);
    goto corral_source_split_7437;

  $bb291:
    assume {:verifier.code 0} true;
    out_$i272 := $M.69;
    goto corral_source_split_7436;

  $bb290:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7434;

  SeqInstr_567:
    goto corral_source_split_7433;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} out_vslice_dummy_var_90 := serial8250_get_poll_char(out_$p270);
    goto SeqInstr_566;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    out_$p270 := $M.61;
    goto corral_source_split_7432;

  $bb289:
    assume out_$i269 == 1;
    goto corral_source_split_7431;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 1);
    goto corral_source_split_7037;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    out_$i268 := $M.69;
    goto corral_source_split_7036;

  $bb116:
    assume out_$i98 == 1;
    goto corral_source_split_7035;

  $bb107:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i91, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb106:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i91, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb305:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1803} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7471;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} serial8250_stop_rx(out_$p288);
    goto corral_source_split_7470;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    out_$p288 := $M.61;
    goto corral_source_split_7469;

  $bb304:
    assume out_$i287 == 1;
    goto corral_source_split_7468;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i286, 2);
    goto corral_source_split_7466;

  $bb303:
    assume {:verifier.code 0} true;
    out_$i286 := $M.69;
    goto corral_source_split_7465;

  $bb302:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1801} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7463;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} serial8250_stop_rx(out_$p285);
    goto corral_source_split_7462;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    out_$p285 := $M.61;
    goto corral_source_split_7461;

  $bb301:
    assume out_$i284 == 1;
    goto corral_source_split_7460;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 3);
    goto corral_source_split_7458;

  $bb300:
    assume {:verifier.code 0} true;
    out_$i283 := $M.69;
    goto corral_source_split_7457;

  $bb299:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1799} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7455;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} serial8250_stop_rx(out_$p282);
    goto corral_source_split_7454;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    out_$p282 := $M.61;
    goto corral_source_split_7453;

  $bb298:
    assume out_$i281 == 1;
    goto corral_source_split_7452;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 1);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$i280 := $M.69;
    goto corral_source_split_7040;

  $bb118:
    assume out_$i99 == 1;
    goto corral_source_split_7039;

  $bb117:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i91, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb314:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1809} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7498;

  SeqInstr_582:
    goto corral_source_split_7497;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} serial8250_put_poll_char(out_$p301, out_$i303);
    goto SeqInstr_581;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    out_$i303 := $trunc.i32.i8(out_$i302);
    goto corral_source_split_7496;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$i302 := $zext.i8.i32(in_$i3);
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    out_$p301 := $M.61;
    goto corral_source_split_7494;

  $bb313:
    assume out_$i300 == 1;
    goto corral_source_split_7493;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i299, 2);
    goto corral_source_split_7491;

  $bb312:
    assume {:verifier.code 0} true;
    out_$i299 := $M.69;
    goto corral_source_split_7490;

  $bb311:
    assume !(out_$i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1807} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7488;

  SeqInstr_579:
    goto corral_source_split_7487;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} serial8250_put_poll_char(out_$p296, out_$i298);
    goto SeqInstr_578;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$i298 := $trunc.i32.i8(out_$i297);
    goto corral_source_split_7486;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    out_$i297 := $zext.i8.i32(in_$i3);
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    out_$p296 := $M.61;
    goto corral_source_split_7484;

  $bb310:
    assume out_$i295 == 1;
    goto corral_source_split_7483;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i294, 3);
    goto corral_source_split_7481;

  $bb309:
    assume {:verifier.code 0} true;
    out_$i294 := $M.69;
    goto corral_source_split_7480;

  $bb308:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1805} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7478;

  SeqInstr_576:
    goto corral_source_split_7477;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} serial8250_put_poll_char(out_$p291, out_$i293);
    goto SeqInstr_575;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    out_$i293 := $trunc.i32.i8(out_$i292);
    goto corral_source_split_7476;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    out_$i292 := $zext.i8.i32(in_$i3);
    goto corral_source_split_7475;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    out_$p291 := $M.61;
    goto corral_source_split_7474;

  $bb307:
    assume out_$i290 == 1;
    goto corral_source_split_7473;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 1);
    goto corral_source_split_7045;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    out_$i289 := $M.69;
    goto corral_source_split_7044;

  $bb119:
    assume !(out_$i99 == 1);
    goto corral_source_split_7043;

  $bb323:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1815} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7519;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} out_vslice_dummy_var_95 := serial8250_request_port(out_$p314);
    goto corral_source_split_7518;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    out_$p314 := $M.61;
    goto corral_source_split_7517;

  $bb322:
    assume out_$i313 == 1;
    goto corral_source_split_7516;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 2);
    goto corral_source_split_7514;

  $bb321:
    assume {:verifier.code 0} true;
    out_$i312 := $M.69;
    goto corral_source_split_7513;

  $bb320:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1813} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} out_vslice_dummy_var_94 := serial8250_request_port(out_$p310);
    goto corral_source_split_7510;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    out_$p310 := $M.61;
    goto corral_source_split_7509;

  $bb319:
    assume out_$i309 == 1;
    goto corral_source_split_7508;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 3);
    goto corral_source_split_7506;

  $bb318:
    assume {:verifier.code 0} true;
    out_$i308 := $M.69;
    goto corral_source_split_7505;

  $bb317:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1811} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7503;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} out_vslice_dummy_var_93 := serial8250_request_port(out_$p306);
    goto corral_source_split_7502;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    out_$p306 := $M.61;
    goto corral_source_split_7501;

  $bb316:
    assume out_$i305 == 1;
    goto corral_source_split_7500;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 1);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    out_$i304 := $M.69;
    goto corral_source_split_7024;

  $bb109:
    assume out_$i95 == 1;
    goto corral_source_split_7023;

  $bb108:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i91, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb329:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $M.65 := out_$i325;
    call {:si_unique_call 1821} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i325);
    goto corral_source_split_7536;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    out_$i325 := $sub.i32(out_$i324, 1);
    goto corral_source_split_7535;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    out_$i324 := $M.65;
    goto corral_source_split_7534;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7533;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} out_vslice_dummy_var_97 := ldv_release_5();
    goto corral_source_split_7532;

  $bb328:
    assume out_$i322 == 1;
    goto corral_source_split_7531;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 2);
    goto corral_source_split_7529;

  $bb327:
    assume {:verifier.code 0} true;
    out_$i321 := $M.69;
    goto corral_source_split_7528;

  $bb326:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $M.65 := out_$i320;
    call {:si_unique_call 1818} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i320);
    goto corral_source_split_7526;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    out_$i320 := $sub.i32(out_$i319, 1);
    goto corral_source_split_7525;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    out_$i319 := $M.65;
    goto corral_source_split_7524;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1817} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7523;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} out_vslice_dummy_var_96 := ldv_release_5();
    goto corral_source_split_7522;

  $bb325:
    assume out_$i317 == 1;
    goto corral_source_split_7521;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 3);
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$i316 := $M.69;
    goto corral_source_split_7028;

  $bb111:
    assume out_$i96 == 1;
    goto corral_source_split_7027;

  $bb110:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i91, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb332:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $M.65 := out_$i330;
    call {:si_unique_call 1824} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i330);
    goto corral_source_split_7543;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    out_$i330 := $add.i32(out_$i329, 1);
    goto corral_source_split_7542;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    out_$i329 := $M.65;
    goto corral_source_split_7541;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1823} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7540;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} out_vslice_dummy_var_98 := ldv_probe_5();
    goto corral_source_split_7539;

  $bb331:
    assume out_$i327 == 1;
    goto corral_source_split_7538;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i326, 1);
    goto corral_source_split_7033;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    out_$i326 := $M.69;
    goto corral_source_split_7032;

  $bb113:
    assume out_$i97 == 1;
    goto corral_source_split_7031;

  $bb112:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i91, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} ldv_stop();
    goto corral_source_split_7545;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(out_$i97 == 1);
    goto $bb115;

  $bb149:
    assume {:verifier.code 0} true;
    assume !(out_$i114 == 1);
    goto $bb115;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} ldv_stop();
    goto corral_source_split_7547;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb11;

  $bb60_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$p225, out_$i227, out_$i228, out_$p229, out_$i231, out_$i232, out_$p233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$i272, out_$i273, out_$p274, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$p285, out_$i286, out_$i287, out_$p288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$p296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$i319, out_$i320, out_$i321, out_$i322, out_$i324, out_$i325, out_$i326, out_$i327, out_$i329, out_$i330, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98 := main_loop_$bb1(in_$p0, in_$i1, in_$i2, in_$i3, in_$i4, in_$p6, in_$i7, in_$p9, in_$i10, in_$i11, in_$p13, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$p225, out_$i227, out_$i228, out_$p229, out_$i231, out_$i232, out_$p233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$i272, out_$i273, out_$p274, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$p285, out_$i286, out_$i287, out_$p288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$p296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$i319, out_$i320, out_$i321, out_$i322, out_$i324, out_$i325, out_$i326, out_$i327, out_$i329, out_$i330, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i8, in_$i4: i32, in_$p6: ref, in_$i7: i32, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p13: ref, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i286: i32, in_$i287: i1, in_$p288: ref, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i32, in_$i293: i8, in_$i294: i32, in_$i295: i1, in_$p296: ref, in_$i297: i32, in_$i298: i8, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$i303: i8, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i316: i32, in_$i317: i1, in_$i319: i32, in_$i320: i32, in_$i321: i32, in_$i322: i1, in_$i324: i32, in_$i325: i32, in_$i326: i32, in_$i327: i1, in_$i329: i32, in_$i330: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: ref, in_vslice_dummy_var_76: ref, in_vslice_dummy_var_77: ref, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32) returns (out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i286: i32, out_$i287: i1, out_$p288: ref, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i32, out_$i293: i8, out_$i294: i32, out_$i295: i1, out_$p296: ref, out_$i297: i32, out_$i298: i8, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$i303: i8, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i316: i32, out_$i317: i1, out_$i319: i32, out_$i320: i32, out_$i321: i32, out_$i322: i1, out_$i324: i32, out_$i325: i32, out_$i326: i32, out_$i327: i1, out_$i329: i32, out_$i330: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: ref, out_vslice_dummy_var_76: ref, out_vslice_dummy_var_77: ref, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32);
  modifies $M.65, $M.63, $M.70, $M.0, $CurrAddr, $M.71, $M.45, $M.72, $M.2, $M.46, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.38, $M.39, $M.19, $M.30, $M.32, $M.34, $M.36, $M.31, $M.40, $M.33, $M.41, $M.35, $M.42, $M.37, $M.43, assertsPassed, $M.74, $M.67, $M.61, $M.69, $M.66, $M.73, $M.7, $M.11, $M.60, $M.75, $M.76, $M.77, $M.78, $M.49;



implementation serial8250_register_ports_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i64, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p13: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i4: i32, in_vslice_dummy_var_100: i32) returns (out_$i5: i64, out_$p6: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p13: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i4: i32, out_vslice_dummy_var_100: i32)
{

  entry:
    out_$i5, out_$p6, out_$p8, out_$p9, out_$i10, out_$i11, out_$p13, out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p22, out_$i24, out_$i25, out_$i26, out_$i4, out_vslice_dummy_var_100 := in_$i5, in_$p6, in_$p8, in_$p9, in_$i10, in_$i11, in_$p13, in_$p15, in_$i16, in_$i17, in_$i18, in_$p20, in_$i21, in_$p22, in_$i24, in_$i25, in_$i26, in_$i4, in_vslice_dummy_var_100;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7724;

  $bb13:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i24;
    goto $bb13_dummy;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i32(out_$i24, out_$i25);
    goto corral_source_split_7735;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    out_$i25 := $M.7;
    goto corral_source_split_7734;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1883} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_7733;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_7731;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i64(out_$i10, 0);
    goto corral_source_split_7729;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_7728;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_7727;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    out_$p6 := $add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i5, 504));
    out_$p8 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i5, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_7726;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} out_vslice_dummy_var_100 := uart_add_one_port(in_$p0, out_$p22);
    goto corral_source_split_7748;

  $bb12:
    out_$p22 := $add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i5, 504)), $mul.ref(0, 1));
    goto corral_source_split_7747;

  $bb11:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} serial8250_init_fixed_type_port(out_$p6, out_$i21);
    goto corral_source_split_7745;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_7744;

  $bb10:
    assume out_$i18 == 1;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i5, 504)), $mul.ref(0, 1)), $mul.ref(260, 1));
    goto corral_source_split_7743;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_7741;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i32(out_$i16, 134217728);
    goto corral_source_split_7740;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_7739;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p13, in_$p1);
    out_$p15 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i5, 504)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_7738;

  $bb9:
    out_$p13 := $add.ref($add.ref($add.ref($add.ref(serial8250_ports, $mul.ref(0, 2016)), $mul.ref(out_$i5, 504)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_7737;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i5, out_$p6, out_$p8, out_$p9, out_$i10, out_$i11, out_$p13, out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p22, out_$i24, out_$i25, out_$i26, out_$i4, out_vslice_dummy_var_100 := serial8250_register_ports_loop_$bb4(in_$p0, in_$p1, out_$i5, out_$p6, out_$p8, out_$p9, out_$i10, out_$i11, out_$p13, out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p22, out_$i24, out_$i25, out_$i26, out_$i4, out_vslice_dummy_var_100);
    return;

  exit:
    return;
}



procedure serial8250_register_ports_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i64, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p13: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i4: i32, in_vslice_dummy_var_100: i32) returns (out_$i5: i64, out_$p6: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p13: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i4: i32, out_vslice_dummy_var_100: i32);
  modifies $M.0;


