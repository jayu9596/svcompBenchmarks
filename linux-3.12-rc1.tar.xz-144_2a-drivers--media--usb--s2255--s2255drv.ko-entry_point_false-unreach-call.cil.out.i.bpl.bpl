var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]i32;

var $M.3: i32;

var $M.4: ref;

var $M.5: i32;

var $M.6: [ref]i64;

var $M.8: [ref]i32;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]i8;

var $M.14: ref;

var $M.15: i32;

var $M.16: ref;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: i32;

var $M.21: i32;

var $M.22: ref;

var $M.23: i32;

var $M.24: [ref]i32;

var $M.25: [ref]i32;

var $M.26: i32;

var $M.27: [ref]i8;

var $M.28: ref;

var $M.30: ref;

var $M.31: ref;

var $M.32: ref;

var $M.33: ref;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: ref;

var $M.39: [ref]i8;

var $M.40: [ref]i8;

var $M.41: [ref]i8;

var $M.42: [ref]i8;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.73: [ref]i8;

var $M.94: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 534687);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_timer_state_1: ref;

axiom ldv_timer_state_1 == $sub.ref(0, 2056);

const s2255_driver_group1: ref;

axiom s2255_driver_group1 == $sub.ref(0, 3088);

const ldv_timer_list_1: ref;

axiom ldv_timer_list_1 == $sub.ref(0, 4120);

const s2255_video_qops_group1: ref;

axiom s2255_video_qops_group1 == $sub.ref(0, 5152);

const s2255_video_qops_group2: ref;

axiom s2255_video_qops_group2 == $sub.ref(0, 6184);

const s2255_ioctl_ops_group4: ref;

axiom s2255_ioctl_ops_group4 == $sub.ref(0, 7216);

const s2255_ioctl_ops_group0: ref;

axiom s2255_ioctl_ops_group0 == $sub.ref(0, 8248);

const s2255_ioctl_ops_group1: ref;

axiom s2255_ioctl_ops_group1 == $sub.ref(0, 9280);

const s2255_ioctl_ops_group5: ref;

axiom s2255_ioctl_ops_group5 == $sub.ref(0, 10312);

const s2255_ioctl_ops_group2: ref;

axiom s2255_ioctl_ops_group2 == $sub.ref(0, 11344);

const s2255_ioctl_ops_group3: ref;

axiom s2255_ioctl_ops_group3 == $sub.ref(0, 12376);

const s2255_fops_v4l_group0: ref;

axiom s2255_fops_v4l_group0 == $sub.ref(0, 13408);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 14436);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 15464);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 16492);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 17520);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 18548);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 19576);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 20604);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 21632);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 22660);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 23688);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 24716);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 25744);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 26772);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 27800);

const INTERF_STATE: ref;

axiom INTERF_STATE == $sub.ref(0, 28828);

const SERIAL_STATE: ref;

axiom SERIAL_STATE == $sub.ref(0, 29856);

const usb_intfdata: ref;

axiom usb_intfdata == $sub.ref(0, 30888);

const usb_urb: ref;

axiom usb_urb == $sub.ref(0, 31920);

const usb_dev: ref;

axiom usb_dev == $sub.ref(0, 32952);

const dev_counter: ref;

axiom dev_counter == $sub.ref(0, 33980);

const completeFnIntCounter: ref;

axiom completeFnIntCounter == $sub.ref(0, 35008);

const completeFnBulkCounter: ref;

axiom completeFnBulkCounter == $sub.ref(0, 36036);

const completeFnInt: ref;

axiom completeFnInt == $sub.ref(0, 37068);

const completeFnBulk: ref;

axiom completeFnBulk == $sub.ref(0, 38100);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 39156);

const {:count 3} pal_sizes: ref;

axiom pal_sizes == $sub.ref(0, 40204);

const {:count 3} ntsc_sizes: ref;

axiom ntsc_sizes == $sub.ref(0, 41252);

const jpeg_enable: ref;

axiom jpeg_enable == $sub.ref(0, 42280);

const {:count 3} s2255_table: ref;

axiom s2255_table == $sub.ref(0, 43400);

const s2255_driver: ref;

axiom s2255_driver == $sub.ref(0, 44728);

const s2255_ioctl_ops: ref;

axiom s2255_ioctl_ops == $sub.ref(0, 46624);

const s2255_fops_v4l: ref;

axiom s2255_fops_v4l == $sub.ref(0, 47736);

const template: ref;

axiom template == $sub.ref(0, 50568);

const color_filter_ctrl: ref;

axiom color_filter_ctrl == $sub.ref(0, 51672);

const s2255_ctrl_ops: ref;

axiom s2255_ctrl_ops == $sub.ref(0, 52720);

const video_nr: ref;

axiom video_nr == $sub.ref(0, 53748);

const vid_limit: ref;

axiom vid_limit == $sub.ref(0, 54776);

const s2255_video_qops: ref;

axiom s2255_video_qops == $sub.ref(0, 55832);

const {:count 6} formats: ref;

axiom formats == $sub.ref(0, 56952);

const {:count 4} G_chnmap: ref;

axiom G_chnmap == $sub.ref(0, 58008);

const debug: ref;

axiom debug == $sub.ref(0, 59036);

const s2255_debug: ref;

axiom s2255_debug == $sub.ref(0, 60068);

const {:count 20} .str.30: ref;

axiom .str.30 == $sub.ref(0, 61112);

const {:count 20} .str.31: ref;

axiom .str.31 == $sub.ref(0, 62156);

const {:count 23} .str.32: ref;

axiom .str.32 == $sub.ref(0, 63203);

const {:count 10} .str.33: ref;

axiom .str.33 == $sub.ref(0, 64237);

const {:count 4} .str.34: ref;

axiom .str.34 == $sub.ref(0, 65265);

const {:count 5} .str.35: ref;

axiom .str.35 == $sub.ref(0, 66294);

const {:count 15} .str.46: ref;

axiom .str.46 == $sub.ref(0, 67333);

const {:count 15} .str.47: ref;

axiom .str.47 == $sub.ref(0, 68372);

const {:count 12} .str.10: ref;

axiom .str.10 == $sub.ref(0, 69408);

const {:count 12} .str.48: ref;

axiom .str.48 == $sub.ref(0, 70444);

const {:count 13} .str.49: ref;

axiom .str.49 == $sub.ref(0, 71481);

const {:count 22} .str.50: ref;

axiom .str.50 == $sub.ref(0, 72527);

const {:count 15} .str.51: ref;

axiom .str.51 == $sub.ref(0, 73566);

const {:count 32} .str.52: ref;

axiom .str.52 == $sub.ref(0, 74622);

const {:count 13} .str.45: ref;

axiom .str.45 == $sub.ref(0, 75659);

const {:count 24} .str.36: ref;

axiom .str.36 == $sub.ref(0, 76707);

const {:count 15} .str.37: ref;

axiom .str.37 == $sub.ref(0, 77746);

const {:count 25} .str.38: ref;

axiom .str.38 == $sub.ref(0, 78795);

const {:count 12} .str.5: ref;

axiom .str.5 == $sub.ref(0, 79831);

const {:count 30} .str.39: ref;

axiom .str.39 == $sub.ref(0, 80885);

const {:count 31} .str.40: ref;

axiom .str.40 == $sub.ref(0, 81940);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 50} .str.41: ref;

axiom .str.41 == $sub.ref(0, 83014);

const {:count 21} .str.42: ref;

axiom .str.42 == $sub.ref(0, 84059);

const {:count 19} .str.43: ref;

axiom .str.43 == $sub.ref(0, 85102);

const {:count 14} .str.44: ref;

axiom .str.44 == $sub.ref(0, 86140);

const {:count 13} .str.125: ref;

axiom .str.125 == $sub.ref(0, 87177);

const {:count 23} .str.136: ref;

axiom .str.136 == $sub.ref(0, 88224);

const {:count 27} .str.137: ref;

axiom .str.137 == $sub.ref(0, 89275);

const {:count 11} .str.129: ref;

axiom .str.129 == $sub.ref(0, 90310);

const {:count 14} .str.135: ref;

axiom .str.135 == $sub.ref(0, 91348);

const {:count 20} .str.127: ref;

axiom .str.127 == $sub.ref(0, 92392);

const {:count 21} .str.128: ref;

axiom .str.128 == $sub.ref(0, 93437);

const {:count 29} .str.131: ref;

axiom .str.131 == $sub.ref(0, 94490);

const {:count 18} .str.132: ref;

axiom .str.132 == $sub.ref(0, 95532);

const {:count 20} .str.130: ref;

axiom .str.130 == $sub.ref(0, 96576);

const {:count 16} .str.6: ref;

axiom .str.6 == $sub.ref(0, 97616);

const {:count 28} .str.7: ref;

axiom .str.7 == $sub.ref(0, 98668);

const {:count 19} .str.8: ref;

axiom .str.8 == $sub.ref(0, 99711);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 21} .str.3: ref;

axiom .str.3 == $sub.ref(0, 100756);

const {:count 14} .str.4: ref;

axiom .str.4 == $sub.ref(0, 101794);

const {:count 18} .str.9: ref;

axiom .str.9 == $sub.ref(0, 102836);

const {:count 37} .str.12: ref;

axiom .str.12 == $sub.ref(0, 103897);

const {:count 41} .str.13: ref;

axiom .str.13 == $sub.ref(0, 104962);

const {:count 31} .str.14: ref;

axiom .str.14 == $sub.ref(0, 106017);

const {:count 13} .str.15: ref;

axiom .str.15 == $sub.ref(0, 107054);

const {:count 28} .str.16: ref;

axiom .str.16 == $sub.ref(0, 108106);

const {:count 20} .str.17: ref;

axiom .str.17 == $sub.ref(0, 109150);

const {:count 52} .str.18: ref;

axiom .str.18 == $sub.ref(0, 110226);

const {:count 20} .str.19: ref;

axiom .str.19 == $sub.ref(0, 111270);

const v4l2_type_names: ref;

axiom v4l2_type_names == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 28} .str.20: ref;

axiom .str.20 == $sub.ref(0, 112322);

const {:count 51} .str.21: ref;

axiom .str.21 == $sub.ref(0, 113397);

const {:count 34} .str.22: ref;

axiom .str.22 == $sub.ref(0, 114455);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 27} .str.23: ref;

axiom .str.23 == $sub.ref(0, 115506);

const {:count 23} .str.24: ref;

axiom .str.24 == $sub.ref(0, 116553);

const {:count 27} .str.25: ref;

axiom .str.25 == $sub.ref(0, 117604);

const {:count 22} .str.26: ref;

axiom .str.26 == $sub.ref(0, 118650);

const {:count 38} .str.27: ref;

axiom .str.27 == $sub.ref(0, 119712);

const {:count 19} .str.28: ref;

axiom .str.28 == $sub.ref(0, 120755);

const {:count 38} .str.29: ref;

axiom .str.29 == $sub.ref(0, 121817);

const .str: ref;

axiom .str == $sub.ref(0, 122866);

const {:count 15} .str.1: ref;

axiom .str.1 == $sub.ref(0, 123905);

const {:count 48} .str.2: ref;

axiom .str.2 == $sub.ref(0, 124977);

const {:count 11} .str.11: ref;

axiom .str.11 == $sub.ref(0, 126012);

const {:count 27} .str.158: ref;

axiom .str.158 == $sub.ref(0, 127063);

const {:count 27} .str.159: ref;

axiom .str.159 == $sub.ref(0, 128114);

const {:count 57} .str.170: ref;

axiom .str.170 == $sub.ref(0, 129195);

const {:count 14} .str.171: ref;

axiom .str.171 == $sub.ref(0, 130233);

const {:count 48} .str.161: ref;

axiom .str.161 == $sub.ref(0, 131305);

const {:count 14} .str.162: ref;

axiom .str.162 == $sub.ref(0, 132343);

const {:count 24} .str.156: ref;

axiom .str.156 == $sub.ref(0, 133391);

const {:count 18} .str.157: ref;

axiom .str.157 == $sub.ref(0, 134433);

const {:count 18} .str.160: ref;

axiom .str.160 == $sub.ref(0, 135475);

const {:count 43} .str.163: ref;

axiom .str.163 == $sub.ref(0, 136542);

const {:count 10} .str.164: ref;

axiom .str.164 == $sub.ref(0, 137576);

const {:count 8} .str.165: ref;

axiom .str.165 == $sub.ref(0, 138608);

const {:count 20} .str.166: ref;

axiom .str.166 == $sub.ref(0, 139652);

const {:count 17} .str.167: ref;

axiom .str.167 == $sub.ref(0, 140693);

const {:count 31} .str.168: ref;

axiom .str.168 == $sub.ref(0, 141748);

const {:count 27} .str.169: ref;

axiom .str.169 == $sub.ref(0, 142799);

const {:count 45} .str.143: ref;

axiom .str.143 == $sub.ref(0, 143868);

const {:count 18} .str.144: ref;

axiom .str.144 == $sub.ref(0, 144910);

const {:count 13} .str.145: ref;

axiom .str.145 == $sub.ref(0, 145947);

const {:count 18} .str.146: ref;

axiom .str.146 == $sub.ref(0, 146989);

const {:count 25} .str.147: ref;

axiom .str.147 == $sub.ref(0, 148038);

const {:count 17} .str.148: ref;

axiom .str.148 == $sub.ref(0, 149079);

const {:count 19} .str.149: ref;

axiom .str.149 == $sub.ref(0, 150122);

const {:count 17} .str.150: ref;

axiom .str.150 == $sub.ref(0, 151163);

const {:count 16} .str.172: ref;

axiom .str.172 == $sub.ref(0, 152203);

const {:count 18} .str.173: ref;

axiom .str.173 == $sub.ref(0, 153245);

const {:count 18} .str.174: ref;

axiom .str.174 == $sub.ref(0, 154287);

const {:count 21} .str.175: ref;

axiom .str.175 == $sub.ref(0, 155332);

const {:count 17} .str.177: ref;

axiom .str.177 == $sub.ref(0, 156373);

const {:count 36} .str.178: ref;

axiom .str.178 == $sub.ref(0, 157433);

const {:count 25} .str.176: ref;

axiom .str.176 == $sub.ref(0, 158482);

const {:count 53} .str.140: ref;

axiom .str.140 == $sub.ref(0, 159559);

const {:count 23} .str.141: ref;

axiom .str.141 == $sub.ref(0, 160606);

const {:count 45} .str.142: ref;

axiom .str.142 == $sub.ref(0, 161675);

const {:count 20} .str.152: ref;

axiom .str.152 == $sub.ref(0, 162719);

const {:count 26} .str.153: ref;

axiom .str.153 == $sub.ref(0, 163769);

const {:count 21} .str.154: ref;

axiom .str.154 == $sub.ref(0, 164814);

const {:count 17} .str.151: ref;

axiom .str.151 == $sub.ref(0, 165855);

const {:count 6} .str.138: ref;

axiom .str.138 == $sub.ref(0, 166885);

const {:count 10} .str.155: ref;

axiom .str.155 == $sub.ref(0, 167919);

const {:count 4} .str.133: ref;

axiom .str.133 == $sub.ref(0, 168947);

const {:count 17} .str.134: ref;

axiom .str.134 == $sub.ref(0, 169988);

const {:count 12} .str.53: ref;

axiom .str.53 == $sub.ref(0, 171024);

const {:count 23} .str.54: ref;

axiom .str.54 == $sub.ref(0, 172071);

const {:count 11} .str.55: ref;

axiom .str.55 == $sub.ref(0, 173106);

const {:count 17} .str.56: ref;

axiom .str.56 == $sub.ref(0, 174147);

const {:count 39} .str.57: ref;

axiom .str.57 == $sub.ref(0, 175210);

const {:count 26} .str.58: ref;

axiom .str.58 == $sub.ref(0, 176260);

const {:count 33} .str.59: ref;

axiom .str.59 == $sub.ref(0, 177317);

const {:count 23} .str.60: ref;

axiom .str.60 == $sub.ref(0, 178364);

const {:count 23} .str.61: ref;

axiom .str.61 == $sub.ref(0, 179411);

const {:count 25} .str.62: ref;

axiom .str.62 == $sub.ref(0, 180460);

const {:count 16} .str.63: ref;

axiom .str.63 == $sub.ref(0, 181500);

const {:count 13} .str.64: ref;

axiom .str.64 == $sub.ref(0, 182537);

const {:count 39} .str.65: ref;

axiom .str.65 == $sub.ref(0, 183600);

const {:count 20} .str.66: ref;

axiom .str.66 == $sub.ref(0, 184644);

const {:count 26} .str.67: ref;

axiom .str.67 == $sub.ref(0, 185694);

const {:count 35} .str.68: ref;

axiom .str.68 == $sub.ref(0, 186753);

const {:count 45} .str.69: ref;

axiom .str.69 == $sub.ref(0, 187822);

const {:count 22} .str.70: ref;

axiom .str.70 == $sub.ref(0, 188868);

const {:count 24} .str.71: ref;

axiom .str.71 == $sub.ref(0, 189916);

const {:count 41} .str.72: ref;

axiom .str.72 == $sub.ref(0, 190981);

const {:count 37} .str.118: ref;

axiom .str.118 == $sub.ref(0, 192042);

const {:count 27} .str.119: ref;

axiom .str.119 == $sub.ref(0, 193093);

const {:count 34} .str.120: ref;

axiom .str.120 == $sub.ref(0, 194151);

const {:count 35} .str.121: ref;

axiom .str.121 == $sub.ref(0, 195210);

const {:count 40} .str.122: ref;

axiom .str.122 == $sub.ref(0, 196274);

const {:count 7} .str.123: ref;

axiom .str.123 == $sub.ref(0, 197305);

const {:count 37} .str.124: ref;

axiom .str.124 == $sub.ref(0, 198366);

const {:count 23} .str.75: ref;

axiom .str.75 == $sub.ref(0, 199413);

const {:count 24} .str.76: ref;

axiom .str.76 == $sub.ref(0, 200461);

const {:count 36} .str.77: ref;

axiom .str.77 == $sub.ref(0, 201521);

const {:count 38} .str.78: ref;

axiom .str.78 == $sub.ref(0, 202583);

const {:count 21} .str.79: ref;

axiom .str.79 == $sub.ref(0, 203628);

const {:count 17} .str.80: ref;

axiom .str.80 == $sub.ref(0, 204669);

const {:count 19} .str.86: ref;

axiom .str.86 == $sub.ref(0, 205712);

const {:count 21} .str.87: ref;

axiom .str.87 == $sub.ref(0, 206757);

const {:count 33} .str.88: ref;

axiom .str.88 == $sub.ref(0, 207814);

const {:count 32} .str.89: ref;

axiom .str.89 == $sub.ref(0, 208870);

const {:count 31} .str.90: ref;

axiom .str.90 == $sub.ref(0, 209925);

const {:count 21} .str.91: ref;

axiom .str.91 == $sub.ref(0, 210970);

const {:count 13} .str.92: ref;

axiom .str.92 == $sub.ref(0, 212007);

const {:count 26} .str.93: ref;

axiom .str.93 == $sub.ref(0, 213057);

const {:count 29} .str.94: ref;

axiom .str.94 == $sub.ref(0, 214110);

const {:count 27} .str.95: ref;

axiom .str.95 == $sub.ref(0, 215161);

const {:count 22} .str.96: ref;

axiom .str.96 == $sub.ref(0, 216207);

const {:count 30} .str.97: ref;

axiom .str.97 == $sub.ref(0, 217261);

const {:count 30} .str.98: ref;

axiom .str.98 == $sub.ref(0, 218315);

const {:count 17} .str.99: ref;

axiom .str.99 == $sub.ref(0, 219356);

const {:count 37} .str.100: ref;

axiom .str.100 == $sub.ref(0, 220417);

const {:count 34} .str.101: ref;

axiom .str.101 == $sub.ref(0, 221475);

const {:count 24} .str.102: ref;

axiom .str.102 == $sub.ref(0, 222523);

const {:count 50} .str.103: ref;

axiom .str.103 == $sub.ref(0, 223597);

const {:count 14} .str.104: ref;

axiom .str.104 == $sub.ref(0, 224635);

const {:count 26} .str.105: ref;

axiom .str.105 == $sub.ref(0, 225685);

const {:count 19} .str.106: ref;

axiom .str.106 == $sub.ref(0, 226728);

const {:count 34} .str.107: ref;

axiom .str.107 == $sub.ref(0, 227786);

const {:count 21} .str.108: ref;

axiom .str.108 == $sub.ref(0, 228831);

const {:count 47} .str.109: ref;

axiom .str.109 == $sub.ref(0, 229902);

const {:count 37} .str.110: ref;

axiom .str.110 == $sub.ref(0, 230963);

const {:count 57} .str.111: ref;

axiom .str.111 == $sub.ref(0, 232044);

const {:count 34} .str.112: ref;

axiom .str.112 == $sub.ref(0, 233102);

const {:count 29} .str.113: ref;

axiom .str.113 == $sub.ref(0, 234155);

const {:count 16} .str.114: ref;

axiom .str.114 == $sub.ref(0, 235195);

const {:count 25} .str.115: ref;

axiom .str.115 == $sub.ref(0, 236244);

const {:count 25} .str.116: ref;

axiom .str.116 == $sub.ref(0, 237293);

const {:count 48} .str.117: ref;

axiom .str.117 == $sub.ref(0, 238365);

const {:count 28} .str.83: ref;

axiom .str.83 == $sub.ref(0, 239417);

const {:count 46} .str.84: ref;

axiom .str.84 == $sub.ref(0, 240487);

const {:count 36} .str.85: ref;

axiom .str.85 == $sub.ref(0, 241547);

const {:count 26} .str.81: ref;

axiom .str.81 == $sub.ref(0, 242597);

const {:count 22} .str.82: ref;

axiom .str.82 == $sub.ref(0, 243643);

const {:count 12} .str.73: ref;

axiom .str.73 == $sub.ref(0, 244679);

const {:count 26} .str.74: ref;

axiom .str.74 == $sub.ref(0, 245729);

const {:count 9} .str.139: ref;

axiom .str.139 == $sub.ref(0, 246762);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 247794);

const {:count 3} .str.1.316: ref;

axiom .str.1.316 == $sub.ref(0, 248821);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 249859);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 250887);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 251919);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 252951);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 253983);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 255015);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const buffer_setup: ref;

axiom buffer_setup == $sub.ref(0, 256047);

procedure buffer_setup($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation buffer_setup($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2572, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2576, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i9, $i11);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.2, $p15);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i17 := $ashr.i32($i16, 3);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i12, $i17);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i18);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p1);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p2);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p1);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i21, $i22);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i24 := $M.3;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i24, 1048576);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i23, $i25);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i27 := $M.3;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i27, 1048576);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p2);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i30 := $udiv.i32($i28, $i29);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i30);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 16);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const buffer_prepare: ref;

axiom buffer_prepare == $sub.ref(0, 257079);

procedure buffer_prepare($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation buffer_prepare($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p49: ref;
  var $i50: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p76: ref;
  var $i21: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} {:cexpr "buffer_prepare:arg:field"} boogie_si_record_i32($i2);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2572, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 11} {:cexpr "w"} boogie_si_record_i32($i10);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2576, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 12} {:cexpr "h"} boogie_si_record_i32($i12);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i14 := $M.5;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 3);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i22 := norm_minw($p7);
    call {:si_unique_call 15} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, $i10);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i24 := norm_maxw($p7);
    call {:si_unique_call 17} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, $i10);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i26 := norm_minh($p7);
    call {:si_unique_call 19} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, $i12);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i28 := norm_maxh($p7);
    call {:si_unique_call 21} {:cexpr "tmp___2"} boogie_si_record_i32($i28);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, $i12);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i10, $i12);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.2, $p37);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i39 := $ashr.i32($i38, 3);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i40 := $mul.i32($i34, $i39);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i41);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(208, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(240, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p60);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i10);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i12);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i2);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 1);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb33:
    assume $i71 == 1;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i73 := videobuf_iolock($p0, $p72, $0.ref);
    call {:si_unique_call 25} {:cexpr "rc"} boogie_si_record_i32($i73);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 0);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb35:
    assume $i74 == 1;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} free_buffer($p0, $p8);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i21 := $i73;
    goto $bb6;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i54 := $ult.i64($i50, $i53);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb26;

  $bb27:
    assume $i54 == 1;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i56 := $M.5;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, 3);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb6;

  $bb29:
    assume $i57 == 1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_69 := printk.ref(.str.52);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i31 := $M.5;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 3);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb6;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_68 := printk.ref(.str.52);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} vslice_dummy_var_67 := printk.ref.ref.i32(.str.50, .str.51, $i2);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const buffer_queue: ref;

axiom buffer_queue == $sub.ref(0, 258111);

procedure buffer_queue($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation buffer_queue($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 2);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(56, 1));
    $p17 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2072, 1)), $mul.ref(0, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} list_add_tail($p16, $p17);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_70 := printk.ref.ref(.str.10, .str.49);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const buffer_release: ref;

axiom buffer_release == $sub.ref(0, 259143);

procedure buffer_release($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation buffer_release($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 3);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} free_buffer($p0, $p2);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_71 := printk.ref.ref.i32(.str.46, .str.47, $i12);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 260175);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 1} true;
    call {:si_unique_call 31} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 32} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 33} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 34} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 35} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 36} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 1} true;
    call {:si_unique_call 37} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 38} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64.ref($p0: ref, p.1: ref, p.2: i32, p.3: i64, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64.ref($p0: ref, p.1: ref, p.2: i32, p.3: i64, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 39} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 40} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i32($p0: ref, p.1: i64, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i32($p0: ref, p.1: i64, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 41} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 42} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 43} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 44} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 45} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 46} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 1} true;
    call {:si_unique_call 47} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 48} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 1} true;
    call {:si_unique_call 49} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 50} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 51} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 52} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 53} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 54} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 60} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb15:
    assume {:verifier.code 1} true;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 1} true;
    call {:si_unique_call 61} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 62} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i64.i32($p0: ref, p.1: ref, p.2: i64, p.3: i64, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i64.i32($p0: ref, p.1: ref, p.2: i64, p.3: i64, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb16:
    assume {:verifier.code 1} true;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 1} true;
    call {:si_unique_call 63} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 64} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb17:
    assume {:verifier.code 1} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64, p.4: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb18:
    assume {:verifier.code 1} true;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 1} true;
    call {:si_unique_call 67} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 68} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const free_buffer: ref;

axiom free_buffer == $sub.ref(0, 261207);

procedure free_buffer($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_buffer($p0: ref, $p1: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 3);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} videobuf_vmalloc_free($p6);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} vslice_dummy_var_72 := printk.ref.ref(.str.10, .str.48);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const videobuf_vmalloc_free: ref;

axiom videobuf_vmalloc_free == $sub.ref(0, 262239);

procedure videobuf_vmalloc_free($p0: ref);
  free requires assertsPassed;



implementation videobuf_vmalloc_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 263271);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} __list_add($p0, $p3, $p1);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 264303);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    return;
}



const norm_minw: ref;

axiom norm_minw == $sub.ref(0, 265335);

procedure norm_minw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation norm_minw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 63744);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 320 else 352);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const norm_maxw: ref;

axiom norm_maxw == $sub.ref(0, 266367);

procedure norm_maxw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation norm_maxw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 63744);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 640 else 704);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const norm_minh: ref;

axiom norm_minh == $sub.ref(0, 267399);

procedure norm_minh($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation norm_minh($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 63744);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 240 else 288);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const norm_maxh: ref;

axiom norm_maxh == $sub.ref(0, 268431);

procedure norm_maxh($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation norm_maxh($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 63744);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 480 else 576);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const videobuf_iolock: ref;

axiom videobuf_iolock == $sub.ref(0, 269463);

procedure videobuf_iolock($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_iolock($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 72} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 73} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const s2255_s_ctrl: ref;

axiom s2255_s_ctrl == $sub.ref(0, 270495);

procedure s2255_s_ctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation s2255_s_ctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p58: ref;
  var $i57: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p1 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 1800), 2600));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 1800), 2600)), $mul.ref(2232, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 75} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p7, $p8, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 3);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 9963779);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 9967920);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, 10291459);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 10291459);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 22);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $r := $i57;
    return;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 1800), 2600)), $mul.ref(2288, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb25;

  $bb9:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i14, 9967920);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, $sub.i32(0, 983041));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i50 := (if $i49 == 1 then 65536 else 0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i45, $i50);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} vslice_dummy_var_74 := s2255_set_mode($p5, $p1);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb25;

  $bb7:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i14, 9963779);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb5:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i14, 9963777);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i14, 9963778);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i22 == 1);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i22 == 1;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i14, 9963776);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb22:
    assume $i23 == 1;
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} vslice_dummy_var_73 := printk.ref.ref(.str.10, .str.45);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 271527);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const s2255_set_mode: ref;

axiom s2255_set_mode == $sub.ref(0, 272559);

procedure s2255_set_mode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation s2255_set_mode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i101: i64;
  var $i99: i64;
  var $i100: i64;
  var $i103: i64;
  var $i104: i1;
  var $i105: i64;
  var $i106: i32;
  var $i107: i1;
  var $i102: i64;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i117: i32;
  var $i118: i32;
  var $p120: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i61: i32;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(0, 1)), $mul.ref(1528, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $p6 := to_s2255_dev($p5);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref($i9, 8));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.6, $p10);
    call {:si_unique_call 80} {:cexpr "chn_rev"} boogie_si_record_i64($i11);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i13 := $M.5;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 2);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 255);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 5);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p1);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 82} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p42, $p43, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i44 := get_transfer_size($p1);
    call {:si_unique_call 84} {:cexpr "tmp___0"} boogie_si_record_i32($i44);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2344, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i45);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i48 := $M.5;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, 0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p53 := kzalloc(512, 208);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 576045278);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i64.i32($i11);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p54, $mul.ref(1, 4));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p54, $mul.ref(2, 4));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $sub.i32(0, 1037742064));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p54, $mul.ref(3, 4));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p128, $mul.ref(1, 4));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p54, $mul.ref(4, 4));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p131, $i130);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p133, $mul.ref(2, 4));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p54, $mul.ref(5, 4));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i135);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(3, 4));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p54, $mul.ref(6, 4));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $i140);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p143, $mul.ref(4, 4));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p54, $mul.ref(7, 4));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, $i145);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p148, $mul.ref(5, 4));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p54, $mul.ref(8, 4));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $i150);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p153, $mul.ref(6, 4));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p54, $mul.ref(9, 4));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i155);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p158, $mul.ref(7, 4));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p54, $mul.ref(10, 4));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, $i160);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p163, $mul.ref(8, 4));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p54, $mul.ref(11, 4));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, $i165);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref(9, 4));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p54, $mul.ref(12, 4));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, $i170);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p173, $mul.ref(10, 4));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p54, $mul.ref(13, 4));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, $i175);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p54);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i73 := s2255_write_config($p71, $p72, 512);
    call {:si_unique_call 89} {:cexpr "res"} boogie_si_record_i32($i73);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i74 := $M.5;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p54);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} kfree($p76);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i118 := $i73;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2232, 1)), $mul.ref(40, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, 0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i122 := $M.5;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i123 := $sgt.i32($i122, 0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i61 := $i118;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  $bb47:
    assume $i123 == 1;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} vslice_dummy_var_79 := printk.ref.ref.i32.i32(.str.40, .str.37, $i125, $i118);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb21:
    assume $i79 == 1;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i80 := msecs_to_jiffies(500);
    call {:si_unique_call 93} {:cexpr "tmp___2"} boogie_si_record_i64($i80);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 1);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i117 := $i73;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i118 := $i117;
    goto $bb46;

  $bb43:
    assume $i115 == 1;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} vslice_dummy_var_78 := printk.ref(.str.39);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i117 := $sub.i32(0, 14);
    goto $bb45;

  $bb23:
    assume $i83 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p84 := get_current();
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p85, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p87, $p84);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p88, autoremove_wake_function);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p91, $p89);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p94, $p92);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} prepare_to_wait($p95, $p2, 2);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i99 := $i80;
    assume {:branchcond $i98} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i98 == 1);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i100 := $i80;
    goto $bb28;

  $bb28:
    call $i101, $i100, $i103, $i104, $i105, $i106, $i107 := s2255_set_mode_loop_$bb28($p2, $p95, $p96, $i101, $i100, $i103, $i104, $i105, $i106, $i107);
    goto $bb28_last;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i103 := schedule_timeout($i100);
    call {:si_unique_call 97} {:cexpr "__ret"} boogie_si_record_i64($i103);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i104 := $eq.i64($i103, 0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i105 := $i103;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} prepare_to_wait($p95, $p2, 2);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p96);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i101 := $i103;
    assume true;
    goto $bb29, $bb35;

  $bb35:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i100 := $i103;
    goto $bb35_dummy;

  $bb29:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i99 := $i101;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i102 := $i99;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i102, 0);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} finish_wait($p112, $p2);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i108 == 1;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb38;

  $bb39:
    assume $i111 == 1;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb32:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i102 := $i105;
    goto $bb30;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb26;

  $bb18:
    assume $i75 == 1;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} s2255_print_cfg($p6, $p1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i56 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} vslice_dummy_var_77 := dev_err.ref.ref($p59, .str.5);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 12);
    goto $bb12;

  $bb7:
    assume $i49 == 1;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2344, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} vslice_dummy_var_76 := printk.ref.ref.i64(.str.38, .str.37, $i51);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, $sub.i32(0, 256));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 5);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, $sub.i32(0, 65281));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2288, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i38 := $shl.i32($i37, 8);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i35, $i38);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} vslice_dummy_var_75 := printk.ref.ref.i32(.str.36, .str.37, $i16);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb35_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;
}



const to_s2255_dev: ref;

axiom to_s2255_dev == $sub.ref(0, 273591);

procedure to_s2255_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_s2255_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 10368), 11240));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const get_transfer_size: ref;

axiom get_transfer_size == $sub.ref(0, 274623);

procedure get_transfer_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_transfer_size($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i16: i32;
  var $i17: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i30, $i31 := 240, 640;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i16, $i17 := $i30, $i31;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i17, $i16);
    call {:si_unique_call 102} {:cexpr "outImageSize"} boogie_si_record_i32($i32);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 255);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 4);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i32;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 512);
    call {:si_unique_call 104} {:cexpr "usbInSize"} boogie_si_record_i32($i39);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i40 := $xor.i32($sub.i32(0, 16384), $sub.i32(0, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, $i39);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i39;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i3 := $i45;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb44:
    assume $i42 == 1;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i39, $sub.i32(0, 16384));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 16384);
    call {:si_unique_call 105} {:cexpr "usbInSize"} boogie_si_record_i32($i44);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb46;

  $bb41:
    assume $i36 == 1;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i32, 2);
    call {:si_unique_call 103} {:cexpr "outImageSize"} boogie_si_record_i32($i37);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb43;

  $bb23:
    assume $i20 == 1;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i22, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i22, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb30, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i28, $i29 := 240, 640;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i30, $i31 := $i28, $i29;
    goto $bb40;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i28, $i29 := 704, 576;
    goto $bb38;

  $bb28:
    assume $i24 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i28, $i29 := 352, 288;
    goto $bb38;

  $bb26:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i22, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i26 == 1);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i28, $i29 := 704, 288;
    goto $bb38;

  $bb34:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i22, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb33;

  $bb36:
    assume $i27 == 1;
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14, $i15 := 240, 640;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i14, $i15;
    goto $bb22;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14, $i15 := 640, 480;
    goto $bb20;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i14, $i15 := 320, 240;
    goto $bb20;

  $bb8:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i12 == 1);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i14, $i15 := 640, 240;
    goto $bb20;

  $bb16:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb15;

  $bb18:
    assume $i13 == 1;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 275655);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 107} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 276687);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 110} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 111} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const s2255_write_config: ref;

axiom s2255_write_config == $sub.ref(0, 277719);

procedure s2255_write_config($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation s2255_write_config($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 114} {:cexpr "s2255_write_config:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i6 := __create_pipe($p0, 2);
    call {:si_unique_call 116} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, $sub.i32(0, 1073741824));
    call {:si_unique_call 117} {:cexpr "pipe"} boogie_si_record_i32($i7);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i8 := usb_bulk_msg($p0, $i7, $p1, $i2, $p3, 500);
    call {:si_unique_call 119} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    call {:si_unique_call 120} {:cexpr "retval"} boogie_si_record_i64($i9);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const s2255_print_cfg: ref;

axiom s2255_print_cfg == $sub.ref(0, 278751);

procedure s2255_print_cfg($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation s2255_print_cfg($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $i17: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_80 := _dev_info.ref.ref($p4, .str.41);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_81 := _dev_info.ref.ref.i32.i32($p4, .str.42, $i7, $i9);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} vslice_dummy_var_82 := _dev_info.ref.ref.i32.i32($p4, .str.43, $i12, $i14);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vslice_dummy_var_83 := _dev_info.ref.ref.i32($p4, .str.44, $i17);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} vslice_dummy_var_84 := _dev_info.ref.ref($p4, .str.41);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 279783);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} free_($p0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 280815);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 1} true;
    call {:si_unique_call 128} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 129} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 281847);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p0 := devirtbounce(0, current_task);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 282879);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 283911);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 284943);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 132} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 285975);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 287007);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 135} $free($p0);
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 288039);

procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 139} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 140} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 141} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 1} true;
    call {:si_unique_call 142} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 143} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 289071);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(0, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 290103);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 146} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 147} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 148} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 149} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 291135);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 151} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const s2255_video_device_release: ref;

axiom s2255_video_device_release == $sub.ref(0, 292167);

procedure s2255_video_device_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation s2255_video_device_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(1528, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p3 := to_s2255_dev($p2);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} v4l2_ctrl_handler_free($p5);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 3);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(10760, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i13 := atomic_dec_and_test($p12);
    call {:si_unique_call 159} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} s2255_destroy($p3);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(10760, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i10 := atomic_read($p9);
    call {:si_unique_call 156} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_85 := printk.ref.ref.i32(.str.136, .str.137, $i10);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const v4l2_ctrl_handler_free: ref;

axiom v4l2_ctrl_handler_free == $sub.ref(0, 293199);

procedure v4l2_ctrl_handler_free($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 294231);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 295263);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 162} devirtbounce.1(0, $p2, $p1, $p2);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.13, $p1);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const s2255_destroy: ref;

axiom s2255_destroy == $sub.ref(0, 296295);

procedure s2255_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.16, $M.15, $M.14, $CurrAddr;



implementation s2255_destroy($p0: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_86 := s2255_board_shutdown($p0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10960, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} vslice_dummy_var_87 := ldv_del_timer_6($p2);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} release_firmware($p24);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} kfree($p28);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} kfree($p31);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} s2255_reset_dsppower($p0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} mutex_destroy($p32);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} ldv_usb_put_dev_8($p34);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10400, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} v4l2_device_unregister($p35);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i37 := $M.5;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, 0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} kfree($p40);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} vslice_dummy_var_88 := printk.ref.ref(.str.129, .str.135);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} usb_kill_urb($p13);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} ldv_usb_free_urb_7($p17);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s2255_board_shutdown: ref;

axiom s2255_board_shutdown == $sub.ref(0, 297327);

procedure s2255_board_shutdown($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $CurrAddr;



implementation s2255_board_shutdown($p0: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i19: i32;
  var $i20: i1;
  var $i13: i32;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(0, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(1, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(2, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(3, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} s2255_stop_readpipe($p0);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb11;

  $bb11:
    call $p14, $p15, $i16, $p17, $i19, $i20, $i13, vslice_dummy_var_91 := s2255_board_shutdown_loop_$bb11($p0, $p14, $p15, $i16, $p17, $i19, $i20, $i13, vslice_dummy_var_91);
    goto $bb11_last;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i13);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 2600));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_91 := s2255_release_sys_buffers($p17);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i13, 1);
    call {:si_unique_call 180} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i20 := $ule.i32($i19, 3);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(8, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} kfree($p23);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i19;
    goto $bb13_dummy;

  $bb24:
    assume $i46 == 1;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(3, 2600));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} vslice_dummy_var_94 := s2255_stop_acquire($p49);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(2, 2600));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_93 := s2255_stop_acquire($p40);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(1, 2600));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} vslice_dummy_var_92 := s2255_stop_acquire($p31);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_90 := s2255_stop_acquire($p11);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} vslice_dummy_var_89 := printk.ref.ref.ref(.str.127, .str.128, $p0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;
}



const ldv_del_timer_6: ref;

axiom ldv_del_timer_6 == $sub.ref(0, 298359);

procedure ldv_del_timer_6($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_del_timer_6($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i1 := del_timer($p0);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} disable_suitable_timer_1($p0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 299391);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_7: ref;

axiom ldv_usb_free_urb_7 == $sub.ref(0, 300423);

procedure ldv_usb_free_urb_7($p0: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_usb_free_urb_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} ldv_free_urb($p0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 301455);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    return;
}



const s2255_reset_dsppower: ref;

axiom s2255_reset_dsppower == $sub.ref(0, 302487);

procedure s2255_reset_dsppower($p0: ref);
  free requires assertsPassed;



implementation s2255_reset_dsppower($p0: ref)
{
  var vslice_dummy_var_95: i64;
  var vslice_dummy_var_96: i64;
  var vslice_dummy_var_97: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_95 := s2255_vendor_req($p0, 64, 0, 1, $0.ref, 0, 1);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} msleep(10);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_96 := s2255_vendor_req($p0, 80, 0, 0, $0.ref, 0, 1);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} msleep(600);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} vslice_dummy_var_97 := s2255_vendor_req($p0, 16, 0, 0, $0.ref, 0, 1);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    return;
}



const mutex_destroy: ref;

axiom mutex_destroy == $sub.ref(0, 303519);

procedure mutex_destroy($p0: ref);
  free requires assertsPassed;



implementation mutex_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_put_dev_8: ref;

axiom ldv_usb_put_dev_8 == $sub.ref(0, 304551);

procedure ldv_usb_put_dev_8($p0: ref);
  free requires assertsPassed;
  modifies $M.15, $M.14;



implementation ldv_usb_put_dev_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} ldv_put_dev($p0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_unregister: ref;

axiom v4l2_device_unregister == $sub.ref(0, 305583);

procedure v4l2_device_unregister($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    return;
}



const ldv_put_dev: ref;

axiom ldv_put_dev == $sub.ref(0, 306615);

procedure ldv_put_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.15, $M.14;



implementation ldv_put_dev($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p1 := $M.14;
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i7 := $M.15;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $M.15 := $i8;
    call {:si_unique_call 195} {:cexpr "dev_counter"} boogie_si_record_i32($i8);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i9 := $M.15;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $M.14 := $0.ref;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const s2255_vendor_req: ref;

axiom s2255_vendor_req == $sub.ref(0, 307647);

procedure s2255_vendor_req($p0: ref, $i1: i8, $i2: i16, $i3: i16, $p4: ref, $i5: i32, $i6: i32) returns ($r: i64);
  free requires assertsPassed;



implementation s2255_vendor_req($p0: ref, $i1: i8, $i2: i16, $i3: i16, $p4: ref, $i5: i32, $i6: i32) returns ($r: i64)
{
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $i40: i32;
  var $i24: i32;
  var $i41: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} {:cexpr "s2255_vendor_req:arg:Request"} boogie_si_record_i8($i1);
    call {:si_unique_call 197} {:cexpr "s2255_vendor_req:arg:Index"} boogie_si_record_i16($i2);
    call {:si_unique_call 198} {:cexpr "s2255_vendor_req:arg:Value"} boogie_si_record_i16($i3);
    call {:si_unique_call 199} {:cexpr "s2255_vendor_req:arg:TransferBufferLength"} boogie_si_record_i32($i5);
    call {:si_unique_call 200} {:cexpr "s2255_vendor_req:arg:bOut"} boogie_si_record_i32($i6);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i27 := __create_pipe($p26, 0);
    call {:si_unique_call 206} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i27, $sub.i32(0, 2147483648));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i3);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i2);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i5);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i40 := usb_control_msg($p29, $i30, $i32, 64, $i34, $i36, $p4, $i39, 1250);
    call {:si_unique_call 208} {:cexpr "r"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    $i24 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i24);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i10 := __create_pipe($p9, 0);
    call {:si_unique_call 202} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, $sub.i32(0, 2147483520));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i3);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i2);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i5);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i23 := usb_control_msg($p12, $i13, $i15, $sub.i8(0, 64), $i17, $i19, $p4, $i22, 1250);
    call {:si_unique_call 204} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 308679);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 309711);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 210} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 211} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 212} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 213} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 214} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 215} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 216} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 1} true;
    call {:si_unique_call 217} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 218} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const ldv_free_urb: ref;

axiom ldv_free_urb == $sub.ref(0, 310743);

procedure ldv_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_free_urb($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p1 := $M.16;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p5 := $M.16;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $M.16 := $0.ref;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 311775);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 1} true;
    call {:si_unique_call 219} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 220} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_1: ref;

axiom disable_suitable_timer_1 == $sub.ref(0, 312807);

procedure disable_suitable_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation disable_suitable_timer_1($p0: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p2 := $M.17;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i1, $i3);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 221} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s2255_stop_acquire: ref;

axiom s2255_stop_acquire == $sub.ref(0, 313839);

procedure s2255_stop_acquire($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s2255_stop_acquire($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i17: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(0, 1)), $mul.ref(1528, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $p4 := to_s2255_dev($p3);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref($i7, 8));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.6, $p8);
    call {:si_unique_call 223} {:cexpr "chn_rev"} boogie_si_record_i64($i9);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p10 := kzalloc(512, 208);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p10);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 576045278);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i9);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p10);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(1, 4));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i19);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p10);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(2, 4));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $sub.i32(0, 1037742032));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i26 := s2255_write_config($p25, $p10, 512);
    call {:si_unique_call 227} {:cexpr "res"} boogie_si_record_i32($i26);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} kfree($p10);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i34 := $M.5;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 3);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} vslice_dummy_var_100 := printk.ref.ref.i32.i32(.str.7, .str.8, $i37, $i26);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} vslice_dummy_var_99 := dev_err.ref.ref($p30, .str.6);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} vslice_dummy_var_98 := dev_err.ref.ref($p15, .str.5);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb3;
}



const s2255_stop_readpipe: ref;

axiom s2255_stop_readpipe == $sub.ref(0, 314871);

procedure s2255_stop_readpipe($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16;



implementation s2255_stop_readpipe($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i15: i32;
  var $i16: i1;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(16, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(24, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i15 := $M.5;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 3);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_101 := printk.ref.ref(.str.129, .str.130);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(24, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} usb_kill_urb($p9);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(24, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} ldv_usb_free_urb_14($p12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(24, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s2255_release_sys_buffers: ref;

axiom s2255_release_sys_buffers == $sub.ref(0, 315903);

procedure s2255_release_sys_buffers($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation s2255_release_sys_buffers($p0: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $p19: ref;
  var $p20: ref;
  var $p25: ref;
  var $p26: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i5: i64;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $i14, $i15, $p19, $p20, $p25, $p26, $p30, $i31, $i32, $i5, vslice_dummy_var_103 := s2255_release_sys_buffers_loop_$bb4($p0, $p9, $p10, $i11, $i12, $i14, $i15, $p19, $p20, $p25, $p26, $p30, $i31, $i32, $i5, vslice_dummy_var_103);
    goto $bb4_last;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref($i5, 32)), $mul.ref(16, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref($i5, 32)), $mul.ref(16, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $0.ref);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i5, 1);
    call {:si_unique_call 237} {:cexpr "i"} boogie_si_record_i64($i31);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i32 := $ule.i64($i31, 3);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb12:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i31;
    goto $bb12_dummy;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i14 := $M.5;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref($i5, 32)), $mul.ref(16, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vfree($p26);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref($i5, 32)), $mul.ref(16, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} vslice_dummy_var_103 := printk.ref.ref(.str.132, $p20);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_102 := printk.ref(.str.131);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 316935);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_14: ref;

axiom ldv_usb_free_urb_14 == $sub.ref(0, 317967);

procedure ldv_usb_free_urb_14($p0: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_usb_free_urb_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} ldv_free_urb($p0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    return;
}



const s2255_poll: ref;

axiom s2255_poll == $sub.ref(0, 318999);

procedure s2255_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation s2255_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i15: i32;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(168, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i7 := v4l2_ctrl_poll($p0, $p1);
    call {:si_unique_call 240} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i9 := $M.5;
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 99);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(792, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} mutex_lock_nested($p16, 0);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i18 := videobuf_poll_stream($p0, $p17, $p1);
    call {:si_unique_call 244} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $i7);
    call {:si_unique_call 245} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} mutex_unlock($p20);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i15 := $i19;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i15 := 8;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vslice_dummy_var_104 := printk.ref.ref(.str.10, .str.11);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 320031);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 247} {:cexpr "video_ioctl2:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 248} {:cexpr "video_ioctl2:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 249} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 250} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const s2255_mmap_v4l: ref;

axiom s2255_mmap_v4l == $sub.ref(0, 321063);

procedure s2255_mmap_v4l($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation s2255_mmap_v4l($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i7: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(168, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i11 := $M.5;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 3);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i16 := mutex_lock_interruptible_nested($p15, 0);
    call {:si_unique_call 253} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i19 := videobuf_mmap_mapper($p18, $p1);
    call {:si_unique_call 255} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} mutex_unlock($p20);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i22 := $M.5;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 3);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64($i27, $i29);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_106 := printk.ref.ref.i64.i64.i32(.str.2, .str.1, $i25, $i30, $i19);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 512);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_105 := printk.ref.ref.i64(.str, .str.1, $i13);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const s2255_open: ref;

axiom s2255_open == $sub.ref(0, 322095);

procedure s2255_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.0, $CurrAddr, $M.19, $M.20, $M.17, $M.18;



implementation s2255_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p1 := video_devdata($p0);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1808)), $mul.ref(1800, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i4 := mutex_lock_interruptible_nested($p3, 0);
    call {:si_unique_call 260} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i7 := __s2255_open($p0);
    call {:si_unique_call 262} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 1808)), $mul.ref(1800, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} mutex_unlock($p9);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 512);
    goto $bb3;
}



const s2255_release: ref;

axiom s2255_release == $sub.ref(0, 323127);

procedure s2255_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s2255_release($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i11: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(168, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p6 := video_devdata($p0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p5);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} mutex_lock_nested($p12, 0);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i13 := res_check($p3);
    call {:si_unique_call 267} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_109 := videobuf_mmap_free($p23);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} mutex_unlock($p25);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i27 := $M.5;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(0, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} v4l2_fh_del($p31);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(0, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} v4l2_fh_exit($p32);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p3);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} kfree($p33);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p29 := video_device_node_name($p6);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_110 := printk.ref.ref.ref(.str.3, .str.4, $p29);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_108 := videobuf_streamoff($p21);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} res_free($p3);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_107 := s2255_stop_acquire($p19);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 19);
    goto $bb3;
}



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 324159);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p1 := external_alloc();
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 325191);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    return;
}



const res_check: ref;

axiom res_check == $sub.ref(0, 326223);

procedure res_check($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation res_check($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 816)), $mul.ref(808, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_streamoff: ref;

axiom videobuf_streamoff == $sub.ref(0, 327255);

procedure videobuf_streamoff($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_streamoff($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 1} true;
    call {:si_unique_call 280} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 281} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const res_free: ref;

axiom res_free == $sub.ref(0, 328287);

procedure res_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation res_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2600)), $mul.ref(2064, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 816)), $mul.ref(808, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_111 := printk.ref(.str.9);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const videobuf_mmap_free: ref;

axiom videobuf_mmap_free == $sub.ref(0, 329319);

procedure videobuf_mmap_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_mmap_free($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 283} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 284} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 330351);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    return;
}



const video_device_node_name: ref;

axiom video_device_node_name == $sub.ref(0, 331383);

procedure video_device_node_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_device_node_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p2 := dev_name($p1);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const v4l2_fh_del: ref;

axiom v4l2_fh_del == $sub.ref(0, 332415);

procedure v4l2_fh_del($p0: ref);
  free requires assertsPassed;



implementation v4l2_fh_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_fh_exit: ref;

axiom v4l2_fh_exit == $sub.ref(0, 333447);

procedure v4l2_fh_exit($p0: ref);
  free requires assertsPassed;



implementation v4l2_fh_exit($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 334479);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(312, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(16, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p9 := kobject_name($p8);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(312, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 335511);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 336543);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 1} true;
    call {:si_unique_call 287} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 288} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const mutex_lock_interruptible_nested: ref;

axiom mutex_lock_interruptible_nested == $sub.ref(0, 337575);

procedure mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 289} {:cexpr "mutex_lock_interruptible_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 1} true;
    call {:si_unique_call 290} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 291} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __s2255_open: ref;

axiom __s2255_open == $sub.ref(0, 338607);

procedure __s2255_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.0, $CurrAddr, $M.19, $M.20, $M.17, $M.18;



implementation __s2255_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i61: i64;
  var $i59: i64;
  var $i60: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i62: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $p117: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i130: i64;
  var $i128: i64;
  var $i129: i64;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $i137: i64;
  var $i138: i64;
  var $i139: i1;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $i131: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i96: i32;
  var $i165: i1;
  var $i166: i1;
  var $i167: i1;
  var $i168: i1;
  var $i169: i1;
  var $i170: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $p196: ref;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i201: i64;
  var $p202: ref;
  var $p203: ref;
  var $i206: i32;
  var $i207: i1;
  var $i208: i64;
  var $i209: i64;
  var $p210: ref;
  var $i211: i64;
  var $i214: i32;
  var $i215: i1;
  var $p217: ref;
  var $i218: i32;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i24: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p3 := video_devdata($p0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p4 := video_drvdata($p0);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 1808)), $mul.ref(1528, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p8 := to_s2255_dev($p7);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i17 := atomic_read($p16);
    call {:si_unique_call 300} {:cexpr "state"} boogie_si_record_i32($i17);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i17, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i17, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i96 := $i17;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i96, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    $i166 := $slt.i32($i96, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    $i167 := $slt.i32($i96, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i96, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_118 := printk.ref.ref(.str.19, .str.15);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb87:
    assume $i168 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_116 := printk.ref.ref(.str.17, .str.15);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 19);
    goto $bb19;

  $bb85:
    assume $i167 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} vslice_dummy_var_115 := printk.ref(.str.16);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 19);
    goto $bb19;

  $bb83:
    assume $i166 == 1;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p178 := kzalloc(816, 208);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p179);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i181 := $eq.i64($i180, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p179, $mul.ref(0, 816)), $mul.ref(0, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} v4l2_fh_init($p182, $p3);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p179, $mul.ref(0, 816)), $mul.ref(0, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} v4l2_fh_add($p183);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p179, $mul.ref(0, 816)), $mul.ref(0, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p186, $p178);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p179, $mul.ref(0, 816)), $mul.ref(168, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p187, $p8);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p179, $mul.ref(0, 816)), $mul.ref(792, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p188, 1);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p179, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p189, $p4);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2380, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 0);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i198 := $M.5;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i199 := $sgt.i32($i198, 0);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i206 := $M.5;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i207 := $sgt.i32($i206, 1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i214 := $M.5;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i215 := $sgt.i32($i214, 3);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p179, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11160, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p179, $mul.ref(0, 816)), $mul.ref(792, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.0, $p222);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p179);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p3, $mul.ref(0, 1808)), $mul.ref(1800, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} videobuf_queue_vmalloc_init($p220, s2255_video_qops, $0.ref, $p221, $i223, 4, 248, $p224, $p226);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb19;

  $bb109:
    assume $i215 == 1;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2072, 1)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i218 := list_empty($p217);
    call {:si_unique_call 365} {:cexpr "tmp___21"} boogie_si_record_i32($i218);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_122 := printk.ref.ref.i32(.str.22, .str.15, $i218);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb106:
    assume $i207 == 1;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i208 := $p2i.ref.i64($p179);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i209 := $p2i.ref.i64($p8);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2072, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i211 := $p2i.ref.i64($p210);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vslice_dummy_var_121 := printk.ref.ref.i64.i64.i64(.str.21, .str.15, $i208, $i209, $i211);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb103:
    assume $i199 == 1;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p200 := video_device_node_name($p3);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i201 := $zext.i32.i64(1);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref(v4l2_type_names, $mul.ref(0, 0)), $mul.ref($i201, 8));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} vslice_dummy_var_120 := printk.ref.ref.ref.ref(.str.20, .str.15, $p200, $p203);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb100:
    assume $i192 == 1;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p193, formats);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_119 := s2255_set_mode($p5, $p194);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2380, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p196, 1);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i181 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb19;

  $bb81:
    assume $i165 == 1;
    assume {:verifier.code 0} true;
    $i169 := $slt.i32($i96, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i169 == 1);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_117 := printk.ref.ref(.str.18, .str.15);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} atomic_set($p176, 3);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 11);
    goto $bb19;

  $bb90:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i96, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb92, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb89;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb93;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 19);
    goto $bb19;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vslice_dummy_var_113 := dev_err.ref.ref($p27, .str.13);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} s2255_fwload_start($p8, 1);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i29 := msecs_to_jiffies(5800);
    call {:si_unique_call 304} {:cexpr "tmp___3"} boogie_si_record_i64($i29);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i33 := atomic_read($p32);
    call {:si_unique_call 306} {:cexpr "tmp___9"} boogie_si_record_i32($i33);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 2);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i95 := atomic_read($p94);
    call {:si_unique_call 331} {:cexpr "state"} boogie_si_record_i32($i95);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb49;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i38 := atomic_read($p37);
    call {:si_unique_call 313} {:cexpr "tmp___10"} boogie_si_record_i32($i38);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 4);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $p40 := get_current();
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p41, 0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p43, $p40);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p44, autoremove_wake_function);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p47, $p45);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p50, $p48);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} prepare_to_wait($p53, $p1, 2);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i57 := atomic_read($p56);
    call {:si_unique_call 317} {:cexpr "tmp___5"} boogie_si_record_i32($i57);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 2);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i59 := $i29;
    assume {:branchcond $i58} true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i58 == 1);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i60 := $i29;
    goto $bb27;

  $bb27:
    call $i61, $i60, $p63, $p64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $p73, $p74, $p75, $i76, $i77 := __s2255_open_loop_$bb27($p1, $p8, $p51, $p54, $i61, $i60, $p63, $p64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $p73, $p74, $p75, $i76, $i77);
    goto $bb27_last;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i66 := atomic_read($p65);
    call {:si_unique_call 319} {:cexpr "tmp___6"} boogie_si_record_i32($i66);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 4);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i68 := $i60;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i69 := schedule_timeout($i60);
    call {:si_unique_call 321} {:cexpr "__ret"} boogie_si_record_i64($i69);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i71 := $i69;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p51);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} prepare_to_wait($p73, $p1, 2);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p54);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i76 := atomic_read($p75);
    call {:si_unique_call 324} {:cexpr "tmp___5"} boogie_si_record_i32($i76);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i61 := $i69;
    assume true;
    goto $bb28, $bb37;

  $bb37:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i60 := $i69;
    goto $bb37_dummy;

  $bb28:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i59 := $i61;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i62 := $i59;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i62, 0);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} finish_wait($p91, $p1);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb38:
    assume $i78 == 1;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i82 := atomic_read($p81);
    call {:si_unique_call 326} {:cexpr "tmp___7"} boogie_si_record_i32($i82);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 2);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i83 == 1);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i87 := atomic_read($p86);
    call {:si_unique_call 328} {:cexpr "tmp___8"} boogie_si_record_i32($i87);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 4);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i88 == 1;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i83 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i62 := $i71;
    goto $bb29;

  $bb30:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i62 := $i68;
    goto $bb29;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb25;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb5:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i17, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_114 := printk.ref.ref(.str.14, .str.15);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i98 := msecs_to_jiffies(5800);
    call {:si_unique_call 309} {:cexpr "tmp___11"} boogie_si_record_i64($i98);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i102 := atomic_read($p101);
    call {:si_unique_call 311} {:cexpr "tmp___17"} boogie_si_record_i32($i102);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 2);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i164 := atomic_read($p163);
    call {:si_unique_call 351} {:cexpr "state"} boogie_si_record_i32($i164);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i96 := $i164;
    goto $bb49;

  $bb50:
    assume $i103 == 1;
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i107 := atomic_read($p106);
    call {:si_unique_call 333} {:cexpr "tmp___18"} boogie_si_record_i32($i107);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 4);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb52:
    assume $i108 == 1;
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p109 := get_current();
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p110, 0);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p112, $p109);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p113, autoremove_wake_function);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p116, $p114);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p119, $p117);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} prepare_to_wait($p122, $p2, 2);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i126 := atomic_read($p125);
    call {:si_unique_call 337} {:cexpr "tmp___13"} boogie_si_record_i32($i126);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 2);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i128 := $i98;
    assume {:branchcond $i127} true;
    goto $bb54, $bb56;

  $bb56:
    assume !($i127 == 1);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i129 := $i98;
    goto $bb57;

  $bb57:
    call $i130, $i129, $p132, $p133, $p134, $i135, $i136, $i137, $i138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146 := __s2255_open_loop_$bb57($p2, $p8, $p120, $p123, $i130, $i129, $p132, $p133, $p134, $i135, $i136, $i137, $i138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146);
    goto $bb57_last;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i135 := atomic_read($p134);
    call {:si_unique_call 339} {:cexpr "tmp___14"} boogie_si_record_i32($i135);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 4);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i137 := $i129;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i138 := schedule_timeout($i129);
    call {:si_unique_call 341} {:cexpr "__ret___0"} boogie_si_record_i64($i138);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i139 := $eq.i64($i138, 0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i140 := $i138;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p120);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} prepare_to_wait($p142, $p2, 2);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p123);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i145 := atomic_read($p144);
    call {:si_unique_call 344} {:cexpr "tmp___13"} boogie_si_record_i32($i145);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 2);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i130 := $i138;
    assume true;
    goto $bb58, $bb67;

  $bb67:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i129 := $i138;
    goto $bb67_dummy;

  $bb58:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i128 := $i130;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i131 := $i128;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i147 := $eq.i64($i131, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p159, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} finish_wait($p160, $p2);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb68:
    assume $i147 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i151 := atomic_read($p150);
    call {:si_unique_call 346} {:cexpr "tmp___15"} boogie_si_record_i32($i151);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 2);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i152 == 1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i156 := atomic_read($p155);
    call {:si_unique_call 348} {:cexpr "tmp___16"} boogie_si_record_i32($i156);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 4);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i157 == 1;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume $i152 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb64:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i131 := $i140;
    goto $bb59;

  $bb60:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i131 := $i137;
    goto $bb59;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb55;

  $bb14:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i17, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p12 := video_device_node_name($p3);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} vslice_dummy_var_112 := printk.ref.ref(.str.12, $p12);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb37_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1482;

  $bb67_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1573;
}



const video_drvdata: ref;

axiom video_drvdata == $sub.ref(0, 339639);

procedure video_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p1 := video_devdata($p0);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p2 := video_get_drvdata($p1);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const s2255_fwload_start: ref;

axiom s2255_fwload_start == $sub.ref(0, 340671);

procedure s2255_fwload_start($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.17, $M.18;



implementation s2255_fwload_start($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} {:cexpr "s2255_fwload_start:arg:reset"} boogie_si_record_i32($i1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 128)), $mul.ref(4, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i9);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} atomic_set($p15, 0);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i64(512, 63);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 374} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p30, $p36, 512, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 512);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i42 := __create_pipe($p41, 2);
    call {:si_unique_call 376} {:cexpr "tmp"} boogie_si_record_i32($i42);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i42, $sub.i32(0, 1073741824));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} ldv_usb_fill_bulk_urb_4($p46, $p48, $i49, $p53, 512, s2255_fwchunk_complete, $p56);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10960, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, jiffies);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 250);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_123 := ldv_mod_timer_16($p57, $i59);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 373} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p20, $p26, 512, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} s2255_reset_dsppower($p0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 341703);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_fh_init: ref;

axiom v4l2_fh_init == $sub.ref(0, 342735);

procedure v4l2_fh_init($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation v4l2_fh_init($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_fh_add: ref;

axiom v4l2_fh_add == $sub.ref(0, 343767);

procedure v4l2_fh_add($p0: ref);
  free requires assertsPassed;



implementation v4l2_fh_add($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 344799);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const videobuf_queue_vmalloc_init: ref;

axiom videobuf_queue_vmalloc_init == $sub.ref(0, 345831);

procedure videobuf_queue_vmalloc_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $p8: ref);
  free requires assertsPassed;



implementation videobuf_queue_vmalloc_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $p8: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} {:cexpr "videobuf_queue_vmalloc_init:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 381} {:cexpr "videobuf_queue_vmalloc_init:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 382} {:cexpr "videobuf_queue_vmalloc_init:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    return;
}



const s2255_fwchunk_complete: ref;

axiom s2255_fwchunk_complete == $sub.ref(0, 346863);

procedure s2255_fwchunk_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation s2255_fwchunk_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 99);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(4, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i28, $i30);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} atomic_set($p81, 1);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i83 := $M.5;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i84 := $sgt.i32($i83, 99);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i84 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_129 := printk.ref.ref(.str.29, .str.24);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 512);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(4, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i34, $i36);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i41 := 512;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i42 := $sle.i32($i41, 511);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i46 := $M.5;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i46, 99);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i41);
    call {:si_unique_call 393} {:cexpr "__len"} boogie_si_record_i64($i51);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p57, $mul.ref($i60, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 394} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p53, $p61, $i51, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i62 := __create_pipe($p5, 2);
    call {:si_unique_call 396} {:cexpr "tmp"} boogie_si_record_i32($i62);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i62, $sub.i32(0, 1073741824));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p3);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} ldv_usb_fill_bulk_urb_4($p64, $p5, $i65, $p67, 512, s2255_fwchunk_complete, $p68);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i71 := ldv_usb_submit_urb_5($p70, 32);
    call {:si_unique_call 399} {:cexpr "tmp___0"} boogie_si_record_i32($i71);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 0);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, $i41);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i72 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} vslice_dummy_var_128 := dev_err.ref.ref($p73, .str.28);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} atomic_set($p75, 3);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} __wake_up($p76, 3, 1, $0.ref);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_127 := printk.ref.i32.i32(.str.27, $i41, $i49);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 391} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p44, 0, 512, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(4, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i40 := $srem.i32($i39, 512);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb15;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_126 := dev_err.ref.ref($p23, .str.26);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} atomic_set($p25, 3);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} __wake_up($p26, 3, 1, $0.ref);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_125 := dev_err.ref.ref.i32($p13, .str.25, $i15);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} atomic_set($p17, 3);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} __wake_up($p18, 3, 1, $0.ref);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_124 := printk.ref.ref.ref.ref(.str.23, .str.24, $p5, $p0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_fill_bulk_urb_4: ref;

axiom ldv_usb_fill_bulk_urb_4 == $sub.ref(0, 347895);

procedure ldv_usb_fill_bulk_urb_4($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.19, $M.20;



implementation ldv_usb_fill_bulk_urb_4($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} {:cexpr "ldv_usb_fill_bulk_urb_4:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 405} {:cexpr "ldv_usb_fill_bulk_urb_4:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ldv_fill_bulk_urb($p0, $p5);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mod_timer_16: ref;

axiom ldv_mod_timer_16 == $sub.ref(0, 348927);

procedure ldv_mod_timer_16($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0, $M.18;



implementation ldv_mod_timer_16($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "ldv_mod_timer_16:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 349959);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 411} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 1} true;
    call {:si_unique_call 412} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 413} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_1: ref;

axiom activate_pending_timer_1 == $sub.ref(0, 350991);

procedure activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0, $M.18;



implementation activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} {:cexpr "activate_pending_timer_1:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 415} {:cexpr "activate_pending_timer_1:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p3 := $M.17;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_130 := reg_timer_1($p0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p13 := $M.17;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i1);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i7 := $M.18;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p10 := $M.17;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 416} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(1);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const reg_timer_1: ref;

axiom reg_timer_1 == $sub.ref(0, 352023);

procedure reg_timer_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.18;



implementation reg_timer_1($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 418} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(1);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_fill_bulk_urb: ref;

axiom ldv_fill_bulk_urb == $sub.ref(0, 353055);

procedure ldv_fill_bulk_urb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.19, $M.20;



implementation ldv_fill_bulk_urb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p2 := $M.16;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $M.19 := $p1;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i6 := $M.20;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $M.20 := $i7;
    call {:si_unique_call 419} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32($i7);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 354087);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 421} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 355119);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_usb_submit_urb_5: ref;

axiom ldv_usb_submit_urb_5 == $sub.ref(0, 356151);

procedure ldv_usb_submit_urb_5($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.20, $M.0, $M.19, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation ldv_usb_submit_urb_5($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "ldv_usb_submit_urb_5:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 424} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_submit_urb: ref;

axiom ldv_submit_urb == $sub.ref(0, 357183);

procedure ldv_submit_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.20, $M.0, $M.19, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation ldv_submit_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i1 := ldv_undef_int();
    call {:si_unique_call 426} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p4 := $M.16;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i5, $i6);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i8 := $M.21;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $M.20;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p14 := $M.19;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p15 := $M.16;
    call {:si_unique_call 430} devirtbounce.2($p14, $p15);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 431} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p10 := $M.22;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p11 := $M.16;
    call {:si_unique_call 428} devirtbounce.2($p10, $p11);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 429} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 358215);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 432} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 433} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 434} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop___0: ref;

axiom ldv_stop___0 == $sub.ref(0, 359247);

procedure ldv_stop___0();
  free requires assertsPassed;



implementation ldv_stop___0()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop___0_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 360279);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 361311);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $p1 := external_alloc();
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const videobuf_mmap_mapper: ref;

axiom videobuf_mmap_mapper == $sub.ref(0, 362343);

procedure videobuf_mmap_mapper($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_mmap_mapper($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 1} true;
    call {:si_unique_call 437} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 438} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_ctrl_poll: ref;

axiom v4l2_ctrl_poll == $sub.ref(0, 363375);

procedure v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 1} true;
    call {:si_unique_call 439} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 440} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_poll_stream: ref;

axiom videobuf_poll_stream == $sub.ref(0, 364407);

procedure videobuf_poll_stream($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_poll_stream($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 441} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 442} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vidioc_querycap: ref;

axiom vidioc_querycap == $sub.ref(0, 365439);

procedure vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var vslice_dummy_var_131: i64;
  var vslice_dummy_var_132: i64;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 816)), $mul.ref(168, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_131 := strlcpy($p9, .str.138, 16);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} vslice_dummy_var_132 := strlcpy($p12, .str.138, 32);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_133 := usb_make_path($p15, $p17, 32);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 67108865);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, $sub.i32(0, 2147483648));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_enum_fmt_vid_cap: ref;

axiom vidioc_enum_fmt_vid_cap == $sub.ref(0, 366471);

procedure vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p31: ref;
  var $p32: ref;
  var $i34: i64;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i6: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 446} {:cexpr "index"} boogie_si_record_i32($i4);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 5);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $M.23;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i20 := $M.5;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i20, 3);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i4);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_135 := strlcpy($p28, $p32, 32);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i4);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i34, 16)), $mul.ref(8, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i4);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vslice_dummy_var_134 := printk.ref.ref(.str.151, $p25);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i4);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1195724874);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i13 == 1);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i4);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i14, 16)), $mul.ref(8, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1196444237);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_fmt_vid_cap: ref;

axiom vidioc_g_fmt_vid_cap == $sub.ref(0, 367503);

procedure vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 63744);
    call {:si_unique_call 449} {:cexpr "is_ntsc"} boogie_si_record_i32($i9);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2572, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i11);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2576, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i16);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i9, 0);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 480 else 576);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i26 := $uge.i32($i23, $i25);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i36);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i48 := $ashr.i32($i47, 3);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i49 := $mul.i32($i43, $i48);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i49);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i61 := $mul.i32($i56, $i60);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i61);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 1);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 4);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_s_fmt_vid_cap: ref;

axiom vidioc_s_fmt_vid_cap == $sub.ref(0, 368535);

procedure vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i24: i32;
  var $i25: i1;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $p147: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i27: i32;
  var $p155: ref;
  var $i11: i32;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i9 := vidioc_try_fmt_vid_cap($p0, $p8, $p2);
    call {:si_unique_call 452} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p16 := format_by_fourcc($i15);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} mutex_lock_nested($p19, 0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i21 := videobuf_queue_is_busy($p20);
    call {:si_unique_call 456} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i28 := res_locked($p4);
    call {:si_unique_call 460} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p34);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 462} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p35, $p36, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p16);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2572, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2576, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(176, 1)), $mul.ref(288, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i51);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(792, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i57 := norm_minw($p6);
    call {:si_unique_call 464} {:cexpr "tmp___2"} boogie_si_record_i32($i57);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2572, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i60 := $ugt.i32($i59, $i57);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i60 == 1);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 3);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 1448695129);
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i77, 1497715271);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i77, 1498831189);
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i77, 1498831189);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, $sub.i32(0, 256));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $i122);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i126 := $or.i32($i125, 2);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i126);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2232, 1)), $mul.ref(8, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i133 := $xor.i32($i129, $i132);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 255);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i135 == 1);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2232, 1)), $mul.ref(4, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i138, $i141);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i142 == 1);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2232, 1)), $mul.ref(0, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i145, $i148);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p3);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 467} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p152, $p153, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_138 := s2255_set_mode($p6, $p3);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} mutex_unlock($p155);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i11 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb64:
    assume $i149 == 1;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, 1);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume $i142 == 1;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, 1);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb58:
    assume $i135 == 1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, 1);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb35:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i77, 1497715271);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb40;

  $bb41:
    assume $i82 == 1;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, $sub.i32(0, 256));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i91);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i95 := $or.i32($i94, 4);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb33:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i77, 1448695129);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb40;

  $bb43:
    assume $i83 == 1;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb31:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i77, 1196444237);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i77, 1345466932);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i77, 1345466932);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb40;

  $bb49:
    assume $i86 == 1;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, $sub.i32(0, 256));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, $i114);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i118 := $or.i32($i117, 1);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i118);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb47:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i77, 1196444237);
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb51, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb40;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, $sub.i32(0, 256));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i99);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, 5);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, $i103);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2288, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i109 := $shl.i32($i108, 8);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i110 := $or.i32($i106, $i109);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb45:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i77, 1195724874);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb40;

  $bb54:
    assume $i88 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb21:
    assume $i60 == 1;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i61 := norm_minh($p6);
    call {:si_unique_call 466} {:cexpr "tmp___1"} boogie_si_record_i32($i61);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2576, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i32($i63, $i61);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i64 == 1);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 2);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i64 == 1;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2292, 1)), $mul.ref(4, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i69 == 1);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i69 == 1;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 4);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i31 := $M.5;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 16);
    goto $bb13;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_137 := printk.ref.ref(.str.153, .str.154);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i24 := $M.5;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 0);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 16);
    goto $bb13;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_136 := printk.ref(.str.152);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const vidioc_try_fmt_vid_cap: ref;

axiom vidioc_try_fmt_vid_cap == $sub.ref(0, 369567);

procedure vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i39: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i79: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i70: i32;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i17: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 63744);
    call {:si_unique_call 469} {:cexpr "is_ntsc"} boogie_si_record_i32($i9);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $p14 := format_by_fourcc($i13);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i19 := $M.5;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 49);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i9, 0);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i75 := $ugt.i32($i74, 575);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i75 == 1);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 288);
    assume {:verifier.code 0} true;
    $i79 := 2;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i87 := $ugt.i32($i86, 703);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i87 == 1);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i94, 703);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i95 == 1);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i103 := $ugt.i32($i102, 351);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i103 == 1);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, 352);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i70 := $i79;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, $i70);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i119 := $mul.i32($i116, $i118);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i120 := $lshr.i32($i119, 3);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $i120);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i132 := $mul.i32($i127, $i131);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i132);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, 1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p140, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i143 := $M.5;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i144 := $sgt.i32($i143, 49);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb35:
    assume $i144 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_140 := printk.ref.ref.i32.i32.i32(.str.142, .str.141, $i148, $i152, $i156);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i103 == 1;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 352);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i95 == 1;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, 704);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i87 == 1;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, 704);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i75 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 576);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i79 := 4;
    goto $bb25;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i32($i34, 479);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 240);
    assume {:verifier.code 0} true;
    $i39 := 2;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, 639);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i55 := $ugt.i32($i54, 639);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i63 := $ugt.i32($i62, 319);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i63 == 1);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 320);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i70 := $i39;
    goto $bb22;

  $bb19:
    assume $i63 == 1;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 320);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 640);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 640);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 480);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i39 := 4;
    goto $bb12;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_139 := printk.ref.ref.i32.i32.i32(.str.140, .str.141, $i9, $i24, $i28);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_reqbufs: ref;

axiom vidioc_reqbufs == $sub.ref(0, 370599);

procedure vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i5 := videobuf_reqbufs($p4, $p2);
    call {:si_unique_call 474} {:cexpr "rc"} boogie_si_record_i32($i5);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const vidioc_querybuf: ref;

axiom vidioc_querybuf == $sub.ref(0, 371631);

procedure vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i5 := videobuf_querybuf($p4, $p2);
    call {:si_unique_call 476} {:cexpr "rc"} boogie_si_record_i32($i5);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const vidioc_qbuf: ref;

axiom vidioc_qbuf == $sub.ref(0, 372663);

procedure vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i5 := videobuf_qbuf($p4, $p2);
    call {:si_unique_call 478} {:cexpr "rc"} boogie_si_record_i32($i5);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const vidioc_dqbuf: ref;

axiom vidioc_dqbuf == $sub.ref(0, 373695);

procedure vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 2048);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i8 := videobuf_dqbuf($p4, $p2, $i7);
    call {:si_unique_call 480} {:cexpr "rc"} boogie_si_record_i32($i8);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const vidioc_streamon: ref;

axiom vidioc_streamon == $sub.ref(0, 374727);

procedure vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p40: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $i19: i32;
  var $p53: ref;
  var $p57: ref;
  var $p61: ref;
  var $p65: ref;
  var $p69: ref;
  var $p73: ref;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} {:cexpr "vidioc_streamon:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(168, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i9 := $M.5;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 3);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(792, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(792, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, $i2);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i27 := res_get($p3);
    call {:si_unique_call 486} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2336, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $sub.i32(0, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2360, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2368, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, 0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, 0);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, 0);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(8, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, 0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, 0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(8, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, 0);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(24, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p65, 0);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(8, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p69, 0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(24, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p73, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i46 := videobuf_streamon($p45);
    call {:si_unique_call 489} {:cexpr "res"} boogie_si_record_i32($i46);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} res_free($p3);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i19 := $i46;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_145 := s2255_start_acquire($p7);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_144 := dev_err.ref.ref($p31, .str.175);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 16);
    goto $bb6;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_143 := dev_err.ref.ref($p25, .str.174);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_142 := dev_err.ref.ref($p17, .str.173);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_141 := printk.ref.ref(.str.10, .str.172);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_streamoff: ref;

axiom vidioc_streamoff == $sub.ref(0, 375759);

procedure vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i16: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} {:cexpr "vidioc_streamoff:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i5 := $M.5;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 3);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(792, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(792, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, $i2);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_149 := s2255_stop_acquire($p22);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(176, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_150 := videobuf_streamoff($p24);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} res_free($p3);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vslice_dummy_var_148 := printk.ref(.str.150);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_147 := printk.ref(.str.149);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_146 := printk.ref.ref.i32(.str.147, .str.148, $i10);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_g_std: ref;

axiom vidioc_g_std == $sub.ref(0, 376791);

procedure vidioc_g_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i7);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_std: ref;

axiom vidioc_s_std == $sub.ref(0, 377823);

procedure vidioc_s_std($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation vidioc_s_std($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i15: i32;
  var $p58: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    call {:si_unique_call 500} {:cexpr "vidioc_s_std:arg:i"} boogie_si_record_i64($i2);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} mutex_lock_nested($p8, 0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i9 := res_locked($p4);
    call {:si_unique_call 503} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p3);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p18);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 506} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p19, $p20, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i2, 63744);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i2, 16713471);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} mutex_unlock($p58);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i38 := $M.5;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, 3);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 2);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, $i2);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb26:
    assume $i54 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_154 := s2255_set_mode($p56, $p3);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i43 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 1);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 2);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 1);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2572, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 704);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2576, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 576);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} vslice_dummy_var_153 := printk.ref.ref(.str.146, .str.145);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i24 := $M.5;
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 3);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 1);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 1);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2572, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 640);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 2600)), $mul.ref(2576, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 480);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_152 := printk.ref.ref(.str.144, .str.145);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i12 := $M.5;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_151 := printk.ref(.str.143);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vidioc_enum_input: ref;

axiom vidioc_enum_input == $sub.ref(0, 378855);

procedure vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i12: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i64;
  var vslice_dummy_var_157: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(168, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, $p3, 0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 2);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, 16777215);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 11240)), $mul.ref(11232, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 4);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 11240)), $mul.ref(11236, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 8791);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i35, 8791);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_157 := strlcpy($p40, .str.164, 32);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i46 := $sle.i32($i45, 1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p47 := (if $i46 == 1 then .str.164 else .str.165);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} vslice_dummy_var_156 := strlcpy($p43, $p47, 32);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i35, 8789);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb19;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i21 := s2255_cmd_status($p20, $p3);
    call {:si_unique_call 512} {:cexpr "rc"} boogie_si_record_i32($i21);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i23 := $M.5;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, 3);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i21, 0);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.24, $p3);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 0 else 2);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.24, $p3);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_155 := printk.ref.i32.i32(.str.163, $i21, $i25);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_input: ref;

axiom vidioc_g_input == $sub.ref(0, 379887);

procedure vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_input: ref;

axiom vidioc_s_input == $sub.ref(0, 380919);

procedure vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} {:cexpr "vidioc_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_jpegcomp: ref;

axiom vidioc_g_jpegcomp == $sub.ref(0, 381951);

procedure vidioc_g_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 517} cmdloc_dummy_var_27 := $memset.i8(cmdloc_dummy_var_26, $p6, 0, 140, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2288, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i11 := $M.5;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 1);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_158 := printk.ref.ref.i32(.str.156, .str.160, $i14);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_s_jpegcomp: ref;

axiom vidioc_s_jpegcomp == $sub.ref(0, 382983);

procedure vidioc_s_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i12: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 100);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2056, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_159 := v4l2_ctrl_s_ctrl($p14, $i16);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i19 := $M.5;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 1);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} vslice_dummy_var_160 := printk.ref.ref.i32(.str.156, .str.157, $i22);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const vidioc_g_parm: ref;

axiom vidioc_g_parm == $sub.ref(0, 384015);

procedure vidioc_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $i77: i32;
  var $i9: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(0, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 4096);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2292, 1)), $mul.ref(4, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i15);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2232, 1)), $mul.ref(0, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 1001 else 1000);
    call {:si_unique_call 521} {:cexpr "def_num"} boogie_si_record_i32($i23);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2232, 1)), $mul.ref(0, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i28 := (if $i27 == 1 then 30000 else 25000);
    call {:si_unique_call 522} {:cexpr "def_dem"} boogie_si_record_i32($i28);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i28);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2232, 1)), $mul.ref(12, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i35, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i35, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i23);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i62 := $M.5;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i63 := $sgt.i32($i62, 3);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb22:
    assume $i63 == 1;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p74, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_161 := printk.ref.ref.i32.i32.i32(.str.161, .str.162, $i67, $i72, $i77);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i56 := $mul.i32($i23, 5);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i56);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i35, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb12;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i23, 3);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i51);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i35, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i23, 2);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i46);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i35, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb18;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_s_parm: ref;

axiom vidioc_s_parm == $sub.ref(0, 385047);

procedure vidioc_s_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation vidioc_s_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $i79: i32;
  var $i66: i32;
  var $i53: i32;
  var $i42: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $p106: ref;
  var $i107: i32;
  var $i10: i32;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(0, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 525} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p12, $p13, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2292, 1)), $mul.ref(4, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i16, $i20);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then 1001 else 1000);
    call {:si_unique_call 528} {:cexpr "def_num"} boogie_si_record_i32($i27);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 30000 else 25000);
    call {:si_unique_call 529} {:cexpr "def_dem"} boogie_si_record_i32($i31);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, $i31);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i48 := $ule.i32($i47, $i27);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i27, 2);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i60 := $ule.i32($i58, $i59);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i60 == 1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p68, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i72 := $mul.i32($i27, 3);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i73 := $ule.i32($i71, $i72);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i73 == 1);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i80 := $mul.i32($i27, 5);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i80);
    assume {:verifier.code 0} true;
    $i79 := 5;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i66 := $i79;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i53 := $i66;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i42 := $i53;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i42);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p87, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i31);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_162 := s2255_set_mode($p6, $p3);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i92 := $M.5;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i93 := $sgt.i32($i92, 3);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb23:
    assume $i93 == 1;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p104, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_163 := printk.ref.ref.i32.i32.i32.i32(.str.170, .str.171, $i97, $i102, $i107, $i42);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i73 == 1;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i74 := $mul.i32($i27, 3);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i74);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i79 := 3;
    goto $bb22;

  $bb17:
    assume $i60 == 1;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i61 := $mul.i32($i27, 2);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i61);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i66 := 2;
    goto $bb19;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i27);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i53 := 1;
    goto $bb16;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i27);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb13;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i22 := res_locked($p4);
    call {:si_unique_call 527} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const v4l2_ctrl_log_status: ref;

axiom v4l2_ctrl_log_status == $sub.ref(0, 386079);

procedure v4l2_ctrl_log_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_log_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 1} true;
    call {:si_unique_call 532} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 533} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vidioc_enum_framesizes: ref;

axiom vidioc_enum_framesizes == $sub.ref(0, 387111);

procedure vidioc_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i13: i32;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 63744);
    call {:si_unique_call 534} {:cexpr "is_ntsc"} boogie_si_record_i32($i9);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 2);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p16 := format_by_fourcc($i15);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 1);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i9, 0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref($i31, 8));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p21);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p32);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 537} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p33, $p34, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref($i25, 8));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p21);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p26);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 536} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p27, $p28, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_enum_frameintervals: ref;

axiom vidioc_enum_frameintervals == $sub.ref(0, 388143);

procedure vidioc_enum_frameintervals($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.0, $CurrAddr;



implementation vidioc_enum_frameintervals($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i1;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i18: i32;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i64;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 63744);
    call {:si_unique_call 539} {:cexpr "is_ntsc"} boogie_si_record_i32($i10);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p11, 1);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p12, 2);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p13, 3);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p14, 5);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 3);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p21 := format_by_fourcc($i20);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i10, 0);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p25 := (if $i24 == 1 then ntsc_sizes else pal_sizes);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i27, $i29);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p25, $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i70, $i72);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $i79 := $add.i64(1, 1);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p25, $mul.ref($i79, 8)), $mul.ref(0, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i82, $i84);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i37 := 3;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i37, 3);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(16, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 1);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i10, 0);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i42 := (if $i41 == 1 then 30000 else 25000);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i42);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i10, 0);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i47 := (if $i46 == 1 then 1001 else 1000);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i49);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref($i50, 4));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.25, $p51);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i47, $i52);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i53);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i58 := $M.5;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i59 := $sgt.i32($i58, 3);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb23:
    assume $i59 == 1;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_164 := printk.ref.ref.i32.i32(.str.158, .str.159, $i63, $i67);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb3;

  $bb33:
    assume $i85 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p25, $mul.ref($i79, 8)), $mul.ref(4, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i87, $i89);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i36 := 2;
    assume {:branchcond $i90} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb35;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb16;

  $bb26:
    assume $i73 == 1;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p25, $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i75, $i77);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i36 := 1;
    assume {:branchcond $i78} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb28;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb14;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p25, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i32, $i34);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i36 := 0;
    assume {:branchcond $i35} true;
    goto $bb13, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb14;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb3;
}



const v4l2_ctrl_subscribe_event: ref;

axiom v4l2_ctrl_subscribe_event == $sub.ref(0, 389175);

procedure v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 1} true;
    call {:si_unique_call 542} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 543} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_event_unsubscribe: ref;

axiom v4l2_event_unsubscribe == $sub.ref(0, 390207);

procedure v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 1} true;
    call {:si_unique_call 544} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 545} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const format_by_fourcc: ref;

axiom format_by_fourcc == $sub.ref(0, 391239);

procedure format_by_fourcc($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation format_by_fourcc($i0: i32) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} {:cexpr "format_by_fourcc:arg:fourcc"} boogie_si_record_i32($i0);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i1 := $M.23;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32(1448695129, $i0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb23, $bb24;

  $bb24:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $M.23;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32(1498831189, $i0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i10} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb40, $bb41;

  $bb41:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i11 := $M.23;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32(1345466932, $i0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume {:branchcond $i13} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb57, $bb58;

  $bb58:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i14 := $M.23;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(1497715271, $i0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i4 := 3;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb74, $bb75;

  $bb75:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i17 := $M.23;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32(1195724874, $i0);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i4 := 4;
    assume {:branchcond $i19} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb91, $bb92;

  $bb92:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i20 := $M.23;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32(1196444237, $i0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i4 := 5;
    assume {:branchcond $i22} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    $p6 := $add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i5, 16));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb19;

  $bb94:
    assume $i21 == 1;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb97, $bb99;

  $bb99:
    assume !(0 == 1);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb96;

  $bb100:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb97:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb98;

  $bb91:
    assume 0 == 1;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb17;

  $bb77:
    assume $i18 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb80, $bb82;

  $bb82:
    assume !(1 == 1);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb79;

  $bb83:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb80:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb81;

  $bb74:
    assume 0 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb17;

  $bb60:
    assume $i15 == 1;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb63, $bb65;

  $bb65:
    assume !(0 == 1);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb62;

  $bb66:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb63:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb64;

  $bb57:
    assume 0 == 1;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb17;

  $bb43:
    assume $i12 == 1;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb46, $bb48;

  $bb48:
    assume !(0 == 1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb45;

  $bb49:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb46:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb47;

  $bb40:
    assume 0 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb17;

  $bb26:
    assume $i9 == 1;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb29, $bb31;

  $bb31:
    assume !(0 == 1);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb28;

  $bb32:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb29:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb30;

  $bb23:
    assume 0 == 1;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb17;

  $bb7:
    assume $i2 == 1;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb10, $bb12;

  $bb12:
    assume !(0 == 1);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb3:
    assume 0 == 1;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const res_locked: ref;

axiom res_locked == $sub.ref(0, 392271);

procedure res_locked($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation res_locked($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2600)), $mul.ref(2064, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const v4l2_ctrl_s_ctrl: ref;

axiom v4l2_ctrl_s_ctrl == $sub.ref(0, 393303);

procedure v4l2_ctrl_s_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_s_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 547} {:cexpr "v4l2_ctrl_s_ctrl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 1} true;
    call {:si_unique_call 548} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 549} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const s2255_cmd_status: ref;

axiom s2255_cmd_status == $sub.ref(0, 394335);

procedure s2255_cmd_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation s2255_cmd_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i57: i64;
  var $i55: i64;
  var $i56: i64;
  var $i59: i64;
  var $i60: i1;
  var $i61: i64;
  var $i62: i32;
  var $i63: i1;
  var $i58: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i27: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(0, 1)), $mul.ref(1528, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p6 := to_s2255_dev($p5);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref($i9, 8));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.6, $p10);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    call {:si_unique_call 552} {:cexpr "chn_rev"} boogie_si_record_i32($i12);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i14 := $M.5;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 3);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $p19 := kzalloc(512, 208);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 576045278);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p20, $mul.ref(1, 4));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i12);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p20, $mul.ref(2, 4));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $sub.i32(0, 1037742016));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, $p1, 0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p20);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i34 := s2255_write_config($p32, $p33, 512);
    call {:si_unique_call 557} {:cexpr "res"} boogie_si_record_i32($i34);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p20);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} kfree($p35);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i36 := msecs_to_jiffies(350);
    call {:si_unique_call 560} {:cexpr "tmp___1"} boogie_si_record_i64($i36);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 1);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i34;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2476, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, $p1, $i75);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i77 := $M.5;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i77, 3);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i27 := $i73;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb31:
    assume $i78 == 1;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.24, $p1);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_168 := printk.ref.ref.i32(.str.169, .str.167, $i79);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i71 == 1;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_167 := printk.ref(.str.168);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 14);
    goto $bb30;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p40 := get_current();
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p41, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p43, $p40);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p44, autoremove_wake_function);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p47, $p45);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p50, $p48);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} prepare_to_wait($p51, $p2, 2);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i55 := $i36;
    assume {:branchcond $i54} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i54 == 1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i56 := $i36;
    goto $bb13;

  $bb13:
    call $i57, $i56, $i59, $i60, $i61, $i62, $i63 := s2255_cmd_status_loop_$bb13($p2, $p51, $p52, $i57, $i56, $i59, $i60, $i61, $i62, $i63);
    goto $bb13_last;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i59 := schedule_timeout($i56);
    call {:si_unique_call 564} {:cexpr "__ret"} boogie_si_record_i64($i59);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i61 := $i59;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} prepare_to_wait($p51, $p2, 2);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p52);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i57 := $i59;
    assume true;
    goto $bb14, $bb20;

  $bb20:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i56 := $i59;
    goto $bb20_dummy;

  $bb14:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i55 := $i57;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i58 := $i55;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i58, 0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} finish_wait($p68, $p2);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i64 == 1;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb23;

  $bb24:
    assume $i67 == 1;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb17:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i58 := $i61;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb11;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_166 := dev_err.ref.ref($p25, .str.5);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_165 := printk.ref.ref.i32(.str.166, .str.167, $i17);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 395367);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 569} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 1} true;
    call {:si_unique_call 570} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 571} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const res_get: ref;

axiom res_get == $sub.ref(0, 396399);

procedure res_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation res_get($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i1;
  var $i6: i32;
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 816)), $mul.ref(800, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2600)), $mul.ref(2064, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 2600)), $mul.ref(2064, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 816)), $mul.ref(808, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 1);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_169 := printk.ref(.str.176);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const videobuf_streamon: ref;

axiom videobuf_streamon == $sub.ref(0, 397431);

procedure videobuf_streamon($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_streamon($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 573} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 574} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const s2255_start_acquire: ref;

axiom s2255_start_acquire == $sub.ref(0, 398463);

procedure s2255_start_acquire($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s2255_start_acquire($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p24: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i17: i32;
  var $p52: ref;
  var $p56: ref;
  var $p60: ref;
  var $p64: ref;
  var $p68: ref;
  var $p72: ref;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(0, 1)), $mul.ref(1528, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p4 := to_s2255_dev($p3);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref($i7, 8));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.6, $p8);
    call {:si_unique_call 576} {:cexpr "chn_rev"} boogie_si_record_i64($i9);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p10 := kzalloc(512, 208);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2336, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $sub.i32(0, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2360, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, 0);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(8, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, 0);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(8, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(24, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(8, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p68, 0);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(24, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, 0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p10);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 576045278);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i9);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p10);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(1, 4));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p10);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(2, 4));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $sub.i32(0, 1037742048));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i37 := s2255_write_config($p36, $p10, 512);
    call {:si_unique_call 580} {:cexpr "res"} boogie_si_record_i32($i37);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i44 := $M.5;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} kfree($p10);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb12:
    assume $i45 == 1;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_172 := printk.ref.i32.i32(.str.178, $i47, $i37);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_171 := dev_err.ref.ref($p41, .str.177);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} vslice_dummy_var_170 := dev_err.ref.ref($p15, .str.5);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb3;
}



const videobuf_dqbuf: ref;

axiom videobuf_dqbuf == $sub.ref(0, 399495);

procedure videobuf_dqbuf($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_dqbuf($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 584} {:cexpr "videobuf_dqbuf:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 1} true;
    call {:si_unique_call 585} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 586} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const videobuf_qbuf: ref;

axiom videobuf_qbuf == $sub.ref(0, 400527);

procedure videobuf_qbuf($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_qbuf($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 587} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 588} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_querybuf: ref;

axiom videobuf_querybuf == $sub.ref(0, 401559);

procedure videobuf_querybuf($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_querybuf($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 1} true;
    call {:si_unique_call 589} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 590} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_reqbufs: ref;

axiom videobuf_reqbufs == $sub.ref(0, 402591);

procedure videobuf_reqbufs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_reqbufs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 1} true;
    call {:si_unique_call 591} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 592} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_queue_is_busy: ref;

axiom videobuf_queue_is_busy == $sub.ref(0, 403623);

procedure videobuf_queue_is_busy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_queue_is_busy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 1} true;
    call {:si_unique_call 593} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 594} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 404655);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(64, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(4, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.155, $p6, $p8);
    call {:si_unique_call 597} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 405687);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const s2255_probe: ref;

axiom s2255_probe == $sub.ref(0, 406719);

procedure s2255_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.18, $M.15, $M.14, $M.16, $CurrAddr, $M.19, $M.20, $M.21;



implementation s2255_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i51: i32;
  var $i52: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i8;
  var $p77: ref;
  var $i78: i32;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $i63: i32;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p89: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i64;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $i180: i32;
  var $i181: i1;
  var $p183: ref;
  var $i184: i16;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $p191: ref;
  var $p192: ref;
  var $i194: i32;
  var $i195: i1;
  var $p197: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $i196: i32;
  var $i164: i32;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i143: i32;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i133: i32;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i120: i32;
  var $p219: ref;
  var $i88: i32;
  var $p221: ref;
  var $p222: ref;
  var $i40: i32;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i29: i32;
  var $p227: ref;
  var $i17: i32;
  var $p229: ref;
  var $p230: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: ref;
  var vslice_dummy_var_192: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 1);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p11 := kzalloc(11208, 208);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10760, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} atomic_set($p18, 0);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11236, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i20);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p22 := kzalloc(128, 208);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p22);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} __mutex_init($p30, .str.55, $p2);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $p31 := interface_to_usbdev($p0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p32 := ldv_usb_get_dev_17($p31);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p32);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i42 := $M.5;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 0);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10944, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $p0);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i51 := $M.5;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i52 := $sgt.i32($i51, 0);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, 0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10952, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10960, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_180 := reg_timer_1($p89);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10960, 1)), $mul.ref(32, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, s2255_timer);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10960, 1)), $mul.ref(40, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p97, $i95);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} __init_waitqueue_head($p100, .str.60, $p3);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, 0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p102, $mul.ref(0, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __init_waitqueue_head($p106, .str.61, $p4);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p102, $mul.ref(0, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} __init_waitqueue_head($p107, .str.62, $p5);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(1, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p234, 1);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p230, $mul.ref(1, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} __init_waitqueue_head($p235, .str.61, $p4);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p230, $mul.ref(1, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} __init_waitqueue_head($p236, .str.62, $p5);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p238 := $bitcast.ref.ref($p237);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(2, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p242, 2);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p238, $mul.ref(2, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} __init_waitqueue_head($p243, .str.61, $p4);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p238, $mul.ref(2, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} __init_waitqueue_head($p244, .str.62, $p5);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p245);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(3, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, 3);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p246, $mul.ref(3, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} __init_waitqueue_head($p251, .str.61, $p4);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p246, $mul.ref(3, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} __init_waitqueue_head($p252, .str.62, $p5);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p108 := ldv_usb_alloc_urb_18(0, 208);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p111, $p108);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i117 := $eq.i64($i116, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p121 := kzalloc(512, 208);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p124, $p121);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i130 := $eq.i64($i129, 0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i140 := request_firmware($p136, .str.64, $p139);
    call {:si_unique_call 636} {:cexpr "tmp___3"} boogie_si_record_i32($i140);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i149 := $load.i64($M.0, $p148);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i150 := $trunc.i64.i32($i149);
    call {:si_unique_call 639} {:cexpr "fw_size"} boogie_si_record_i32($i150);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i157 := $sext.i32.i64($i150);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i158 := $add.i64($i157, $sub.i64(0, 8));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p156, $mul.ref($i158, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 576007983);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i162 == 1);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i150);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i172 := $add.i64($i171, $sub.i64(0, 4));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p170, $mul.ref($i172, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} vslice_dummy_var_186 := printk.ref.i32(.str.67, $i175);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p174);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11232, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i177);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11232, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i181 := $sle.i32($i180, 10103);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11236, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i184 := $load.i16($M.0, $p183);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i185 := $zext.i16.i32($i184);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 8791);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_189 := usb_reset_device($p192);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i194 := s2255_board_init($p12);
    call {:si_unique_call 647} {:cexpr "retval"} boogie_si_record_i32($i194);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11160, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_191 := spinlock_check($p197);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11160, 1)), $mul.ref(0, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} __raw_spin_lock_init($p201, .str.70, $p6);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} s2255_fwload_start($p12, 0);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i202 := s2255_probe_v4l($p12);
    call {:si_unique_call 653} {:cexpr "retval"} boogie_si_record_i32($i202);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i203 := $ne.i32($i202, 0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_192 := _dev_info.ref.ref($p204, .str.71);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb73:
    assume $i203 == 1;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i196 := $i202;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} vslice_dummy_var_190 := s2255_board_shutdown($p12);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i164 := $i196;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p208, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} release_firmware($p210);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i143 := $i164;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.0, $p213);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} kfree($p214);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i133 := $i143;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p216, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} ldv_usb_free_urb_19($p218);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i120 := $i133;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10960, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vslice_dummy_var_182 := ldv_del_timer_20($p219);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i88 := $i120;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} ldv_usb_put_dev_21($p222);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i40 := $i88;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p224);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} kfree($p225);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} mutex_destroy($p226);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i29 := $i40;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p12);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} kfree($p227);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_175 := printk.ref.i32(.str.72, $i29);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i17 := $i29;
    goto $bb6;

  $bb69:
    assume $i195 == 1;
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i196 := $i194;
    goto $bb71;

  $bb62:
    assume $i186 == 1;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(11232, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p187);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i189 := $sle.i32($i188, 7);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb64;

  $bb65:
    assume $i189 == 1;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_188 := printk.ref.i32(.str.69, 8);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb59:
    assume $i181 == 1;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} vslice_dummy_var_187 := printk.ref(.str.68);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i162 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_185 := printk.ref(.str.66);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i164 := $sub.i32(0, 19);
    goto $bb58;

  $bb52:
    assume $i141 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_184 := printk.ref(.str.65);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i143 := $sub.i32(0, 12);
    goto $bb54;

  $bb48:
    assume $i130 == 1;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_183 := dev_err.ref.ref($p131, .str.63);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i133 := $sub.i32(0, 12);
    goto $bb50;

  $bb44:
    assume $i117 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vslice_dummy_var_181 := dev_err.ref.ref($p118, .str.63);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32(0, 12);
    goto $bb46;

  $bb36:
    assume $i85 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} vslice_dummy_var_179 := dev_err.ref.ref($p86, .str.59);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32(0, 12);
    goto $bb38;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb25;

  $bb25:
    call $p64, $p65, $i66, $p68, $p69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $p77, $i78, $i79, $i80, $i81, $i63 := s2255_probe_loop_$bb25($p12, $p49, $p59, $p64, $p65, $i66, $p68, $p69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $p77, $i78, $i79, $i80, $i81, $i63);
    goto $bb25_last;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p49, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i63);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref($i66, 64)), $mul.ref(0, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10952, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i63, 1);
    call {:si_unique_call 620} {:cexpr "i"} boogie_si_record_i32($i78);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p59);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i81 := $sgt.i32($i80, $i78);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i81 == 1);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb33:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i63 := $i78;
    goto $bb33_dummy;

  $bb27:
    assume $i72 == 1;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i73 := usb_endpoint_is_bulk_in($p68);
    call {:si_unique_call 619} {:cexpr "tmp___2"} boogie_si_record_i32($i73);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i74 == 1;
    $p75 := $add.ref($add.ref($add.ref($p65, $mul.ref($i66, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10952, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $i76);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb19:
    assume $i52 == 1;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_178 := printk.ref.i32(.str.58, $i56);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i43 == 1;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p12, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_177 := printk.ref.ref.ref.ref(.str.57, $p12, $p45, $p0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_176 := dev_err.ref.ref($p38, .str.56);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 19);
    goto $bb14;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb10;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_174 := dev_err.ref.ref($p15, .str.54);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_173 := printk.ref.ref(.str.10, .str.53);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb33_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3822;
}



const s2255_disconnect: ref;

axiom s2255_disconnect == $sub.ref(0, 407751);

procedure s2255_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation s2255_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i12: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i11: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p29: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p43: ref;
  var $p46: ref;
  var $p49: ref;
  var $p52: ref;
  var $p55: ref;
  var $p58: ref;
  var $p61: ref;
  var $p64: ref;
  var $p67: ref;
  var $p70: ref;
  var $p73: ref;
  var $p76: ref;
  var vslice_dummy_var_193: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p3 := to_s2255_dev($p2);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(10760, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i5 := atomic_read($p4);
    call {:si_unique_call 662} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} mutex_lock_nested($p6, 0);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(10400, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} v4l2_device_disconnect($p7);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} mutex_unlock($p8);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(10760, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} atomic_inc($p9);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32(0, $i5);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} atomic_set($p20, 4);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} __wake_up($p23, 3, 1, $0.ref);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(0, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 1);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(0, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} __wake_up($p29, 3, 1, $0.ref);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(0, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(0, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} __wake_up($p35, 3, 1, $0.ref);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(1, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 1);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(1, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} __wake_up($p46, 3, 1, $0.ref);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(1, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(1, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} __wake_up($p52, 3, 1, $0.ref);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(2, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 1);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(2, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} __wake_up($p58, 3, 1, $0.ref);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(2, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 1);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(2, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} __wake_up($p64, 3, 1, $0.ref);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(3, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 1);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(3, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} __wake_up($p70, 3, 1, $0.ref);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(3, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 1);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(3, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} __wake_up($p76, 3, 1, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(10760, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i37 := atomic_dec_and_test($p36);
    call {:si_unique_call 676} {:cexpr "tmp___2"} boogie_si_record_i32($i37);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} vslice_dummy_var_193 := _dev_info.ref.ref.ref($p39, .str.133, .str.134);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} s2255_destroy($p3);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb4;

  $bb4:
    call $i12, $p15, $i16, $i17, $i11 := s2255_disconnect_loop_$bb4($p3, $i5, $i12, $p15, $i16, $i17, $i11);
    goto $bb4_last;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref($i12, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} video_unregister_device($p15);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i11, 1);
    call {:si_unique_call 668} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, $i5);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4087;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 408783);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const v4l2_device_disconnect: ref;

axiom v4l2_device_disconnect == $sub.ref(0, 409815);

procedure v4l2_device_disconnect($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 410847);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 684} devirtbounce.3(0, $p1, $p1);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    return;
}



const video_unregister_device: ref;

axiom video_unregister_device == $sub.ref(0, 411879);

procedure video_unregister_device($p0: ref);
  free requires assertsPassed;



implementation video_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 412911);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 413943);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p1 := ldv_interface_to_usbdev();
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_usb_get_dev_17: ref;

axiom ldv_usb_get_dev_17 == $sub.ref(0, 414975);

procedure ldv_usb_get_dev_17($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.15, $M.14;



implementation ldv_usb_get_dev_17($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p1 := ldv_get_dev($p0);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 416007);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 688} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 690} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const s2255_timer: ref;

axiom s2255_timer == $sub.ref(0, 417039);

procedure s2255_timer($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.20, $M.19, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation s2255_timer($i0: i64)
{
  var $p1: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} {:cexpr "s2255_timer:arg:user_data"} boogie_si_record_i64($i0);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 99);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i8 := ldv_usb_submit_urb_3($p7, 32);
    call {:si_unique_call 694} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_195 := printk.ref(.str.74);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} atomic_set($p11, 3);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} __wake_up($p12, 3, 1, $0.ref);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_194 := printk.ref.ref(.str.10, .str.73);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 418071);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_18: ref;

axiom ldv_usb_alloc_urb_18 == $sub.ref(0, 419103);

procedure ldv_usb_alloc_urb_18($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_usb_alloc_urb_18($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} {:cexpr "ldv_usb_alloc_urb_18:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 699} {:cexpr "ldv_usb_alloc_urb_18:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p2 := ldv_alloc_urb();
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 420135);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 701} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 702} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 421167);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 703} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 704} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const s2255_board_init: ref;

axiom s2255_board_init == $sub.ref(0, 422199);

procedure s2255_board_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.19, $M.20, $M.21, $M.16, $M.18, $M.15, $M.14;



implementation s2255_board_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i33: i32;
  var $i34: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i42: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $i76: i32;
  var $i77: i1;
  var $i44: i32;
  var $i80: i32;
  var $i81: i1;
  var $i36: i32;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p1 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 92);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 128);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(32, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(36, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 16384);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i15 := $M.5;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 3);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p13);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 707} cmdloc_dummy_var_38 := $memset.i8(cmdloc_dummy_var_37, $p18, 0, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(32, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p0);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(4, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 16384);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(0, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 16384);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(0, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p26 := kzalloc($i25, 208);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(8, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p26);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(8, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i37 := s2255_get_fx2fw($p0);
    call {:si_unique_call 711} {:cexpr "fw_ver"} boogie_si_record_i32($i37);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i38 := $ashr.i32($i37, 8);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 255);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i37, 255);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} vslice_dummy_var_198 := printk.ref.i32.i32(.str.77, $i39, $i40);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i42 := $sle.i32($i37, 779);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb14;

  $bb14:
    call $p45, $p46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $i56, $i57, $p59, $i60, $i61, $p63, $p64, $p65, $p66, $p67, $p68, $p70, $i71, $i72, $p73, $p74, $i76, $i77, $i44, cmdloc_dummy_var_39, cmdloc_dummy_var_40, cmdloc_dummy_var_41, vslice_dummy_var_200 := s2255_board_init_loop_$bb14($p0, $p1, $p45, $p46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $i56, $i57, $p59, $i60, $i61, $p63, $p64, $p65, $p66, $p67, $p68, $p70, $i71, $i72, $p73, $p74, $i76, $i77, $i44, cmdloc_dummy_var_39, cmdloc_dummy_var_40, cmdloc_dummy_var_41, vslice_dummy_var_200);
    goto $bb14_last;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i44);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p46, $mul.ref($i47, 2600));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p1);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 714} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p51, $p52, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11236, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 8791);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2288, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 50);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2572, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 640);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2576, 1));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 480);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, 4096);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, formats);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2232, 1)), $mul.ref(40, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 1);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i71 := get_transfer_size($p1);
    call {:si_unique_call 716} {:cexpr "tmp___0"} boogie_si_record_i32($i71);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i71);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2344, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p73, $i72);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2368, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p74, 0);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} vslice_dummy_var_200 := s2255_create_sys_buffers($p48);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i44, 1);
    call {:si_unique_call 718} {:cexpr "j"} boogie_si_record_i32($i76);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i77 := $sle.i32($i76, 3);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} vslice_dummy_var_201 := s2255_start_readpipe($p0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i80 := $M.5;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i81 := $sgt.i32($i80, 0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb25:
    assume $i81 == 1;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} vslice_dummy_var_202 := printk.ref.ref(.str.79, .str.80);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i44 := $i76;
    goto $bb22_dummy;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i44, 1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb18;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2232, 1)), $mul.ref(8, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i60, 65536);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 2600)), $mul.ref(2232, 1)), $mul.ref(8, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i61);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} vslice_dummy_var_199 := printk.ref(.str.78);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i33 := $M.5;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, 0);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 12);
    goto $bb9;

  $bb6:
    assume $i34 == 1;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} vslice_dummy_var_197 := printk.ref(.str.76);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_196 := printk.ref.ref(.str.75, $p0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4281;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 423231);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 424263);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    return;
}



const s2255_probe_v4l: ref;

axiom s2255_probe_v4l == $sub.ref(0, 425295);

procedure s2255_probe_v4l($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s2255_probe_v4l($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i78: i32;
  var $i82: i1;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $i10: i32;
  var $i97: i32;
  var $i55: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $i9: i32;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: ref;
  var vslice_dummy_var_205: ref;
  var vslice_dummy_var_206: ref;
  var vslice_dummy_var_207: ref;
  var vslice_dummy_var_208: ref;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i2 := $M.26;
    call {:si_unique_call 722} {:cexpr "cur_nr"} boogie_si_record_i32($i2);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10944, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10400, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i7 := v4l2_device_register($p5, $p6);
    call {:si_unique_call 724} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    call $p11, $p12, $i13, $p14, $p16, $p17, $p19, $p21, $p23, $p25, $p27, $p28, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $p40, $p43, $i44, $i45, $p46, $p57, $p58, $p59, $p60, $p62, $p63, $p65, $p66, $p68, $p70, $p71, $p72, $i73, $i74, $p75, $i76, $i77, $p79, $i80, $i81, $i78, $i82, $i83, $p88, $p89, $p90, $p92, $p93, $i95, $i96, $i10, $i97, cmdloc_dummy_var_42, cmdloc_dummy_var_43, cmdloc_dummy_var_44, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_212 := s2255_probe_v4l_loop_$bb5($p0, $p1, $i2, $p11, $p12, $i13, $p14, $p16, $p17, $p19, $p21, $p23, $p25, $p27, $p28, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $p40, $p43, $i44, $i45, $p46, $p57, $p58, $p59, $p60, $p62, $p63, $p65, $p66, $p68, $p70, $p71, $p72, $i73, $i74, $p75, $i76, $i77, $p79, $i80, $i81, $i78, $i82, $i83, $p88, $p89, $p90, $p92, $p93, $i95, $i96, $i10, $i97, cmdloc_dummy_var_42, cmdloc_dummy_var_43, cmdloc_dummy_var_44, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_212);
    goto $bb5_last;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i10);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 2600));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(2072, 1)), $mul.ref(0, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} INIT_LIST_HEAD($p16);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} vslice_dummy_var_203 := v4l2_ctrl_handler_init_class($p17, 6, $p1, .str.118);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_204 := v4l2_ctrl_new_std($p19, s2255_ctrl_ops, 9963776, $sub.i32(0, 127), 127, 1, 0);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} vslice_dummy_var_205 := v4l2_ctrl_new_std($p21, s2255_ctrl_ops, 9963777, 0, 255, 1, 92);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_206 := v4l2_ctrl_new_std($p23, s2255_ctrl_ops, 9963778, 0, 255, 1, 128);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} vslice_dummy_var_207 := v4l2_ctrl_new_std($p25, s2255_ctrl_ops, 9963779, 0, 255, 1, 0);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $p28 := v4l2_ctrl_new_std($p27, s2255_ctrl_ops, 10291459, 0, 100, 1, 50);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(2056, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p28);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11232, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 7);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(1808, 1)), $mul.ref(244, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p46 := $p14;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(2072, 1)), $mul.ref(16, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 739} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p59, template, 1808, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(0, 1)), $mul.ref(1544, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $p60);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(0, 1)), $mul.ref(1800, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $p63);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10400, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(0, 1)), $mul.ref(1528, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p66);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(0, 1)), $mul.ref(1616, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} set_bit(2, $p70);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p14);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} video_set_drvdata($p71, $p72);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i73 := $M.26;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, $sub.i32(0, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i2, $i10);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i81 := video_register_device($p79, 0, $i80);
    call {:si_unique_call 745} {:cexpr "ret"} boogie_si_record_i32($i81);
    assume {:verifier.code 0} true;
    $i78 := $i81;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i78, 0);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i83 := $i78;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10760, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} atomic_inc($p88);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p90 := video_device_node_name($p89);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10400, 1)), $mul.ref(104, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_212 := printk.ref.ref.ref(.str.121, $p93, $p90);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i10, 1);
    call {:si_unique_call 750} {:cexpr "i"} boogie_si_record_i32($i95);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i96 := $sle.i32($i95, 3);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i97 := $i78;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i55 := $i97;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} vslice_dummy_var_210 := printk.ref.ref(.str.122, .str.123);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10760, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i100 := atomic_read($p99);
    call {:si_unique_call 738} {:cexpr "tmp___0"} boogie_si_record_i32($i100);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10760, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i104 := atomic_read($p103);
    call {:si_unique_call 753} {:cexpr "tmp___1"} boogie_si_record_i32($i104);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 4);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb32:
    assume $i105 == 1;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} vslice_dummy_var_213 := printk.ref(.str.124);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i101 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10400, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} v4l2_device_unregister($p102);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i9 := $i55;
    goto $bb3;

  $bb26:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i95;
    goto $bb26_dummy;

  $bb23:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} vslice_dummy_var_211 := dev_err.ref.ref($p86, .str.120);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i55 := $i83;
    goto $bb18;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i76 := $M.26;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i77 := video_register_device($p75, 0, $i76);
    call {:si_unique_call 743} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb22;

  $bb16:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 2600)), $mul.ref(1808, 1)), $mul.ref(244, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    call {:si_unique_call 733} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p46, $mul.ref(0, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} v4l2_ctrl_handler_free($p50);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_209 := dev_err.ref.ref($p53, .str.119);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i55 := $i49;
    goto $bb18;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11236, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 8791);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i36 == 1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i39 := $sle.i32($i38, 1);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p12, $mul.ref($i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} vslice_dummy_var_208 := v4l2_ctrl_new_custom($p40, color_filter_ctrl, $0.ref);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4357;
}



const ldv_usb_free_urb_19: ref;

axiom ldv_usb_free_urb_19 == $sub.ref(0, 426327);

procedure ldv_usb_free_urb_19($p0: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_usb_free_urb_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} ldv_free_urb($p0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_20: ref;

axiom ldv_del_timer_20 == $sub.ref(0, 427359);

procedure ldv_del_timer_20($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_del_timer_20($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i1 := del_timer($p0);
    call {:si_unique_call 757} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} disable_suitable_timer_1($p0);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_put_dev_21: ref;

axiom ldv_usb_put_dev_21 == $sub.ref(0, 428391);

procedure ldv_usb_put_dev_21($p0: ref);
  free requires assertsPassed;
  modifies $M.15, $M.14;



implementation ldv_usb_put_dev_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} ldv_put_dev($p0);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_register: ref;

axiom v4l2_device_register == $sub.ref(0, 429423);

procedure v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 760} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 761} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 430455);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_ctrl_handler_init_class: ref;

axiom v4l2_ctrl_handler_init_class == $sub.ref(0, 431487);

procedure v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 762} {:cexpr "v4l2_ctrl_handler_init_class:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 763} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const v4l2_ctrl_new_std: ref;

axiom v4l2_ctrl_new_std == $sub.ref(0, 432519);

procedure v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} {:cexpr "v4l2_ctrl_new_std:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 766} {:cexpr "v4l2_ctrl_new_std:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 767} {:cexpr "v4l2_ctrl_new_std:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 768} {:cexpr "v4l2_ctrl_new_std:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 769} {:cexpr "v4l2_ctrl_new_std:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p7 := external_alloc();
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const v4l2_ctrl_new_custom: ref;

axiom v4l2_ctrl_new_custom == $sub.ref(0, 433551);

procedure v4l2_ctrl_new_custom($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_custom($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p3 := external_alloc();
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 434583);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 773} devirtbounce.4(0, $p1, $i0, $p1);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    return;
}



const video_set_drvdata: ref;

axiom video_set_drvdata == $sub.ref(0, 435615);

procedure video_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation video_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_214 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    return;
}



const video_register_device: ref;

axiom video_register_device == $sub.ref(0, 436647);

procedure video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} {:cexpr "video_register_device:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 776} {:cexpr "video_register_device:arg:nr"} boogie_si_record_i32($i2);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(128, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i7 := __video_register_device($p0, $i1, $i2, 1, $p6);
    call {:si_unique_call 778} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const __video_register_device: ref;

axiom __video_register_device == $sub.ref(0, 437679);

procedure __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 779} {:cexpr "__video_register_device:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 780} {:cexpr "__video_register_device:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 781} {:cexpr "__video_register_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 1} true;
    call {:si_unique_call 782} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 783} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 438711);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 784} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 785} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const s2255_get_fx2fw: ref;

axiom s2255_get_fx2fw == $sub.ref(0, 439743);

procedure s2255_get_fx2fw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation s2255_get_fx2fw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p1 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i3 := s2255_vendor_req($p0, 48, 0, 0, $p2, 2, 0);
    call {:si_unique_call 788} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 789} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.27, $p10);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.27, $p13);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 8);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i12, $i16);
    call {:si_unique_call 791} {:cexpr "fw"} boogie_si_record_i32($i17);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i19 := $M.5;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 1);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.27, $p21);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.27, $p24);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_216 := printk.ref.i32.i32(.str.82, $i23, $i26);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_215 := printk.ref.i32(.str.81, $i4);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const s2255_create_sys_buffers: ref;

axiom s2255_create_sys_buffers == $sub.ref(0, 440775);

procedure s2255_create_sys_buffers($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation s2255_create_sys_buffers($p0: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p6: ref;
  var $i7: i1;
  var $p9: ref;
  var $p13: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p26: ref;
  var $p27: ref;
  var $p32: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i8: i64;
  var $p49: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p59: ref;
  var $p63: ref;
  var $p67: ref;
  var $p71: ref;
  var $p75: ref;
  var $p79: ref;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(0, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, 4);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64(833536, 833536);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb7;

  $bb7:
    call $p9, $p13, $i15, $i16, $p18, $p19, $p20, $p21, $i22, $p26, $p27, $p32, $p36, $p37, $i38, $i39, $i40, $i44, $i45, $i8, vslice_dummy_var_218 := s2255_create_sys_buffers_loop_$bb7($p0, $p9, $p13, $i15, $i16, $p18, $p19, $p20, $p21, $i22, $p26, $p27, $p32, $p36, $p37, $i38, $i39, $i40, $i44, $i45, $i8, vslice_dummy_var_218);
    goto $bb7_last;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p9 := vmalloc(833536);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref($i8, 32)), $mul.ref(16, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p9);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i15 := $M.5;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref($i8, 32)), $mul.ref(0, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, 833536);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref($i8, 32)), $mul.ref(16, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i40 := $i8;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i8, 1);
    call {:si_unique_call 797} {:cexpr "i"} boogie_si_record_i64($i44);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i45 := $ule.i64($i44, 3);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, 0);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(8, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, 0);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, 0);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(8, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, 0);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(24, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, 0);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(8, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p75, 0);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(24, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p79, 0);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2336, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $sub.i32(0, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb16:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i44;
    goto $bb16_dummy;

  $bb12:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_219 := printk.ref(.str.85);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(0, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i40);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($i8, 32));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref($i8, 32)), $mul.ref(16, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} vslice_dummy_var_218 := printk.ref.ref.i32.i64.ref(.str.84, $p20, $i22, $i8, $p27);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} vslice_dummy_var_217 := printk.ref(.str.83);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4576;
}



const s2255_start_readpipe: ref;

axiom s2255_start_readpipe == $sub.ref(0, 441807);

procedure s2255_start_readpipe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.16, $CurrAddr, $M.18, $M.15, $M.14;



implementation s2255_start_readpipe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i29: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10952, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i7 := __create_pipe($p3, $i6);
    call {:si_unique_call 799} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, $sub.i32(0, 1073741696));
    call {:si_unique_call 800} {:cexpr "pipe"} boogie_si_record_i32($i8);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 1);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(16, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 1);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(40, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p18 := ldv_usb_alloc_urb_11(0, 208);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(24, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p18);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(24, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(24, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(8, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(4, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p1);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ldv_usb_fill_bulk_urb_4($p32, $p34, $i8, $p36, $i38, read_pipe_completion, $p39);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11096, 1)), $mul.ref(24, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i43 := ldv_usb_submit_urb_13($p42, 208);
    call {:si_unique_call 806} {:cexpr "retval"} boogie_si_record_i32($i43);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} vslice_dummy_var_222 := printk.ref(.str.89);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i29 := $i43;
    goto $bb6;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} vslice_dummy_var_221 := dev_err.ref.ref($p27, .str.88);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10952, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} vslice_dummy_var_220 := printk.ref.ref.i32(.str.86, .str.87, $i14);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_alloc_urb_11: ref;

axiom ldv_usb_alloc_urb_11 == $sub.ref(0, 442839);

procedure ldv_usb_alloc_urb_11($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_usb_alloc_urb_11($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} {:cexpr "ldv_usb_alloc_urb_11:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 809} {:cexpr "ldv_usb_alloc_urb_11:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p2 := ldv_alloc_urb();
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const read_pipe_completion: ref;

axiom read_pipe_completion == $sub.ref(0, 443871);

procedure read_pipe_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation read_pipe_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i40: i32;
  var $i41: i1;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i82: i32;
  var $i83: i1;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i5 := $M.5;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 99);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p3);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 814} {:cexpr "status"} boogie_si_record_i32($i26);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, $sub.i32(0, 108));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i26, 0);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i49 := $M.5;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, 0);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p18, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p18, $mul.ref(0, 11240)), $mul.ref(10952, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i57 := __create_pipe($p53, $i56);
    call {:si_unique_call 819} {:cexpr "tmp"} boogie_si_record_i32($i57);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i57, $sub.i32(0, 1073741696));
    call {:si_unique_call 820} {:cexpr "pipe"} boogie_si_record_i32($i58);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p18, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p3);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} ldv_usb_fill_bulk_urb_4($p61, $p63, $i58, $p65, $i67, read_pipe_completion, $p68);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i71 == 1);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i82 := $M.5;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, 1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb35:
    assume $i83 == 1;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_230 := printk.ref.ref(.str.97, .str.91);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i71 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i75 := ldv_usb_submit_urb_10($p74, 32);
    call {:si_unique_call 824} {:cexpr "tmp___0"} boogie_si_record_i32($i75);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i76 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p18, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_229 := dev_err.ref.ref($p79, .str.96);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume $i50 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} vslice_dummy_var_228 := printk.ref.ref.i32(.str.95, .str.91, $i26);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} s2255_read_video_callback($p18, $p3);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i40 := $M.5;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, 1);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vslice_dummy_var_227 := printk.ref.ref(.str.94, .str.91);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i29 := $M.5;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 1);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_226 := printk.ref.ref(.str.93, .str.91);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} vslice_dummy_var_225 := dev_err.ref.ref($p23, .str.92);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_224 := dev_err.ref.ref($p14, .str.92);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} vslice_dummy_var_223 := printk.ref.ref.ref.i32(.str.90, .str.91, $p0, $i8);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_13: ref;

axiom ldv_usb_submit_urb_13 == $sub.ref(0, 444903);

procedure ldv_usb_submit_urb_13($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.20, $M.0, $M.19, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation ldv_usb_submit_urb_13($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} {:cexpr "ldv_usb_submit_urb_13:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 829} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const s2255_read_video_callback: ref;

axiom s2255_read_video_callback == $sub.ref(0, 445935);

procedure s2255_read_video_callback($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation s2255_read_video_callback($p0: ref, $p1: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $i21: i32;
  var $i22: i1;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 49);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11144, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 3);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i14 := save_frame($p0, $p1);
    call {:si_unique_call 833} {:cexpr "res"} boogie_si_record_i32($i14);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i21 := $M.5;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 49);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_234 := printk.ref(.str.101);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i17 := $M.5;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 3);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_233 := printk.ref(.str.100);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11144, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(10936, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_232 := dev_err.ref.ref($p12, .str.99);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vslice_dummy_var_231 := printk.ref(.str.98);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_10: ref;

axiom ldv_usb_submit_urb_10 == $sub.ref(0, 446967);

procedure ldv_usb_submit_urb_10($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.20, $M.0, $M.19, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation ldv_usb_submit_urb_10($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} {:cexpr "ldv_usb_submit_urb_10:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 838} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const save_frame: ref;

axiom save_frame == $sub.ref(0, 447999);

procedure save_frame($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation save_frame($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i8;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i111: i32;
  var $i112: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $p142: ref;
  var $i143: i32;
  var $p144: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i154: i32;
  var $i155: i32;
  var $i29: i32;
  var $i30: i32;
  var $i148: i32;
  var $i149: i32;
  var $i156: i1;
  var $i157: i32;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i64;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i64;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i64;
  var $i187: i1;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i192: i32;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $p198: ref;
  var $p199: ref;
  var $i200: i32;
  var $i201: i32;
  var $i202: i64;
  var $p203: ref;
  var $i204: i64;
  var $i205: i64;
  var $p206: ref;
  var $i207: i64;
  var $i208: i64;
  var $p209: ref;
  var $i210: i64;
  var $i211: i1;
  var $p212: ref;
  var $i213: i64;
  var $i214: i64;
  var $p215: ref;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i64;
  var $p222: ref;
  var $i223: i64;
  var $i224: i1;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $i229: i32;
  var $p231: ref;
  var $i232: i32;
  var $p233: ref;
  var $p234: ref;
  var $i235: i32;
  var $i236: i32;
  var $p237: ref;
  var $p238: ref;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $i242: i32;
  var $i243: i64;
  var $p245: ref;
  var $i246: i64;
  var $i247: i1;
  var $p248: ref;
  var $p249: ref;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i253: i32;
  var $p255: ref;
  var $i256: i64;
  var $i257: i64;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i53: i32;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 99);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11144, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref($i10, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 840} {:cexpr "idx"} boogie_si_record_i32($i13);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p7, $mul.ref($i10, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i13);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref($i17, 32)), $mul.ref(8, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i157 := 0;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11144, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i162 := $zext.i32.i64($i161);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p159, $mul.ref($i162, 2600));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    call {:si_unique_call 857} {:cexpr "idx"} boogie_si_record_i32($i165);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i165);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p168, $mul.ref($i169, 32));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(8, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i176 := $load.i64($M.0, $p175);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i177 := $eq.i64($i176, 0);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i182 := $zext.i32.i64($i157);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p181, $mul.ref($i182, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(16, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p185);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i187 := $eq.i64($i186, 0);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(16, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(24, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i197 := $load.i64($M.0, $p196);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($p195, $mul.ref($i197, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i201 := $sub.i32($i200, $i157);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i202 := $zext.i32.i64($i201);
    call {:si_unique_call 859} {:cexpr "copy_size"} boogie_si_record_i64($i202);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2352, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i204 := $load.i64($M.0, $p203);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i205 := $sub.i64($i204, 512);
    call {:si_unique_call 860} {:cexpr "size"} boogie_si_record_i64($i205);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(24, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i207 := $load.i64($M.0, $p206);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i208 := $add.i64($i207, $i202);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2344, 1));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i210 := $load.i64($M.0, $p209);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i211 := $ult.i64($i208, $i210);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(24, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i213 := $load.i64($M.0, $p212);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i214 := $add.i64($i213, $i202);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(24, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p215, $i214);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i217 := $M.5;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i218 := $sgt.i32($i217, 3);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(24, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i223 := $load.i64($M.0, $p222);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i224 := $uge.i64($i223, $i205);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb90:
    assume $i224 == 1;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i226 := $M.5;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i227 := $sgt.i32($i226, 1);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.0, $p231);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2336, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, $i232);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p234);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i236 := $add.i32($i235, 1);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p237, $i236);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.0, $p238);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 4);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb97;

  $bb97:
    assume !($i240 == 1);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.0, $p241);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i243 := $sext.i32.i64($i242);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2096, 1)), $mul.ref(0, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i246 := $load.i64($M.0, $p245);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i247 := $eq.i64($i243, $i246);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.0, $p249);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 0);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2368, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i256 := $load.i64($M.0, $p255);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i257 := $add.i64($i256, 1);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2368, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p258, $i257);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(8, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p259, 0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(24, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p260, 0);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i251 == 1;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2376, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.0, $p252);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} vslice_dummy_var_245 := s2255_got_frame($p163, $i253);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i247 == 1;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p159, $mul.ref($i162, 2600)), $mul.ref(2332, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p248, 0);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb96;

  $bb92:
    assume $i227 == 1;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11144, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.0, $p228);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} vslice_dummy_var_244 := printk.ref.i32.i32(.str.111, $i229, $i165);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb87:
    assume $i218 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(24, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i220 := $load.i64($M.0, $p219);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_243 := printk.ref.i64.i64(.str.110, $i220, $i205);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i211 == 1;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 861} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p198, $p183, $i202, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb78:
    assume $i187 == 1;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i189 := $M.5;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i190 := $sgt.i32($i189, 0);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 12);
    goto $bb24;

  $bb80:
    assume $i190 == 1;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11144, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, $p191);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} vslice_dummy_var_242 := printk.ref.ref.ref.i32.i32(.str.109, $p170, $p0, $i192, $i165);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb75:
    assume $i177 == 1;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(8, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p178, 1);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(24, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p179, 0);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i173 == 1;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p168, $mul.ref($i169, 32)), $mul.ref(8, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p174, 0);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 22);
    goto $bb24;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i26, 12);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32(0, $i27);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i29, $i30 := 0, 0;
    assume {:branchcond $i28} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i148, $i149 := $i29, $i30;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i148, 0);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i157 := $i149;
    goto $bb71;

  $bb68:
    assume $i156 == 1;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 22);
    goto $bb24;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i31, $i32, $i33, $p34 := 0, 0, 0, $p23;
    goto $bb9;

  $bb9:
    call $i35, $i36, $i37, $i38, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i48, $p49, $i50, $i51, $i54, $p55, $i56, $i57, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $i76, $p77, $p78, $i79, $p80, $p85, $i86, $p87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $i96, $p97, $p98, $i99, $p101, $i102, $i103, $i104, $i105, $i106, $i107, $p108, $p109, $i111, $i112, $p114, $i115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $p124, $p125, $p126, $p127, $p128, $p129, $p130, $i131, $p132, $p133, $p134, $i136, $i137, $p138, $i139, $p142, $i143, $p144, $p81, $i82, $i83, $i84, $i145, $i146, $i147, $i150, $i151, $i152, $i153, $i31, $i32, $i33, $p34, $i154, $i155, vslice_dummy_var_236, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240, vslice_dummy_var_241 := save_frame_loop_$bb9($p0, $p24, $p25, $i35, $i36, $i37, $i38, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i48, $p49, $i50, $i51, $i54, $p55, $i56, $i57, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $i76, $p77, $p78, $i79, $p80, $p85, $i86, $p87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $i96, $p97, $p98, $i99, $p101, $i102, $i103, $i104, $i105, $i106, $i107, $p108, $p109, $i111, $i112, $p114, $i115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $p124, $p125, $p126, $p127, $p128, $p129, $p130, $i131, $p132, $p133, $p134, $i136, $i137, $p138, $i139, $p142, $i143, $p144, $p81, $i82, $i83, $i84, $i145, $i146, $i147, $i150, $i151, $i152, $i153, $i31, $i32, $i33, $p34, $i154, $i155, vslice_dummy_var_236, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240, vslice_dummy_var_241);
    goto $bb9_last;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p24);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 576051786);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i35, 576051786);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p142, $i143 := $p34, $i31;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p142, $mul.ref(1, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p81, $i82, $i83, $i84 := $p144, $i33, $i32, $i143;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i82, 0);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i146, $i147 := $i82, $i83;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i84, 1);
    call {:si_unique_call 856} {:cexpr "jj"} boogie_si_record_i32($i150);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p25);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i152 := $sub.i32($i151, 12);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i153 := $ult.i32($i150, $i152);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i154, $i155 := $i82, $i83;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i29, $i30 := $i154, $i155;
    goto $bb8;

  $bb65:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    $i31, $i32, $i33, $p34 := $i150, $i83, $i82, $p81;
    goto $bb65_dummy;

  $bb61:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i148, $i149 := $i146, $i147;
    goto $bb63;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i40 := $M.5;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, 3);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i31, 512);
    call {:si_unique_call 843} {:cexpr "offset"} boogie_si_record_i32($i48);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p24, $mul.ref(1, 4));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    call {:si_unique_call 844} {:cexpr "cc"} boogie_si_record_i32($i50);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i51 := $ugt.i32($i50, 3);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i50);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref($i54, 8));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.6, $p55);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i56);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11144, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11144, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i62);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p60, $mul.ref($i63, 2600));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p24, $mul.ref(3, 4));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    call {:si_unique_call 846} {:cexpr "payload"} boogie_si_record_i32($i66);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p60, $mul.ref($i63, 2600)), $mul.ref(2344, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i64($i67, $i69);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p71 := $p64;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i66);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p60, $mul.ref($i63, 2600)), $mul.ref(2352, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, $i76);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p24, $mul.ref(4, 4));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p60, $mul.ref($i63, 2600)), $mul.ref(2376, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p81, $i82, $i83, $i84 := $p34, 1, $i48, $i31;
    goto $bb29;

  $bb26:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 2600)), $mul.ref(2360, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p71, $mul.ref(0, 2600)), $mul.ref(2360, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 22);
    goto $bb24;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} vslice_dummy_var_237 := printk.ref(.str.104);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 22);
    goto $bb24;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p34);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p34, $mul.ref(1, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} vslice_dummy_var_236 := printk.ref.i32.i32.i32(.str.103, $i31, $i43, $i46);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i35, 576040108);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb16;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p34, $mul.ref(16384, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i31, 16384);
    call {:si_unique_call 841} {:cexpr "jj"} boogie_si_record_i32($i86);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p24, $mul.ref(1, 4));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i89 := $ugt.i32($i88, 3);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p24, $mul.ref(1, 4));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i92 := $zext.i32.i64($i91);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref($i92, 8));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.6, $p93);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i64.i32($i94);
    call {:si_unique_call 847} {:cexpr "cc"} boogie_si_record_i32($i95);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i96 := $ugt.i32($i95, 3);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i99 := $zext.i32.i64($i95);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p24, $mul.ref(2, 4));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i102, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i102, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i102, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} vslice_dummy_var_241 := printk.ref(.str.108);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p142, $i143 := $p85, $i86;
    goto $bb60;

  $bb41:
    assume $i105 == 1;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p24, $mul.ref(3, 4));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p98, $mul.ref($i99, 2600)), $mul.ref(2476, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i131);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p98, $mul.ref($i99, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, 1);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p98, $mul.ref($i99, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} __wake_up($p134, 3, 1, $0.ref);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i136 := $M.5;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i137 := $sgt.i32($i136, 4);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb55:
    assume $i137 == 1;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p24, $mul.ref(3, 4));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} vslice_dummy_var_240 := printk.ref.i32.i32(.str.107, $i139, $i95);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb39:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i102, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb43;

  $bb44:
    assume $i106 == 1;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11152, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i116 := $shl.i32(1, $i95);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i115, $i116);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11152, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, $i117);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11152, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i120, 15);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 15);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} vslice_dummy_var_239 := printk.ref(.str.106);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} atomic_set($p126, 2);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} __wake_up($p129, 3, 1, $0.ref);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb52:
    assume $i122 == 1;
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb37:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb43;

  $bb46:
    assume $i107 == 1;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p98, $mul.ref($i99, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, 1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p98, $mul.ref($i99, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} __wake_up($p109, 3, 1, $0.ref);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i111 := $M.5;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i112 := $sgt.i32($i111, 4);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i112 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} vslice_dummy_var_238 := printk.ref.i32(.str.105, $i95);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb33:
    assume $i96 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p81, $i82, $i83, $i84 := $p85, $i33, $i32, $i86;
    goto $bb29;

  $bb30:
    assume $i89 == 1;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p81, $i82, $i83, $i84 := $p85, $i33, $i32, $i86;
    goto $bb29;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vslice_dummy_var_235 := printk.ref(.str.102);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb65_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4895;
}



const s2255_got_frame: ref;

axiom s2255_got_frame == $sub.ref(0, 449031);

procedure s2255_got_frame($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation s2255_got_frame($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i17: i32;
  var $p36: ref;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} {:cexpr "s2255_got_frame:arg:jpgsize"} boogie_si_record_i32($i1);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(0, 1)), $mul.ref(1528, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p6 := to_s2255_dev($p5);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 11240)), $mul.ref(11160, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $p8 := spinlock_check($p7);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 869} {:cexpr "flags"} boogie_si_record_i64($i9);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2072, 1)), $mul.ref(0, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i11 := list_empty($p10);
    call {:si_unique_call 871} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2072, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref($sub.ref(0, 56), 248));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p21, $mul.ref($sub.ref(0, 56), 248)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} list_del($p24);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p21, $mul.ref($sub.ref(0, 56), 248)), $mul.ref(0, 1)), $mul.ref(168, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} v4l2_get_timestamp($p26);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} s2255_fillbuff($p0, $p22, $i1);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p21, $mul.ref($sub.ref(0, 56), 248)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} __wake_up($p28, 3, 1, $0.ref);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i30 := $M.5;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, 1);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 11240)), $mul.ref(11160, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} spin_unlock_irqrestore($p36, $i9);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p21, $mul.ref($sub.ref(0, 56), 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} vslice_dummy_var_247 := printk.ref.ref.ref.i32(.str.113, .str.114, $p22, $i34);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i14 := $M.5;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 0);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb6;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_246 := printk.ref(.str.112);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 450063);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 1} true;
    call {:si_unique_call 879} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 880} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 451095);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_get_timestamp: ref;

axiom v4l2_get_timestamp == $sub.ref(0, 452127);

procedure v4l2_get_timestamp($p0: ref);
  free requires assertsPassed;



implementation v4l2_get_timestamp($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    return;
}



const s2255_fillbuff: ref;

axiom s2255_fillbuff == $sub.ref(0, 453159);

procedure s2255_fillbuff($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation s2255_fillbuff($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $p51: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i64;
  var $p65: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i32;
  var $i75: i32;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} {:cexpr "s2255_fillbuff:arg:jpgsize"} boogie_si_record_i32($i2);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p4 := videobuf_to_vmalloc($p3);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2336, 1));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    call {:si_unique_call 883} {:cexpr "last_frame"} boogie_si_record_i64($i9);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, $sub.i64(0, 1));
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_248 := printk.ref(.str.116);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref($i9, 32)), $mul.ref(16, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(240, 1));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 1448695129);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 1497715271);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, 1498831189);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i19, 1498831189);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_249 := printk.ref(.str.115);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2336, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $sub.i32(0, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i68 := $M.5;
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i68, 1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 2600)), $mul.ref(2368, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.0, $p72);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i64.i32($i73);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i75 := $mul.i32($i74, 2);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(160, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i75);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(168, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} v4l2_get_timestamp($p79);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 4);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb37:
    assume $i69 == 1;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p4);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} vslice_dummy_var_250 := printk.ref.i64.i32(.str.117, $i70, 0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(240, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} planar422p_to_yuv_packed($p15, $p4, $i33, $i36, $i40);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb12:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i19, 1497715271);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb17;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i47 := $mul.i32($i43, $i46);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    call {:si_unique_call 886} {:cexpr "__len"} boogie_si_record_i64($i48);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 887} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p4, $p15, $i48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i19, 1448695129);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb17;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i19, 1196444237);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i19, 1345466932);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i19, 1345466932);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb17;

  $bb26:
    assume $i28 == 1;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i61 := $mul.i32($i57, $i60);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i62 := $mul.i32($i61, 2);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i62);
    call {:si_unique_call 888} {:cexpr "__len___1"} boogie_si_record_i64($i63);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    cmdloc_dummy_var_52 := $M.0;
    call {:si_unique_call 889} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p4, $p15, $i63, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_53;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb24:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i19, 1196444237);
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb28, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb17;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i2);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, $i49);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    call {:si_unique_call 890} {:cexpr "__len___0"} boogie_si_record_i64($i54);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 891} cmdloc_dummy_var_56 := $memcpy.i8(cmdloc_dummy_var_54, cmdloc_dummy_var_55, $p4, $p15, $i54, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb22:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i19, 1195724874);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb17;

  $bb31:
    assume $i30 == 1;
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 454191);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 455223);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_to_vmalloc: ref;

axiom videobuf_to_vmalloc == $sub.ref(0, 456255);

procedure videobuf_to_vmalloc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation videobuf_to_vmalloc($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p1 := external_alloc();
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const planar422p_to_yuv_packed: ref;

axiom planar422p_to_yuv_packed == $sub.ref(0, 457287);

procedure planar422p_to_yuv_packed($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation planar422p_to_yuv_packed($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32)
{
  var $i5: i32;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $p27: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $p33: ref;
  var $p28: ref;
  var $p29: ref;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i64;
  var $p46: ref;
  var $p40: ref;
  var $p41: ref;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $p53: ref;
  var $p54: ref;
  var $i60: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i64;
  var $p72: ref;
  var $p66: ref;
  var $p67: ref;
  var $i73: i32;
  var $i74: i64;
  var $i75: i1;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} {:cexpr "planar422p_to_yuv_packed:arg:width"} boogie_si_record_i32($i2);
    call {:si_unique_call 900} {:cexpr "planar422p_to_yuv_packed:arg:height"} boogie_si_record_i32($i3);
    call {:si_unique_call 901} {:cexpr "planar422p_to_yuv_packed:arg:fmt"} boogie_si_record_i32($i4);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i3, $i2);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    call {:si_unique_call 902} {:cexpr "size"} boogie_si_record_i64($i6);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i3, $i2);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p0, $mul.ref($i8, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i3, $i2);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i3, $i2);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i13 := $sdiv.i32($i12, 2);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i11, $i14);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref($i15, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i6, 2);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i18 := $ult.i64(0, $i17);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i19, $p20, $p21, $p22 := 0, $p9, $p16, $p0;
    goto $bb4;

  $bb4:
    call $i23, $p24, $i25, $i26, $p27, $p30, $i31, $i32, $p33, $p28, $p29, $i34, $p35, $i36, $i37, $i38, $p39, $p42, $i43, $i44, $i45, $p46, $p40, $p41, $i47, $p48, $i49, $i50, $i51, $p52, $p55, $i56, $i57, $i58, $p59, $p53, $p54, $i60, $p61, $i62, $i63, $i64, $p65, $p68, $i69, $i70, $i71, $p72, $p66, $p67, $i73, $i74, $i75, $i19, $p20, $p21, $p22 := planar422p_to_yuv_packed_loop_$bb4($p1, $i4, $i17, $i23, $p24, $i25, $i26, $p27, $p30, $i31, $i32, $p33, $p28, $p29, $i34, $p35, $i36, $i37, $i38, $p39, $p42, $i43, $i44, $i45, $p46, $p40, $p41, $i47, $p48, $i49, $i50, $i51, $p52, $p55, $i56, $i57, $i58, $p59, $p53, $p54, $i60, $p61, $i62, $i63, $i64, $p65, $p68, $i69, $i70, $i71, $p72, $p66, $p67, $i73, $i74, $i75, $i19, $p20, $p21, $p22);
    goto $bb4_last;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i4, 1448695129);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p20, $mul.ref(1, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p20);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i19);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref($i32, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i31);
    assume {:verifier.code 0} true;
    $p28, $p29 := $p22, $p30;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i4, 1448695129);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p28, $mul.ref(1, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p28);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i19, 1);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p1, $mul.ref($i45, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i43);
    assume {:verifier.code 0} true;
    $p40, $p41 := $p42, $p29;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i4, 1448695129);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i47 == 1);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p21, $mul.ref(1, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p21);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i19, 2);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p1, $mul.ref($i58, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i56);
    assume {:verifier.code 0} true;
    $p53, $p54 := $p40, $p55;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i4, 1448695129);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i60 == 1);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p53, $mul.ref(1, 1));
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p53);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i19, 3);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i70);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p1, $mul.ref($i71, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i69);
    assume {:verifier.code 0} true;
    $p66, $p67 := $p68, $p54;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i19, 4);
    call {:si_unique_call 903} {:cexpr "i"} boogie_si_record_i32($i73);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i75 := $ult.i64($i74, $i17);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i75 == 1);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i19, $p20, $p21, $p22 := $i73, $p41, $p67, $p66;
    goto $bb18_dummy;

  $bb15:
    assume $i60 == 1;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p54, $mul.ref(1, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p54);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i19, 3);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p1, $mul.ref($i64, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, $i62);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p66, $p67 := $p53, $p61;
    goto $bb17;

  $bb12:
    assume $i47 == 1;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p40, $mul.ref(1, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p40);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i19, 2);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p1, $mul.ref($i51, 1));
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i49);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p53, $p54 := $p48, $p21;
    goto $bb14;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p29, $mul.ref(1, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p29);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i19, 1);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p1, $mul.ref($i38, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i36);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p40, $p41 := $p28, $p35;
    goto $bb11;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p22, $mul.ref(1, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p22);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i19);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref($i26, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i25);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p28, $p29 := $p24, $p20;
    goto $bb8;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5363;
}



const ldv_alloc_urb: ref;

axiom ldv_alloc_urb == $sub.ref(0, 458319);

procedure ldv_alloc_urb() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_alloc_urb() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p0 := ldv_undef_ptr();
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i2 := ldv_undef_int();
    call {:si_unique_call 906} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $M.16;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 459351);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 907} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 908} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 460383);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p1 := external_alloc();
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_usb_submit_urb_3: ref;

axiom ldv_usb_submit_urb_3 == $sub.ref(0, 461415);

procedure ldv_usb_submit_urb_3($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.20, $M.0, $M.19, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation ldv_usb_submit_urb_3($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} {:cexpr "ldv_usb_submit_urb_3:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 913} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 462447);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 463479);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_get_dev: ref;

axiom ldv_get_dev == $sub.ref(0, 464511);

procedure ldv_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.15, $M.14;



implementation ldv_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p1 := $M.14;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p8 := $M.14;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $M.14;
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i12 := $M.15;
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $M.15 := $i13;
    call {:si_unique_call 917} {:cexpr "dev_counter"} boogie_si_record_i32($i13);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i4 := ldv_undef_int();
    call {:si_unique_call 915} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i6 := $M.15;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $M.15 := $i7;
    call {:si_unique_call 916} {:cexpr "dev_counter"} boogie_si_record_i32($i7);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_interface_to_usbdev: ref;

axiom ldv_interface_to_usbdev == $sub.ref(0, 465543);

procedure ldv_interface_to_usbdev() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_interface_to_usbdev() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $p0 := ldv_undef_ptr();
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 466575);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 920} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 921} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 922} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 923} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p4 := calloc(1, $i0);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 925} __VERIFIER_assume($i7);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 467607);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 926} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_usb_driver_2: ref;

axiom ldv_usb_driver_2 == $sub.ref(0, 468639);

procedure ldv_usb_driver_2();
  free requires assertsPassed;
  modifies $M.28, $M.0, $CurrAddr;



implementation ldv_usb_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p0 := ldv_zalloc(1520);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 469671);

procedure choose_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.18, $M.0, $M.21, $M.20, $M.19, $CurrAddr, $M.16, $M.15, $M.14;



implementation choose_timer_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    call {:si_unique_call 929} devirtbounce.5($p2, $i4);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 931} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(2);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    return;
}



const ldv_videobuf_queue_ops_7: ref;

axiom ldv_videobuf_queue_ops_7 == $sub.ref(0, 470703);

procedure ldv_videobuf_queue_ops_7();
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.0, $CurrAddr;



implementation ldv_videobuf_queue_ops_7()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p0 := ldv_zalloc(616);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $M.30 := $p0;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $p2 := ldv_zalloc(240);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $M.31 := $p2;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_ioctl_ops_5: ref;

axiom ldv_initialize_v4l2_ioctl_ops_5 == $sub.ref(0, 471735);

procedure ldv_initialize_v4l2_ioctl_ops_5();
  free requires assertsPassed;
  modifies $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_5()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p0 := ldv_zalloc(360);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $M.32 := $p0;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $p2 := ldv_zalloc(208);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $M.33 := $p2;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $p4 := ldv_zalloc(32);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $M.34 := $p4;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p6 := ldv_zalloc(88);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $M.35 := $p6;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $p8 := ldv_zalloc(168);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $M.36 := $p8;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p10 := ldv_zalloc(204);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $M.37 := $p10;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_file_operations_6: ref;

axiom ldv_initialize_v4l2_file_operations_6 == $sub.ref(0, 472767);

procedure ldv_initialize_v4l2_file_operations_6();
  free requires assertsPassed;
  modifies $M.38, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_file_operations_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p0 := ldv_zalloc(360);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 473799);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.0, $M.52, $M.53, $M.17, $M.18, $M.54, $M.56, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.30, $M.31, $M.38, $M.8, $M.9, $M.10, $M.11, $M.12, $M.25, $M.24, $M.28, $M.55, $M.57, $M.58, $M.16, $M.14, $M.15, $M.21, $M.20, $M.22, $M.19, $M.23, $M.73, $M.26, $M.3, $M.6, $M.5, $M.4, $M.94, $CurrAddr, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $i176: i1;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $i200: i1;
  var $i201: i1;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $i209: i32;
  var $i210: i32;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i1;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i1;
  var $i230: i32;
  var $i231: i1;
  var $i232: i1;
  var $i233: i1;
  var $i234: i1;
  var $i235: i1;
  var $i236: i1;
  var $i237: i1;
  var $i238: i1;
  var $i239: i1;
  var $i240: i1;
  var $i241: i1;
  var $i242: i1;
  var $i243: i1;
  var $i244: i1;
  var $i245: i1;
  var $i246: i1;
  var $i247: i1;
  var $i248: i1;
  var $i249: i1;
  var $i250: i1;
  var $i251: i1;
  var $i252: i1;
  var $i253: i1;
  var $i254: i1;
  var $i255: i1;
  var $i256: i1;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i261: i32;
  var $i262: i1;
  var $p263: ref;
  var $p264: ref;
  var $i266: i32;
  var $i267: i1;
  var $p268: ref;
  var $p269: ref;
  var $i271: i32;
  var $i272: i1;
  var $p273: ref;
  var $i274: i64;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $i285: i32;
  var $i286: i1;
  var $p287: ref;
  var $p288: ref;
  var $i290: i32;
  var $i291: i1;
  var $p292: ref;
  var $i293: i32;
  var $i295: i32;
  var $i296: i1;
  var $p297: ref;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $p302: ref;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $p307: ref;
  var $i309: i32;
  var $i310: i1;
  var $p311: ref;
  var $i313: i32;
  var $i314: i1;
  var $p315: ref;
  var $p316: ref;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $i326: i32;
  var $i327: i1;
  var $p328: ref;
  var $i330: i32;
  var $i331: i1;
  var $p332: ref;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $i338: i32;
  var $i339: i1;
  var $p340: ref;
  var $i342: i32;
  var $i343: i1;
  var $p344: ref;
  var $p345: ref;
  var $i347: i32;
  var $i348: i1;
  var $p349: ref;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $p354: ref;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $p359: ref;
  var $i361: i32;
  var $i362: i1;
  var $p363: ref;
  var $i365: i32;
  var $i366: i1;
  var $p367: ref;
  var $i368: i32;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i64;
  var vslice_dummy_var_257: i64;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;

  $bb0:
    call {:si_unique_call 941} $initialize();
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 1} true;
    call {:si_unique_call 942} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 947} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 948} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    call {:si_unique_call 949} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $p5 := ldv_zalloc(184);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 951} $i7 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 952} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i7);
    call {:si_unique_call 953} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $p8 := ldv_zalloc(16);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $p10 := ldv_zalloc(144);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p12 := ldv_zalloc(4);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p14 := ldv_zalloc(4);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $p16 := ldv_zalloc(32);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $p18 := ldv_zalloc(1800);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $p20 := ldv_zalloc(140);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $p22 := ldv_zalloc(1);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p23 := ldv_zalloc(1);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $p24 := ldv_zalloc(1);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $p25 := ldv_zalloc(1);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 1} true;
    call {:si_unique_call 965} $i26 := __VERIFIER_nondet_uint();
    call {:si_unique_call 966} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i26);
    call {:si_unique_call 967} {:cexpr "tmp___13"} boogie_si_record_i32($i26);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $p27 := ldv_zalloc(1);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p28 := ldv_zalloc(1);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $p29 := ldv_zalloc(1);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p30 := ldv_zalloc(140);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p32 := ldv_zalloc(64);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p34 := ldv_zalloc(1);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $p35 := ldv_zalloc(1);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $p36 := ldv_zalloc(1);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $p37 := ldv_zalloc(1);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $p38 := ldv_zalloc(1);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $p39 := ldv_zalloc(44);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $p41 := ldv_zalloc(1);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $p42 := ldv_zalloc(8);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $p44 := ldv_zalloc(4);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p46 := ldv_zalloc(1);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p47 := ldv_zalloc(1);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $p48 := ldv_zalloc(1);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p49 := ldv_zalloc(1);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $p50 := ldv_zalloc(20);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $p52 := ldv_zalloc(104);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $p54 := ldv_zalloc(1);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p55 := ldv_zalloc(80);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p57 := ldv_zalloc(1);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p58 := ldv_zalloc(1);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p59 := ldv_zalloc(1);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p60 := ldv_zalloc(1);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p61 := ldv_zalloc(52);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $p63 := ldv_zalloc(1);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} ldv_initialize();
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p0);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.39;
    call {:si_unique_call 997} cmdloc_dummy_var_58 := $memset.i8(cmdloc_dummy_var_57, $p64, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.39 := cmdloc_dummy_var_58;
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p1);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.40;
    call {:si_unique_call 998} cmdloc_dummy_var_60 := $memset.i8(cmdloc_dummy_var_59, $p65, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.40 := cmdloc_dummy_var_60;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p2);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.41;
    call {:si_unique_call 999} cmdloc_dummy_var_62 := $memset.i8(cmdloc_dummy_var_61, $p66, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.41 := cmdloc_dummy_var_62;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p3);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.42;
    call {:si_unique_call 1000} cmdloc_dummy_var_64 := $memset.i8(cmdloc_dummy_var_63, $p67, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.42 := cmdloc_dummy_var_64;
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.45 := 0;
    call {:si_unique_call 1003} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1006} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1007} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1009} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $i91, $i92, $p93, $i95, $i96, $p97, $i99, $i100, $i101, $i102, $p103, $i105, $i106, $p107, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $p119, $i121, $i122, $p123, $i125, $i126, $i127, $i128, $i129, $i130, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $p142, $i144, $i145, $p146, $i148, $i149, $p150, $p151, $i152, $i153, $i154, $i155, $p156, $p157, $i158, $i159, $p160, $p161, $i162, $i163, $p164, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $p180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $p190, $i191, $i192, $i193, $i194, $p195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $p259, $i261, $i262, $p263, $p264, $i266, $i267, $p268, $p269, $i271, $i272, $p273, $i274, $i276, $i277, $p278, $i280, $i281, $p282, $p283, $i285, $i286, $p287, $p288, $i290, $i291, $p292, $i293, $i295, $i296, $p297, $i299, $i300, $p301, $p302, $i304, $i305, $p306, $p307, $i309, $i310, $p311, $i313, $i314, $p315, $p316, $i318, $i319, $p320, $i322, $i323, $p324, $i326, $i327, $p328, $i330, $i331, $p332, $i334, $i335, $p336, $i338, $i339, $p340, $i342, $i343, $p344, $p345, $i347, $i348, $p349, $i351, $i352, $p353, $p354, $i356, $i357, $p358, $p359, $i361, $i362, $p363, $i365, $i366, $p367, $i368, vslice_dummy_var_251, vslice_dummy_var_252, vslice_dummy_var_253, vslice_dummy_var_254, vslice_dummy_var_255, vslice_dummy_var_256, vslice_dummy_var_257, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286 := main_loop_$bb1($p0, $p1, $p2, $p3, $i4, $p6, $i7, $p9, $p11, $p13, $p15, $p17, $p19, $p21, $p22, $p23, $p24, $p25, $i26, $p27, $p28, $p29, $p31, $p33, $p34, $p35, $p36, $p37, $p38, $p40, $p41, $p43, $p45, $p46, $p47, $p48, $p49, $p51, $p53, $p54, $p56, $p57, $p58, $p59, $p60, $p62, $p63, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $i91, $i92, $p93, $i95, $i96, $p97, $i99, $i100, $i101, $i102, $p103, $i105, $i106, $p107, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $p119, $i121, $i122, $p123, $i125, $i126, $i127, $i128, $i129, $i130, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $p142, $i144, $i145, $p146, $i148, $i149, $p150, $p151, $i152, $i153, $i154, $i155, $p156, $p157, $i158, $i159, $p160, $p161, $i162, $i163, $p164, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $p180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $p190, $i191, $i192, $i193, $i194, $p195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $p259, $i261, $i262, $p263, $p264, $i266, $i267, $p268, $p269, $i271, $i272, $p273, $i274, $i276, $i277, $p278, $i280, $i281, $p282, $p283, $i285, $i286, $p287, $p288, $i290, $i291, $p292, $i293, $i295, $i296, $p297, $i299, $i300, $p301, $p302, $i304, $i305, $p306, $p307, $i309, $i310, $p311, $i313, $i314, $p315, $p316, $i318, $i319, $p320, $i322, $i323, $p324, $i326, $i327, $p328, $i330, $i331, $p332, $i334, $i335, $p336, $i338, $i339, $p340, $i342, $i343, $p344, $p345, $i347, $i348, $p349, $i351, $i352, $p353, $p354, $i356, $i357, $p358, $p359, $i361, $i362, $p363, $i365, $i366, $p367, $i368, vslice_dummy_var_251, vslice_dummy_var_252, vslice_dummy_var_253, vslice_dummy_var_254, vslice_dummy_var_255, vslice_dummy_var_256, vslice_dummy_var_257, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i68, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i68, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i68, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} ldv_stop();
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb69_dummy;

  $bb9:
    assume $i72 == 1;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i228 := $M.51;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb200:
    assume $i229 == 1;
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} $i230 := __VERIFIER_nondet_int();
    call {:si_unique_call 1103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i230);
    call {:si_unique_call 1104} {:cexpr "tmp___49"} boogie_si_record_i32($i230);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i231 := $slt.i32($i230, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    $i232 := $slt.i32($i230, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    $i233 := $slt.i32($i230, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    $i234 := $slt.i32($i230, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    $i235 := $slt.i32($i230, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i230, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} ldv_stop();
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb213:
    assume $i236 == 1;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i365 := $M.51;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i365, 1);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb329:
    assume $i366 == 1;
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p367 := $M.32;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.42, $p3);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} vslice_dummy_var_286 := vidioc_streamon($p367, $p22, $i368);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1154} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb211:
    assume $i235 == 1;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i361 := $M.51;
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 1);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb326:
    assume $i362 == 1;
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p363 := $M.32;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} vslice_dummy_var_285 := vidioc_s_input($p363, $p47, $i26);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1152} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb209:
    assume $i234 == 1;
    assume {:verifier.code 0} true;
    $i237 := $slt.i32($i230, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i237 == 1);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i356 := $M.51;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i356, 1);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb323:
    assume $i357 == 1;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p358 := $M.32;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p359 := $M.37;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} vslice_dummy_var_284 := vidioc_s_parm($p358, $p37, $p359);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1150} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb216:
    assume $i237 == 1;
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i351 := $M.51;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 1);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb320:
    assume $i352 == 1;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p353 := $M.36;
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p354 := $M.34;
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} vslice_dummy_var_283 := v4l2_ctrl_subscribe_event($p353, $p354);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1148} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb207:
    assume $i233 == 1;
    assume {:verifier.code 0} true;
    $i238 := $slt.i32($i230, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    $i239 := $slt.i32($i230, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i239 == 1);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i347 := $M.51;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 1);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb317:
    assume $i348 == 1;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p349 := $M.32;
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} vslice_dummy_var_282 := vidioc_enum_input($p349, $p36, $p56);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1146} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb220:
    assume $i239 == 1;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i342 := $M.51;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i342, 1);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb314:
    assume $i343 == 1;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p344 := $M.32;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p345 := $M.37;
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} vslice_dummy_var_281 := vidioc_g_parm($p344, $p60, $p345);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1144} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb218:
    assume $i238 == 1;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i338 := $M.51;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i339 := $eq.i32($i338, 1);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb311:
    assume $i339 == 1;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p340 := $M.32;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} vslice_dummy_var_280 := vidioc_g_jpegcomp($p340, $p63, $p21);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1142} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb205:
    assume $i232 == 1;
    assume {:verifier.code 0} true;
    $i240 := $slt.i32($i230, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    $i241 := $slt.i32($i230, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    $i242 := $slt.i32($i230, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i242 == 1);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i334 := $M.51;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 1);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb308:
    assume $i335 == 1;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p336 := $M.32;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} vslice_dummy_var_279 := vidioc_g_std($p336, $p58, $p43);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1140} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb226:
    assume $i242 == 1;
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i330 := $M.51;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i330, 1);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb305:
    assume $i331 == 1;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p332 := $M.32;
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} vslice_dummy_var_278 := vidioc_enum_frameintervals($p332, $p24, $p62);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1138} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb224:
    assume $i241 == 1;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i326 := $M.51;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i326, 1);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb302:
    assume $i327 == 1;
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p328 := $M.32;
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} vslice_dummy_var_277 := vidioc_s_jpegcomp($p328, $p59, $p31);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1136} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb222:
    assume $i240 == 1;
    assume {:verifier.code 0} true;
    $i243 := $slt.i32($i230, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    $i244 := $slt.i32($i230, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i244 == 1);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i322 := $M.51;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb299:
    assume $i323 == 1;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p324 := $M.32;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} vslice_dummy_var_276 := vidioc_querycap($p324, $p54, $p53);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1134} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb230:
    assume $i244 == 1;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i318 := $M.51;
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 1);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb296:
    assume $i319 == 1;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p320 := $M.32;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} vslice_dummy_var_275 := vidioc_enum_framesizes($p320, $p28, $p40);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1132} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb228:
    assume $i243 == 1;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i313 := $M.51;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 1);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb293:
    assume $i314 == 1;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p315 := $M.32;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p316 := $M.35;
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_274 := vidioc_qbuf($p315, $p57, $p316);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1130} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb203:
    assume $i231 == 1;
    assume {:verifier.code 0} true;
    $i245 := $slt.i32($i230, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    $i246 := $slt.i32($i230, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    $i247 := $slt.i32($i230, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    $i248 := $slt.i32($i230, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i248 == 1);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i309 := $M.51;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 1);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb290:
    assume $i310 == 1;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p311 := $M.32;
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} vslice_dummy_var_273 := vidioc_g_input($p311, $p23, $p45);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1128} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb238:
    assume $i248 == 1;
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i304 := $M.51;
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 1);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb287:
    assume $i305 == 1;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p306 := $M.32;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p307 := $M.33;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} vslice_dummy_var_272 := vidioc_g_fmt_vid_cap($p306, $p35, $p307);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1126} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb236:
    assume $i247 == 1;
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i299 := $M.51;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 1);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb284:
    assume $i300 == 1;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p301 := $M.32;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p302 := $M.33;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} vslice_dummy_var_271 := vidioc_s_fmt_vid_cap($p301, $p38, $p302);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1124} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb234:
    assume $i246 == 1;
    assume {:verifier.code 0} true;
    $i249 := $slt.i32($i230, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    $i250 := $slt.i32($i230, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i250 == 1);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i295 := $M.51;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 1);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb281:
    assume $i296 == 1;
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p297 := $M.32;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} vslice_dummy_var_270 := vidioc_enum_fmt_vid_cap($p297, $p48, $p33);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1122} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb242:
    assume $i250 == 1;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i290 := $M.51;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i290, 1);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb278:
    assume $i291 == 1;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p292 := $M.32;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.41, $p2);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} vslice_dummy_var_269 := vidioc_streamoff($p292, $p34, $i293);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1120} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb240:
    assume $i249 == 1;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i285 := $M.51;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, 1);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb275:
    assume $i286 == 1;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p287 := $M.32;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p288 := $M.35;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} vslice_dummy_var_268 := vidioc_dqbuf($p287, $p41, $p288);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1118} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb232:
    assume $i245 == 1;
    assume {:verifier.code 0} true;
    $i251 := $slt.i32($i230, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    $i252 := $slt.i32($i230, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    $i253 := $slt.i32($i230, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i253 == 1);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i280 := $M.51;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 1);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb272:
    assume $i281 == 1;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p282 := $M.32;
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p283 := $M.35;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} vslice_dummy_var_267 := vidioc_querybuf($p282, $p49, $p283);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb248:
    assume $i253 == 1;
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i276 := $M.51;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 1);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb269:
    assume $i277 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p278 := $M.32;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_266 := v4l2_ctrl_log_status($p278, $p46);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1114} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb246:
    assume $i252 == 1;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i271 := $M.51;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 1);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb266:
    assume $i272 == 1;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p273 := $M.32;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i274 := $load.i64($M.40, $p1);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} vslice_dummy_var_265 := vidioc_s_std($p273, $p25, $i274);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1112} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb244:
    assume $i251 == 1;
    assume {:verifier.code 0} true;
    $i254 := $slt.i32($i230, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    $i255 := $slt.i32($i230, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i255 == 1);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i266 := $M.51;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 1);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb263:
    assume $i267 == 1;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p268 := $M.32;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p269 := $M.33;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_264 := vidioc_try_fmt_vid_cap($p268, $p29, $p269);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1110} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb252:
    assume $i255 == 1;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i261 := $M.51;
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 1);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb260:
    assume $i262 == 1;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p263 := $M.36;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p264 := $M.34;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_263 := v4l2_event_unsubscribe($p263, $p264);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1108} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb250:
    assume $i254 == 1;
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i230, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb215;

  $bb254:
    assume $i256 == 1;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i257 := $M.51;
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 1);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb256:
    assume $i258 == 1;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p259 := $M.32;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} vslice_dummy_var_262 := vidioc_reqbufs($p259, $p27, $p51);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1106} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb7:
    assume $i71 == 1;
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i211 := $M.50;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i212 := $ne.i32($i211, 0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb170:
    assume $i212 == 1;
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1083} $i213 := __VERIFIER_nondet_int();
    call {:si_unique_call 1084} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i213);
    call {:si_unique_call 1085} {:cexpr "tmp___48"} boogie_si_record_i32($i213);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i214 := $slt.i32($i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} ldv_stop();
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb175:
    assume $i215 == 1;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i221 := $M.50;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb188:
    assume $i222 == 1;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i223 := s2255_driver_init();
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $M.56 := $i223;
    call {:si_unique_call 1090} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i223);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i224 := $M.56;
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 0);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i226 := $M.56;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, 0);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb193:
    assume $i227 == 1;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1100} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb190:
    assume $i225 == 1;
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1091} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1092} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} ldv_initialize_v4l2_ioctl_ops_5();
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1094} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} ldv_videobuf_queue_ops_7();
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1096} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1097} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1098} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} ldv_initialize_v4l2_file_operations_6();
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb173:
    assume $i214 == 1;
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i213, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i216 == 1);
    goto $bb177;

  $bb178:
    assume $i216 == 1;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i217 := $M.50;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 3);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb180:
    assume $i218 == 1;
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i219 := $M.49;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 0);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i220 == 1);
    goto $bb182;

  $bb183:
    assume $i220 == 1;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} s2255_driver_exit();
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1087} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb5:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i68, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i73 == 1);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i196 := $M.48;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb150:
    assume $i197 == 1;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1073} $i198 := __VERIFIER_nondet_int();
    call {:si_unique_call 1074} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i198);
    call {:si_unique_call 1075} {:cexpr "tmp___47"} boogie_si_record_i32($i198);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i199 := $slt.i32($i198, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i198, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} ldv_stop();
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb155:
    assume $i200 == 1;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i206 := $M.48;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 1);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb164:
    assume $i207 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} vslice_dummy_var_261 := ldv_probe_4();
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1080} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i209 := $M.49;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i209, 1);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.49 := $i210;
    call {:si_unique_call 1081} {:cexpr "ref_cnt"} boogie_si_record_i32($i210);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb153:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i198, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i201 == 1);
    goto $bb157;

  $bb158:
    assume $i201 == 1;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i202 := $M.48;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 2);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb160:
    assume $i203 == 1;
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} s2255_video_device_release($p19);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1077} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i204 := $M.49;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i205 := $sub.i32($i204, 1);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.49 := $i205;
    call {:si_unique_call 1078} {:cexpr "ref_cnt"} boogie_si_record_i32($i205);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb12:
    assume $i73 == 1;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i193 := $M.47;
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb147:
    assume $i194 == 1;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p195 := $M.17;
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} choose_timer_1($p195);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb3:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i68, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i68, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i75 == 1);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i172 := $M.46;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb121:
    assume $i173 == 1;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1061} $i174 := __VERIFIER_nondet_int();
    call {:si_unique_call 1062} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i174);
    call {:si_unique_call 1063} {:cexpr "tmp___46"} boogie_si_record_i32($i174);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i175 := $slt.i32($i174, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i174, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !($i176 == 1);
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} ldv_stop();
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb126:
    assume $i176 == 1;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i186 := $M.46;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 2);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb138:
    assume $i187 == 1;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i188 := $M.55;
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 0);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb140;

  $bb141:
    assume $i189 == 1;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p190 := $M.28;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} s2255_disconnect($p190);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1069} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i191 := $M.49;
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i192 := $sub.i32($i191, 1);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.49 := $i192;
    call {:si_unique_call 1070} {:cexpr "ref_cnt"} boogie_si_record_i32($i192);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb124:
    assume $i175 == 1;
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i174, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i177 == 1);
    goto $bb128;

  $bb129:
    assume $i177 == 1;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i178 := $M.46;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 1);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb131:
    assume $i179 == 1;
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p180 := $M.28;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i181 := s2255_probe($p180, $p17);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.54 := $i181;
    call {:si_unique_call 1065} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i181);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i182 := $M.54;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 0);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb133:
    assume $i183 == 1;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i184 := $M.49;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i185 := $add.i32($i184, 1);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.49 := $i185;
    call {:si_unique_call 1067} {:cexpr "ref_cnt"} boogie_si_record_i32($i185);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb16:
    assume $i75 == 1;
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i132 := $M.45;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb82:
    assume $i133 == 1;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} $i134 := __VERIFIER_nondet_int();
    call {:si_unique_call 1043} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i134);
    call {:si_unique_call 1044} {:cexpr "tmp___45"} boogie_si_record_i32($i134);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i134, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i134, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i134, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} ldv_stop();
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb89:
    assume $i137 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i162 := $M.45;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 1);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb112:
    assume $i163 == 1;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p164 := $M.30;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p165 := $M.31;
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.39, $p0);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i167 := buffer_prepare($p164, $p165, $i166);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.53 := $i167;
    call {:si_unique_call 1057} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i167);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i168 := $M.53;
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 0);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb114:
    assume $i169 == 1;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1058} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i170 := $M.49;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i171 := $add.i32($i170, 1);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.49 := $i171;
    call {:si_unique_call 1059} {:cexpr "ref_cnt"} boogie_si_record_i32($i171);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb87:
    assume $i136 == 1;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i154 := $M.45;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 1);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i158 := $M.45;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 2);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb109:
    assume $i159 == 1;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p160 := $M.30;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p161 := $M.31;
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} buffer_queue($p160, $p161);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1055} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb106:
    assume $i155 == 1;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p156 := $M.30;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p157 := $M.31;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} buffer_queue($p156, $p157);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb85:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i134, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i138 == 1);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i148 := $M.45;
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 2);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb103:
    assume $i149 == 1;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p150 := $M.30;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p151 := $M.31;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} buffer_release($p150, $p151);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1050} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i152 := $M.49;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i153 := $sub.i32($i152, 1);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.49 := $i153;
    call {:si_unique_call 1051} {:cexpr "ref_cnt"} boogie_si_record_i32($i153);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb92:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i134, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb91;

  $bb94:
    assume $i139 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i140 := $M.45;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 1);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i144 := $M.45;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 2);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume $i145 == 1;
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p146 := $M.30;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_260 := buffer_setup($p146, $p13, $p15);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1048} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb96:
    assume $i141 == 1;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p142 := $M.30;
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_259 := buffer_setup($p142, $p13, $p15);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1046} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb14:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i76 == 1);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i125 := $M.44;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb70:
    assume $i126 == 1;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1036} $i127 := __VERIFIER_nondet_int();
    call {:si_unique_call 1037} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i127);
    call {:si_unique_call 1038} {:cexpr "tmp___44"} boogie_si_record_i32($i127);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} ldv_stop();
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb73:
    assume $i128 == 1;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i129 := $M.44;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i130 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_258 := s2255_s_ctrl($p11);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1040} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb18:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i68, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb11;

  $bb20:
    assume $i77 == 1;
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i78 := $M.43;
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb22:
    assume $i79 == 1;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1013} $i80 := __VERIFIER_nondet_int();
    call {:si_unique_call 1014} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i80);
    call {:si_unique_call 1015} {:cexpr "tmp___43"} boogie_si_record_i32($i80);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i80, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i80, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i80, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_stop();
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb31:
    assume $i84 == 1;
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i117 := $M.43;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i121 := $M.43;
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 2);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb63:
    assume $i122 == 1;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p123 := $M.38;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_257 := video_ioctl2($p123, $i4, $i7);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1034} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i118 == 1;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p119 := $M.38;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_256 := video_ioctl2($p119, $i4, $i7);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb29:
    assume $i83 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i109 := $M.43;
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb54:
    assume $i110 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p111 := $M.38;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i112 := s2255_open($p111);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $M.52 := $i112;
    call {:si_unique_call 1028} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i112);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i113 := $M.52;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i114 == 1;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1029} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i115 := $M.49;
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, 1);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.49 := $i116;
    call {:si_unique_call 1030} {:cexpr "ref_cnt"} boogie_si_record_i32($i116);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb27:
    assume $i82 == 1;
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i101 := $M.43;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i105 := $M.43;
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 2);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb51:
    assume $i106 == 1;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p107 := $M.38;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_255 := s2255_poll($p107, $p9);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i102 == 1;
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p103 := $M.38;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_254 := s2255_poll($p103, $p9);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb25:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i80, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i85 == 1);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i95 := $M.43;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45:
    assume $i96 == 1;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p97 := $M.38;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} vslice_dummy_var_253 := s2255_release($p97);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1021} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i99 := $M.49;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i99, 1);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $M.49 := $i100;
    call {:si_unique_call 1022} {:cexpr "ref_cnt"} boogie_si_record_i32($i100);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb34:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i80, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb33;

  $bb36:
    assume $i86 == 1;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i87 := $M.43;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i91 := $M.43;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 2);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i92 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p93 := $M.38;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_252 := s2255_mmap_v4l($p93, $p6);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1019} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i88 == 1;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p89 := $M.38;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_251 := s2255_mmap_v4l($p89, $p6);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb69_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} $i68 := __VERIFIER_nondet_int();
    call {:si_unique_call 1011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i68);
    call {:si_unique_call 1012} {:cexpr "tmp___42"} boogie_si_record_i32($i68);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 474831);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 475863);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_probe_4: ref;

axiom ldv_probe_4 == $sub.ref(0, 476895);

procedure ldv_probe_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1157} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1158} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const s2255_driver_exit: ref;

axiom s2255_driver_exit == $sub.ref(0, 477927);

procedure s2255_driver_exit();
  free requires assertsPassed;
  modifies $M.46;



implementation s2255_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} ldv_usb_deregister_23(s2255_driver);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    return;
}



const s2255_driver_init: ref;

axiom s2255_driver_init == $sub.ref(0, 478959);

procedure s2255_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.55, $M.28, $M.0, $CurrAddr;



implementation s2255_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i0 := ldv_usb_register_driver_22(s2255_driver, __this_module, .str.139);
    call {:si_unique_call 1161} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 479991);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p0 := $M.16;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.14;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $M.15;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} ldv_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $M.57;
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $M.58;
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_register_driver_22: ref;

axiom ldv_usb_register_driver_22 == $sub.ref(0, 481023);

procedure ldv_usb_register_driver_22($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.55, $M.28, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_22($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1168} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1169} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 1170} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} ldv_usb_driver_2();
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 482055);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1172} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1173} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_23: ref;

axiom ldv_usb_deregister_23 == $sub.ref(0, 483087);

procedure ldv_usb_deregister_23($p0: ref);
  free requires assertsPassed;
  modifies $M.46;



implementation ldv_usb_deregister_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} usb_deregister($p0);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1175} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 484119);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 485151);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1176} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 1} true;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 486183);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 487215);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 488247);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 489279);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 490311);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 491343);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 492375);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 493407);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 494439);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 495471);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 496503);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 497535);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 498567);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1178} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1179} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1180} __VERIFIER_assume($i4);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 499599);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 500631);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 501663);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 502695);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1181} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1182} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1183} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1184} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1185} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1186} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1187} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1188} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1189} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1190} __VERIFIER_assume($i7);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1191} __VERIFIER_assume($i11);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 503727);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 504759);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1192} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1193} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1194} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1195} __VERIFIER_assume($i4);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 505791);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 506823);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 507855);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 508887);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 509919);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1196} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1197} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1198} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1199} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1200} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1201} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1202} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1203} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1204} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1205} __VERIFIER_assume($i7);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1206} __VERIFIER_assume($i11);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 510951);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 511983);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 513015);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 514047);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 515079);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 516111);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 517143);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 518175);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 519207);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1207} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1208} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1209} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 520239);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1210} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1211} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1212} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 521271);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1213} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1214} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 522303);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 523335);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1215} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1216} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 524367);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 525399);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 526431);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1217} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1218} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1219} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1220} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $p6 := malloc($i5);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.0;
    call {:si_unique_call 1222} cmdloc_dummy_var_66 := $memset.i8(cmdloc_dummy_var_65, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_66;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 527463);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 528495);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.18, $M.28, $M.17, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.16, $M.14, $M.15, $M.21, $M.20, $M.22, $M.19, $M.0, $M.23, $M.73, $M.26, $M.3, $M.6, $M.5, $M.4, $M.94;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1223} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.18 := 0;
    call {:si_unique_call 1224} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(0);
    $M.28 := $0.ref;
    $M.17 := $0.ref;
    $M.30 := $0.ref;
    $M.31 := $0.ref;
    $M.32 := $0.ref;
    $M.33 := $0.ref;
    $M.34 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.38 := $0.ref;
    $M.43 := 0;
    call {:si_unique_call 1225} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1226} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1227} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1228} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1229} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1230} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1231} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1232} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1233} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1234} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1235} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1236} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1237} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1238} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1239} {:cexpr "INTERF_STATE"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1240} {:cexpr "SERIAL_STATE"} boogie_si_record_i32(0);
    $M.16 := $0.ref;
    $M.14 := $0.ref;
    $M.15 := 0;
    call {:si_unique_call 1241} {:cexpr "dev_counter"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 1242} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 1243} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    $M.22 := $0.ref;
    $M.19 := $0.ref;
    $M.0 := $store.i32($M.0, pal_sizes, 704);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(4, 1)), 576);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(0, 1)), 704);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(4, 1)), 288);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(0, 1)), 352);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(4, 1)), 288);
    $M.0 := $store.i32($M.0, ntsc_sizes, 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(0, 1)), 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(0, 1)), 320);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(4, 1)), 240);
    $M.23 := 1;
    call {:si_unique_call 1244} {:cexpr "jpeg_enable"} boogie_si_record_i32(1);
    $M.0 := $store.i16($M.0, s2255_table, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(2, 1)), 6467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 8789);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(2, 1)), 6467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 8791);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.73 := $store.ref($M.73, s2255_driver, .str.138);
    $M.73 := $store.ref($M.73, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), s2255_probe);
    $M.73 := $store.ref($M.73, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), s2255_disconnect);
    $M.73 := $store.ref($M.73, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), s2255_table);
    $M.73 := $store.i32($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i32($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i32($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.73 := $store.i32($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.73 := $store.i32($M.73, $add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 0);
    $M.0 := $store.ref($M.0, s2255_ioctl_ops, vidioc_querycap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(24, 1)), vidioc_enum_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(64, 1)), vidioc_g_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(144, 1)), vidioc_s_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(224, 1)), vidioc_try_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(304, 1)), vidioc_reqbufs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(312, 1)), vidioc_querybuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(320, 1)), vidioc_qbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(336, 1)), vidioc_dqbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(384, 1)), vidioc_streamon);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(392, 1)), vidioc_streamoff);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(400, 1)), vidioc_g_std);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(408, 1)), vidioc_s_std);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(424, 1)), vidioc_enum_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(432, 1)), vidioc_g_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(440, 1)), vidioc_s_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(616, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(624, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(632, 1)), vidioc_g_jpegcomp);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(640, 1)), vidioc_s_jpegcomp);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(688, 1)), vidioc_g_parm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(696, 1)), vidioc_s_parm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(704, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(712, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(720, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(728, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(752, 1)), v4l2_ctrl_log_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(776, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(784, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(792, 1)), vidioc_enum_framesizes);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(800, 1)), vidioc_enum_frameintervals);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(808, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(816, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(824, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(832, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(840, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(848, 1)), v4l2_ctrl_subscribe_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(856, 1)), v4l2_event_unsubscribe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 872)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.ref($M.0, s2255_fops_v4l, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 88)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 88)), $mul.ref(24, 1)), s2255_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 88)), $mul.ref(40, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 88)), $mul.ref(64, 1)), s2255_mmap_v4l);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 88)), $mul.ref(72, 1)), s2255_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 88)), $mul.ref(80, 1)), s2255_release);
    $M.0 := $store.ref($M.0, template, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(128, 1)), s2255_fops_v4l);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(529, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1128, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1144, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1208, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1216, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1220, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1368, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1376, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1377, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1560, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(5, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1600, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1604, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1608, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1612, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1616, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1624, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1720, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1728, 1)), 16777215);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1736, 1)), s2255_video_device_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1744, 1)), s2255_ioctl_ops);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1808)), $mul.ref(1800, 1)), $0.ref);
    $M.26 := $sub.i32(0, 1);
    call {:si_unique_call 1245} {:cexpr "video_nr"} boogie_si_record_i32($sub.i32(0, 1));
    $M.3 := 16;
    call {:si_unique_call 1246} {:cexpr "vid_limit"} boogie_si_record_i32(16);
    $M.0 := $store.ref($M.0, formats, .str.30);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(0, 16)), $mul.ref(8, 1)), 1448695129);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(0, 16)), $mul.ref(12, 1)), 16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.31);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(1, 16)), $mul.ref(8, 1)), 1498831189);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(1, 16)), $mul.ref(12, 1)), 16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(2, 16)), $mul.ref(0, 1)), .str.32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(2, 16)), $mul.ref(8, 1)), 1345466932);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(2, 16)), $mul.ref(12, 1)), 16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(3, 16)), $mul.ref(0, 1)), .str.33);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(3, 16)), $mul.ref(8, 1)), 1497715271);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(3, 16)), $mul.ref(12, 1)), 8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(4, 16)), $mul.ref(0, 1)), .str.34);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(4, 16)), $mul.ref(8, 1)), 1195724874);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(4, 16)), $mul.ref(12, 1)), 24);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(5, 16)), $mul.ref(0, 1)), .str.35);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(5, 16)), $mul.ref(8, 1)), 1196444237);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(5, 16)), $mul.ref(12, 1)), 24);
    $M.6 := $store.i64($M.6, G_chnmap, 3);
    $M.6 := $store.i64($M.6, $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref(1, 8)), 2);
    $M.6 := $store.i64($M.6, $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref(2, 8)), 1);
    $M.6 := $store.i64($M.6, $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref(3, 8)), 0);
    $M.5 := 0;
    call {:si_unique_call 1247} {:cexpr "debug"} boogie_si_record_i32(0);
    $M.4 := debug;
    $M.0 := $store.i8($M.0, .str.30, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(1, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(3, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(5, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(10, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(13, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(15, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(16, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(17, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(18, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(1, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(3, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(5, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(10, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(13, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(15, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(16, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(17, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(18, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(1, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(3, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(5, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(13, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(15, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(16, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(17, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(18, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(19, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(20, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(21, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(5, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(6, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(7, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(8, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.34, 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 4)), $mul.ref(1, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 4)), $mul.ref(2, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.35, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(1, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(2, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(3, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.128, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(13, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(18, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.4, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(1, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(6, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.24, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(6, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(7, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(9, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.164, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 10)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 10)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 10)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 10)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 10)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.165, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 8)), $mul.ref(1, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 8)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 8)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 8)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 8)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.138, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 6)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 6)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 6)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 6)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.94 := $store.i8($M.94, .str.155, 117);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.114, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    call {:si_unique_call 1248} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 529527);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 530559);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 531591);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(read_pipe_completion, $p0);
    assume {:branchcond $i8} true;
    goto $bb17, $bb15;

  $bb15:
    assume !($i8 == 1);
    $i7 := $eq.ref(s2255_fwchunk_complete, $p0);
    assume {:branchcond $i7} true;
    goto $bb16, $bb13;

  $bb13:
    assume !($i7 == 1);
    $i6 := $eq.ref(read_pipe_completion, $p0);
    assume {:branchcond $i6} true;
    goto $bb14, $bb11;

  $bb11:
    assume !($i6 == 1);
    $i5 := $eq.ref(s2255_fwchunk_complete, $p0);
    assume {:branchcond $i5} true;
    goto $bb12, $bb10;

  $bb10:
    assume !($i5 == 1);
    $i4 := $eq.ref(s2255_video_device_release, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i4 == 1);
    $i3 := $eq.ref(s2255_disconnect, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1249} s2255_disconnect($p1);
    return;

  $bb3:
    assume $i4 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1250} s2255_video_device_release($p2);
    return;

  $bb12:
    assume $i5 == 1;
    goto $bb6;

  $bb6:
    call {:si_unique_call 1253} s2255_fwchunk_complete(arg);
    return;

  $bb14:
    assume $i6 == 1;
    goto $bb7;

  $bb7:
    call {:si_unique_call 1254} read_pipe_completion(arg);
    return;

  $bb16:
    assume $i7 == 1;
    goto $bb6;

  $bb17:
    assume $i8 == 1;
    goto $bb7;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 532623);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(buffer_release, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(buffer_queue, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1255} buffer_queue($p1, $p2);
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1256} buffer_release($p3, $p4);
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 533655);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 534687);

procedure devirtbounce.5(funcPtr: ref, arg: i64);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.20, $M.19, $CurrAddr, $M.18, $M.16, $M.15, $M.14;



implementation devirtbounce.5(funcPtr: ref, arg: i64)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(s2255_timer, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1257} s2255_timer(arg);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.18, $M.28, $M.17, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.16, $M.14, $M.15, $M.21, $M.20, $M.22, $M.19, $M.0, $M.23, $M.73, $M.26, $M.3, $M.6, $M.5, $M.4, $M.94, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1258} __SMACK_static_init();
    call {:si_unique_call 1259} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.0, $M.52, $M.53, $M.17, $M.18, $M.54, $M.56, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.30, $M.31, $M.38, $M.8, $M.9, $M.10, $M.11, $M.12, $M.25, $M.24, $M.28, $M.55, $M.57, $M.58, $M.16, $M.14, $M.15, $M.21, $M.20, $M.22, $M.19, $M.23, $M.73, $M.26, $M.3, $M.6, $M.5, $M.4, $M.94, $CurrAddr;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation s2255_set_mode_loop_$bb28(in_$p2: ref, in_$p95: ref, in_$p96: ref, in_$i101: i64, in_$i100: i64, in_$i103: i64, in_$i104: i1, in_$i105: i64, in_$i106: i32, in_$i107: i1) returns (out_$i101: i64, out_$i100: i64, out_$i103: i64, out_$i104: i1, out_$i105: i64, out_$i106: i32, out_$i107: i1)
{

  entry:
    out_$i101, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107 := in_$i101, in_$i100, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := out_$i103;
    goto $bb35_dummy;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$i101 := out_$i103;
    assume true;
    goto $bb35;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.0, in_$p96);
    goto corral_source_split_551;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} prepare_to_wait(in_$p95, in_$p2, 2);
    goto corral_source_split_550;

  $bb33:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i103;
    assume true;
    goto $bb33;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i64(out_$i103, 0);
    goto corral_source_split_546;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} out_$i103 := schedule_timeout(out_$i100);
    call {:si_unique_call 97} {:cexpr "__ret"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_545;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i101, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107 := s2255_set_mode_loop_$bb28(in_$p2, in_$p95, in_$p96, out_$i101, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107);
    return;

  exit:
    return;
}



procedure s2255_set_mode_loop_$bb28(in_$p2: ref, in_$p95: ref, in_$p96: ref, in_$i101: i64, in_$i100: i64, in_$i103: i64, in_$i104: i1, in_$i105: i64, in_$i106: i32, in_$i107: i1) returns (out_$i101: i64, out_$i100: i64, out_$i103: i64, out_$i104: i1, out_$i105: i64, out_$i106: i32, out_$i107: i1);



implementation {:SIextraRecBound 4} s2255_board_shutdown_loop_$bb11(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i19: i32, in_$i20: i1, in_$i13: i32, in_vslice_dummy_var_91: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i19: i32, out_$i20: i1, out_$i13: i32, out_vslice_dummy_var_91: i32)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i13, out_vslice_dummy_var_91 := in_$p14, in_$p15, in_$i16, in_$p17, in_$i19, in_$i20, in_$i13, in_vslice_dummy_var_91;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  $bb13:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i19;
    goto $bb13_dummy;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$i20 := $ule.i32(out_$i19, 3);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i13, 1);
    call {:si_unique_call 180} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} out_vslice_dummy_var_91 := s2255_release_sys_buffers(out_$p17);
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 2600));
    goto corral_source_split_918;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i13);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_916;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i13, out_vslice_dummy_var_91 := s2255_board_shutdown_loop_$bb11(in_$p0, out_$p14, out_$p15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i13, out_vslice_dummy_var_91);
    return;

  exit:
    return;
}



procedure s2255_board_shutdown_loop_$bb11(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i19: i32, in_$i20: i1, in_$i13: i32, in_vslice_dummy_var_91: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i19: i32, out_$i20: i1, out_$i13: i32, out_vslice_dummy_var_91: i32);
  modifies $M.0;



implementation {:SIextraRecBound 4} s2255_release_sys_buffers_loop_$bb4(in_$p0: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i14: i32, in_$i15: i1, in_$p19: ref, in_$p20: ref, in_$p25: ref, in_$p26: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i5: i64, in_vslice_dummy_var_103: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i14: i32, out_$i15: i1, out_$p19: ref, out_$p20: ref, out_$p25: ref, out_$p26: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i5: i64, out_vslice_dummy_var_103: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$i14, out_$i15, out_$p19, out_$p20, out_$p25, out_$p26, out_$p30, out_$i31, out_$i32, out_$i5, out_vslice_dummy_var_103 := in_$p9, in_$p10, in_$i11, in_$i12, in_$i14, in_$i15, in_$p19, in_$p20, in_$p25, in_$p26, in_$p30, in_$i31, in_$i32, in_$i5, in_vslice_dummy_var_103;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;

  $bb12:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i31;
    goto $bb12_dummy;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    out_$i32 := $ule.i64(out_$i31, 3);
    goto corral_source_split_1178;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i64(out_$i5, 1);
    call {:si_unique_call 237} {:cexpr "i"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_1177;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p30, $0.ref);
    goto corral_source_split_1176;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(out_$i5, 32)), $mul.ref(16, 1));
    goto corral_source_split_1175;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vfree(out_$p26);
    goto corral_source_split_1173;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_1172;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(out_$i5, 32)), $mul.ref(16, 1));
    goto corral_source_split_1171;

  $bb9:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} out_vslice_dummy_var_103 := printk.ref.ref(.str.132, out_$p20);
    goto corral_source_split_1169;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_1168;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(out_$i5, 32)), $mul.ref(16, 1));
    goto corral_source_split_1167;

  $bb8:
    assume out_$i15 == 1;
    goto corral_source_split_1166;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    out_$i15 := $sgt.i32(out_$i14, 0);
    goto corral_source_split_1164;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    out_$i14 := $M.5;
    goto corral_source_split_1163;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    goto corral_source_split_1162;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_1157;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(out_$i5, 32)), $mul.ref(16, 1));
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$i14, out_$i15, out_$p19, out_$p20, out_$p25, out_$p26, out_$p30, out_$i31, out_$i32, out_$i5, out_vslice_dummy_var_103 := s2255_release_sys_buffers_loop_$bb4(in_$p0, out_$p9, out_$p10, out_$i11, out_$i12, out_$i14, out_$i15, out_$p19, out_$p20, out_$p25, out_$p26, out_$p30, out_$i31, out_$i32, out_$i5, out_vslice_dummy_var_103);
    return;

  exit:
    return;
}



procedure s2255_release_sys_buffers_loop_$bb4(in_$p0: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i14: i32, in_$i15: i1, in_$p19: ref, in_$p20: ref, in_$p25: ref, in_$p26: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i5: i64, in_vslice_dummy_var_103: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i14: i32, out_$i15: i1, out_$p19: ref, out_$p20: ref, out_$p25: ref, out_$p26: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i5: i64, out_vslice_dummy_var_103: i32);
  modifies $M.0;



implementation __s2255_open_loop_$bb27(in_$p1: ref, in_$p8: ref, in_$p51: ref, in_$p54: ref, in_$i61: i64, in_$i60: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i71: i64, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i1) returns (out_$i61: i64, out_$i60: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i71: i64, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i1)
{

  entry:
    out_$i61, out_$i60, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77 := in_$i61, in_$i60, in_$p63, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1482;

  $bb37:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := out_$i69;
    goto $bb37_dummy;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i69;
    assume true;
    goto $bb37;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 2);
    goto corral_source_split_1507;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} out_$i76 := atomic_read(out_$p75);
    call {:si_unique_call 324} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_1506;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p74, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, in_$p54);
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} prepare_to_wait(out_$p73, in_$p1, 2);
    goto corral_source_split_1503;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p72, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1502;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, in_$p51);
    goto corral_source_split_1501;

  $bb35:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i69;
    assume true;
    goto $bb35;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i64(out_$i69, 0);
    goto corral_source_split_1497;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} out_$i69 := schedule_timeout(out_$i60);
    call {:si_unique_call 321} {:cexpr "__ret"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_1496;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i60;
    assume true;
    goto $bb31;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 4);
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} out_$i66 := atomic_read(out_$p65);
    call {:si_unique_call 319} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p64, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1483;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i61, out_$i60, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77 := __s2255_open_loop_$bb27(in_$p1, in_$p8, in_$p51, in_$p54, out_$i61, out_$i60, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77);
    return;

  exit:
    return;
}



procedure __s2255_open_loop_$bb27(in_$p1: ref, in_$p8: ref, in_$p51: ref, in_$p54: ref, in_$i61: i64, in_$i60: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i71: i64, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i1) returns (out_$i61: i64, out_$i60: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i71: i64, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i1);



implementation __s2255_open_loop_$bb57(in_$p2: ref, in_$p8: ref, in_$p120: ref, in_$p123: ref, in_$i130: i64, in_$i129: i64, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$i137: i64, in_$i138: i64, in_$i139: i1, in_$i140: i64, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i32, in_$i146: i1) returns (out_$i130: i64, out_$i129: i64, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$i137: i64, out_$i138: i64, out_$i139: i1, out_$i140: i64, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i32, out_$i146: i1)
{

  entry:
    out_$i130, out_$i129, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146 := in_$i130, in_$i129, in_$p132, in_$p133, in_$p134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_$p144, in_$i145, in_$i146;
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_1573;

  $bb67:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := out_$i138;
    goto $bb67_dummy;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    out_$i130 := out_$i138;
    assume true;
    goto $bb67;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 2);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} out_$i145 := atomic_read(out_$p144);
    call {:si_unique_call 344} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_1597;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p143, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1596;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, in_$p123);
    goto corral_source_split_1595;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} prepare_to_wait(out_$p142, in_$p2, 2);
    goto corral_source_split_1594;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(out_$p141, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1593;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, in_$p120);
    goto corral_source_split_1592;

  $bb65:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$i140 := out_$i138;
    assume true;
    goto $bb65;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i64(out_$i138, 0);
    goto corral_source_split_1588;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} out_$i138 := schedule_timeout(out_$i129);
    call {:si_unique_call 341} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i138);
    goto corral_source_split_1587;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    out_$i137 := out_$i129;
    assume true;
    goto $bb61;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 4);
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} out_$i135 := atomic_read(out_$p134);
    call {:si_unique_call 339} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i135);
    goto corral_source_split_1577;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p133, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.0, out_$p132);
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p8, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_1574;

  $bb67_dummy:
    call {:si_unique_call 1} out_$i130, out_$i129, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146 := __s2255_open_loop_$bb57(in_$p2, in_$p8, in_$p120, in_$p123, out_$i130, out_$i129, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146);
    return;

  exit:
    return;
}



procedure __s2255_open_loop_$bb57(in_$p2: ref, in_$p8: ref, in_$p120: ref, in_$p123: ref, in_$i130: i64, in_$i129: i64, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$i137: i64, in_$i138: i64, in_$i139: i1, in_$i140: i64, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i32, in_$i146: i1) returns (out_$i130: i64, out_$i129: i64, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$i137: i64, out_$i138: i64, out_$i139: i1, out_$i140: i64, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i32, out_$i146: i1);



implementation ldv_stop___0_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop___0_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop___0_loop_$bb1();



implementation s2255_cmd_status_loop_$bb13(in_$p2: ref, in_$p51: ref, in_$p52: ref, in_$i57: i64, in_$i56: i64, in_$i59: i64, in_$i60: i1, in_$i61: i64, in_$i62: i32, in_$i63: i1) returns (out_$i57: i64, out_$i56: i64, out_$i59: i64, out_$i60: i1, out_$i61: i64, out_$i62: i32, out_$i63: i1)
{

  entry:
    out_$i57, out_$i56, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63 := in_$i57, in_$i56, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i56 := out_$i59;
    goto $bb20_dummy;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i59;
    assume true;
    goto $bb20;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_3559;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, in_$p52);
    goto corral_source_split_3558;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} prepare_to_wait(in_$p51, in_$p2, 2);
    goto corral_source_split_3557;

  $bb18:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i59;
    assume true;
    goto $bb18;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i64(out_$i59, 0);
    goto corral_source_split_3553;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} out_$i59 := schedule_timeout(out_$i56);
    call {:si_unique_call 564} {:cexpr "__ret"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_3552;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i57, out_$i56, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63 := s2255_cmd_status_loop_$bb13(in_$p2, in_$p51, in_$p52, out_$i57, out_$i56, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63);
    return;

  exit:
    return;
}



procedure s2255_cmd_status_loop_$bb13(in_$p2: ref, in_$p51: ref, in_$p52: ref, in_$i57: i64, in_$i56: i64, in_$i59: i64, in_$i60: i1, in_$i61: i64, in_$i62: i32, in_$i63: i1) returns (out_$i57: i64, out_$i56: i64, out_$i59: i64, out_$i60: i1, out_$i61: i64, out_$i62: i32, out_$i63: i1);



implementation s2255_probe_loop_$bb25(in_$p12: ref, in_$p49: ref, in_$p59: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$i70: i8, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i8, in_$p77: ref, in_$i78: i32, in_$i79: i8, in_$i80: i32, in_$i81: i1, in_$i63: i32) returns (out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$i70: i8, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i8, out_$p77: ref, out_$i78: i32, out_$i79: i8, out_$i80: i32, out_$i81: i1, out_$i63: i32)
{

  entry:
    out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i63 := in_$p64, in_$p65, in_$i66, in_$p68, in_$p69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i63;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3822;

  $bb33:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := out_$i78;
    goto $bb33_dummy;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i81 := $sgt.i32(out_$i80, out_$i78);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i8.i32(out_$i79);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i8($M.0, in_$p59);
    goto corral_source_split_3844;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i63, 1);
    call {:si_unique_call 620} {:cexpr "i"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_3843;

  $bb28:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p77, out_$i76);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p12, $mul.ref(0, 11240)), $mul.ref(10952, 1));
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i8($M.0, out_$p75);
    goto corral_source_split_3839;

  $bb29:
    assume out_$i74 == 1;
    out_$p75 := $add.ref($add.ref($add.ref(out_$p65, $mul.ref(out_$i66, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} out_$i73 := usb_endpoint_is_bulk_in(out_$p68);
    call {:si_unique_call 619} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_3835;

  $bb27:
    assume out_$i72 == 1;
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 0);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i8.i32(out_$i70);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i8($M.0, out_$p69);
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p12, $mul.ref(0, 11240)), $mul.ref(10952, 1));
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p65, $mul.ref(out_$i66, 64)), $mul.ref(0, 1));
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i63);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_3825;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p49, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i63 := s2255_probe_loop_$bb25(in_$p12, in_$p49, in_$p59, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i63);
    return;

  exit:
    return;
}



procedure s2255_probe_loop_$bb25(in_$p12: ref, in_$p49: ref, in_$p59: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$i70: i8, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i8, in_$p77: ref, in_$i78: i32, in_$i79: i8, in_$i80: i32, in_$i81: i1, in_$i63: i32) returns (out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$i70: i8, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i8, out_$p77: ref, out_$i78: i32, out_$i79: i8, out_$i80: i32, out_$i81: i1, out_$i63: i32);
  modifies $M.0;



implementation s2255_disconnect_loop_$bb4(in_$p3: ref, in_$i5: i32, in_$i12: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i11: i32) returns (out_$i12: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i11: i32)
{

  entry:
    out_$i12, out_$p15, out_$i16, out_$i17, out_$i11 := in_$i12, in_$p15, in_$i16, in_$i17, in_$i11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4087;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i16;
    goto $bb6_dummy;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, in_$i5);
    goto corral_source_split_4093;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i11, 1);
    call {:si_unique_call 668} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} video_unregister_device(out_$p15);
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 11240)), $mul.ref(0, 1)), $mul.ref(out_$i12, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4090;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_4089;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i12, out_$p15, out_$i16, out_$i17, out_$i11 := s2255_disconnect_loop_$bb4(in_$p3, in_$i5, out_$i12, out_$p15, out_$i16, out_$i17, out_$i11);
    return;

  exit:
    return;
}



procedure s2255_disconnect_loop_$bb4(in_$p3: ref, in_$i5: i32, in_$i12: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i11: i32) returns (out_$i12: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i11: i32);



implementation {:SIextraRecBound 4} s2255_board_init_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i1, in_$i57: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p70: ref, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$i76: i32, in_$i77: i1, in_$i44: i32, in_cmdloc_dummy_var_39: [ref]i8, in_cmdloc_dummy_var_40: [ref]i8, in_cmdloc_dummy_var_41: [ref]i8, in_vslice_dummy_var_200: i32) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i1, out_$i57: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p70: ref, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$i76: i32, out_$i77: i1, out_$i44: i32, out_cmdloc_dummy_var_39: [ref]i8, out_cmdloc_dummy_var_40: [ref]i8, out_cmdloc_dummy_var_41: [ref]i8, out_vslice_dummy_var_200: i32)
{

  entry:
    out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i76, out_$i77, out_$i44, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41, out_vslice_dummy_var_200 := in_$p45, in_$p46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p59, in_$i60, in_$i61, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p70, in_$i71, in_$i72, in_$p73, in_$p74, in_$i76, in_$i77, in_$i44, in_cmdloc_dummy_var_39, in_cmdloc_dummy_var_40, in_cmdloc_dummy_var_41, in_vslice_dummy_var_200;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4281;

  $bb22:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := out_$i76;
    goto $bb22_dummy;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    out_$i77 := $sle.i32(out_$i76, 3);
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i44, 1);
    call {:si_unique_call 718} {:cexpr "j"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_4327;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} out_vslice_dummy_var_200 := s2255_create_sys_buffers(out_$p48);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p74, 0);
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2368, 1));
    goto corral_source_split_4324;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p73, out_$i72);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2344, 1));
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i32.i64(out_$i71);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} out_$i71 := get_transfer_size(in_$p1);
    call {:si_unique_call 716} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_4320;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p70, 1);
    goto corral_source_split_4319;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2232, 1)), $mul.ref(40, 1));
    goto corral_source_split_4318;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p68, formats);
    goto corral_source_split_4317;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2584, 1));
    goto corral_source_split_4316;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p67, 4096);
    goto corral_source_split_4315;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2280, 1));
    goto corral_source_split_4314;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p66, 480);
    goto corral_source_split_4313;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2576, 1));
    goto corral_source_split_4312;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p65, 640);
    goto corral_source_split_4311;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2572, 1));
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, 50);
    goto corral_source_split_4309;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2288, 1));
    goto corral_source_split_4308;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p63, out_$i61);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2232, 1)), $mul.ref(8, 1));
    goto corral_source_split_4305;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    out_$i61 := $or.i32(out_$i60, 65536);
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.0, out_$p59);
    goto corral_source_split_4303;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2232, 1)), $mul.ref(8, 1));
    goto corral_source_split_4302;

  $bb19:
    assume out_$i57 == 1;
    goto corral_source_split_4301;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    out_$i57 := $sgt.i32(out_$i44, 1);
    goto corral_source_split_4299;

  $bb16:
    assume out_$i56 == 1;
    goto corral_source_split_4298;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 8791);
    goto corral_source_split_4296;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i16.i32(out_$i54);
    goto corral_source_split_4295;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i16($M.0, out_$p53);
    goto corral_source_split_4294;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(11236, 1));
    goto corral_source_split_4293;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_39 := $M.0;
    out_cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 714} out_cmdloc_dummy_var_41 := $memcpy.i8(out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_$p51, out_$p52, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_41;
    goto corral_source_split_4292;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4291;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_4290;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2232, 1));
    goto corral_source_split_4289;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p49, 0);
    goto corral_source_split_4288;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 2600)), $mul.ref(2340, 1));
    goto corral_source_split_4287;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p46, $mul.ref(out_$i47, 2600));
    goto corral_source_split_4286;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i44);
    goto corral_source_split_4285;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_4284;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4283;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb18;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i76, out_$i77, out_$i44, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41, out_vslice_dummy_var_200 := s2255_board_init_loop_$bb14(in_$p0, in_$p1, out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i76, out_$i77, out_$i44, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41, out_vslice_dummy_var_200);
    return;

  exit:
    return;
}



procedure s2255_board_init_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i1, in_$i57: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p70: ref, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$i76: i32, in_$i77: i1, in_$i44: i32, in_cmdloc_dummy_var_39: [ref]i8, in_cmdloc_dummy_var_40: [ref]i8, in_cmdloc_dummy_var_41: [ref]i8, in_vslice_dummy_var_200: i32) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i1, out_$i57: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p70: ref, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$i76: i32, out_$i77: i1, out_$i44: i32, out_cmdloc_dummy_var_39: [ref]i8, out_cmdloc_dummy_var_40: [ref]i8, out_cmdloc_dummy_var_41: [ref]i8, out_vslice_dummy_var_200: i32);
  modifies $M.0;



implementation s2255_probe_v4l_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i78: i32, in_$i82: i1, in_$i83: i32, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p92: ref, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$i10: i32, in_$i97: i32, in_cmdloc_dummy_var_42: [ref]i8, in_cmdloc_dummy_var_43: [ref]i8, in_cmdloc_dummy_var_44: [ref]i8, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: ref, in_vslice_dummy_var_205: ref, in_vslice_dummy_var_206: ref, in_vslice_dummy_var_207: ref, in_vslice_dummy_var_208: ref, in_vslice_dummy_var_212: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$p21: ref, out_$p23: ref, out_$p25: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i78: i32, out_$i82: i1, out_$i83: i32, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p92: ref, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$i10: i32, out_$i97: i32, out_cmdloc_dummy_var_42: [ref]i8, out_cmdloc_dummy_var_43: [ref]i8, out_cmdloc_dummy_var_44: [ref]i8, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: ref, out_vslice_dummy_var_205: ref, out_vslice_dummy_var_206: ref, out_vslice_dummy_var_207: ref, out_vslice_dummy_var_208: ref, out_vslice_dummy_var_212: i32)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p14, out_$p16, out_$p17, out_$p19, out_$p21, out_$p23, out_$p25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p43, out_$i44, out_$i45, out_$p46, out_$p57, out_$p58, out_$p59, out_$p60, out_$p62, out_$p63, out_$p65, out_$p66, out_$p68, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i78, out_$i82, out_$i83, out_$p88, out_$p89, out_$p90, out_$p92, out_$p93, out_$i95, out_$i96, out_$i10, out_$i97, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212 := in_$p11, in_$p12, in_$i13, in_$p14, in_$p16, in_$p17, in_$p19, in_$p21, in_$p23, in_$p25, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p43, in_$i44, in_$i45, in_$p46, in_$p57, in_$p58, in_$p59, in_$p60, in_$p62, in_$p63, in_$p65, in_$p66, in_$p68, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p79, in_$i80, in_$i81, in_$i78, in_$i82, in_$i83, in_$p88, in_$p89, in_$p90, in_$p92, in_$p93, in_$i95, in_$i96, in_$i10, in_$i97, in_cmdloc_dummy_var_42, in_cmdloc_dummy_var_43, in_cmdloc_dummy_var_44, in_vslice_dummy_var_203, in_vslice_dummy_var_204, in_vslice_dummy_var_205, in_vslice_dummy_var_206, in_vslice_dummy_var_207, in_vslice_dummy_var_208, in_vslice_dummy_var_212;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4357;

  $bb26:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i95;
    goto $bb26_dummy;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i97 := out_$i78;
    assume true;
    goto $bb26;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    out_$i96 := $sle.i32(out_$i95, 3);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i10, 1);
    call {:si_unique_call 750} {:cexpr "i"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_4464;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} out_vslice_dummy_var_212 := printk.ref.ref.ref(.str.121, out_$p93, out_$p90);
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    out_$p93 := $bitcast.ref.ref(out_$p92);
    goto corral_source_split_4462;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(10400, 1)), $mul.ref(104, 1));
    goto corral_source_split_4461;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} out_$p90 := video_device_node_name(out_$p89);
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4459;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} atomic_inc(out_$p88);
    goto corral_source_split_4458;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(10760, 1));
    goto corral_source_split_4457;

  $bb24:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i78;
    assume true;
    goto $bb24;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i32(out_$i78, 0);
    goto corral_source_split_4449;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} out_$i81 := video_register_device(out_$p79, 0, out_$i80);
    call {:si_unique_call 745} {:cexpr "ret"} boogie_si_record_i32(out_$i81);
    assume {:verifier.code 0} true;
    out_$i78 := out_$i81;
    goto $bb22;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i77;
    goto $bb22;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} out_$i77 := video_register_device(out_$p75, 0, out_$i76);
    call {:si_unique_call 743} {:cexpr "ret"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$i76 := $M.26;
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4440;

  $bb20:
    assume out_$i74 == 1;
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, $sub.i32(0, 1));
    goto corral_source_split_4437;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    out_$i73 := $M.26;
    goto corral_source_split_4436;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} video_set_drvdata(out_$p71, out_$p72);
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_4434;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4433;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} set_bit(2, out_$p70);
    goto corral_source_split_4432;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(0, 1)), $mul.ref(1616, 1));
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p68, out_$p66);
    goto corral_source_split_4430;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(0, 1)), $mul.ref(1528, 1));
    goto corral_source_split_4429;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(10400, 1));
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p65, out_$p63);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(0, 1)), $mul.ref(1800, 1));
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(10768, 1));
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p62, out_$p60);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(0, 1)), $mul.ref(1544, 1));
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_42 := $M.0;
    out_cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 739} out_cmdloc_dummy_var_44 := $memcpy.i8(out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_$p59, template, 1808, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_44;
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p57, in_$p0);
    goto corral_source_split_4418;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(2072, 1)), $mul.ref(16, 1));
    goto corral_source_split_4417;

  $bb17:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p14;
    assume true;
    goto $bb17;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_4398;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(1808, 1)), $mul.ref(244, 1));
    goto corral_source_split_4397;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} out_vslice_dummy_var_208 := v4l2_ctrl_new_custom(out_$p40, color_filter_ctrl, $0.ref);
    goto corral_source_split_4390;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4389;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    goto $bb11;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 8791);
    goto corral_source_split_4387;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    goto corral_source_split_4386;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.0, out_$p33);
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(11236, 1));
    goto corral_source_split_4384;

  $bb7:
    assume out_$i32 == 1;
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i32 := $sgt.i32(out_$i31, 7);
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(11232, 1));
    goto corral_source_split_4379;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p29, out_$p28);
    goto corral_source_split_4378;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(2056, 1));
    goto corral_source_split_4377;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} out_$p28 := v4l2_ctrl_new_std(out_$p27, s2255_ctrl_ops, 10291459, 0, 100, 1, 50);
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} out_vslice_dummy_var_207 := v4l2_ctrl_new_std(out_$p25, s2255_ctrl_ops, 9963779, 0, 255, 1, 0);
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} out_vslice_dummy_var_206 := v4l2_ctrl_new_std(out_$p23, s2255_ctrl_ops, 9963778, 0, 255, 1, 128);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} out_vslice_dummy_var_205 := v4l2_ctrl_new_std(out_$p21, s2255_ctrl_ops, 9963777, 0, 255, 1, 92);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} out_vslice_dummy_var_204 := v4l2_ctrl_new_std(out_$p19, s2255_ctrl_ops, 9963776, $sub.i32(0, 127), 127, 1, 0);
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} out_vslice_dummy_var_203 := v4l2_ctrl_handler_init_class(out_$p17, 6, in_$p1, .str.118);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(1808, 1));
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} INIT_LIST_HEAD(out_$p16);
    goto corral_source_split_4364;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(2072, 1)), $mul.ref(0, 1));
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 2600));
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i10);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_4360;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i39 := $sle.i32(out_$i38, 1);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_4393;

  $bb12:
    assume !(out_$i36 == 1);
    goto corral_source_split_4392;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb9;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb9;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i32(in_$i2, out_$i10);
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 2600)), $mul.ref(0, 1));
    goto corral_source_split_4445;

  $bb21:
    assume !(out_$i74 == 1);
    goto corral_source_split_4444;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p14, out_$p16, out_$p17, out_$p19, out_$p21, out_$p23, out_$p25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p43, out_$i44, out_$i45, out_$p46, out_$p57, out_$p58, out_$p59, out_$p60, out_$p62, out_$p63, out_$p65, out_$p66, out_$p68, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i78, out_$i82, out_$i83, out_$p88, out_$p89, out_$p90, out_$p92, out_$p93, out_$i95, out_$i96, out_$i10, out_$i97, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212 := s2255_probe_v4l_loop_$bb5(in_$p0, in_$p1, in_$i2, out_$p11, out_$p12, out_$i13, out_$p14, out_$p16, out_$p17, out_$p19, out_$p21, out_$p23, out_$p25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p43, out_$i44, out_$i45, out_$p46, out_$p57, out_$p58, out_$p59, out_$p60, out_$p62, out_$p63, out_$p65, out_$p66, out_$p68, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i78, out_$i82, out_$i83, out_$p88, out_$p89, out_$p90, out_$p92, out_$p93, out_$i95, out_$i96, out_$i10, out_$i97, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212);
    return;

  exit:
    return;
}



procedure s2255_probe_v4l_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i78: i32, in_$i82: i1, in_$i83: i32, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p92: ref, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$i10: i32, in_$i97: i32, in_cmdloc_dummy_var_42: [ref]i8, in_cmdloc_dummy_var_43: [ref]i8, in_cmdloc_dummy_var_44: [ref]i8, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: ref, in_vslice_dummy_var_205: ref, in_vslice_dummy_var_206: ref, in_vslice_dummy_var_207: ref, in_vslice_dummy_var_208: ref, in_vslice_dummy_var_212: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$p21: ref, out_$p23: ref, out_$p25: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i78: i32, out_$i82: i1, out_$i83: i32, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p92: ref, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$i10: i32, out_$i97: i32, out_cmdloc_dummy_var_42: [ref]i8, out_cmdloc_dummy_var_43: [ref]i8, out_cmdloc_dummy_var_44: [ref]i8, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: ref, out_vslice_dummy_var_205: ref, out_vslice_dummy_var_206: ref, out_vslice_dummy_var_207: ref, out_vslice_dummy_var_208: ref, out_vslice_dummy_var_212: i32);
  modifies $M.0;



implementation s2255_create_sys_buffers_loop_$bb7(in_$p0: ref, in_$p9: ref, in_$p13: ref, in_$i15: i32, in_$i16: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p26: ref, in_$p27: ref, in_$p32: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i64, in_$i44: i64, in_$i45: i1, in_$i8: i64, in_vslice_dummy_var_218: i32) returns (out_$p9: ref, out_$p13: ref, out_$i15: i32, out_$i16: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$p26: ref, out_$p27: ref, out_$p32: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i64, out_$i44: i64, out_$i45: i1, out_$i8: i64, out_vslice_dummy_var_218: i32)
{

  entry:
    out_$p9, out_$p13, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p26, out_$p27, out_$p32, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i44, out_$i45, out_$i8, out_vslice_dummy_var_218 := in_$p9, in_$p13, in_$i15, in_$i16, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$p26, in_$p27, in_$p32, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i44, in_$i45, in_$i8, in_vslice_dummy_var_218;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4576;

  $bb16:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i44;
    goto $bb16_dummy;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    out_$i45 := $ule.i64(out_$i44, 3);
    goto corral_source_split_4608;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i64(out_$i8, 1);
    call {:si_unique_call 797} {:cexpr "i"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_4607;

  $bb13:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i8;
    assume true;
    goto $bb13;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i38, 0);
    goto corral_source_split_4600;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(out_$i8, 32)), $mul.ref(16, 1));
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p32, 833536);
    goto corral_source_split_4596;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(out_$i8, 32)), $mul.ref(0, 1));
    goto corral_source_split_4595;

  $bb10:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} out_vslice_dummy_var_218 := printk.ref.ref.i32.i64.ref(.str.84, out_$p20, out_$i22, out_$i8, out_$p27);
    goto corral_source_split_4593;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(out_$i8, 32)), $mul.ref(16, 1));
    goto corral_source_split_4591;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2600)), $mul.ref(2592, 1));
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p19, $mul.ref(out_$i8, 32));
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1));
    goto corral_source_split_4586;

  $bb9:
    assume out_$i16 == 1;
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    out_$i16 := $sgt.i32(out_$i15, 0);
    goto corral_source_split_4583;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$i15 := $M.5;
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p13, out_$p9);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2600)), $mul.ref(2096, 1)), $mul.ref(8, 1)), $mul.ref(out_$i8, 32)), $mul.ref(16, 1));
    goto corral_source_split_4579;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} out_$p9 := vmalloc(833536);
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p9, out_$p13, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p26, out_$p27, out_$p32, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i44, out_$i45, out_$i8, out_vslice_dummy_var_218 := s2255_create_sys_buffers_loop_$bb7(in_$p0, out_$p9, out_$p13, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p26, out_$p27, out_$p32, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i44, out_$i45, out_$i8, out_vslice_dummy_var_218);
    return;

  exit:
    return;
}



procedure s2255_create_sys_buffers_loop_$bb7(in_$p0: ref, in_$p9: ref, in_$p13: ref, in_$i15: i32, in_$i16: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p26: ref, in_$p27: ref, in_$p32: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i64, in_$i44: i64, in_$i45: i1, in_$i8: i64, in_vslice_dummy_var_218: i32) returns (out_$p9: ref, out_$p13: ref, out_$i15: i32, out_$i16: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$p26: ref, out_$p27: ref, out_$p32: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i64, out_$i44: i64, out_$i45: i1, out_$i8: i64, out_vslice_dummy_var_218: i32);
  modifies $M.0;



implementation save_frame_loop_$bb9(in_$p0: ref, in_$p24: ref, in_$p25: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i32, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i54: i64, in_$p55: ref, in_$i56: i64, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$i76: i64, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i64, in_$p93: ref, in_$i94: i64, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$p108: ref, in_$p109: ref, in_$i111: i32, in_$i112: i1, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i32, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$p142: ref, in_$i143: i32, in_$p144: ref, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i145: i1, in_$i146: i32, in_$i147: i32, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i154: i32, in_$i155: i32, in_vslice_dummy_var_236: i32, in_vslice_dummy_var_238: i32, in_vslice_dummy_var_239: i32, in_vslice_dummy_var_240: i32, in_vslice_dummy_var_241: i32) returns (out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i32, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i54: i64, out_$p55: ref, out_$i56: i64, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$i76: i64, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i64, out_$p93: ref, out_$i94: i64, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$p108: ref, out_$p109: ref, out_$i111: i32, out_$i112: i1, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i32, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$p142: ref, out_$i143: i32, out_$p144: ref, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i145: i1, out_$i146: i32, out_$i147: i32, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i154: i32, out_$i155: i32, out_vslice_dummy_var_236: i32, out_vslice_dummy_var_238: i32, out_vslice_dummy_var_239: i32, out_vslice_dummy_var_240: i32, out_vslice_dummy_var_241: i32)
{

  entry:
    out_$i35, out_$i36, out_$i37, out_$i38, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i48, out_$p49, out_$i50, out_$i51, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i76, out_$p77, out_$p78, out_$i79, out_$p80, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i111, out_$i112, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i136, out_$i137, out_$p138, out_$i139, out_$p142, out_$i143, out_$p144, out_$p81, out_$i82, out_$i83, out_$i84, out_$i145, out_$i146, out_$i147, out_$i150, out_$i151, out_$i152, out_$i153, out_$i31, out_$i32, out_$i33, out_$p34, out_$i154, out_$i155, out_vslice_dummy_var_236, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241 := in_$i35, in_$i36, in_$i37, in_$i38, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i48, in_$p49, in_$i50, in_$i51, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$p71, in_$i76, in_$p77, in_$p78, in_$i79, in_$p80, in_$p85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$i96, in_$p97, in_$p98, in_$i99, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p108, in_$p109, in_$i111, in_$i112, in_$p114, in_$i115, in_$i116, in_$i117, in_$p118, in_$p119, in_$i120, in_$i121, in_$i122, in_$p124, in_$p125, in_$p126, in_$p127, in_$p128, in_$p129, in_$p130, in_$i131, in_$p132, in_$p133, in_$p134, in_$i136, in_$i137, in_$p138, in_$i139, in_$p142, in_$i143, in_$p144, in_$p81, in_$i82, in_$i83, in_$i84, in_$i145, in_$i146, in_$i147, in_$i150, in_$i151, in_$i152, in_$i153, in_$i31, in_$i32, in_$i33, in_$p34, in_$i154, in_$i155, in_vslice_dummy_var_236, in_vslice_dummy_var_238, in_vslice_dummy_var_239, in_vslice_dummy_var_240, in_vslice_dummy_var_241;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4895;

  $bb65:
    assume out_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$i31, out_$i32, out_$i33, out_$p34 := out_$i150, out_$i83, out_$i82, out_$p81;
    goto $bb65_dummy;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    out_$i154, out_$i155 := out_$i82, out_$i83;
    assume true;
    goto $bb65;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    out_$i153 := $ult.i32(out_$i150, out_$i152);
    goto corral_source_split_5049;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    out_$i152 := $sub.i32(out_$i151, 12);
    goto corral_source_split_5048;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i32($M.0, in_$p25);
    goto corral_source_split_5047;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i150 := $add.i32(out_$i84, 1);
    call {:si_unique_call 856} {:cexpr "jj"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_5046;

  $bb62:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    out_$i146, out_$i147 := out_$i82, out_$i83;
    assume true;
    goto $bb62;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    out_$i145 := $ne.i32(out_$i82, 0);
    goto corral_source_split_4962;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4961;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    out_$p81, out_$i82, out_$i83, out_$i84 := out_$p144, out_$i33, out_$i32, out_$i143;
    goto $bb29;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    out_$p81, out_$i82, out_$i83, out_$i84 := out_$p34, 1, out_$i48, out_$i31;
    goto $bb29;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    out_$p81, out_$i82, out_$i83, out_$i84 := out_$p85, out_$i33, out_$i32, out_$i86;
    goto $bb29;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$p81, out_$i82, out_$i83, out_$i84 := out_$p85, out_$i33, out_$i32, out_$i86;
    goto $bb29;

  $bb30:
    assume out_$i89 == 1;
    goto corral_source_split_4964;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    out_$i89 := $ugt.i32(out_$i88, 3);
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(in_$p24, $mul.ref(1, 4));
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i31, 16384);
    call {:si_unique_call 841} {:cexpr "jj"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p34, $mul.ref(16384, 1));
    goto corral_source_split_4903;

  $bb17:
    assume out_$i38 == 1;
    goto corral_source_split_4902;

  $bb12:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i35, 576040108);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i35, 576051786);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, in_$p24);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb33:
    assume out_$i96 == 1;
    goto corral_source_split_4974;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$i96 := $ugt.i32(out_$i95, 3);
    goto corral_source_split_4972;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    out_$i95 := $trunc.i64.i32(out_$i94);
    call {:si_unique_call 847} {:cexpr "cc"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i64($M.6, out_$p93);
    goto corral_source_split_4970;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref(out_$i92, 8));
    goto corral_source_split_4969;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i32.i64(out_$i91);
    goto corral_source_split_4968;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    goto corral_source_split_4967;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref(in_$p24, $mul.ref(1, 4));
    goto corral_source_split_4966;

  $bb31:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p80, out_$i79);
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p60, $mul.ref(out_$i63, 2600)), $mul.ref(2376, 1));
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(in_$p24, $mul.ref(4, 4));
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p77, out_$i76);
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p60, $mul.ref(out_$i63, 2600)), $mul.ref(2352, 1));
    goto corral_source_split_4954;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i66);
    goto corral_source_split_4953;

  $bb27:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    out_$p71 := out_$p64;
    assume true;
    goto $bb27;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$i70 := $ugt.i64(out_$i67, out_$i69);
    goto corral_source_split_4944;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i64($M.0, out_$p68);
    goto corral_source_split_4943;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p60, $mul.ref(out_$i63, 2600)), $mul.ref(2344, 1));
    goto corral_source_split_4942;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i66);
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    call {:si_unique_call 846} {:cexpr "payload"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_4940;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(in_$p24, $mul.ref(3, 4));
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p60, $mul.ref(out_$i63, 2600));
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i62);
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(11144, 1));
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, out_$i57);
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(11144, 1));
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i64.i32(out_$i56);
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.6, out_$p55);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref(out_$i54, 8));
    goto corral_source_split_4928;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i32.i64(out_$i50);
    goto corral_source_split_4927;

  $bb23:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$i51 := $ugt.i32(out_$i50, 3);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    call {:si_unique_call 844} {:cexpr "cc"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(in_$p24, $mul.ref(1, 4));
    goto corral_source_split_4918;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i31, 512);
    call {:si_unique_call 843} {:cexpr "offset"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_4917;

  $bb20:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} out_vslice_dummy_var_236 := printk.ref.i32.i32.i32(.str.103, out_$i31, out_$i43, out_$i46);
    goto corral_source_split_4915;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_4914;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, out_$p44);
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(out_$p34, $mul.ref(1, 1));
    goto corral_source_split_4912;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_4911;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, out_$p34);
    goto corral_source_split_4910;

  $bb19:
    assume out_$i41 == 1;
    goto corral_source_split_4909;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(out_$i40, 3);
    goto corral_source_split_4900;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$i40 := $M.5;
    goto corral_source_split_4899;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    goto corral_source_split_4898;

  $bb14:
    assume out_$i37 == 1;
    goto corral_source_split_4897;

  $bb13:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i35, 576051786);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref(out_$p142, $mul.ref(1, 1));
    goto corral_source_split_5039;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5038;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p142, out_$i143 := out_$p34, out_$i31;
    goto $bb60;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p142, out_$i143 := out_$p85, out_$i86;
    goto $bb60;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} out_vslice_dummy_var_238 := printk.ref.i32(.str.105, out_$i95);
    goto corral_source_split_5017;

  $bb48:
    assume out_$i112 == 1;
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    out_$i112 := $sgt.i32(out_$i111, 4);
    goto corral_source_split_5014;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    out_$i111 := $M.5;
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto corral_source_split_5012;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} __wake_up(out_$p109, 3, 1, $0.ref);
    goto corral_source_split_5011;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p98, $mul.ref(out_$i99, 2600)), $mul.ref(2384, 1));
    goto corral_source_split_5010;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p108, 1);
    goto corral_source_split_5009;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p98, $mul.ref(out_$i99, 2600)), $mul.ref(2472, 1));
    goto corral_source_split_5008;

  $bb46:
    assume out_$i107 == 1;
    goto corral_source_split_5007;

  $bb37:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i102, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, out_$p101);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref(in_$p24, $mul.ref(2, 4));
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i32.i64(out_$i95);
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$p98 := $bitcast.ref.ref(out_$p97);
    goto corral_source_split_4977;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(0, 1));
    goto corral_source_split_4976;

  $bb34:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb52:
    assume out_$i122 == 1;
    goto corral_source_split_5019;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i32(out_$i121, 15);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    out_$i121 := $and.i32(out_$i120, 15);
    goto corral_source_split_5004;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(11152, 1));
    goto corral_source_split_5002;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p118, out_$i117);
    goto corral_source_split_5001;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(11152, 1));
    goto corral_source_split_5000;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    out_$i117 := $or.i32(out_$i115, out_$i116);
    goto corral_source_split_4999;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    out_$i116 := $shl.i32(1, out_$i95);
    goto corral_source_split_4998;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.0, out_$p114);
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(11152, 1));
    goto corral_source_split_4996;

  $bb44:
    assume out_$i106 == 1;
    goto corral_source_split_4995;

  $bb39:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i102, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb38:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i102, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} __wake_up(out_$p129, 3, 1, $0.ref);
    goto corral_source_split_5029;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p128, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5028;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    out_$p128 := $load.ref($M.0, out_$p127);
    goto corral_source_split_5027;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_5026;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} atomic_set(out_$p126, 2);
    goto corral_source_split_5025;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(out_$p125, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5024;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.0, out_$p124);
    goto corral_source_split_5023;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11240)), $mul.ref(11088, 1));
    goto corral_source_split_5022;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} out_vslice_dummy_var_239 := printk.ref(.str.106);
    goto corral_source_split_5021;

  $bb53:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb56:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} out_vslice_dummy_var_240 := printk.ref.i32.i32(.str.107, out_$i139, out_$i95);
    goto corral_source_split_5034;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.0, out_$p138);
    goto corral_source_split_5033;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref(in_$p24, $mul.ref(3, 4));
    goto corral_source_split_5032;

  $bb55:
    assume out_$i137 == 1;
    goto corral_source_split_5031;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$i137 := $sgt.i32(out_$i136, 4);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$i136 := $M.5;
    goto corral_source_split_4992;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} __wake_up(out_$p134, 3, 1, $0.ref);
    goto corral_source_split_4990;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p98, $mul.ref(out_$i99, 2600)), $mul.ref(2480, 1));
    goto corral_source_split_4989;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p133, 1);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(out_$p98, $mul.ref(out_$i99, 2600)), $mul.ref(2568, 1));
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p132, out_$i131);
    goto corral_source_split_4986;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p98, $mul.ref(out_$i99, 2600)), $mul.ref(2476, 1));
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i32($M.0, out_$p130);
    goto corral_source_split_4984;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref(in_$p24, $mul.ref(3, 4));
    goto corral_source_split_4983;

  $bb41:
    assume out_$i105 == 1;
    goto corral_source_split_4982;

  $bb40:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i102, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} out_vslice_dummy_var_241 := printk.ref(.str.108);
    goto corral_source_split_5036;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb43;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i106 == 1);
    goto $bb43;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i107 == 1);
    goto $bb43;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb16;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb16;

  $bb65_dummy:
    call {:si_unique_call 1} out_$i35, out_$i36, out_$i37, out_$i38, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i48, out_$p49, out_$i50, out_$i51, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i76, out_$p77, out_$p78, out_$i79, out_$p80, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i111, out_$i112, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i136, out_$i137, out_$p138, out_$i139, out_$p142, out_$i143, out_$p144, out_$p81, out_$i82, out_$i83, out_$i84, out_$i145, out_$i146, out_$i147, out_$i150, out_$i151, out_$i152, out_$i153, out_$i31, out_$i32, out_$i33, out_$p34, out_$i154, out_$i155, out_vslice_dummy_var_236, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241 := save_frame_loop_$bb9(in_$p0, in_$p24, in_$p25, out_$i35, out_$i36, out_$i37, out_$i38, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i48, out_$p49, out_$i50, out_$i51, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i76, out_$p77, out_$p78, out_$i79, out_$p80, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i111, out_$i112, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i136, out_$i137, out_$p138, out_$i139, out_$p142, out_$i143, out_$p144, out_$p81, out_$i82, out_$i83, out_$i84, out_$i145, out_$i146, out_$i147, out_$i150, out_$i151, out_$i152, out_$i153, out_$i31, out_$i32, out_$i33, out_$p34, out_$i154, out_$i155, out_vslice_dummy_var_236, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241);
    return;

  exit:
    return;
}



procedure save_frame_loop_$bb9(in_$p0: ref, in_$p24: ref, in_$p25: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i32, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i54: i64, in_$p55: ref, in_$i56: i64, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$i76: i64, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i64, in_$p93: ref, in_$i94: i64, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$p108: ref, in_$p109: ref, in_$i111: i32, in_$i112: i1, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i32, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$p142: ref, in_$i143: i32, in_$p144: ref, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i145: i1, in_$i146: i32, in_$i147: i32, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i154: i32, in_$i155: i32, in_vslice_dummy_var_236: i32, in_vslice_dummy_var_238: i32, in_vslice_dummy_var_239: i32, in_vslice_dummy_var_240: i32, in_vslice_dummy_var_241: i32) returns (out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i32, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i54: i64, out_$p55: ref, out_$i56: i64, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$i76: i64, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i64, out_$p93: ref, out_$i94: i64, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$p108: ref, out_$p109: ref, out_$i111: i32, out_$i112: i1, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i32, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$p142: ref, out_$i143: i32, out_$p144: ref, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i145: i1, out_$i146: i32, out_$i147: i32, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i154: i32, out_$i155: i32, out_vslice_dummy_var_236: i32, out_vslice_dummy_var_238: i32, out_vslice_dummy_var_239: i32, out_vslice_dummy_var_240: i32, out_vslice_dummy_var_241: i32);
  modifies $M.0;



implementation planar422p_to_yuv_packed_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i17: i64, in_$i23: i1, in_$p24: ref, in_$i25: i8, in_$i26: i64, in_$p27: ref, in_$p30: ref, in_$i31: i8, in_$i32: i64, in_$p33: ref, in_$p28: ref, in_$p29: ref, in_$i34: i1, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$p40: ref, in_$p41: ref, in_$i47: i1, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i64, in_$p52: ref, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i64, in_$p59: ref, in_$p53: ref, in_$p54: ref, in_$i60: i1, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$p66: ref, in_$p67: ref, in_$i73: i32, in_$i74: i64, in_$i75: i1, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$p22: ref) returns (out_$i23: i1, out_$p24: ref, out_$i25: i8, out_$i26: i64, out_$p27: ref, out_$p30: ref, out_$i31: i8, out_$i32: i64, out_$p33: ref, out_$p28: ref, out_$p29: ref, out_$i34: i1, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$p40: ref, out_$p41: ref, out_$i47: i1, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i64, out_$p52: ref, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i64, out_$p59: ref, out_$p53: ref, out_$p54: ref, out_$i60: i1, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$p66: ref, out_$p67: ref, out_$i73: i32, out_$i74: i64, out_$i75: i1, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$p22: ref)
{

  entry:
    out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p30, out_$i31, out_$i32, out_$p33, out_$p28, out_$p29, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p40, out_$p41, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p53, out_$p54, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p66, out_$p67, out_$i73, out_$i74, out_$i75, out_$i19, out_$p20, out_$p21, out_$p22 := in_$i23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p30, in_$i31, in_$i32, in_$p33, in_$p28, in_$p29, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p40, in_$p41, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p53, in_$p54, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$p68, in_$i69, in_$i70, in_$i71, in_$p72, in_$p66, in_$p67, in_$i73, in_$i74, in_$i75, in_$i19, in_$p20, in_$p21, in_$p22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5363;

  $bb18:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$p20, out_$p21, out_$p22 := out_$i73, out_$p41, out_$p67, out_$p66;
    goto $bb18_dummy;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$i75 := $ult.i64(out_$i74, in_$i17);
    goto corral_source_split_5437;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i32.i64(out_$i73);
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i19, 4);
    call {:si_unique_call 903} {:cexpr "i"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_5435;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p72, out_$i69);
    assume {:verifier.code 0} true;
    out_$p66, out_$p67 := out_$p68, out_$p54;
    goto $bb17;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    out_$p66, out_$p67 := out_$p53, out_$p61;
    goto $bb17;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p65, out_$i62);
    goto corral_source_split_5425;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(in_$p1, $mul.ref(out_$i64, 1));
    goto corral_source_split_5424;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i32.i64(out_$i63);
    goto corral_source_split_5423;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i19, 3);
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.0, out_$p54);
    goto corral_source_split_5421;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p54, $mul.ref(1, 1));
    goto corral_source_split_5420;

  $bb15:
    assume out_$i60 == 1;
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(in_$i4, 1448695129);
    goto corral_source_split_5417;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5416;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p59, out_$i56);
    assume {:verifier.code 0} true;
    out_$p53, out_$p54 := out_$p40, out_$p55;
    goto $bb14;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$p53, out_$p54 := out_$p48, out_$p21;
    goto $bb14;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p52, out_$i49);
    goto corral_source_split_5407;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(in_$p1, $mul.ref(out_$i51, 1));
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i32.i64(out_$i50);
    goto corral_source_split_5405;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i19, 2);
    goto corral_source_split_5404;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p40);
    goto corral_source_split_5403;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p40, $mul.ref(1, 1));
    goto corral_source_split_5402;

  $bb12:
    assume out_$i47 == 1;
    goto corral_source_split_5401;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(in_$i4, 1448695129);
    goto corral_source_split_5399;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5398;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p46, out_$i43);
    assume {:verifier.code 0} true;
    out_$p40, out_$p41 := out_$p42, out_$p29;
    goto $bb11;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    out_$p40, out_$p41 := out_$p28, out_$p35;
    goto $bb11;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p39, out_$i36);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p1, $mul.ref(out_$i38, 1));
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i37);
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i19, 1);
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, out_$p29);
    goto corral_source_split_5385;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p29, $mul.ref(1, 1));
    goto corral_source_split_5384;

  $bb9:
    assume out_$i34 == 1;
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(in_$i4, 1448695129);
    goto corral_source_split_5381;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p33, out_$i31);
    assume {:verifier.code 0} true;
    out_$p28, out_$p29 := out_$p22, out_$p30;
    goto $bb8;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    out_$p28, out_$p29 := out_$p24, out_$p20;
    goto $bb8;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p27, out_$i25);
    goto corral_source_split_5372;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(in_$p1, $mul.ref(out_$i26, 1));
    goto corral_source_split_5371;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i32.i64(out_$i19);
    goto corral_source_split_5370;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.0, out_$p22);
    goto corral_source_split_5369;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p22, $mul.ref(1, 1));
    goto corral_source_split_5368;

  $bb6:
    assume out_$i23 == 1;
    goto corral_source_split_5367;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(in_$i4, 1448695129);
    goto corral_source_split_5365;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(in_$p1, $mul.ref(out_$i32, 1));
    goto corral_source_split_5378;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i32.i64(out_$i19);
    goto corral_source_split_5377;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.0, out_$p20);
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p20, $mul.ref(1, 1));
    goto corral_source_split_5375;

  $bb7:
    assume !(out_$i23 == 1);
    goto corral_source_split_5374;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(in_$p1, $mul.ref(out_$i45, 1));
    goto corral_source_split_5396;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i32.i64(out_$i44);
    goto corral_source_split_5395;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i19, 1);
    goto corral_source_split_5394;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.0, out_$p28);
    goto corral_source_split_5393;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p28, $mul.ref(1, 1));
    goto corral_source_split_5392;

  $bb10:
    assume !(out_$i34 == 1);
    goto corral_source_split_5391;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(in_$p1, $mul.ref(out_$i58, 1));
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i32.i64(out_$i57);
    goto corral_source_split_5413;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i19, 2);
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.0, out_$p21);
    goto corral_source_split_5411;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p21, $mul.ref(1, 1));
    goto corral_source_split_5410;

  $bb13:
    assume !(out_$i47 == 1);
    goto corral_source_split_5409;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(in_$p1, $mul.ref(out_$i71, 1));
    goto corral_source_split_5432;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i32.i64(out_$i70);
    goto corral_source_split_5431;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i19, 3);
    goto corral_source_split_5430;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.0, out_$p53);
    goto corral_source_split_5429;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p53, $mul.ref(1, 1));
    goto corral_source_split_5428;

  $bb16:
    assume !(out_$i60 == 1);
    goto corral_source_split_5427;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p30, out_$i31, out_$i32, out_$p33, out_$p28, out_$p29, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p40, out_$p41, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p53, out_$p54, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p66, out_$p67, out_$i73, out_$i74, out_$i75, out_$i19, out_$p20, out_$p21, out_$p22 := planar422p_to_yuv_packed_loop_$bb4(in_$p1, in_$i4, in_$i17, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p30, out_$i31, out_$i32, out_$p33, out_$p28, out_$p29, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p40, out_$p41, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p53, out_$p54, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p66, out_$p67, out_$i73, out_$i74, out_$i75, out_$i19, out_$p20, out_$p21, out_$p22);
    return;

  exit:
    return;
}



procedure planar422p_to_yuv_packed_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i17: i64, in_$i23: i1, in_$p24: ref, in_$i25: i8, in_$i26: i64, in_$p27: ref, in_$p30: ref, in_$i31: i8, in_$i32: i64, in_$p33: ref, in_$p28: ref, in_$p29: ref, in_$i34: i1, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$p40: ref, in_$p41: ref, in_$i47: i1, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i64, in_$p52: ref, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i64, in_$p59: ref, in_$p53: ref, in_$p54: ref, in_$i60: i1, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$p66: ref, in_$p67: ref, in_$i73: i32, in_$i74: i64, in_$i75: i1, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$p22: ref) returns (out_$i23: i1, out_$p24: ref, out_$i25: i8, out_$i26: i64, out_$p27: ref, out_$p30: ref, out_$i31: i8, out_$i32: i64, out_$p33: ref, out_$p28: ref, out_$p29: ref, out_$i34: i1, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$p40: ref, out_$p41: ref, out_$i47: i1, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i64, out_$p52: ref, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i64, out_$p59: ref, out_$p53: ref, out_$p54: ref, out_$i60: i1, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$p66: ref, out_$p67: ref, out_$i73: i32, out_$i74: i64, out_$i75: i1, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$p22: ref);
  modifies $M.0;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i4: i32, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i32, in_$i206: i32, in_$i207: i1, in_$i209: i32, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i1, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i1, in_$i238: i1, in_$i239: i1, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i1, in_$i245: i1, in_$i246: i1, in_$i247: i1, in_$i248: i1, in_$i249: i1, in_$i250: i1, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$i254: i1, in_$i255: i1, in_$i256: i1, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i261: i32, in_$i262: i1, in_$p263: ref, in_$p264: ref, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$p269: ref, in_$i271: i32, in_$i272: i1, in_$p273: ref, in_$i274: i64, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$p283: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$p288: ref, in_$i290: i32, in_$i291: i1, in_$p292: ref, in_$i293: i32, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$p302: ref, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$p307: ref, in_$i309: i32, in_$i310: i1, in_$p311: ref, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$p316: ref, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$i338: i32, in_$i339: i1, in_$p340: ref, in_$i342: i32, in_$i343: i1, in_$p344: ref, in_$p345: ref, in_$i347: i32, in_$i348: i1, in_$p349: ref, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$p354: ref, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$p359: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i368: i32, in_vslice_dummy_var_251: i32, in_vslice_dummy_var_252: i32, in_vslice_dummy_var_253: i32, in_vslice_dummy_var_254: i32, in_vslice_dummy_var_255: i32, in_vslice_dummy_var_256: i64, in_vslice_dummy_var_257: i64, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i32, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: i32, in_vslice_dummy_var_265: i32, in_vslice_dummy_var_266: i32, in_vslice_dummy_var_267: i32, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i32, in_vslice_dummy_var_273: i32, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i32, in_vslice_dummy_var_276: i32, in_vslice_dummy_var_277: i32, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: i32, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i32) returns (out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i32, out_$i206: i32, out_$i207: i1, out_$i209: i32, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i1, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i1, out_$i238: i1, out_$i239: i1, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i1, out_$i245: i1, out_$i246: i1, out_$i247: i1, out_$i248: i1, out_$i249: i1, out_$i250: i1, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$i254: i1, out_$i255: i1, out_$i256: i1, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i261: i32, out_$i262: i1, out_$p263: ref, out_$p264: ref, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$p269: ref, out_$i271: i32, out_$i272: i1, out_$p273: ref, out_$i274: i64, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$p283: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$p288: ref, out_$i290: i32, out_$i291: i1, out_$p292: ref, out_$i293: i32, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$p302: ref, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$p307: ref, out_$i309: i32, out_$i310: i1, out_$p311: ref, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$p316: ref, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$i338: i32, out_$i339: i1, out_$p340: ref, out_$i342: i32, out_$i343: i1, out_$p344: ref, out_$p345: ref, out_$i347: i32, out_$i348: i1, out_$p349: ref, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$p354: ref, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$p359: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i368: i32, out_vslice_dummy_var_251: i32, out_vslice_dummy_var_252: i32, out_vslice_dummy_var_253: i32, out_vslice_dummy_var_254: i32, out_vslice_dummy_var_255: i32, out_vslice_dummy_var_256: i64, out_vslice_dummy_var_257: i64, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i32, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: i32, out_vslice_dummy_var_265: i32, out_vslice_dummy_var_266: i32, out_vslice_dummy_var_267: i32, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i32, out_vslice_dummy_var_273: i32, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i32, out_vslice_dummy_var_276: i32, out_vslice_dummy_var_277: i32, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: i32, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i32)
{

  entry:
    out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i144, out_$i145, out_$p146, out_$i148, out_$i149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p259, out_$i261, out_$i262, out_$p263, out_$p264, out_$i266, out_$i267, out_$p268, out_$p269, out_$i271, out_$i272, out_$p273, out_$i274, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$p283, out_$i285, out_$i286, out_$p287, out_$p288, out_$i290, out_$i291, out_$p292, out_$i293, out_$i295, out_$i296, out_$p297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i304, out_$i305, out_$p306, out_$p307, out_$i309, out_$i310, out_$p311, out_$i313, out_$i314, out_$p315, out_$p316, out_$i318, out_$i319, out_$p320, out_$i322, out_$i323, out_$p324, out_$i326, out_$i327, out_$p328, out_$i330, out_$i331, out_$p332, out_$i334, out_$i335, out_$p336, out_$i338, out_$i339, out_$p340, out_$i342, out_$i343, out_$p344, out_$p345, out_$i347, out_$i348, out_$p349, out_$i351, out_$i352, out_$p353, out_$p354, out_$i356, out_$i357, out_$p358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i365, out_$i366, out_$p367, out_$i368, out_vslice_dummy_var_251, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286 := in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i91, in_$i92, in_$p93, in_$i95, in_$i96, in_$p97, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i105, in_$i106, in_$p107, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i121, in_$i122, in_$p123, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$p142, in_$i144, in_$i145, in_$p146, in_$i148, in_$i149, in_$p150, in_$p151, in_$i152, in_$i153, in_$i154, in_$i155, in_$p156, in_$p157, in_$i158, in_$i159, in_$p160, in_$p161, in_$i162, in_$i163, in_$p164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$p190, in_$i191, in_$i192, in_$i193, in_$i194, in_$p195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$p259, in_$i261, in_$i262, in_$p263, in_$p264, in_$i266, in_$i267, in_$p268, in_$p269, in_$i271, in_$i272, in_$p273, in_$i274, in_$i276, in_$i277, in_$p278, in_$i280, in_$i281, in_$p282, in_$p283, in_$i285, in_$i286, in_$p287, in_$p288, in_$i290, in_$i291, in_$p292, in_$i293, in_$i295, in_$i296, in_$p297, in_$i299, in_$i300, in_$p301, in_$p302, in_$i304, in_$i305, in_$p306, in_$p307, in_$i309, in_$i310, in_$p311, in_$i313, in_$i314, in_$p315, in_$p316, in_$i318, in_$i319, in_$p320, in_$i322, in_$i323, in_$p324, in_$i326, in_$i327, in_$p328, in_$i330, in_$i331, in_$p332, in_$i334, in_$i335, in_$p336, in_$i338, in_$i339, in_$p340, in_$i342, in_$i343, in_$p344, in_$p345, in_$i347, in_$i348, in_$p349, in_$i351, in_$i352, in_$p353, in_$p354, in_$i356, in_$i357, in_$p358, in_$p359, in_$i361, in_$i362, in_$p363, in_$i365, in_$i366, in_$p367, in_$i368, in_vslice_dummy_var_251, in_vslice_dummy_var_252, in_vslice_dummy_var_253, in_vslice_dummy_var_254, in_vslice_dummy_var_255, in_vslice_dummy_var_256, in_vslice_dummy_var_257, in_vslice_dummy_var_258, in_vslice_dummy_var_259, in_vslice_dummy_var_260, in_vslice_dummy_var_261, in_vslice_dummy_var_262, in_vslice_dummy_var_263, in_vslice_dummy_var_264, in_vslice_dummy_var_265, in_vslice_dummy_var_266, in_vslice_dummy_var_267, in_vslice_dummy_var_268, in_vslice_dummy_var_269, in_vslice_dummy_var_270, in_vslice_dummy_var_271, in_vslice_dummy_var_272, in_vslice_dummy_var_273, in_vslice_dummy_var_274, in_vslice_dummy_var_275, in_vslice_dummy_var_276, in_vslice_dummy_var_277, in_vslice_dummy_var_278, in_vslice_dummy_var_279, in_vslice_dummy_var_280, in_vslice_dummy_var_281, in_vslice_dummy_var_282, in_vslice_dummy_var_283, in_vslice_dummy_var_284, in_vslice_dummy_var_285, in_vslice_dummy_var_286;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} out_$i68 := __VERIFIER_nondet_int();
    call {:si_unique_call 1011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i68);
    call {:si_unique_call 1012} {:cexpr "tmp___42"} boogie_si_record_i32(out_$i68);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb69_dummy;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb23:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1019} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} out_vslice_dummy_var_252 := s2255_mmap_v4l(out_$p93, in_$p6);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$p93 := $M.38;
    goto corral_source_split_5729;

  $bb41:
    assume out_$i92 == 1;
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 2);
    goto corral_source_split_5726;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i91 := $M.43;
    goto corral_source_split_5725;

  $bb39:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} out_vslice_dummy_var_251 := s2255_mmap_v4l(out_$p89, in_$p6);
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$p89 := $M.38;
    goto corral_source_split_5721;

  $bb38:
    assume out_$i88 == 1;
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 1);
    goto corral_source_split_5718;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    out_$i87 := $M.43;
    goto corral_source_split_5717;

  $bb36:
    assume out_$i86 == 1;
    goto corral_source_split_5716;

  $bb34:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i80, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb25:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i80, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i80, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_5698:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1013} out_$i80 := __VERIFIER_nondet_int();
    call {:si_unique_call 1014} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i80);
    call {:si_unique_call 1015} {:cexpr "tmp___43"} boogie_si_record_i32(out_$i80);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i79 == 1;
    goto corral_source_split_5698;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_5696;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    out_$i78 := $M.43;
    goto corral_source_split_5695;

  $bb20:
    assume out_$i77 == 1;
    goto corral_source_split_5694;

  $bb18:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i68, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i68, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i68, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb46:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $M.49 := out_$i100;
    call {:si_unique_call 1022} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_5739;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$i100 := $sub.i32(out_$i99, 1);
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    out_$i99 := $M.49;
    goto corral_source_split_5737;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1021} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5736;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} out_vslice_dummy_var_253 := s2255_release(out_$p97);
    goto corral_source_split_5735;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    out_$p97 := $M.38;
    goto corral_source_split_5734;

  $bb45:
    assume out_$i96 == 1;
    goto corral_source_split_5733;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 2);
    goto corral_source_split_5714;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i95 := $M.43;
    goto corral_source_split_5713;

  $bb35:
    assume !(out_$i85 == 1);
    goto corral_source_split_5712;

  $bb52:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5752;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} out_vslice_dummy_var_255 := s2255_poll(out_$p107, in_$p9);
    goto corral_source_split_5751;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$p107 := $M.38;
    goto corral_source_split_5750;

  $bb51:
    assume out_$i106 == 1;
    goto corral_source_split_5749;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 2);
    goto corral_source_split_5747;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i105 := $M.43;
    goto corral_source_split_5746;

  $bb49:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5744;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} out_vslice_dummy_var_254 := s2255_poll(out_$p103, in_$p9);
    goto corral_source_split_5743;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    out_$p103 := $M.38;
    goto corral_source_split_5742;

  $bb48:
    assume out_$i102 == 1;
    goto corral_source_split_5741;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 1);
    goto corral_source_split_5702;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    out_$i101 := $M.43;
    goto corral_source_split_5701;

  $bb27:
    assume out_$i82 == 1;
    goto corral_source_split_5700;

  $bb26:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i80, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb55:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.49 := out_$i116;
    call {:si_unique_call 1030} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_5765;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i115, 1);
    goto corral_source_split_5764;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    out_$i115 := $M.49;
    goto corral_source_split_5763;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1029} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5762;

  $bb56:
    assume out_$i114 == 1;
    goto corral_source_split_5761;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 0);
    goto corral_source_split_5759;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    out_$i113 := $M.52;
    goto corral_source_split_5758;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $M.52 := out_$i112;
    call {:si_unique_call 1028} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_5757;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} out_$i112 := s2255_open(out_$p111);
    goto corral_source_split_5756;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    out_$p111 := $M.38;
    goto corral_source_split_5755;

  $bb54:
    assume out_$i110 == 1;
    goto corral_source_split_5754;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 1);
    goto corral_source_split_5706;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$i109 := $M.43;
    goto corral_source_split_5705;

  $bb29:
    assume out_$i83 == 1;
    goto corral_source_split_5704;

  $bb28:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i80, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb64:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1034} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5778;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_vslice_dummy_var_257 := video_ioctl2(out_$p123, in_$i4, in_$i7);
    goto corral_source_split_5777;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    out_$p123 := $M.38;
    goto corral_source_split_5776;

  $bb63:
    assume out_$i122 == 1;
    goto corral_source_split_5775;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 2);
    goto corral_source_split_5773;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i121 := $M.43;
    goto corral_source_split_5772;

  $bb61:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5770;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} out_vslice_dummy_var_256 := video_ioctl2(out_$p119, in_$i4, in_$i7);
    goto corral_source_split_5769;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    out_$p119 := $M.38;
    goto corral_source_split_5768;

  $bb60:
    assume out_$i118 == 1;
    goto corral_source_split_5767;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_5710;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    out_$i117 := $M.43;
    goto corral_source_split_5709;

  $bb31:
    assume out_$i84 == 1;
    goto corral_source_split_5708;

  $bb30:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i80, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_stop();
    goto corral_source_split_5780;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb33;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb33;

  $bb71:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1040} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} out_vslice_dummy_var_258 := s2255_s_ctrl(in_$p11);
    goto corral_source_split_5789;

  $bb75:
    assume out_$i130 == 1;
    goto corral_source_split_5788;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_5786;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    out_$i129 := $M.44;
    goto corral_source_split_5785;

  $bb73:
    assume out_$i128 == 1;
    goto corral_source_split_5784;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_5782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1036} out_$i127 := __VERIFIER_nondet_int();
    call {:si_unique_call 1037} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i127);
    call {:si_unique_call 1038} {:cexpr "tmp___44"} boogie_si_record_i32(out_$i127);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb70:
    assume out_$i126 == 1;
    goto corral_source_split_5782;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 0);
    goto corral_source_split_5692;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    out_$i125 := $M.44;
    goto corral_source_split_5691;

  $bb19:
    assume !(out_$i76 == 1);
    goto corral_source_split_5690;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} ldv_stop();
    goto corral_source_split_5792;

  $bb74:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb83:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1048} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} out_vslice_dummy_var_260 := buffer_setup(out_$p146, in_$p13, in_$p15);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    out_$p146 := $M.30;
    goto corral_source_split_5821;

  $bb99:
    assume out_$i145 == 1;
    goto corral_source_split_5820;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 2);
    goto corral_source_split_5818;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i144 := $M.45;
    goto corral_source_split_5817;

  $bb97:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1046} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} out_vslice_dummy_var_259 := buffer_setup(out_$p142, in_$p13, in_$p15);
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$p142 := $M.30;
    goto corral_source_split_5813;

  $bb96:
    assume out_$i141 == 1;
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 1);
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$i140 := $M.45;
    goto corral_source_split_5809;

  $bb94:
    assume out_$i139 == 1;
    goto corral_source_split_5808;

  $bb92:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i134, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb85:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i134, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i134, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_5794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} out_$i134 := __VERIFIER_nondet_int();
    call {:si_unique_call 1043} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i134);
    call {:si_unique_call 1044} {:cexpr "tmp___45"} boogie_si_record_i32(out_$i134);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume out_$i133 == 1;
    goto corral_source_split_5794;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_5684;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    out_$i132 := $M.45;
    goto corral_source_split_5683;

  $bb16:
    assume out_$i75 == 1;
    goto corral_source_split_5682;

  $bb15:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i68, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb104:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.49 := out_$i153;
    call {:si_unique_call 1051} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i153);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i153 := $sub.i32(out_$i152, 1);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$i152 := $M.49;
    goto corral_source_split_5830;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1050} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5829;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} buffer_release(out_$p150, out_$p151);
    goto corral_source_split_5828;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    out_$p151 := $M.31;
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    out_$p150 := $M.30;
    goto corral_source_split_5826;

  $bb103:
    assume out_$i149 == 1;
    goto corral_source_split_5825;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 2);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$i148 := $M.45;
    goto corral_source_split_5805;

  $bb93:
    assume !(out_$i138 == 1);
    goto corral_source_split_5804;

  $bb110:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1055} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5847;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} buffer_queue(out_$p160, out_$p161);
    goto corral_source_split_5846;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    out_$p161 := $M.31;
    goto corral_source_split_5845;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    out_$p160 := $M.30;
    goto corral_source_split_5844;

  $bb109:
    assume out_$i159 == 1;
    goto corral_source_split_5843;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 2);
    goto corral_source_split_5841;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i158 := $M.45;
    goto corral_source_split_5840;

  $bb107:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} buffer_queue(out_$p156, out_$p157);
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    out_$p157 := $M.31;
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$p156 := $M.30;
    goto corral_source_split_5835;

  $bb106:
    assume out_$i155 == 1;
    goto corral_source_split_5834;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 1);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    out_$i154 := $M.45;
    goto corral_source_split_5797;

  $bb87:
    assume out_$i136 == 1;
    goto corral_source_split_5796;

  $bb86:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i134, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb113:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb115:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.49 := out_$i171;
    call {:si_unique_call 1059} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i171);
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$i171 := $add.i32(out_$i170, 1);
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    out_$i170 := $M.49;
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1058} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5859;

  $bb114:
    assume out_$i169 == 1;
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 0);
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$i168 := $M.53;
    goto corral_source_split_5855;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.53 := out_$i167;
    call {:si_unique_call 1057} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i167);
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} out_$i167 := buffer_prepare(out_$p164, out_$p165, out_$i166);
    goto corral_source_split_5853;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.39, in_$p0);
    goto corral_source_split_5852;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    out_$p165 := $M.31;
    goto corral_source_split_5851;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    out_$p164 := $M.30;
    goto corral_source_split_5850;

  $bb112:
    assume out_$i163 == 1;
    goto corral_source_split_5849;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 1);
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    out_$i162 := $M.45;
    goto corral_source_split_5801;

  $bb89:
    assume out_$i137 == 1;
    goto corral_source_split_5800;

  $bb88:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i134, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} ldv_stop();
    goto corral_source_split_5864;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb91;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i139 == 1);
    goto $bb91;

  $bb122:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb132:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.49 := out_$i185;
    call {:si_unique_call 1067} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i185);
    goto corral_source_split_5887;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    out_$i185 := $add.i32(out_$i184, 1);
    goto corral_source_split_5886;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    out_$i184 := $M.49;
    goto corral_source_split_5885;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5884;

  $bb133:
    assume out_$i183 == 1;
    goto corral_source_split_5883;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 0);
    goto corral_source_split_5881;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    out_$i182 := $M.54;
    goto corral_source_split_5880;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.54 := out_$i181;
    call {:si_unique_call 1065} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_5879;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} out_$i181 := s2255_probe(out_$p180, in_$p17);
    goto corral_source_split_5878;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    out_$p180 := $M.28;
    goto corral_source_split_5877;

  $bb131:
    assume out_$i179 == 1;
    goto corral_source_split_5876;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 1);
    goto corral_source_split_5874;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$i178 := $M.46;
    goto corral_source_split_5873;

  $bb129:
    assume out_$i177 == 1;
    goto corral_source_split_5872;

  $bb124:
    assume out_$i175 == 1;
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i174, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i175 := $slt.i32(out_$i174, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_5866:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1061} out_$i174 := __VERIFIER_nondet_int();
    call {:si_unique_call 1062} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i174);
    call {:si_unique_call 1063} {:cexpr "tmp___46"} boogie_si_record_i32(out_$i174);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb121:
    assume out_$i173 == 1;
    goto corral_source_split_5866;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i32(out_$i172, 0);
    goto corral_source_split_5688;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    out_$i172 := $M.46;
    goto corral_source_split_5687;

  $bb17:
    assume !(out_$i75 == 1);
    goto corral_source_split_5686;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.49 := out_$i192;
    call {:si_unique_call 1070} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_5899;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    out_$i192 := $sub.i32(out_$i191, 1);
    goto corral_source_split_5898;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    out_$i191 := $M.49;
    goto corral_source_split_5897;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1069} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5896;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} s2255_disconnect(out_$p190);
    goto corral_source_split_5895;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    out_$p190 := $M.28;
    goto corral_source_split_5894;

  $bb141:
    assume out_$i189 == 1;
    goto corral_source_split_5893;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 0);
    goto corral_source_split_5891;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    out_$i188 := $M.55;
    goto corral_source_split_5890;

  $bb138:
    assume out_$i187 == 1;
    goto corral_source_split_5889;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 2);
    goto corral_source_split_5870;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    out_$i186 := $M.46;
    goto corral_source_split_5869;

  $bb126:
    assume out_$i176 == 1;
    goto corral_source_split_5868;

  $bb125:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i174, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb139:
    assume {:verifier.code 0} true;
    assume !(out_$i187 == 1);
    goto $bb140;

  $bb142:
    assume {:verifier.code 0} true;
    assume !(out_$i189 == 1);
    goto $bb140;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} ldv_stop();
    goto corral_source_split_5901;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb127:
    assume {:verifier.code 0} true;
    assume !(out_$i176 == 1);
    goto $bb128;

  $bb130:
    assume {:verifier.code 0} true;
    assume !(out_$i177 == 1);
    goto $bb128;

  $bb148:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} choose_timer_1(out_$p195);
    goto corral_source_split_5905;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    out_$p195 := $M.17;
    goto corral_source_split_5904;

  $bb147:
    assume out_$i194 == 1;
    goto corral_source_split_5903;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i194 := $ne.i32(out_$i193, 0);
    goto corral_source_split_5676;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$i193 := $M.47;
    goto corral_source_split_5675;

  $bb12:
    assume out_$i73 == 1;
    goto corral_source_split_5674;

  $bb5:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i68, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i68, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb151:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.49 := out_$i205;
    call {:si_unique_call 1078} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i205);
    goto corral_source_split_5922;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    out_$i205 := $sub.i32(out_$i204, 1);
    goto corral_source_split_5921;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    out_$i204 := $M.49;
    goto corral_source_split_5920;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1077} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5919;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} s2255_video_device_release(in_$p19);
    goto corral_source_split_5918;

  $bb160:
    assume out_$i203 == 1;
    goto corral_source_split_5917;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 2);
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    out_$i202 := $M.48;
    goto corral_source_split_5914;

  $bb158:
    assume out_$i201 == 1;
    goto corral_source_split_5913;

  $bb153:
    assume out_$i199 == 1;
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i198, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb152:
    assume {:verifier.code 0} true;
    out_$i199 := $slt.i32(out_$i198, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_5907:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1073} out_$i198 := __VERIFIER_nondet_int();
    call {:si_unique_call 1074} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i198);
    call {:si_unique_call 1075} {:cexpr "tmp___47"} boogie_si_record_i32(out_$i198);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb150:
    assume out_$i197 == 1;
    goto corral_source_split_5907;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    out_$i197 := $ne.i32(out_$i196, 0);
    goto corral_source_split_5680;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    out_$i196 := $M.48;
    goto corral_source_split_5679;

  $bb13:
    assume !(out_$i73 == 1);
    goto corral_source_split_5678;

  $bb165:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.49 := out_$i210;
    call {:si_unique_call 1081} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i210);
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$i210 := $add.i32(out_$i209, 1);
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    out_$i209 := $M.49;
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1080} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} out_vslice_dummy_var_261 := ldv_probe_4();
    goto corral_source_split_5925;

  $bb164:
    assume out_$i207 == 1;
    goto corral_source_split_5924;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 1);
    goto corral_source_split_5911;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    out_$i206 := $M.48;
    goto corral_source_split_5910;

  $bb155:
    assume out_$i200 == 1;
    goto corral_source_split_5909;

  $bb154:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i198, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} ldv_stop();
    goto corral_source_split_5931;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i200 == 1);
    goto $bb157;

  $bb159:
    assume {:verifier.code 0} true;
    assume !(out_$i201 == 1);
    goto $bb157;

  $bb171:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume {:verifier.code 0} true;
    assume !(out_$i218 == 1);
    goto $bb182;

  $bb184:
    assume {:verifier.code 0} true;
    assume !(out_$i220 == 1);
    goto $bb182;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 0);
    goto corral_source_split_5945;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    out_$i219 := $M.49;
    goto corral_source_split_5944;

  $bb180:
    assume out_$i218 == 1;
    goto corral_source_split_5943;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 3);
    goto corral_source_split_5941;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$i217 := $M.50;
    goto corral_source_split_5940;

  $bb178:
    assume out_$i216 == 1;
    goto corral_source_split_5939;

  $bb173:
    assume out_$i214 == 1;
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i213, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i214 := $slt.i32(out_$i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_5933:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1083} out_$i213 := __VERIFIER_nondet_int();
    call {:si_unique_call 1084} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i213);
    call {:si_unique_call 1085} {:cexpr "tmp___48"} boogie_si_record_i32(out_$i213);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb170:
    assume out_$i212 == 1;
    goto corral_source_split_5933;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    out_$i212 := $ne.i32(out_$i211, 0);
    goto corral_source_split_5668;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    out_$i211 := $M.50;
    goto corral_source_split_5667;

  $bb7:
    assume out_$i71 == 1;
    goto corral_source_split_5666;

  $bb6:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i68, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb189:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb194:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    out_$i227 := $ne.i32(out_$i226, 0);
    goto corral_source_split_5971;

  $bb192:
    assume {:verifier.code 0} true;
    out_$i226 := $M.56;
    goto corral_source_split_5970;

  $bb191:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} ldv_initialize_v4l2_file_operations_6();
    goto corral_source_split_5968;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1098} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5967;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1097} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5966;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1096} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5965;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} ldv_videobuf_queue_ops_7();
    goto corral_source_split_5964;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1094} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} ldv_initialize_v4l2_ioctl_ops_5();
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1092} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5961;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1091} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5960;

  $bb190:
    assume out_$i225 == 1;
    goto corral_source_split_5959;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 0);
    goto corral_source_split_5957;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    out_$i224 := $M.56;
    goto corral_source_split_5956;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $M.56 := out_$i223;
    call {:si_unique_call 1090} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i223);
    goto corral_source_split_5955;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} out_$i223 := s2255_driver_init();
    goto corral_source_split_5954;

  $bb188:
    assume out_$i222 == 1;
    goto corral_source_split_5953;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 1);
    goto corral_source_split_5937;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    out_$i221 := $M.50;
    goto corral_source_split_5936;

  $bb175:
    assume out_$i215 == 1;
    goto corral_source_split_5935;

  $bb174:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} ldv_stop();
    goto corral_source_split_5976;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb176:
    assume {:verifier.code 0} true;
    assume !(out_$i215 == 1);
    goto $bb177;

  $bb179:
    assume {:verifier.code 0} true;
    assume !(out_$i216 == 1);
    goto $bb177;

  $bb201:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb257:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1106} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} out_vslice_dummy_var_262 := vidioc_reqbufs(out_$p259, in_$p27, in_$p51);
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$p259 := $M.32;
    goto corral_source_split_6081;

  $bb256:
    assume out_$i258 == 1;
    goto corral_source_split_6080;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 1);
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    out_$i257 := $M.51;
    goto corral_source_split_6077;

  $bb254:
    assume out_$i256 == 1;
    goto corral_source_split_6076;

  $bb250:
    assume out_$i254 == 1;
    assume {:verifier.code 0} true;
    out_$i256 := $eq.i32(out_$i230, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb244:
    assume out_$i251 == 1;
    assume {:verifier.code 0} true;
    out_$i254 := $slt.i32(out_$i230, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb232:
    assume out_$i245 == 1;
    assume {:verifier.code 0} true;
    out_$i251 := $slt.i32(out_$i230, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb203:
    assume out_$i231 == 1;
    assume {:verifier.code 0} true;
    out_$i245 := $slt.i32(out_$i230, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb202:
    assume {:verifier.code 0} true;
    out_$i231 := $slt.i32(out_$i230, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_5978:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} out_$i230 := __VERIFIER_nondet_int();
    call {:si_unique_call 1103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i230);
    call {:si_unique_call 1104} {:cexpr "tmp___49"} boogie_si_record_i32(out_$i230);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb200:
    assume out_$i229 == 1;
    goto corral_source_split_5978;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    out_$i229 := $ne.i32(out_$i228, 0);
    goto corral_source_split_5672;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    out_$i228 := $M.51;
    goto corral_source_split_5671;

  $bb9:
    assume out_$i72 == 1;
    goto corral_source_split_5670;

  $bb8:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i68, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb261:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1108} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6089;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} out_vslice_dummy_var_263 := v4l2_event_unsubscribe(out_$p263, out_$p264);
    goto corral_source_split_6088;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$p264 := $M.34;
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$p263 := $M.36;
    goto corral_source_split_6086;

  $bb260:
    assume out_$i262 == 1;
    goto corral_source_split_6085;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 1);
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    out_$i261 := $M.51;
    goto corral_source_split_6069;

  $bb252:
    assume out_$i255 == 1;
    goto corral_source_split_6068;

  $bb251:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    out_$i255 := $slt.i32(out_$i230, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb264:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1110} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6095;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} out_vslice_dummy_var_264 := vidioc_try_fmt_vid_cap(out_$p268, in_$p29, out_$p269);
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    out_$p269 := $M.33;
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$p268 := $M.32;
    goto corral_source_split_6092;

  $bb263:
    assume out_$i267 == 1;
    goto corral_source_split_6091;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 1);
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    out_$i266 := $M.51;
    goto corral_source_split_6073;

  $bb253:
    assume !(out_$i255 == 1);
    goto corral_source_split_6072;

  $bb267:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1112} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} out_vslice_dummy_var_265 := vidioc_s_std(out_$p273, in_$p25, out_$i274);
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i64($M.40, in_$p1);
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$p273 := $M.32;
    goto corral_source_split_6098;

  $bb266:
    assume out_$i272 == 1;
    goto corral_source_split_6097;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i271, 1);
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$i271 := $M.51;
    goto corral_source_split_6057;

  $bb246:
    assume out_$i252 == 1;
    goto corral_source_split_6056;

  $bb245:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    out_$i252 := $slt.i32(out_$i230, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb270:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1114} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} out_vslice_dummy_var_266 := v4l2_ctrl_log_status(out_$p278, in_$p46);
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$p278 := $M.32;
    goto corral_source_split_6104;

  $bb269:
    assume out_$i277 == 1;
    goto corral_source_split_6103;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i276, 1);
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$i276 := $M.51;
    goto corral_source_split_6061;

  $bb248:
    assume out_$i253 == 1;
    goto corral_source_split_6060;

  $bb247:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    out_$i253 := $slt.i32(out_$i230, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb273:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} out_vslice_dummy_var_267 := vidioc_querybuf(out_$p282, in_$p49, out_$p283);
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$p283 := $M.35;
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$p282 := $M.32;
    goto corral_source_split_6109;

  $bb272:
    assume out_$i281 == 1;
    goto corral_source_split_6108;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 1);
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$i280 := $M.51;
    goto corral_source_split_6065;

  $bb249:
    assume !(out_$i253 == 1);
    goto corral_source_split_6064;

  $bb276:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1118} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} out_vslice_dummy_var_268 := vidioc_dqbuf(out_$p287, in_$p41, out_$p288);
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$p288 := $M.35;
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$p287 := $M.32;
    goto corral_source_split_6115;

  $bb275:
    assume out_$i286 == 1;
    goto corral_source_split_6114;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i285, 1);
    goto corral_source_split_6046;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    out_$i285 := $M.51;
    goto corral_source_split_6045;

  $bb240:
    assume out_$i249 == 1;
    goto corral_source_split_6044;

  $bb234:
    assume out_$i246 == 1;
    assume {:verifier.code 0} true;
    out_$i249 := $slt.i32(out_$i230, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb233:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    out_$i246 := $slt.i32(out_$i230, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb279:
    assume !(out_$i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1120} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} out_vslice_dummy_var_269 := vidioc_streamoff(out_$p292, in_$p34, out_$i293);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i293 := $load.i32($M.41, in_$p2);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$p292 := $M.32;
    goto corral_source_split_6121;

  $bb278:
    assume out_$i291 == 1;
    goto corral_source_split_6120;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i290, 1);
    goto corral_source_split_6050;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    out_$i290 := $M.51;
    goto corral_source_split_6049;

  $bb242:
    assume out_$i250 == 1;
    goto corral_source_split_6048;

  $bb241:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    out_$i250 := $slt.i32(out_$i230, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb282:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1122} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} out_vslice_dummy_var_270 := vidioc_enum_fmt_vid_cap(out_$p297, in_$p48, in_$p33);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$p297 := $M.32;
    goto corral_source_split_6127;

  $bb281:
    assume out_$i296 == 1;
    goto corral_source_split_6126;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 1);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$i295 := $M.51;
    goto corral_source_split_6053;

  $bb243:
    assume !(out_$i250 == 1);
    goto corral_source_split_6052;

  $bb285:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1124} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} out_vslice_dummy_var_271 := vidioc_s_fmt_vid_cap(out_$p301, in_$p38, out_$p302);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$p302 := $M.33;
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    out_$p301 := $M.32;
    goto corral_source_split_6132;

  $bb284:
    assume out_$i300 == 1;
    goto corral_source_split_6131;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i299, 1);
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$i299 := $M.51;
    goto corral_source_split_6033;

  $bb236:
    assume out_$i247 == 1;
    goto corral_source_split_6032;

  $bb235:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    out_$i247 := $slt.i32(out_$i230, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb288:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1126} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} out_vslice_dummy_var_272 := vidioc_g_fmt_vid_cap(out_$p306, in_$p35, out_$p307);
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$p307 := $M.33;
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$p306 := $M.32;
    goto corral_source_split_6138;

  $bb287:
    assume out_$i305 == 1;
    goto corral_source_split_6137;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 1);
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    out_$i304 := $M.51;
    goto corral_source_split_6037;

  $bb238:
    assume out_$i248 == 1;
    goto corral_source_split_6036;

  $bb237:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    out_$i248 := $slt.i32(out_$i230, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb291:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1128} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} out_vslice_dummy_var_273 := vidioc_g_input(out_$p311, in_$p23, in_$p45);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$p311 := $M.32;
    goto corral_source_split_6144;

  $bb290:
    assume out_$i310 == 1;
    goto corral_source_split_6143;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 1);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i309 := $M.51;
    goto corral_source_split_6041;

  $bb239:
    assume !(out_$i248 == 1);
    goto corral_source_split_6040;

  $bb294:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1130} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} out_vslice_dummy_var_274 := vidioc_qbuf(out_$p315, in_$p57, out_$p316);
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$p316 := $M.35;
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    out_$p315 := $M.32;
    goto corral_source_split_6149;

  $bb293:
    assume out_$i314 == 1;
    goto corral_source_split_6148;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, 1);
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    out_$i313 := $M.51;
    goto corral_source_split_6021;

  $bb228:
    assume out_$i243 == 1;
    goto corral_source_split_6020;

  $bb222:
    assume out_$i240 == 1;
    assume {:verifier.code 0} true;
    out_$i243 := $slt.i32(out_$i230, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb205:
    assume out_$i232 == 1;
    assume {:verifier.code 0} true;
    out_$i240 := $slt.i32(out_$i230, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb204:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    out_$i232 := $slt.i32(out_$i230, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb297:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1132} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} out_vslice_dummy_var_275 := vidioc_enum_framesizes(out_$p320, in_$p28, in_$p40);
    goto corral_source_split_6156;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$p320 := $M.32;
    goto corral_source_split_6155;

  $bb296:
    assume out_$i319 == 1;
    goto corral_source_split_6154;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$i319 := $eq.i32(out_$i318, 1);
    goto corral_source_split_6026;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i318 := $M.51;
    goto corral_source_split_6025;

  $bb230:
    assume out_$i244 == 1;
    goto corral_source_split_6024;

  $bb229:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    out_$i244 := $slt.i32(out_$i230, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb300:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1134} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6162;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} out_vslice_dummy_var_276 := vidioc_querycap(out_$p324, in_$p54, in_$p53);
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$p324 := $M.32;
    goto corral_source_split_6160;

  $bb299:
    assume out_$i323 == 1;
    goto corral_source_split_6159;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i322, 1);
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$i322 := $M.51;
    goto corral_source_split_6029;

  $bb231:
    assume !(out_$i244 == 1);
    goto corral_source_split_6028;

  $bb303:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1136} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} out_vslice_dummy_var_277 := vidioc_s_jpegcomp(out_$p328, in_$p59, in_$p31);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$p328 := $M.32;
    goto corral_source_split_6165;

  $bb302:
    assume out_$i327 == 1;
    goto corral_source_split_6164;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i326, 1);
    goto corral_source_split_6010;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$i326 := $M.51;
    goto corral_source_split_6009;

  $bb224:
    assume out_$i241 == 1;
    goto corral_source_split_6008;

  $bb223:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    out_$i241 := $slt.i32(out_$i230, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb306:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1138} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} out_vslice_dummy_var_278 := vidioc_enum_frameintervals(out_$p332, in_$p24, in_$p62);
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$p332 := $M.32;
    goto corral_source_split_6170;

  $bb305:
    assume out_$i331 == 1;
    goto corral_source_split_6169;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$i331 := $eq.i32(out_$i330, 1);
    goto corral_source_split_6014;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    out_$i330 := $M.51;
    goto corral_source_split_6013;

  $bb226:
    assume out_$i242 == 1;
    goto corral_source_split_6012;

  $bb225:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    out_$i242 := $slt.i32(out_$i230, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb309:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1140} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6177;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} out_vslice_dummy_var_279 := vidioc_g_std(out_$p336, in_$p58, in_$p43);
    goto corral_source_split_6176;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    out_$p336 := $M.32;
    goto corral_source_split_6175;

  $bb308:
    assume out_$i335 == 1;
    goto corral_source_split_6174;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i335 := $eq.i32(out_$i334, 1);
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$i334 := $M.51;
    goto corral_source_split_6017;

  $bb227:
    assume !(out_$i242 == 1);
    goto corral_source_split_6016;

  $bb312:
    assume !(out_$i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1142} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6182;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} out_vslice_dummy_var_280 := vidioc_g_jpegcomp(out_$p340, in_$p63, in_$p21);
    goto corral_source_split_6181;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    out_$p340 := $M.32;
    goto corral_source_split_6180;

  $bb311:
    assume out_$i339 == 1;
    goto corral_source_split_6179;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$i339 := $eq.i32(out_$i338, 1);
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    out_$i338 := $M.51;
    goto corral_source_split_5997;

  $bb218:
    assume out_$i238 == 1;
    goto corral_source_split_5996;

  $bb207:
    assume out_$i233 == 1;
    assume {:verifier.code 0} true;
    out_$i238 := $slt.i32(out_$i230, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb206:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    out_$i233 := $slt.i32(out_$i230, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb315:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1144} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6188;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} out_vslice_dummy_var_281 := vidioc_g_parm(out_$p344, in_$p60, out_$p345);
    goto corral_source_split_6187;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    out_$p345 := $M.37;
    goto corral_source_split_6186;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    out_$p344 := $M.32;
    goto corral_source_split_6185;

  $bb314:
    assume out_$i343 == 1;
    goto corral_source_split_6184;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$i343 := $eq.i32(out_$i342, 1);
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$i342 := $M.51;
    goto corral_source_split_6001;

  $bb220:
    assume out_$i239 == 1;
    goto corral_source_split_6000;

  $bb219:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    out_$i239 := $slt.i32(out_$i230, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb318:
    assume !(out_$i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1146} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6193;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} out_vslice_dummy_var_282 := vidioc_enum_input(out_$p349, in_$p36, in_$p56);
    goto corral_source_split_6192;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    out_$p349 := $M.32;
    goto corral_source_split_6191;

  $bb317:
    assume out_$i348 == 1;
    goto corral_source_split_6190;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    out_$i348 := $eq.i32(out_$i347, 1);
    goto corral_source_split_6006;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$i347 := $M.51;
    goto corral_source_split_6005;

  $bb221:
    assume !(out_$i239 == 1);
    goto corral_source_split_6004;

  $bb321:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1148} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} out_vslice_dummy_var_283 := v4l2_ctrl_subscribe_event(out_$p353, out_$p354);
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$p354 := $M.34;
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    out_$p353 := $M.36;
    goto corral_source_split_6196;

  $bb320:
    assume out_$i352 == 1;
    goto corral_source_split_6195;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 1);
    goto corral_source_split_5990;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    out_$i351 := $M.51;
    goto corral_source_split_5989;

  $bb216:
    assume out_$i237 == 1;
    goto corral_source_split_5988;

  $bb209:
    assume out_$i234 == 1;
    assume {:verifier.code 0} true;
    out_$i237 := $slt.i32(out_$i230, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb208:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    out_$i234 := $slt.i32(out_$i230, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb324:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1150} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6205;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} out_vslice_dummy_var_284 := vidioc_s_parm(out_$p358, in_$p37, out_$p359);
    goto corral_source_split_6204;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    out_$p359 := $M.37;
    goto corral_source_split_6203;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    out_$p358 := $M.32;
    goto corral_source_split_6202;

  $bb323:
    assume out_$i357 == 1;
    goto corral_source_split_6201;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i357 := $eq.i32(out_$i356, 1);
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$i356 := $M.51;
    goto corral_source_split_5993;

  $bb217:
    assume !(out_$i237 == 1);
    goto corral_source_split_5992;

  $bb327:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1152} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6210;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} out_vslice_dummy_var_285 := vidioc_s_input(out_$p363, in_$p47, in_$i26);
    goto corral_source_split_6209;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    out_$p363 := $M.32;
    goto corral_source_split_6208;

  $bb326:
    assume out_$i362 == 1;
    goto corral_source_split_6207;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 1);
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    out_$i361 := $M.51;
    goto corral_source_split_5981;

  $bb211:
    assume out_$i235 == 1;
    goto corral_source_split_5980;

  $bb210:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    out_$i235 := $slt.i32(out_$i230, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb330:
    assume !(out_$i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1154} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6216;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} out_vslice_dummy_var_286 := vidioc_streamon(out_$p367, in_$p22, out_$i368);
    goto corral_source_split_6215;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    out_$i368 := $load.i32($M.42, in_$p3);
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    out_$p367 := $M.32;
    goto corral_source_split_6213;

  $bb329:
    assume out_$i366 == 1;
    goto corral_source_split_6212;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    out_$i366 := $eq.i32(out_$i365, 1);
    goto corral_source_split_5986;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    out_$i365 := $M.51;
    goto corral_source_split_5985;

  $bb213:
    assume out_$i236 == 1;
    goto corral_source_split_5984;

  $bb212:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i230, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} ldv_stop();
    goto corral_source_split_6218;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb214:
    assume {:verifier.code 0} true;
    assume !(out_$i236 == 1);
    goto $bb215;

  $bb255:
    assume {:verifier.code 0} true;
    assume !(out_$i256 == 1);
    goto $bb215;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} ldv_stop();
    goto corral_source_split_6220;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb11;

  $bb69_dummy:
    call {:si_unique_call 1} out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i144, out_$i145, out_$p146, out_$i148, out_$i149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p259, out_$i261, out_$i262, out_$p263, out_$p264, out_$i266, out_$i267, out_$p268, out_$p269, out_$i271, out_$i272, out_$p273, out_$i274, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$p283, out_$i285, out_$i286, out_$p287, out_$p288, out_$i290, out_$i291, out_$p292, out_$i293, out_$i295, out_$i296, out_$p297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i304, out_$i305, out_$p306, out_$p307, out_$i309, out_$i310, out_$p311, out_$i313, out_$i314, out_$p315, out_$p316, out_$i318, out_$i319, out_$p320, out_$i322, out_$i323, out_$p324, out_$i326, out_$i327, out_$p328, out_$i330, out_$i331, out_$p332, out_$i334, out_$i335, out_$p336, out_$i338, out_$i339, out_$p340, out_$i342, out_$i343, out_$p344, out_$p345, out_$i347, out_$i348, out_$p349, out_$i351, out_$i352, out_$p353, out_$p354, out_$i356, out_$i357, out_$p358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i365, out_$i366, out_$p367, out_$i368, out_vslice_dummy_var_251, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$i4, in_$p6, in_$i7, in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$p27, in_$p28, in_$p29, in_$p31, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p40, in_$p41, in_$p43, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p51, in_$p53, in_$p54, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p62, in_$p63, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i144, out_$i145, out_$p146, out_$i148, out_$i149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p259, out_$i261, out_$i262, out_$p263, out_$p264, out_$i266, out_$i267, out_$p268, out_$p269, out_$i271, out_$i272, out_$p273, out_$i274, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$p283, out_$i285, out_$i286, out_$p287, out_$p288, out_$i290, out_$i291, out_$p292, out_$i293, out_$i295, out_$i296, out_$p297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i304, out_$i305, out_$p306, out_$p307, out_$i309, out_$i310, out_$p311, out_$i313, out_$i314, out_$p315, out_$p316, out_$i318, out_$i319, out_$p320, out_$i322, out_$i323, out_$p324, out_$i326, out_$i327, out_$p328, out_$i330, out_$i331, out_$p332, out_$i334, out_$i335, out_$p336, out_$i338, out_$i339, out_$p340, out_$i342, out_$i343, out_$p344, out_$p345, out_$i347, out_$i348, out_$p349, out_$i351, out_$i352, out_$p353, out_$p354, out_$i356, out_$i357, out_$p358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i365, out_$i366, out_$p367, out_$i368, out_vslice_dummy_var_251, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i4: i32, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i32, in_$i206: i32, in_$i207: i1, in_$i209: i32, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i1, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i1, in_$i238: i1, in_$i239: i1, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i1, in_$i245: i1, in_$i246: i1, in_$i247: i1, in_$i248: i1, in_$i249: i1, in_$i250: i1, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$i254: i1, in_$i255: i1, in_$i256: i1, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i261: i32, in_$i262: i1, in_$p263: ref, in_$p264: ref, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$p269: ref, in_$i271: i32, in_$i272: i1, in_$p273: ref, in_$i274: i64, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$p283: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$p288: ref, in_$i290: i32, in_$i291: i1, in_$p292: ref, in_$i293: i32, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$p302: ref, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$p307: ref, in_$i309: i32, in_$i310: i1, in_$p311: ref, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$p316: ref, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$i338: i32, in_$i339: i1, in_$p340: ref, in_$i342: i32, in_$i343: i1, in_$p344: ref, in_$p345: ref, in_$i347: i32, in_$i348: i1, in_$p349: ref, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$p354: ref, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$p359: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i368: i32, in_vslice_dummy_var_251: i32, in_vslice_dummy_var_252: i32, in_vslice_dummy_var_253: i32, in_vslice_dummy_var_254: i32, in_vslice_dummy_var_255: i32, in_vslice_dummy_var_256: i64, in_vslice_dummy_var_257: i64, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i32, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: i32, in_vslice_dummy_var_265: i32, in_vslice_dummy_var_266: i32, in_vslice_dummy_var_267: i32, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i32, in_vslice_dummy_var_273: i32, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i32, in_vslice_dummy_var_276: i32, in_vslice_dummy_var_277: i32, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: i32, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i32) returns (out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i32, out_$i206: i32, out_$i207: i1, out_$i209: i32, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i1, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i1, out_$i238: i1, out_$i239: i1, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i1, out_$i245: i1, out_$i246: i1, out_$i247: i1, out_$i248: i1, out_$i249: i1, out_$i250: i1, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$i254: i1, out_$i255: i1, out_$i256: i1, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i261: i32, out_$i262: i1, out_$p263: ref, out_$p264: ref, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$p269: ref, out_$i271: i32, out_$i272: i1, out_$p273: ref, out_$i274: i64, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$p283: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$p288: ref, out_$i290: i32, out_$i291: i1, out_$p292: ref, out_$i293: i32, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$p302: ref, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$p307: ref, out_$i309: i32, out_$i310: i1, out_$p311: ref, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$p316: ref, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$i338: i32, out_$i339: i1, out_$p340: ref, out_$i342: i32, out_$i343: i1, out_$p344: ref, out_$p345: ref, out_$i347: i32, out_$i348: i1, out_$p349: ref, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$p354: ref, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$p359: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i368: i32, out_vslice_dummy_var_251: i32, out_vslice_dummy_var_252: i32, out_vslice_dummy_var_253: i32, out_vslice_dummy_var_254: i32, out_vslice_dummy_var_255: i32, out_vslice_dummy_var_256: i64, out_vslice_dummy_var_257: i64, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i32, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: i32, out_vslice_dummy_var_265: i32, out_vslice_dummy_var_266: i32, out_vslice_dummy_var_267: i32, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i32, out_vslice_dummy_var_273: i32, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i32, out_vslice_dummy_var_276: i32, out_vslice_dummy_var_277: i32, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: i32, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i32);
  modifies $M.43, $M.49, $M.0, $CurrAddr, $M.52, $M.8, $M.9, $M.10, $M.11, $M.12, $M.19, $M.20, $M.17, $M.18, $M.44, $M.45, $M.53, $M.46, $M.54, $M.15, $M.14, $M.16, $M.21, $M.48, $M.38, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.51, $M.50, $M.56, $M.55, $M.28, $M.25, $M.24;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


